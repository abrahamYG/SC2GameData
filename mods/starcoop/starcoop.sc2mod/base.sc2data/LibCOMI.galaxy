include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/VoidLib"
include "LibCOOC_h"
include "LibCOUI_h"
include "LibCOMU_h"

include "LibCOMI_h"

//--------------------------------------------------------------------------------------------------
// Library: Mission (COOP)
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libCOMI_InitLibraries () {
    libNtve_InitVariables();
    libLbty_InitVariables();
    libCOOC_InitVariables();
    libCOUI_InitVariables();
    libCOMU_InitVariables();
}

// Variable Initialization
bool libCOMI_InitVariables_completed = false;

void libCOMI_InitVariables () {
    int init_i;
    int init_j;

    if (libCOMI_InitVariables_completed) {
        return;
    }

    libCOMI_InitVariables_completed = true;

    libCOMI_gv_cM_DebugAITargetSpawners = true;
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_ScreenMode[init_i] = c_uiModeConsole;
    }
    libCOMI_gv_cM_CoopAIPlayer_NextAttackWave = TimerCreate();
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_HighestPlayerIndex; init_i += 1) {
        libCOMI_gv_cM_CoopAIPlayer_Commander[init_i] = "None";
    }
    libCOMI_gv_cM_CoopAIPlayer_CommanderShared = "None";
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_HighestPlayerIndex; init_i += 1) {
        libCOMI_gv_cM_CoopAIPlayer_IsAlive[init_i] = true;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_HighestPlayerIndex; init_i += 1) {
        libCOMI_gv_cM_CoopAIPlayer_TargetOfAttackWaves[init_i] = AIWaveTargetPlayer(libCOOC_gf_HumanPlayers());
    }
    libCOMI_gv_cM_CoopAI_MissionType = "SiegeMission";
    libCOMI_gv_cM_CoopAI_AttackForce_Transports = UnitGroupEmpty();
    libCOMI_gv_cM_CoopAI_AIDetection_AttackWave = UnitGroupEmpty();
    libCOMI_gv_cM_CoopAI_Players = PlayerGroupEmpty();
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_HighestPlayerIndex; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CachedUpgradeData[init_i].lv_cachedDifficulty = 6;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_HighestPlayerIndex; init_i += 1) {
        libCOMI_gv_cM_CoopAIPlayer_AttackGroup[init_i] = UnitGroupEmpty();
    }
    libCOMI_gv_cM_CoopAI_WavePingShowAll = true;
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_HighestPlayerIndex; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cMC_CoopAI_MaxWaveCount; init_j += 1) {
            libCOMI_gv_cM_CoopAI_WaveShowPing[init_i][init_j] = true;
        }
    }
    libCOMI_gv_cM_CoopAI_DontPingUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CombinedPing[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CombinedPing_APlayer[init_i] = -1;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CombinedPing_AWave[init_i] = -1;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CombinedPing_BPlayer[init_i] = -1;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CombinedPing_BWave[init_i] = -1;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_PingGroups[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_PingGroupPing[init_i] = c_invalidPingId;
    }
    libCOMI_gv_cM_CoopAI_DontPingPlayers = PlayerGroupEmpty();
    libCOMI_gv_catalogAdditiveBonusPrefix = "CatalogAdditiveBonus";
    libCOMI_gv_candyChargeCmd = AbilityCommand("MutatorBuyCandy", 0);
    libCOMI_gv_supplicantWarpTrainActualUnitCost = UnitTypeGetCost("Supplicant", c_unitCostMinerals);
    libCOMI_gv_supplicantWarpTrainActualCommand = AbilityCommand("WarpGateTrainSupplicantTrue", 11);
    libCOMI_gv_cM_AlarakLightningStrikes_SacrificeCmd = AbilityCommand("AscendantSacrifice", 0);
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_Alarak_EmpowerSlaves[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_Alarak_EmpowerWorshipers[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_DehakaReviveEatTextTag[init_i] = c_textTagNone;
    }
    libCOMI_gv_c_DehakaConsumeLifeCooldownFactor = 0.1;
    libCOMI_gv_c_DehakaConsumeCooldownFilter = UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral), 0);
    libCOMI_gv_dataDehakaLearnAbilCmdLink = AbilityCommand("DehakaLearn", 255);
    libCOMI_gv_cM_DehakaEatReviveTimerAdjustment = -24.0;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            libCOMI_gv_cM_DehakaLeapDamageRadiusReference[init_i][init_j] = "Effect,DehakaStompDamageA,AreaArray[0].Radius";
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libCOMI_gv_cM_DehakaLeapSearchRadiusReference[init_i] = "Effect,DehakaStompSearchA,AreaArray[0].Radius";
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_dehakaMurvarPukeAutocast[init_i] = true;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_dehakaMurvarSpawnCreepersAutocast[init_i] = true;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_DehakaLevelsMax[init_i] = 10;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_DehakaVeterencyBehavior[init_i] = "DehakaVeterancyCoopLow";
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_Dehaka_CurrentLevel[init_i] = 1;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_Fenix_HeroGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_Fenix_DummyGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_Fenix_OfflineHealthRegen[init_i] = 2.0;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_Fenix_OfflineShieldRegen[init_i] = 2.0;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_Fenix_OfflineEnergyRegen[init_i] = 2.0833;
    }
    libCOMI_gv_cM_Fenix_RalliedGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCOMI_gv_cMC_Fenix_ChampionCount; init_i += 1) {
        for (init_j = 0; init_j <= libCOOC_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[init_i][init_j] = UnitGroupEmpty();
        }
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_Fenix_ChampionCount; init_i += 1) {
        for (init_j = 0; init_j <= libCOOC_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_cM_Fenix_ChampionDeathPosition[init_i][init_j] = RegionGetCenter(RegionEntireMap());
        }
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_Fenix_ChampionCount; init_i += 1) {
        libCOMI_gv_cM_Fenix_ChampionNetworkCountRequired[init_i] = 20;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_Fenix_ChampionCount; init_i += 1) {
        libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBuffStackMaxCount[init_i] = 20;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_fenixWhirlwindAutocast[init_i] = true;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_fenixShieldCapacitorAutocast[init_i] = true;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_Horner_BomberPlatforms[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_Horner_BomberPlatforms_Ready[init_i] = UnitGroupEmpty();
    }
    libCOMI_gv_kerriganPsiStrikeEnergyCost = libNtve_gf_CostOfAbility("PsiStrikeBlink", "Energy");
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_LaserDrillUnitGroup[init_i] = UnitGroupEmpty();
    }
    libCOMI_gv_cM_NovaUnitName_CountCurrentPosition = RandomInt(1, 143);
    libCOMI_gv_cM_NovaUnitName_CountStep = RandomInt(1, 7);
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_NovaGriffinTransportUnitGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupAir[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupGround[init_i] = UnitGroupEmpty();
    }
    libCOMI_gv_NovaPsiStrikeEnergyCost = libNtve_gf_CostOfAbility("NovaPsiStrike", "Energy");
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_Stukov_HordeGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_Stukov_HordeCurrentWave[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_Stukov_BunkerGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_TychusMedicTransportUnitGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_TychusMedicGroundUnitsTransportGroupAir[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_TychusMedicGroundUnitsTransportGroupGround[init_i] = UnitGroupEmpty();
    }
    libCOMI_gv_cM_Tychus_MaxHeroCount = 5;
    libCOMI_gv_tychusHeroMaxCharges = 4;
    libCOMI_gv_cM_Zeratul_DevolvedUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_Zeratul_HeroStructureUnitGroup[init_i] = UnitGroupEmpty();
    }
    libCOMI_gv_cM_ZeratulArtifact_1_Hint_1_Timing = (60.0 * 5.0);
    libCOMI_gv_cM_ZeratulArtifact_1_Hint_2_Timing = (60.0 * 6.0);
    libCOMI_gv_cM_ZeratulArtifact_1_Hint_3_Timing = (60.0 * 7.0);
    libCOMI_gv_cM_ZeratulArtifact_2_Hint_1_Timing = (60.0 * 10.0);
    libCOMI_gv_cM_ZeratulArtifact_2_Hint_2_Timing = (60.0 * 11.0);
    libCOMI_gv_cM_ZeratulArtifact_2_Hint_3_Timing = (60.0 * 12.0);
    libCOMI_gv_cM_ZeratulArtifact_3_Hint_1_Timing = (60.0 * 15.0);
    libCOMI_gv_cM_ZeratulArtifact_3_Hint_2_Timing = (60.0 * 16.0);
    libCOMI_gv_cM_ZeratulArtifact_3_Hint_3_Timing = (60.0 * 17.0);
    libCOMI_gv_cM_ZeratulProphecyArtifactNumber = 1;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libCOMI_gv_cM_ZeratulTopBarRallyUnits[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libCOMI_gv_cM_ZeratulTopBarRallyRedirectUnits[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_SoACasterGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_SoATargetingAlreadyCanceled[init_i] = true;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_SoATargetingDirectionGroup[init_i] = UnitGroupEmpty();
    }
    libCOMI_gv_cM_SoATimeFreezeTimer = TimerCreate();
    libCOMI_gv_cM_SoASuperChronoTimer = TimerCreate();
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_EndMissionResult[init_i] = c_gameOverDefeat;
    }
    libCOMI_gv_cM_MaxSpawn = 9;
    libCOMI_gv_cM_CreepGroup = UnitGroupEmpty();
    libCOMI_gv_cM_CreepTimer = TimerCreate();
    libCOMI_gv_cM_SpawnTime = 180;
    libCOMI_gv_cM_HeroUnitsOfAllCommanders = UnitGroupEmpty();
    libCOMI_gv_zS_ReviveCooldownTimeKerrigan = 60.0;
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_HeroDeathCount[init_i] = -1;
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_GlobalCasterUnitGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_GlobalCasterUnitGroupSecondary[init_i] = UnitGroupEmpty();
    }
    libCOMI_gv_cM_RevealersEnabled = true;
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_SharedVisionPlayers[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCOMI_gv_playerColor[init_i] = 15;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= libCOOC_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_cM_FenixVOTransmissionFirstPlay[init_i][init_j] = true;
        }
    }
    libCOMI_gv_cM_FenixVOTransmissionTimer = TimerCreate();
    libCOMI_gv_cM_DehakaVOLearnReminderTimer = TimerCreate();
    libCOMI_gv_cM_HornerVOBomberReminderTimer = TimerCreate();
    libCOMI_gv_cM_HornerVOBomberUseTimer = TimerCreate();
    libCOMI_gv_cM_TychusVOTransportReminderTimer = TimerCreate();
    libCOMI_gv_cM_TychusVOTransportFlairCooldownTimer = TimerCreate();
    libCOMI_gv_cM_TychusVOOutlawReviveReminderTimer = TimerCreate();
    libCOMI_gv_cM_TychusVOOutlawRecruitReminderTimer = TimerCreate();
    libCOMI_gv_cM_ArtifactTransmission_SelectAbilityReminder = TimerCreate();
    libCOMI_gv_cMC_ZeratulVOTransmissionProphacyCastDelay = 60.0;
    libCOMI_gv_cM_VOResourceReqSendButton = c_invalidDialogControlId;
    libCOMI_gv_cM_TransmissionPrimaryPlayers = PlayerGroupEmpty();
    libCOMI_gv_cM_TransmissionSecondaryPlayers = PlayerGroupEmpty();
    libCOMI_gv_cM_SendTransmissionCampaignPortrait = c_invalidPortraitId;
    libCOMI_gv_cM_SendTransmissionCampaignPlayingTick = 3;
    libCOMI_gv_cM_SendTransmissionCampaignChatBubbleOn = true;
    for (init_i = 0; init_i <= libCOOC_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_VisionShareUnits[init_i] = UnitGroupEmpty();
    }
    libCOMI_gv_cM_VisionShareEnabled = true;
    libCOMI_gv_cM_DropPod_TP_Units = UnitGroupEmpty();
    libCOMI_gv_cM_UpgradeTextTag = c_textTagNone;
    libCOMI_gv_cM_DrillTextTagInitial = c_textTagNone;
    libCOMI_gv_cM_DrillTextTagCreated = c_textTagNone;
    libCOMI_gv_cM_DrillTextTagDamaged = c_textTagNone;
    libCOMI_gv_cM_CybCoreTextTag = c_textTagNone;
    libCOMI_gv_cM_SolarForgeTextTag = c_textTagNone;
    libCOMI_gv_cM_FullScreenUpperContainer = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOMI_gv_cC_CoopPresetTeamsCount; init_i += 1) {
        libCOMI_gv_coopPresetTeams[init_i] = PlayerGroupEmpty();
    }
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: CM_AIIncludes
//--------------------------------------------------------------------------------------------------
include "TriggerLibs/AI"
include "TriggerLibs/BaseAI"
include "TriggerLibs/Computer"
include "TriggerLibs/CampaignAI"
include "TriggerLibs/SharedAI"

void libCOMI_InitCustomScript () {
}

// Presets
string libCOMI_ge_ObjectiveTimerThresholds_Ident (int lp_val) {
         if (lp_val == libCOMI_ge_ObjectiveTimerThresholds_Yellow) { return "Yellow"; }
    else if (lp_val == libCOMI_ge_ObjectiveTimerThresholds_Red) { return "Red"; }
    return null;
}

// Functions
int libCOMI_gf_PingTypeFromObjectiveType (bool lp_objectiveType) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_objectiveType == true)) {
        return libCOMI_ge_ObjectivePingType_Primary;
    }

    return libCOMI_ge_ObjectivePingType_Secondary;
}

trigger auto_libCOMI_gf_AttentionGrabbingObjectivePing_Trigger = null;
point auto_libCOMI_gf_AttentionGrabbingObjectivePing_lp_pingLocation;

void libCOMI_gf_AttentionGrabbingObjectivePing (point lp_pingLocation) {
    auto_libCOMI_gf_AttentionGrabbingObjectivePing_lp_pingLocation = lp_pingLocation;

    if (auto_libCOMI_gf_AttentionGrabbingObjectivePing_Trigger == null) {
        auto_libCOMI_gf_AttentionGrabbingObjectivePing_Trigger = TriggerCreate("auto_libCOMI_gf_AttentionGrabbingObjectivePing_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_AttentionGrabbingObjectivePing_Trigger, false, false);
}

bool auto_libCOMI_gf_AttentionGrabbingObjectivePing_TriggerFunc (bool testConds, bool runActions) {
    point lp_pingLocation = auto_libCOMI_gf_AttentionGrabbingObjectivePing_lp_pingLocation;

    // Variable Declarations
    int lv_scaleIter;
    fixed lv_pingScale;
    int lv_spiningShrinkingPing;

    // Automatic Variable Declarations
    const int autoE898793D_ae = 20;
    const int autoE898793D_ai = -1;

    // Variable Initialization
    lv_spiningShrinkingPing = c_invalidPingId;

    // Implementation
    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), lp_pingLocation, 270.0, "PingObjective", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    lv_spiningShrinkingPing = PingLastCreated();
    PingSetScale(lv_spiningShrinkingPing, 3.0);
    lv_scaleIter = 40;
    for ( ; ( (autoE898793D_ai >= 0 && lv_scaleIter <= autoE898793D_ae) || (autoE898793D_ai < 0 && lv_scaleIter >= autoE898793D_ae) ) ; lv_scaleIter += autoE898793D_ai ) {
        lv_pingScale = (lv_scaleIter * 0.1);
        PingSetScale(lv_spiningShrinkingPing, lv_pingScale);
        PingSetRotation(lv_spiningShrinkingPing, (360 - (ModF(lv_scaleIter, 10.0) * 36)));
        Wait(0.1, c_timeReal);
    }
    libCOMI_gf_DestroyPingCoop(lv_spiningShrinkingPing);
    return true;
}

void libCOMI_gf_CreateObjectivePing (bool lp_objectiveType, point lp_position, text lp_tooltip) {
    // Automatic Variable Declarations
    // Deprecated
    libCOMI_gf_CreateObjectivePingAC(libCOMI_gf_PingTypeFromObjectiveType(lp_objectiveType), lp_position, lp_tooltip);
}

void libCOMI_gf_CreateObjectivePingAC (int lp_objectiveType, point lp_position, text lp_tooltip) {
    // Variable Declarations
    color lv_color;
    fixed lv_scale;
    string lv_model;
    fixed lv_angle;

    // Automatic Variable Declarations
    int auto7500AD90_val;

    // Variable Initialization
    lv_color = Color(0,0,0);

    // Implementation
    auto7500AD90_val = lp_objectiveType;
    if (auto7500AD90_val == libCOMI_ge_ObjectivePingType_Primary) {
        lv_color = Color(0.00, 100.00, 0.00);
        lv_scale = 1.0;
        lv_model = "PingObjective";
        lv_angle = 270.0;
    }
    else if (auto7500AD90_val == libCOMI_ge_ObjectivePingType_Secondary) {
        lv_color = Color(100.00, 100.00, 0.00);
        lv_scale = 0.4;
        lv_model = "PingTriangle";
        lv_angle = 90.0;
    }
    else if (auto7500AD90_val == libCOMI_ge_ObjectivePingType_POI) {
        lv_color = Color(0.00, 100.00, 0.00);
        lv_scale = 0.4;
        lv_model = "PingSimple";
        lv_angle = 90.0;
    }
    else {
    }
    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), lp_position, lv_angle, lv_model, lv_color, 0.0);
    PingSetScale(PingLastCreated(), lv_scale);
    PingSetTooltip(PingLastCreated(), lp_tooltip);
    TriggerExecute(libCOMI_gt_VoidPingSound, true, false);
}

trigger auto_libCOMI_gf_PingMinimapCampaign_Trigger = null;
playergroup auto_libCOMI_gf_PingMinimapCampaign_lp_players;
point auto_libCOMI_gf_PingMinimapCampaign_lp_pos;
fixed auto_libCOMI_gf_PingMinimapCampaign_lp_dur;
color auto_libCOMI_gf_PingMinimapCampaign_lp_color;

void libCOMI_gf_PingMinimapCampaign (playergroup lp_players, point lp_pos, fixed lp_dur, color lp_color) {
    auto_libCOMI_gf_PingMinimapCampaign_lp_players = lp_players;
    auto_libCOMI_gf_PingMinimapCampaign_lp_pos = lp_pos;
    auto_libCOMI_gf_PingMinimapCampaign_lp_dur = lp_dur;
    auto_libCOMI_gf_PingMinimapCampaign_lp_color = lp_color;

    if (auto_libCOMI_gf_PingMinimapCampaign_Trigger == null) {
        auto_libCOMI_gf_PingMinimapCampaign_Trigger = TriggerCreate("auto_libCOMI_gf_PingMinimapCampaign_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_PingMinimapCampaign_Trigger, false, false);
}

bool auto_libCOMI_gf_PingMinimapCampaign_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_players = auto_libCOMI_gf_PingMinimapCampaign_lp_players;
    point lp_pos = auto_libCOMI_gf_PingMinimapCampaign_lp_pos;
    fixed lp_dur = auto_libCOMI_gf_PingMinimapCampaign_lp_dur;
    color lp_color = auto_libCOMI_gf_PingMinimapCampaign_lp_color;

    // Automatic Variable Declarations
    playergroup autoC51461E9_g;
    int autoC51461E9_var;
    string autoC47256CC_val;

    // Implementation
    libCOMI_gf_CreatePingFacingAngleCoop(lp_players, lp_pos, 270.0, "PingAlert", lp_color, lp_dur);
    autoC51461E9_g = lp_players;
    autoC51461E9_var = -1;
    while (true) {
        autoC51461E9_var = PlayerGroupNextPlayer(autoC51461E9_g, autoC51461E9_var);
        if (autoC51461E9_var < 0) { break; }
        autoC47256CC_val = PlayerRace(autoC51461E9_var);
        if (autoC47256CC_val == "Prot") {
            SoundPlay(SoundLink("UI_TerranPing", -1), lp_players, 100.0, 0.0);
        }
        else if (autoC47256CC_val == "Terr") {
            SoundPlay(SoundLink("UI_TerranPing", -1), lp_players, 100.0, 0.0);
        }
        else if (autoC47256CC_val == "Zerg") {
            SoundPlay(SoundLink("UI_ZergWarningPing", -1), lp_players, 100.0, 0.0);
        }
        else {
        }
    }
    Wait(lp_dur, c_timeGame);
    libCOMI_gf_DestroyPingCoop(PingLastCreated());
    return true;
}

void libCOMI_gf_DestroyPingCoop (int lp_ping) {
    // Automatic Variable Declarations
    // Implementation
    PingDestroy(lp_ping);
}

void libCOMI_gf_CreatePingFacingAngleCoop (playergroup lp_players, point lp_position, fixed lp_angle, string lp_model, color lp_color, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreatePingFacingAngle(lp_players, lp_model, lp_position, lp_color, lp_duration, lp_angle);
    if (((libCOMU_gf_MutatorIsEnabled("BlackFog") == true) || (libCOMU_gf_MutatorIsEnabled("UberDarkness") == true))) {
        PingSetUsePlayerVision(PingLastCreated(), true);
    }

}

void libCOMI_gf_CreatePingWithPointFacingCoop (playergroup lp_players, string lp_model, point lp_position, color lp_color, fixed lp_duration, int lp_playerId) {
    // Automatic Variable Declarations
    // Implementation
    PingCreateWithPlayerId(lp_players, lp_model, lp_position, lp_color, lp_duration, lp_playerId);
    if (((libCOMU_gf_MutatorIsEnabled("BlackFog") == true) || (libCOMU_gf_MutatorIsEnabled("UberDarkness") == true))) {
        PingSetUsePlayerVision(PingLastCreated(), true);
    }

}

void libCOMI_gf_CreatePingCoop (playergroup lp_players, string lp_model, point lp_position, color lp_color, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CreatePingWithPointFacingCoop(lp_players, lp_model, lp_position, lp_color, lp_duration, 0);
}

void libCOMI_gf_ShowHidePingCoop (int lp_ping, bool lp_visible) {
    // Automatic Variable Declarations
    // Implementation
    PingSetVisible(lp_ping, lp_visible);
}

void libCOMI_gf_CM_MissionAutoSave (text lp_description) {
    // Variable Declarations
    text lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = StringToText("");

    // Implementation
    libCOMI_gv_cM_MissionAutoSaveIndex += 1;
    TextExpressionSetToken("Param/Expression/lib_COMI_87B2D44D", "A", libCOOC_gf_CC_CampaignMapName(libCOOC_gf_CC_CurrentMap(), 1));
    lv_name = TextExpressionAssemble("Param/Expression/lib_COMI_87B2D44D");
    GameSaveCreate(lv_name, lp_description, "", true);
    Wait(1.0, c_timeGame);
    libCOMI_gv_cM_MissionAutoSaveDone = true;
}

void libCOMI_gf_CreateMissionAutosavePoint (text lp_description) {
    // Variable Declarations
    text lv_name;
    int lv_autosaveDialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = StringToText("");
    lv_autosaveDialog = c_invalidDialogId;

    // Implementation
    if ((libCOOC_gf_CC_CurrentMap() == null)) {
        return ;
    }

    libCOMI_gv_cM_MissionAutoSaveDone = false;
    libCOMI_gf_CM_MissionAutoSave(lp_description);
}

bool libCOMI_gf_PlayerInCinematicModeCampaign () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto26F8757F_g;

    // Variable Initialization

    // Implementation
    auto26F8757F_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto26F8757F_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) == c_playerTypeUser) && (libNtve_gf_PlayerInCinematicMode(lv_indexPlayer) == false)) {
            return false;
        }

    }
    return true;
}

string libCOMI_gf_CM_SoundDataTableName () {
    // Automatic Variable Declarations
    // Implementation
    return (libCOMI_gv_pMC_SoundDataTableIdentifier + IntToString(libCOMI_gv_cM_SoundDataTableIndex));
}

void libCOMI_gf_PlaySoundCinematic (soundlink lp_soundLink, playergroup lp_players, fixed lp_volume, fixed lp_offset) {
    // Variable Declarations
    bool lv_playerInCinematic;
    int lv_playerIndex;

    // Automatic Variable Declarations
    playergroup autoEDCAAF8F_g;

    // Variable Initialization

    // Implementation
    autoEDCAAF8F_g = lp_players;
    lv_playerIndex = -1;
    while (true) {
        lv_playerIndex = PlayerGroupNextPlayer(autoEDCAAF8F_g, lv_playerIndex);
        if (lv_playerIndex < 0) { break; }
        if ((libNtve_gf_PlayerInCinematicMode(lv_playerIndex) == true)) {
            lv_playerInCinematic = true;
            break;
        }

    }
    if ((lv_playerInCinematic == false)) {
        return ;
    }

    SoundPlay(lp_soundLink, lp_players, lp_volume, lp_offset);
    libCOMI_gv_cM_SoundDataTableIndex += 1;
    DataTableSetSound(true, libCOMI_gf_CM_SoundDataTableName(), SoundLastPlayed());
}

void libCOMI_gf_StopCinematicSounds () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((libCOMI_gv_cM_SoundDataTableIndex > 0)) {
        SoundStop(DataTableGetSound(true, libCOMI_gf_CM_SoundDataTableName()), true);
        libCOMI_gv_cM_SoundDataTableIndex -= 1;
    }
}

void libCOMI_gf_SetScreenModeCoop (int lp_mode, fixed lp_duration, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cM_ScreenMode[lp_player] == c_uiModeConsole) && (lp_mode != c_uiModeConsole)) {
        libCOUI_gf_CU_GPVisibilityAutoUpdate(false, lp_player, lp_duration);
    }
    else if ((libCOMI_gv_cM_ScreenMode[lp_player] != c_uiModeConsole) && (lp_mode == c_uiModeConsole)) {
        libCOUI_gf_CU_GPVisibilityAutoUpdate(true, lp_player, lp_duration);
    }
    UISetMode(PlayerGroupSingle(lp_player), lp_mode, lp_duration);
    libCOMI_gv_cM_ScreenMode[lp_player] = lp_mode;
}

void libCOMI_gf_CinematicModeCampaign (bool lp_onOff, fixed lp_duration, bool lp_waitOptions) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true)) {
        libCOMI_gv_cM_InCinematic = true;
    }
    else {
        libCOMI_gv_cM_InCinematic = false;
    }
    if ((lp_waitOptions == false)) {
        libCOMI_gf_CM_CinematicModeNoWait(lp_onOff, lp_duration);
    }
    else {
        libCOMI_gf_CM_CinematicModeInternal(lp_onOff, lp_duration);
    }
}

trigger auto_libCOMI_gf_CM_CinematicModeNoWait_Trigger = null;
bool auto_libCOMI_gf_CM_CinematicModeNoWait_lp_onOff;
fixed auto_libCOMI_gf_CM_CinematicModeNoWait_lp_duration;

void libCOMI_gf_CM_CinematicModeNoWait (bool lp_onOff, fixed lp_duration) {
    auto_libCOMI_gf_CM_CinematicModeNoWait_lp_onOff = lp_onOff;
    auto_libCOMI_gf_CM_CinematicModeNoWait_lp_duration = lp_duration;

    if (auto_libCOMI_gf_CM_CinematicModeNoWait_Trigger == null) {
        auto_libCOMI_gf_CM_CinematicModeNoWait_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CinematicModeNoWait_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CinematicModeNoWait_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CinematicModeNoWait_TriggerFunc (bool testConds, bool runActions) {
    bool lp_onOff = auto_libCOMI_gf_CM_CinematicModeNoWait_lp_onOff;
    fixed lp_duration = auto_libCOMI_gf_CM_CinematicModeNoWait_lp_duration;

    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CM_CinematicModeInternal(lp_onOff, lp_duration);
    return true;
}

void libCOMI_gf_CM_CinematicModeInternal (bool lp_onOff, fixed lp_duration) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto7BC2F114_g;
    playergroup autoA04AE8FB_g;
    playergroup auto311CBA6C_g;

    // Variable Initialization
    lv_indexPlayer = 1;

    // Implementation
    if ((lp_onOff == true)) {
        auto7BC2F114_g = libCOOC_gf_CommanderPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto7BC2F114_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCOUI_gf_CU_GPVisibilityAutoUpdate(false, lv_indexPlayer, lp_duration);
        }
        UISetMode(PlayerGroupAll(), c_uiModeFullscreen, lp_duration);
        if ((lp_duration > 0.0) && (lp_duration != c_transitionDurationImmediate)) {
            Wait(lp_duration, c_timeReal);
        }

        libCOMI_gf_CM_CinematicModeActivate();
        libNtve_gf_GlobalCinematicSetting(true);
        auto311CBA6C_g = libCOOC_gf_CommanderPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto311CBA6C_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            PlayerScoreValueEnableAll(lv_indexPlayer, true);
        }
    }
    else {
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lp_duration);
        libNtve_gf_GlobalCinematicSetting(false);
        autoA04AE8FB_g = libCOOC_gf_CommanderPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoA04AE8FB_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCOUI_gf_CU_GPVisibilityAutoUpdate(true, lv_indexPlayer, lp_duration);
        }
        if ((lp_duration > 0.0) && (lp_duration != c_transitionDurationImmediate)) {
            Wait(lp_duration, c_timeReal);
        }

    }
}

void libCOMI_gf_CM_CinematicModeActivate () {
    // Variable Declarations
    playergroup lv_validPlayers;
    int lv_pickedPlayer;

    // Automatic Variable Declarations
    playergroup autoB3D6D2ED_g;
    playergroup auto375744B4_g;
    playergroup auto162A8743_g;
    playergroup auto54EA3DBC_g;

    // Variable Initialization
    lv_validPlayers = PlayerGroupEmpty();

    // Implementation
    lv_validPlayers = PlayerGroupAll();
    autoB3D6D2ED_g = lv_validPlayers;
    lv_pickedPlayer = -1;
    while (true) {
        lv_pickedPlayer = PlayerGroupNextPlayer(autoB3D6D2ED_g, lv_pickedPlayer);
        if (lv_pickedPlayer < 0) { break; }
        if ((libNtve_gf_PlayerInCinematicMode(lv_pickedPlayer) == true)) {
            PlayerGroupRemove(lv_validPlayers, lv_pickedPlayer);
        }

    }
    if ((PlayerGroupCount(lv_validPlayers) == 0)) {
        return ;
    }

    UISetHotkeyAllowed(lv_validPlayers, c_hotkeyCameraFollow, false);
    libNtve_gf__CineModeTurnOnOffForPlayerGroup(lv_validPlayers, true);
    libNtve_gf__CineModeHideUI(lv_validPlayers);
    CinematicMode(lv_validPlayers, true, 0.0);
    UISetCursorVisible(lv_validPlayers, false);
    libNtve_gf_ShowHidePlacementModels(false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Cinematic, lv_validPlayers, MaxF(0.0, 1.5));
    auto375744B4_g = lv_validPlayers;
    lv_pickedPlayer = -1;
    while (true) {
        lv_pickedPlayer = PlayerGroupNextPlayer(auto375744B4_g, lv_pickedPlayer);
        if (lv_pickedPlayer < 0) { break; }
        UISetMode(PlayerGroupSingle(lv_pickedPlayer), c_uiModeLetterboxed, 0.0);
    }
    auto162A8743_g = lv_validPlayers;
    lv_pickedPlayer = -1;
    while (true) {
        lv_pickedPlayer = PlayerGroupNextPlayer(auto162A8743_g, lv_pickedPlayer);
        if (lv_pickedPlayer < 0) { break; }
        PlayerPauseAllCharges(lv_pickedPlayer, true);
        PlayerPauseAllCooldowns(lv_pickedPlayer, true);
    }
    auto54EA3DBC_g = lv_validPlayers;
    lv_pickedPlayer = -1;
    while (true) {
        lv_pickedPlayer = PlayerGroupNextPlayer(auto54EA3DBC_g, lv_pickedPlayer);
        if (lv_pickedPlayer < 0) { break; }
        PlayerScoreValueEnableAll(lv_pickedPlayer, false);
    }
    UIFlyerHelperOverride(lv_validPlayers, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
    TriggerSendEvent("CinematicModeOn");
}

bool libCOMI_gf_AISuspectDetectionDanger (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return AIDefaultSuspectDetectionDanger(lp_player);
}

void libCOMI_gf_CM_CoopAIPersonalitySet (string lp_personality) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto3EEF2065_g;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_CoopAIPlayer_CommanderShared = lp_personality;
    auto3EEF2065_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto3EEF2065_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOOC_gf_CC_ScoreValueSet(lv_indexPlayer, "EnemyPersonality", libCOMI_gf_CM_CoopAIPersonalityUniqueIndex(lp_personality));
    }
}

string libCOMI_gf_CM_CoopAIPersonality () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cM_CoopAIPlayer_CommanderShared;
}

timer libCOMI_gf_CM_CoopAI_Get_NextAttackWaveTimer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cM_CoopAIPlayer_NextAttackWave;
}

void libCOMI_gf_CM_CoopAI_Set_EnemyPlayer (int lp_aIPlayer, int lp_targetPlayer) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_CoopAIPlayer_Enemy[lp_aIPlayer] = lp_targetPlayer;
}

int libCOMI_gf_CM_CoopAI_Get_EnemyPlayer (int lp_aIPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cM_CoopAIPlayer_Enemy[lp_aIPlayer];
}

int libCOMI_gf_CM_CoopAI_WaveProp_Get_Retreat (int lp_player, wave lp_wave) {
    // Variable Declarations
    int lv_waveIter;

    // Automatic Variable Declarations
    int auto9BA0C33D_ae;
    const int auto9BA0C33D_ai = 1;

    // Variable Initialization

    // Implementation
    auto9BA0C33D_ae = libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark;
    lv_waveIter = 0;
    for ( ; ( (auto9BA0C33D_ai >= 0 && lv_waveIter <= auto9BA0C33D_ae) || (auto9BA0C33D_ai < 0 && lv_waveIter >= auto9BA0C33D_ae) ) ; lv_waveIter += auto9BA0C33D_ai ) {
        if ((libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lp_player][lv_waveIter] == lp_wave)) {
            return libCOMI_gv_cM_CoopAIPlayer_WaveProps_Retreat[lp_player][lv_waveIter];
        }

    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_0F200D4F"), true);
    return 0;
}

void libCOMI_gf_CM_CoopAI_Set_TargetOfAttackWaves (int lp_aIPlayer, wavetarget lp_waveTarget) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_CoopAIPlayer_TargetOfAttackWaves[lp_aIPlayer] = lp_waveTarget;
}

wavetarget libCOMI_gf_CM_CoopAI_Get_TargetOfAttackWaves (int lp_aIPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cM_CoopAIPlayer_TargetOfAttackWaves[lp_aIPlayer];
}

bool libCOMI_gf_CM_CoopAI_IsSpikeWave (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cM_CoopAIPlayer_WaveProps_Count[lp_player] > 2) && (libCOMI_gv_cM_CoopAIPlayer_WaveResourceDeficit[lp_player] <= 0.0)) {
        return true;
    }
    else {
        return false;
    }
}

int libCOMI_gf_CM_CoopAIPersonalityUniqueIndex (string lp_personality) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("CoopAICommanders", lp_personality, "UniqueIndex", 1);
}

void libCOMI_gf_SetCoopAIWaveTarget (int lp_aI, wavetarget lp_waveTarget) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CM_CoopAI_Set_TargetOfAttackWaves(lp_aI, lp_waveTarget);
}

void libCOMI_gf_AddAttackWaveUnitType (int lp_count, string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    AIAttackWaveAddUnits(-1, lp_count, lp_unitType);
}

bool libCOMI_gf_CM_CoopAI_AttackWaveContainsPingworthyUnits (unitgroup lp_attackWave) {
    // Variable Declarations
    unit lv_unitGroupIter;

    // Automatic Variable Declarations
    unitgroup autoF655485E_g;
    int autoF655485E_u;

    // Variable Initialization

    // Implementation
    autoF655485E_g = lp_attackWave;
    autoF655485E_u = UnitGroupCount(autoF655485E_g, c_unitCountAll);
    for (;; autoF655485E_u -= 1) {
        lv_unitGroupIter = UnitGroupUnitFromEnd(autoF655485E_g, autoF655485E_u);
        if (lv_unitGroupIter == null) { break; }
        if (((UnitGetType(lv_unitGroupIter) == "Medivac") || (UnitGetType(lv_unitGroupIter) == "Raven") || (UnitGetType(lv_unitGroupIter) == "ScienceVessel") || (UnitGetType(lv_unitGroupIter) == "Observer") || (UnitGetType(lv_unitGroupIter) == "WarpPrismPhasing") || (UnitGetType(lv_unitGroupIter) == "WarpPrism") || (UnitGetType(lv_unitGroupIter) == "Overlord") || (UnitGetType(lv_unitGroupIter) == "Overseer") || (UnitGetType(lv_unitGroupIter) == "Changeling") || (UnitGetType(lv_unitGroupIter) == "ChangelingZealot") || (UnitGetType(lv_unitGroupIter) == "ChangelingMarineShield") || (UnitGetType(lv_unitGroupIter) == "ChangelingMarine") || (UnitGetType(lv_unitGroupIter) == "ChangelingZergling") || (UnitGetType(lv_unitGroupIter) == "ChangelingZerglingWings"))) {
            continue;
        }
        else {
            return true;
        }
    }
    return false;
}

void libCOMI_gf_StartCoopAI (int lp_player, int lp_aIPlayerEnemy) {
    // Variable Declarations
    string lv_aIPlayerRace;
    unitgroup lv_playerPreplacedUnits;
    unit lv_indexUnit;
    string lv_unitRace;

    // Automatic Variable Declarations
    unitgroup auto29712051_g;
    int auto29712051_u;
    string autoD30B3B6A_val;
    string auto0732882D_val;
    int auto09D1216F_val;
    int auto45D97997_val;
    int auto4590F938_val;

    // Variable Initialization
    lv_playerPreplacedUnits = UnitGroupEmpty();

    // Implementation
    if ((PlayerType(lp_aIPlayerEnemy) == c_playerTypeNone)) {
        libCOMI_gf_CM_CoopAI_Set_EnemyPlayer(lp_player, PlayerGroupPlayer(libCOOC_gf_HumanPlayers(), 1));
    }
    else {
        libCOMI_gf_CM_CoopAI_Set_EnemyPlayer(lp_player, lp_aIPlayerEnemy);
    }
    lv_playerPreplacedUnits = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto29712051_g = lv_playerPreplacedUnits;
    auto29712051_u = UnitGroupCount(auto29712051_g, c_unitCountAll);
    for (;; auto29712051_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto29712051_g, auto29712051_u);
        if (lv_indexUnit == null) { break; }
        lv_unitRace = libCOMI_gf_GetUnitRace(lv_indexUnit);
        if (((libCOMU_gf_CT_UnitSpawnedByMutator(lv_indexUnit) == true) || ((lv_unitRace != "Prot") && (lv_unitRace != "Terr") && (lv_unitRace != "Zerg")))) {
            UnitGroupRemove(lv_playerPreplacedUnits, lv_indexUnit);
        }

    }
    if ((UnitGroupCount(lv_playerPreplacedUnits, c_unitCountAlive) >= 1)) {
        lv_aIPlayerRace = libCOMI_gf_GetUnitRace(UnitGroupClosestToPoint(lv_playerPreplacedUnits, PlayerStartLocation(lp_player)));
    }
    else {
        lv_aIPlayerRace = (CatalogFieldValueGet(c_gameCatalogUnit, UserDataGetUnit("CoopAICommanderTiers", UserDataGetUserInstance("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_CommanderShared, "UnitTiers", 1), "PhaseUnits", 1), "Race", lp_player));
    }
    PlayerSetRace(lp_player, lv_aIPlayerRace);
    AICampaignStart(lp_player);
    VisRevealArea(lp_player, RegionEntireMap(), 0.1, false);
    libCOMI_gf_SetCoopAIWaveTarget(lp_player, AIWaveTargetPlayer(PlayerGroupSingle(libCOMI_gf_CM_CoopAI_Get_EnemyPlayer(lp_player))));
    PlayerGroupAdd(libCOMI_gv_cM_CoopAI_Players, lp_player);
    libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player] = PlayerStartLocation(lp_player);
    TriggerEnable(libCOMI_gt_CM_CoopAI_AIManager, true);
    TriggerEnable(libCOMI_gt_CM_CoopAI_AIDetectionManager, true);
    autoD30B3B6A_val = lv_aIPlayerRace;
    if (autoD30B3B6A_val == "Prot") {
        InitProtCounters(lp_player);
    }
    else if (autoD30B3B6A_val == "Terr") {
        InitTerrCounters(lp_player);
        AISetNukeConstants(lp_player);
        AIReqAddSpecialMaker(c_TU_Nuke, c_TB_GhostAcademy, "ArmSiloWithNuke", 0);
    }
    else if (autoD30B3B6A_val == "Zerg") {
        InitZergCounters(lp_player);
        AILimitStockLarva(lp_player, c_ZU_Larva);
        AIReqCountAsBuiltObject(lp_player, c_ZU_Larva);
        AISetCreepBuilding(lp_player, c_ZB_CreepTumor, "ZergBuildingNotOnCreep");
        AISetDefaultArmyUnit(lp_player, c_ZU_Zergling);
        AISetDefaultTownHall(lp_player, c_ZB_Hatchery);
        AIReqAddSpecialMaker( c_ZB_CreepTumorBurrowed, c_ZB_CreepTumor, "BurrowCreepTumorDown", 0);
        AIReqAddSpecialMaker( c_ZB_CreepTumorBurrowed, c_ZU_Queen, c_AB_QueenBuild, 0);
    }
    else {
    }
    AIAddAirDangerCampaignUnits(lp_player);
    if ((libCOMI_gv_cM_CoopAIPlayer_CommanderShared == "None")) {
        auto0732882D_val = lv_aIPlayerRace;
        if (auto0732882D_val == "Prot") {
            auto09D1216F_val = RandomInt(0, 5);
            if (auto09D1216F_val == 0) {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "ProtossBuildTechy";
            }
            else if (auto09D1216F_val == 1) {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "ProtossBuildSkytossTempest";
            }
            else if (auto09D1216F_val == 2) {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "ProtossBuildSkytossCarrier";
            }
            else if (auto09D1216F_val == 3) {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "ProtossBuildRoboReaver";
            }
            else if (auto09D1216F_val == 4) {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "ProtossBuildRoboColossus";
            }
            else {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "ProtossBuildGateway";
            }
        }
        else if (auto0732882D_val == "Terr") {
            auto45D97997_val = RandomInt(0, 3);
            if (auto45D97997_val == 0) {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "TerranBuildBioMechStar";
            }
            else if (auto45D97997_val == 1) {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "TerranBuildMechStarport";
            }
            else if (auto45D97997_val == 2) {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "TerranBuildShadowTech";
            }
            else {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "TerranBuildSkyTerran";
            }
        }
        else if (auto0732882D_val == "Zerg") {
            auto4590F938_val = RandomInt(0, 2);
            if (auto4590F938_val == 0) {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "ZergBuildSwarmy";
            }
            else if (auto4590F938_val == 1) {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "ZergBuildMutaLing";
            }
            else {
                libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = "ZergBuildGround";
            }
        }
        else {
        }
        libCOMI_gf_CM_CoopAIPersonalitySet(libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player]);
    }
    else {
        libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = libCOMI_gf_CM_CoopAIPersonality();
    }
    libCOMI_gf_CM_CoopAI_SetupStartingTech(lp_player);
}

void libCOMI_gf_StartCoopAIwithSpecificPersonality (int lp_player, int lp_aIEnemy, string lp_personalityUserData) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CM_CoopAIPersonalitySet(lp_personalityUserData);
    libCOMI_gf_StartCoopAI(lp_player, lp_aIEnemy);
}

void libCOMI_gf_CM_StartCoopMissionMechanic (int lp_player, string lp_aICommander) {
    // Variable Declarations
    string lv_aIPlayerRace;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = lp_aICommander;
    lv_aIPlayerRace = (CatalogFieldValueGet(c_gameCatalogUnit, UserDataGetUnit("CoopAICommanderTiers", UserDataGetUserInstance("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player], "UnitTiers", 1), "PhaseUnits", 1), "Race", lp_player));
    PlayerSetRace(lp_player, lv_aIPlayerRace);
    PlayerSetDifficulty(lp_player, libCOMI_gf_GetMissionDifficulty());
    PlayerGroupAdd(libCOMI_gv_cM_CoopAI_Players, lp_player);
    libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player] = PlayerStartLocation(lp_player);
    TriggerEnable(libCOMI_gt_CM_CoopAI_AIManager, true);
    TriggerEnable(libCOMI_gt_CM_CoopAI_AIDetectionManager, true);
    AIAddDetectionDangerCampaignUnits(lp_player);
    AIAddAirDangerCampaignUnits(lp_player);
    libCOMI_gf_CM_CoopAI_SetupStartingTech(lp_player);
}

void libCOMI_gf_StartCoopMissionMechanicAI (int lp_player, string lp_aICommander) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CM_StartCoopMissionMechanic(lp_player, lp_aICommander);
}

void libCOMI_gf_SetCoopAIEnemy (int lp_coopAIPlayer, int lp_humanTargetPlayer) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CM_CoopAI_Set_EnemyPlayer(lp_coopAIPlayer, lp_humanTargetPlayer);
}

void libCOMI_gf_SetCoopAIGatherPoint (int lp_player, point lp_gatherPoint) {
    // Automatic Variable Declarations
    // Implementation
    AIAttackWaveSetGatherPoint(lp_player, lp_gatherPoint);
}

fixed libCOMI_gf_CM_CoopAI_GetResourceAmount (int lp_resourceSize, int lp_difficulty) {
    // Variable Declarations
    string lv_waveInstance;
    fixed lv_resourcesFromUserData;

    // Automatic Variable Declarations
    int autoE7DE9BF5_val;

    // Variable Initialization

    // Implementation
    autoE7DE9BF5_val = lp_resourceSize;
    if (autoE7DE9BF5_val == libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest) {
        lv_waveInstance = "SiegeMissionWave01";
    }
    else if (autoE7DE9BF5_val == libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller) {
        lv_waveInstance = "SiegeMissionWave02";
    }
    else if (autoE7DE9BF5_val == libCOMI_ge_CoopAIAttackWaveBuckets__3Small) {
        lv_waveInstance = "SiegeMissionWave03";
    }
    else if (autoE7DE9BF5_val == libCOMI_ge_CoopAIAttackWaveBuckets__4Medium) {
        lv_waveInstance = "SiegeMissionWave04";
    }
    else if (autoE7DE9BF5_val == libCOMI_ge_CoopAIAttackWaveBuckets__5Large) {
        lv_waveInstance = "SiegeMissionWave05";
    }
    else if (autoE7DE9BF5_val == libCOMI_ge_CoopAIAttackWaveBuckets__6Larger) {
        lv_waveInstance = "SiegeMissionWave06";
    }
    else {
        lv_waveInstance = "SiegeMissionWave07";
    }
    lv_resourcesFromUserData = UserDataGetFixed("CoopAIAttackWaves", lv_waveInstance, "resourceSize", libCOOC_gf_CC_DifficultyIndex(lp_difficulty));
    return lv_resourcesFromUserData;
}

string libCOMI_gf_CM_CoopAI_GetTechLevel (int lp_player, int lp_techLevel) {
    // Variable Declarations
    string lv_commanderUnitTier;
    int lv_tierIndex;

    // Automatic Variable Declarations
    int auto8DE95FA5_val;
    int auto4F71B072_ae;
    const int auto4F71B072_ai = -1;

    // Variable Initialization

    // Implementation
    auto8DE95FA5_val = lp_techLevel;
    if (auto8DE95FA5_val == libCOMI_ge_CoopAITechLevelBuckets__1Early) {
        lv_tierIndex = 1;
    }
    else if (auto8DE95FA5_val == libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid) {
        lv_tierIndex = 2;
    }
    else if (auto8DE95FA5_val == libCOMI_ge_CoopAITechLevelBuckets__3Mid) {
        lv_tierIndex = 3;
    }
    else if (auto8DE95FA5_val == libCOMI_ge_CoopAITechLevelBuckets__4LateMid) {
        lv_tierIndex = 4;
    }
    else if (auto8DE95FA5_val == libCOMI_ge_CoopAITechLevelBuckets__5Late) {
        lv_tierIndex = 5;
    }
    else if (auto8DE95FA5_val == libCOMI_ge_CoopAITechLevelBuckets_TechLevel06) {
        lv_tierIndex = 6;
    }
    else {
        lv_tierIndex = 7;
    }
    lv_commanderUnitTier = UserDataGetUserInstance("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player], "UnitTiers", lv_tierIndex);
    if ((lv_commanderUnitTier == null)) {
        auto4F71B072_ae = libCOMI_ge_CoopAITechLevelBuckets__1Early;
        lv_tierIndex = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
        for ( ; ( (auto4F71B072_ai >= 0 && lv_tierIndex <= auto4F71B072_ae) || (auto4F71B072_ai < 0 && lv_tierIndex >= auto4F71B072_ae) ) ; lv_tierIndex += auto4F71B072_ai ) {
            lv_commanderUnitTier = UserDataGetUserInstance("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player], "UnitTiers", (lv_tierIndex + 1));
            if ((lv_commanderUnitTier != null)) {
                break;
            }

        }
    }

    return lv_commanderUnitTier;
}

void libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel (int lp_player, bool lp_instantAttackGroup, int lp_resourceSize, int lp_techLevel) {
    // Variable Declarations
    string lv_waveInstance;
    fixed lv_resourcesFromUserData;
    int lv_difficulty;
    string lv_commanderUnitTier;
    int lv_tierIndex;
    unit lv_setUnitEnergy;

    // Automatic Variable Declarations
    unitgroup auto3FD1E1FF_g;
    int auto3FD1E1FF_u;

    // Variable Initialization
    lv_difficulty = 2;

    // Implementation
    lv_difficulty = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    lv_resourcesFromUserData = libCOMI_gf_CM_CoopAI_GetResourceAmount(lp_resourceSize, lv_difficulty);
    lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_player, lp_techLevel);
    libCOMI_gf_CM_CoopAI_CreateAttackWave2(lp_player, lp_instantAttackGroup, lv_resourcesFromUserData, lv_commanderUnitTier);
    if ((lp_instantAttackGroup == true)) {
        libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player] = libCOMI_gf_CreateDropAttack(lp_player, libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player], libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player]);
        auto3FD1E1FF_g = libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player];
        auto3FD1E1FF_u = UnitGroupCount(auto3FD1E1FF_g, c_unitCountAll);
        for (;; auto3FD1E1FF_u -= 1) {
            lv_setUnitEnergy = UnitGroupUnitFromEnd(auto3FD1E1FF_g, auto3FD1E1FF_u);
            if (lv_setUnitEnergy == null) { break; }
            UnitSetPropertyFixed(lv_setUnitEnergy, c_unitPropEnergyPercent, 100.0);
        }
        AIAttackWaveUseGroup(lp_player, libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player]);
        libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player] = UnitGroupEmpty();
    }

}

unitgroup libCOMI_gf_CreateCoopAIAttackGroup2 (int lp_player, int lp_resourceSize, int lp_techLevel) {
    // Variable Declarations
    string lv_waveInstance;
    fixed lv_resourcesFromUserData;
    int lv_difficulty;
    string lv_commanderUnitTier;
    int lv_tierIndex;
    unitgroup lv_attackGroup;
    unitgroup lv_returnUnitGroup;
    unit lv_returnGroupIter;

    // Automatic Variable Declarations
    unitgroup autoECDA3CCB_g;
    int autoECDA3CCB_u;

    // Variable Initialization
    lv_difficulty = 2;
    lv_attackGroup = UnitGroupEmpty();
    lv_returnUnitGroup = UnitGroupEmpty();

    // Implementation
    lv_difficulty = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    lv_resourcesFromUserData = libCOMI_gf_CM_CoopAI_GetResourceAmount(lp_resourceSize, lv_difficulty);
    lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_player, lp_techLevel);
    libCOMI_gf_CM_CoopAI_CreateAttackWave2(lp_player, true, lv_resourcesFromUserData, lv_commanderUnitTier);
    lv_attackGroup = libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player];
    libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player] = UnitGroupEmpty();
    UnitGroupAddUnitGroup(lv_returnUnitGroup, libCOMI_gf_CreateDropAttack(lp_player, lv_attackGroup, libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player]));
    autoECDA3CCB_g = lv_returnUnitGroup;
    autoECDA3CCB_u = UnitGroupCount(autoECDA3CCB_g, c_unitCountAll);
    for (;; autoECDA3CCB_u -= 1) {
        lv_returnGroupIter = UnitGroupUnitFromEnd(autoECDA3CCB_g, autoECDA3CCB_u);
        if (lv_returnGroupIter == null) { break; }
        UnitSetPropertyFixed(lv_returnGroupIter, c_unitPropEnergyPercent, 100.0);
    }
    return lv_returnUnitGroup;
}

trigger auto_libCOMI_gf_CreateCommanderDropAttack_Trigger = null;
int auto_libCOMI_gf_CreateCommanderDropAttack_lp_player;
int auto_libCOMI_gf_CreateCommanderDropAttack_lp_resourceSize;
int auto_libCOMI_gf_CreateCommanderDropAttack_lp_techLevel;
point auto_libCOMI_gf_CreateCommanderDropAttack_lp_dropPoint;
point auto_libCOMI_gf_CreateCommanderDropAttack_lp_attackPoint;

void libCOMI_gf_CreateCommanderDropAttack (int lp_player, int lp_resourceSize, int lp_techLevel, point lp_dropPoint, point lp_attackPoint) {
    auto_libCOMI_gf_CreateCommanderDropAttack_lp_player = lp_player;
    auto_libCOMI_gf_CreateCommanderDropAttack_lp_resourceSize = lp_resourceSize;
    auto_libCOMI_gf_CreateCommanderDropAttack_lp_techLevel = lp_techLevel;
    auto_libCOMI_gf_CreateCommanderDropAttack_lp_dropPoint = lp_dropPoint;
    auto_libCOMI_gf_CreateCommanderDropAttack_lp_attackPoint = lp_attackPoint;

    if (auto_libCOMI_gf_CreateCommanderDropAttack_Trigger == null) {
        auto_libCOMI_gf_CreateCommanderDropAttack_Trigger = TriggerCreate("auto_libCOMI_gf_CreateCommanderDropAttack_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CreateCommanderDropAttack_Trigger, false, false);
}

bool auto_libCOMI_gf_CreateCommanderDropAttack_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CreateCommanderDropAttack_lp_player;
    int lp_resourceSize = auto_libCOMI_gf_CreateCommanderDropAttack_lp_resourceSize;
    int lp_techLevel = auto_libCOMI_gf_CreateCommanderDropAttack_lp_techLevel;
    point lp_dropPoint = auto_libCOMI_gf_CreateCommanderDropAttack_lp_dropPoint;
    point lp_attackPoint = auto_libCOMI_gf_CreateCommanderDropAttack_lp_attackPoint;

    // Variable Declarations
    unitgroup lv_attackGroup;
    int lv_dropPodRacePreset;
    unit lv_dropGroupUnitIter;
    int lv_dropGroupIter;
    unitgroup lv_dropGroup;
    unit lv_pylon;
    revealer lv_pylonRevealer;
    unit lv_superWarpGate;
    const fixed lv_c_PowerSourceRadius = 6.5;
    unitgroup lv_airGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();
    lv_dropGroup = UnitGroupEmpty();
    lv_airGroup = UnitGroupEmpty();

    // Implementation
    lv_attackGroup = libCOMI_gf_CreateCommanderAttackGroupatPoint(lp_player, lp_resourceSize, lp_techLevel, lp_dropPoint);
    if ((UnitGroupCount(lv_attackGroup, c_unitCountAlive) == 0)) {
        return true;
    }

    lv_attackGroup = libCOMI_gf_CreateDropAttack(lp_player, lv_attackGroup, lp_dropPoint);
    Wait(1.0, c_timeAI);
    AIAttackWaveSetTargetPoint(lp_player, lp_attackPoint);
    AIAttackWaveSetGatherPoint(lp_player, lp_dropPoint);
    AIAttackWaveUseGroup(lp_player, lv_attackGroup);
    AIAttackWaveSend(lp_player, 0, false);
    return true;
}

unitgroup libCOMI_gf_CreateCommanderAttackGroupatPoint (int lp_player, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation) {
    // Variable Declarations
    string lv_waveInstance;
    fixed lv_resourcesFromUserData;
    int lv_difficulty;
    string lv_commanderUnitTier;
    int lv_tierIndex;
    unitgroup lv_attackGroup;
    unitgroup lv_returnUnitGroup;
    unit lv_returnGroupIter;

    // Automatic Variable Declarations
    unitgroup auto10AFDE47_g;
    int auto10AFDE47_u;

    // Variable Initialization
    lv_difficulty = 2;
    lv_attackGroup = UnitGroupEmpty();
    lv_returnUnitGroup = UnitGroupEmpty();

    // Implementation
    lv_difficulty = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    lv_resourcesFromUserData = libCOMI_gf_CM_CoopAI_GetResourceAmount(lp_resourceSize, lv_difficulty);
    lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_player, lp_techLevel);
    libCOMI_gf_CM_CoopAI_CreateAttackWave2(lp_player, true, lv_resourcesFromUserData, lv_commanderUnitTier);
    lv_attackGroup = libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player];
    libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player] = UnitGroupEmpty();
    UnitGroupAddUnitGroup(lv_returnUnitGroup, libCOMI_gf_CreateDropAttack(lp_player, lv_attackGroup, lp_spawnLocation));
    auto10AFDE47_g = lv_returnUnitGroup;
    auto10AFDE47_u = UnitGroupCount(auto10AFDE47_g, c_unitCountAll);
    for (;; auto10AFDE47_u -= 1) {
        lv_returnGroupIter = UnitGroupUnitFromEnd(auto10AFDE47_g, auto10AFDE47_u);
        if (lv_returnGroupIter == null) { break; }
        UnitSetPropertyFixed(lv_returnGroupIter, c_unitPropEnergyPercent, 100.0);
    }
    return lv_returnUnitGroup;
}

unitgroup libCOMI_gf_CreateDropAttack (int lp_player, unitgroup lp_attackGroup, point lp_dropLocation) {
    // Variable Declarations
    unitgroup lv_attackGroupLocal;
    int lv_dropPodRacePreset;
    unit lv_dropGroupUnitIter;
    int lv_dropGroupIter;
    unitgroup lv_dropGroup;
    unit lv_pylon;
    revealer lv_pylonRevealer;
    unit lv_superWarpGate;
    const fixed lv_c_PowerSourceRadius = 6.5;
    unitgroup lv_airGroup;
    unitgroup lv_attackUnitsZerg;
    unitgroup lv_attackUnitsProtoss;
    unitgroup lv_attackUnitsTerran;
    unit lv_attackUnit;
    unitgroup lv_returnGroup;
    int lv_dropGroupSize;

    // Automatic Variable Declarations
    unitgroup autoC8986529_g;
    int autoC8986529_u;
    string auto1FD48043_val;

    // Variable Initialization
    lv_attackGroupLocal = UnitGroupEmpty();
    lv_dropGroup = UnitGroupEmpty();
    lv_airGroup = UnitGroupEmpty();
    lv_attackUnitsZerg = UnitGroupEmpty();
    lv_attackUnitsProtoss = UnitGroupEmpty();
    lv_attackUnitsTerran = UnitGroupEmpty();
    lv_returnGroup = UnitGroupEmpty();

    // Implementation
    lv_dropGroupSize = UnitGroupCount(lp_attackGroup, c_unitCountAlive);
    autoC8986529_g = lp_attackGroup;
    autoC8986529_u = UnitGroupCount(autoC8986529_g, c_unitCountAll);
    for (;; autoC8986529_u -= 1) {
        lv_attackUnit = UnitGroupUnitFromEnd(autoC8986529_g, autoC8986529_u);
        if (lv_attackUnit == null) { break; }
        auto1FD48043_val = libCOMI_gf_GetUnitRace(lv_attackUnit);
        if (auto1FD48043_val == "Terr") {
            UnitGroupAdd(lv_attackUnitsTerran, lv_attackUnit);
        }
        else if (auto1FD48043_val == "Zerg") {
            UnitGroupAdd(lv_attackUnitsZerg, lv_attackUnit);
        }
        else if (auto1FD48043_val == "Prot") {
            UnitGroupAdd(lv_attackUnitsProtoss, lv_attackUnit);
        }
        else {
        }
    }
    if ((UnitGroupCount(lv_attackUnitsTerran, c_unitCountAlive) > 0)) {
        lv_attackUnitsTerran = libCOMI_gf_CM_CoopAI_CreateDropAttack_Terran(lp_player, lv_attackUnitsTerran, lp_dropLocation);
    }

    if ((UnitGroupCount(lv_attackUnitsProtoss, c_unitCountAlive) > 0)) {
        lv_attackUnitsProtoss = libCOMI_gf_CM_CoopAI_CreateDropAttack_Protoss(lp_player, lv_attackUnitsProtoss, lp_dropLocation);
    }

    if ((UnitGroupCount(lv_attackUnitsZerg, c_unitCountAlive) > 0)) {
        lv_attackUnitsZerg = libCOMI_gf_CM_CoopAI_CreateDropAttack_Zerg(lp_player, lv_attackUnitsZerg, lp_dropLocation);
    }

    UnitGroupAddUnitGroup(lv_returnGroup, lv_attackUnitsProtoss);
    UnitGroupAddUnitGroup(lv_returnGroup, lv_attackUnitsTerran);
    UnitGroupAddUnitGroup(lv_returnGroup, lv_attackUnitsZerg);
    if ((lv_dropGroupSize != UnitGroupCount(lv_returnGroup, c_unitCountAlive))) {
    }

    return lv_returnGroup;
}

unitgroup libCOMI_gf_CM_CoopAI_CreateDropAttack_Terran (int lp_player, unitgroup lp_attackGroup, point lp_dropLocation) {
    // Variable Declarations
    unit lv_dropGroupUnitIter;
    int lv_dropGroupIter;
    unitgroup lv_dropGroup;
    unitgroup lv_airGroup;

    // Automatic Variable Declarations
    unitgroup auto4359500B_g;
    int auto4359500B_u;
    unitgroup auto5C85C125_g;
    int auto5C85C125_u;
    int auto5BC7054E_ae;
    const int auto5BC7054E_ai = 1;
    fixed auto9E33C5DC_at;

    // Variable Initialization
    lv_dropGroup = UnitGroupEmpty();
    lv_airGroup = UnitGroupEmpty();

    // Implementation
    auto4359500B_g = lp_attackGroup;
    auto4359500B_u = UnitGroupCount(auto4359500B_g, c_unitCountAll);
    for (;; auto4359500B_u -= 1) {
        lv_dropGroupUnitIter = UnitGroupUnitFromEnd(auto4359500B_g, auto4359500B_u);
        if (lv_dropGroupUnitIter == null) { break; }
        if ((UnitFilterMatch(lv_dropGroupUnitIter, 1, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
            UnitGroupRemove(lp_attackGroup, lv_dropGroupUnitIter);
            UnitGroupAdd(lv_airGroup, lv_dropGroupUnitIter);
        }

    }
    auto5C85C125_g = lv_airGroup;
    auto5C85C125_u = UnitGroupCount(auto5C85C125_g, c_unitCountAll);
    for (;; auto5C85C125_u -= 1) {
        lv_dropGroupUnitIter = UnitGroupUnitFromEnd(auto5C85C125_g, auto5C85C125_u);
        if (lv_dropGroupUnitIter == null) { break; }
        UnitSetPosition(lv_dropGroupUnitIter, lp_dropLocation, false);
        UnitSetHeight(lv_dropGroupUnitIter, 16.0, 0.0);
        UnitSetHeight(lv_dropGroupUnitIter, UnitTypeGetProperty(UnitGetType(lv_dropGroupUnitIter), c_unitPropHeight), 3.0);
    }
    auto5BC7054E_ae = UnitGroupCount(lp_attackGroup, c_unitCountAlive);
    lv_dropGroupIter = 1;
    for ( ; ( (auto5BC7054E_ai >= 0 && lv_dropGroupIter <= auto5BC7054E_ae) || (auto5BC7054E_ai < 0 && lv_dropGroupIter >= auto5BC7054E_ae) ) ; lv_dropGroupIter += auto5BC7054E_ai ) {
        lv_dropGroupUnitIter = UnitGroupUnit(lp_attackGroup, lv_dropGroupIter);
        UnitGroupAdd(lv_dropGroup, lv_dropGroupUnitIter);
        if (((UnitGroupCount(lv_dropGroup, c_unitCountAlive) >= 4) || (lv_dropGroupIter >= UnitGroupCount(lp_attackGroup, c_unitCountAlive)))) {
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropLocation, 0.0, 5.0), lv_dropGroup, false, lp_player);
            lv_dropGroup = UnitGroupEmpty();
        }

    }
    UnitGroupAddUnitGroup(lp_attackGroup, lv_airGroup);
    auto9E33C5DC_at = 0;
    while (!((UnitGroupCount(UnitGroupFilter(null, c_playerAny, lp_attackGroup, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0)) && auto9E33C5DC_at <= 10.0) {
        Wait(0.2, c_timeAI);
        auto9E33C5DC_at = auto9E33C5DC_at + 0.2;
    }
    return lp_attackGroup;
}

unitgroup libCOMI_gf_CM_CoopAI_CreateDropAttack_Zerg (int lp_player, unitgroup lp_attackGroup, point lp_dropLocation) {
    // Variable Declarations
    unit lv_indexAirUnit;
    unit lv_indexGroundUnit;
    actor lv_nydus;
    bool lv_playBirthAnim;
    unitgroup lv_groundUnits;
    unitgroup lv_airUnits;
    unitgroup lv_dropGroup;
    fixed lv_dropSupply;

    // Automatic Variable Declarations
    unitgroup auto833705E2_g;
    int auto833705E2_u;
    unitgroup auto060D894F_g;
    int auto060D894F_u;
    fixed autoFFDE2D15_at;

    // Variable Initialization
    lv_groundUnits = UnitGroupEmpty();
    lv_airUnits = UnitGroupEmpty();
    lv_dropGroup = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_airUnits, UnitGroupFilter(null, c_playerAny, lp_attackGroup, UnitFilter((1 << c_targetFilterAir), 0, 0, 0), 0));
    auto833705E2_g = lv_airUnits;
    auto833705E2_u = UnitGroupCount(auto833705E2_g, c_unitCountAll);
    for (;; auto833705E2_u -= 1) {
        lv_indexAirUnit = UnitGroupUnitFromEnd(auto833705E2_g, auto833705E2_u);
        if (lv_indexAirUnit == null) { break; }
        UnitSetPosition(lv_indexAirUnit, lp_dropLocation, false);
        UnitSetHeight(lv_indexAirUnit, 16.0, 0.0);
        UnitSetHeight(lv_indexAirUnit, UnitTypeGetProperty(UnitGetType(lv_indexAirUnit), c_unitPropHeight), 3.0);
    }
    UnitGroupAddUnitGroup(lv_groundUnits, UnitGroupFilter(null, c_playerAny, lp_attackGroup, UnitFilter(0, 0, (1 << c_targetFilterAir), 0), 0));
    auto060D894F_g = lv_groundUnits;
    auto060D894F_u = UnitGroupCount(auto060D894F_g, c_unitCountAll);
    for (;; auto060D894F_u -= 1) {
        lv_indexGroundUnit = UnitGroupUnitFromEnd(auto060D894F_g, auto060D894F_u);
        if (lv_indexGroundUnit == null) { break; }
        UnitGroupAdd(lv_dropGroup, lv_indexGroundUnit);
        lv_dropSupply += MaxF(0.5, UnitTypeGetProperty(UnitGetType(lv_indexGroundUnit), c_unitPropSuppliesUsed));
        if (((lv_dropSupply >= 8.0) || (UnitGroupCount(lv_dropGroup, c_unitCountAlive) >= 10))) {
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Zerg, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropLocation, 0.0, 5.0), lv_dropGroup, false, lp_player);
            lv_dropGroup = UnitGroupEmpty();
            lv_dropSupply = 0.0;
        }

    }
    if ((UnitGroupCount(lv_dropGroup, c_unitCountAlive) > 0)) {
        libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Zerg, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropLocation, 0.0, 5.0), lv_dropGroup, false, lp_player);
    }

    autoFFDE2D15_at = 0;
    while (!((UnitGroupCount(UnitGroupFilter(null, c_playerAny, lp_attackGroup, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0)) && autoFFDE2D15_at <= 10.0) {
        Wait(0.2, c_timeAI);
        autoFFDE2D15_at = autoFFDE2D15_at + 0.2;
    }
    return lp_attackGroup;
}

unitgroup libCOMI_gf_CM_CoopAI_CreateDropAttack_Protoss (int lp_player, unitgroup lp_dropGroup, point lp_dropLocation) {
    // Variable Declarations
    unit lv_warpInIter;
    point lv_origin;

    // Automatic Variable Declarations
    unitgroup autoAA4C4434_g;
    int autoAA4C4434_u;

    // Variable Initialization

    // Implementation
    lv_origin = UnitGroupCenterOfGroup(lp_dropGroup);
    autoAA4C4434_g = lp_dropGroup;
    autoAA4C4434_u = UnitGroupCount(autoAA4C4434_g, c_unitCountAll);
    for (;; autoAA4C4434_u -= 1) {
        lv_warpInIter = UnitGroupUnitFromEnd(autoAA4C4434_g, autoAA4C4434_u);
        if (lv_warpInIter == null) { break; }
        libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2(lv_warpInIter);
        UnitSetPosition(lv_warpInIter, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropLocation, DistanceBetweenPoints(lv_origin, UnitGetPosition(lv_warpInIter)), DistanceBetweenPoints(lv_origin, UnitGetPosition(lv_warpInIter))), false);
    }
    Wait(2.0, c_timeAI);
    return lp_dropGroup;
}

trigger auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_Trigger = null;
unit auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_lp_unit;

void libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2 (unit lp_unit) {
    auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_lp_unit = lp_unit;

    if (auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    UnitAbilityEnable(lp_unit, "attack", false);
    UnitAbilityEnable(lp_unit, "move", false);
    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), libNtve_gf_SetOpacity(0.0, 0));
    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), libNtve_gf_SetOpacity(1.0, 2.0));
    UnitBehaviorAdd(lp_unit, "ProtossGenericWarpInOut", lp_unit, 1);
    Wait(2.0, c_timeAI);
    UnitBehaviorRemove(lp_unit, "ProtossGenericWarpInOut", 1);
    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), libNtve_gf_SetOpacity(1.0, 0.0));
    UnitAbilityEnable(lp_unit, "attack", true);
    UnitAbilityEnable(lp_unit, "move", true);
    return true;
}

trigger auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_Trigger = null;
unit auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_lp_pylon;
unit auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_lp_superWarpGate;

void libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup (unit lp_pylon, unit lp_superWarpGate) {
    auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_lp_pylon = lp_pylon;
    auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_lp_superWarpGate = lp_superWarpGate;

    if (auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pylon = auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_lp_pylon;
    unit lp_superWarpGate = auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_lp_superWarpGate;

    // Automatic Variable Declarations
    // Implementation
    Wait(15.0, c_timeAI);
    UnitRemove(lp_pylon);
    UnitRemove(lp_superWarpGate);
    return true;
}

void libCOMI_gf_DropPodWarpInUnitGroup (unitgroup lp_dropPodUnits, point lp_dropLocation) {
    // Variable Declarations
    unitgroup lv_dropGroupZerg;
    unitgroup lv_dropGroupProtoss;
    unitgroup lv_dropGroupTerran;
    unit lv_dropUnit;
    playergroup lv_attackingPlayers;
    int lv_attackPlayerIter;
    bool lv_dropComplete;

    // Automatic Variable Declarations
    unitgroup auto55FF56CC_g;
    int auto55FF56CC_u;
    string autoD14807CD_val;
    playergroup autoC08EEF33_g;
    playergroup auto18A3184F_g;
    unitgroup autoC809B237_g;
    int autoC809B237_u;

    // Variable Initialization
    lv_dropGroupZerg = UnitGroupEmpty();
    lv_dropGroupProtoss = UnitGroupEmpty();
    lv_dropGroupTerran = UnitGroupEmpty();
    lv_attackingPlayers = PlayerGroupEmpty();

    // Implementation
    auto55FF56CC_g = lp_dropPodUnits;
    auto55FF56CC_u = UnitGroupCount(auto55FF56CC_g, c_unitCountAll);
    for (;; auto55FF56CC_u -= 1) {
        lv_dropUnit = UnitGroupUnitFromEnd(auto55FF56CC_g, auto55FF56CC_u);
        if (lv_dropUnit == null) { break; }
        PlayerGroupAdd(lv_attackingPlayers, UnitGetOwner(lv_dropUnit));
        autoD14807CD_val = libCOMI_gf_GetUnitRace(lv_dropUnit);
        if (autoD14807CD_val == "Terr") {
            UnitGroupAdd(lv_dropGroupTerran, lv_dropUnit);
        }
        else if (autoD14807CD_val == "Zerg") {
            UnitGroupAdd(lv_dropGroupZerg, lv_dropUnit);
        }
        else if (autoD14807CD_val == "Prot") {
            UnitGroupAdd(lv_dropGroupProtoss, lv_dropUnit);
        }
        else {
        }
    }
    if ((UnitGroupCount(lv_dropGroupTerran, c_unitCountAlive) > 0)) {
        autoC08EEF33_g = lv_attackingPlayers;
        lv_attackPlayerIter = -1;
        while (true) {
            lv_attackPlayerIter = PlayerGroupNextPlayer(autoC08EEF33_g, lv_attackPlayerIter);
            if (lv_attackPlayerIter < 0) { break; }
            libCOMI_gf_CM_CoopAI_AttackForce_DropTerran(lv_attackPlayerIter, UnitGroupFilterPlayer(lv_dropGroupTerran, lv_attackPlayerIter, 0), lp_dropLocation);
        }
    }

    if ((UnitGroupCount(lv_dropGroupProtoss, c_unitCountAlive) > 0)) {
        libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss(lv_dropGroupProtoss, lp_dropLocation);
    }

    if ((UnitGroupCount(lv_dropGroupZerg, c_unitCountAlive) > 0)) {
        auto18A3184F_g = lv_attackingPlayers;
        lv_attackPlayerIter = -1;
        while (true) {
            lv_attackPlayerIter = PlayerGroupNextPlayer(auto18A3184F_g, lv_attackPlayerIter);
            if (lv_attackPlayerIter < 0) { break; }
            libCOMI_gf_CM_CoopAI_AttackForce_DropZerg(lv_attackPlayerIter, UnitGroupFilterPlayer(lv_dropGroupZerg, lv_attackPlayerIter, 0), lp_dropLocation);
        }
    }

    while (true) {
        lv_dropComplete = true;
        autoC809B237_g = lp_dropPodUnits;
        autoC809B237_u = UnitGroupCount(autoC809B237_g, c_unitCountAll);
        for (;; autoC809B237_u -= 1) {
            lv_dropUnit = UnitGroupUnitFromEnd(autoC809B237_g, autoC809B237_u);
            if (lv_dropUnit == null) { break; }
            if ((((UnitGroupHasUnit(lv_dropGroupProtoss, lv_dropUnit) == true) && (UnitAbilityCheck(lv_dropUnit, "move", true) == false)) || (((UnitGroupHasUnit(lv_dropGroupTerran, lv_dropUnit) == true) || (UnitGroupHasUnit(lv_dropGroupZerg, lv_dropUnit) == true)) && (libNtve_gf_UnitIsPaused(lv_dropUnit) == true)))) {
                lv_dropComplete = false;
                break;
            }

        }
        if ((lv_dropComplete == true)) {
            return ;
        }

        Wait(0.25, c_timeGame);
    }
}

trigger auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_Trigger = null;
int auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_player;
unitgroup auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_dropGroup;
point auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_dropLocation;

void libCOMI_gf_CM_CoopAI_AttackForce_DropTerran (int lp_player, unitgroup lp_dropGroup, point lp_dropLocation) {
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_player = lp_player;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_dropGroup = lp_dropGroup;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_dropLocation = lp_dropLocation;

    if (auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_player;
    unitgroup lp_dropGroup = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_dropGroup;
    point lp_dropLocation = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_dropLocation;

    // Variable Declarations
    unit lv_dropUnit;
    int lv_dropGroupIter;
    unitgroup lv_dropPodGroup;
    unitgroup lv_airGroup;

    // Automatic Variable Declarations
    unitgroup autoB1B09026_g;
    int autoB1B09026_u;
    unitgroup autoB34456F6_g;
    int autoB34456F6_u;
    int autoF00F7A8C_ae;
    const int autoF00F7A8C_ai = 1;
    unitgroup auto507559CB_g;
    int auto507559CB_u;

    // Variable Initialization
    lv_dropPodGroup = UnitGroupEmpty();
    lv_airGroup = UnitGroupEmpty();

    // Implementation
    autoB1B09026_g = lp_dropGroup;
    autoB1B09026_u = UnitGroupCount(autoB1B09026_g, c_unitCountAll);
    for (;; autoB1B09026_u -= 1) {
        lv_dropUnit = UnitGroupUnitFromEnd(autoB1B09026_g, autoB1B09026_u);
        if (lv_dropUnit == null) { break; }
        if ((UnitFilterMatch(lv_dropUnit, 1, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
            UnitGroupRemove(lp_dropGroup, lv_dropUnit);
            UnitGroupAdd(lv_airGroup, lv_dropUnit);
        }

    }
    autoB34456F6_g = lv_airGroup;
    autoB34456F6_u = UnitGroupCount(autoB34456F6_g, c_unitCountAll);
    for (;; autoB34456F6_u -= 1) {
        lv_dropUnit = UnitGroupUnitFromEnd(autoB34456F6_g, autoB34456F6_u);
        if (lv_dropUnit == null) { break; }
        UnitSetPosition(lv_dropUnit, RegionRandomPoint(RegionCircle(lp_dropLocation, 6.0)), false);
        UnitSetHeight(lv_dropUnit, 16.0, 0.0);
        UnitSetHeight(lv_dropUnit, UnitTypeGetProperty(UnitGetType(lv_dropUnit), c_unitPropHeight), 3.0);
        UnitAbilityEnable(lv_dropUnit, "move", false);
    }
    autoF00F7A8C_ae = UnitGroupCount(lp_dropGroup, c_unitCountAlive);
    lv_dropGroupIter = 1;
    for ( ; ( (autoF00F7A8C_ai >= 0 && lv_dropGroupIter <= autoF00F7A8C_ae) || (autoF00F7A8C_ai < 0 && lv_dropGroupIter >= autoF00F7A8C_ae) ) ; lv_dropGroupIter += autoF00F7A8C_ai ) {
        lv_dropUnit = UnitGroupUnit(lp_dropGroup, lv_dropGroupIter);
        UnitGroupAdd(lv_dropPodGroup, lv_dropUnit);
        if (((UnitGroupCount(lv_dropPodGroup, c_unitCountAlive) >= 4) || (lv_dropGroupIter >= UnitGroupCount(lp_dropGroup, c_unitCountAlive)))) {
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropLocation, 0.0, 5.0), lv_dropPodGroup, false, lp_player);
            lv_dropPodGroup = UnitGroupEmpty();
        }

    }
    Wait(3.0, c_timeGame);
    auto507559CB_g = lv_airGroup;
    auto507559CB_u = UnitGroupCount(auto507559CB_g, c_unitCountAll);
    for (;; auto507559CB_u -= 1) {
        lv_dropUnit = UnitGroupUnitFromEnd(auto507559CB_g, auto507559CB_u);
        if (lv_dropUnit == null) { break; }
        UnitAbilityEnable(lv_dropUnit, "move", true);
    }
    return true;
}

trigger auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_Trigger = null;
int auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_player;
unitgroup auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_dropGroup;
point auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_dropLocation;

void libCOMI_gf_CM_CoopAI_AttackForce_DropZerg (int lp_player, unitgroup lp_dropGroup, point lp_dropLocation) {
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_player = lp_player;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_dropGroup = lp_dropGroup;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_dropLocation = lp_dropLocation;

    if (auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_player;
    unitgroup lp_dropGroup = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_dropGroup;
    point lp_dropLocation = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_dropLocation;

    // Variable Declarations
    unit lv_airUnitIter;
    unit lv_dropUnit;
    unitgroup lv_groundUnits;
    unitgroup lv_airGroup;
    unitgroup lv_dropPodGroup;
    fixed lv_dropPodSupply;

    // Automatic Variable Declarations
    unitgroup auto95A2E9D9_g;
    int auto95A2E9D9_u;
    unitgroup auto2020D8C7_g;
    int auto2020D8C7_u;
    unitgroup autoB4130F5B_g;
    int autoB4130F5B_u;

    // Variable Initialization
    lv_groundUnits = UnitGroupEmpty();
    lv_airGroup = UnitGroupEmpty();
    lv_dropPodGroup = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_airGroup, UnitGroupFilter(null, c_playerAny, lp_dropGroup, UnitFilter((1 << c_targetFilterAir), 0, 0, 0), 0));
    auto95A2E9D9_g = lv_airGroup;
    auto95A2E9D9_u = UnitGroupCount(auto95A2E9D9_g, c_unitCountAll);
    for (;; auto95A2E9D9_u -= 1) {
        lv_airUnitIter = UnitGroupUnitFromEnd(auto95A2E9D9_g, auto95A2E9D9_u);
        if (lv_airUnitIter == null) { break; }
        UnitSetPosition(lv_airUnitIter, RegionRandomPoint(RegionCircle(lp_dropLocation, 6.0)), false);
        UnitSetHeight(lv_airUnitIter, 16.0, 0.0);
        UnitSetHeight(lv_airUnitIter, UnitTypeGetProperty(UnitGetType(lv_airUnitIter), c_unitPropHeight), 3.0);
        UnitAbilityEnable(lv_airUnitIter, "move", false);
    }
    UnitGroupAddUnitGroup(lv_groundUnits, UnitGroupFilter(null, c_playerAny, lp_dropGroup, UnitFilter(0, 0, (1 << c_targetFilterAir), 0), 0));
    auto2020D8C7_g = lv_groundUnits;
    auto2020D8C7_u = UnitGroupCount(auto2020D8C7_g, c_unitCountAll);
    for (;; auto2020D8C7_u -= 1) {
        lv_dropUnit = UnitGroupUnitFromEnd(auto2020D8C7_g, auto2020D8C7_u);
        if (lv_dropUnit == null) { break; }
        UnitGroupAdd(lv_dropPodGroup, lv_dropUnit);
        lv_dropPodSupply += MaxF(0.5, UnitTypeGetProperty(UnitGetType(lv_dropUnit), c_unitPropSuppliesUsed));
        if (((lv_dropPodSupply >= 8.0) || (UnitGroupCount(lv_dropPodGroup, c_unitCountAlive) >= 10))) {
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Zerg, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropLocation, 0.0, 5.0), lv_dropPodGroup, false, lp_player);
            lv_dropPodGroup = UnitGroupEmpty();
            lv_dropPodSupply = 0.0;
        }

    }
    if ((UnitGroupCount(lv_dropPodGroup, c_unitCountAlive) > 0)) {
        libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Zerg, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropLocation, 0.0, 5.0), lv_dropPodGroup, false, lp_player);
    }

    Wait(3.0, c_timeGame);
    autoB4130F5B_g = lv_airGroup;
    autoB4130F5B_u = UnitGroupCount(autoB4130F5B_g, c_unitCountAll);
    for (;; autoB4130F5B_u -= 1) {
        lv_dropUnit = UnitGroupUnitFromEnd(autoB4130F5B_g, autoB4130F5B_u);
        if (lv_dropUnit == null) { break; }
        UnitAbilityEnable(lv_dropUnit, "move", true);
    }
    return true;
}

trigger auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_Trigger = null;
unitgroup auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_lp_dropGroup;
point auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_lp_dropLocation;

void libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss (unitgroup lp_dropGroup, point lp_dropLocation) {
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_lp_dropGroup = lp_dropGroup;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_lp_dropLocation = lp_dropLocation;

    if (auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_dropGroup = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_lp_dropGroup;
    point lp_dropLocation = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_lp_dropLocation;

    // Variable Declarations
    unit lv_dropUnit;
    point lv_origin;

    // Automatic Variable Declarations
    unitgroup auto38195713_g;
    int auto38195713_u;

    // Variable Initialization

    // Implementation
    lv_origin = UnitGroupCenterOfGroup(lp_dropGroup);
    auto38195713_g = lp_dropGroup;
    auto38195713_u = UnitGroupCount(auto38195713_g, c_unitCountAll);
    for (;; auto38195713_u -= 1) {
        lv_dropUnit = UnitGroupUnitFromEnd(auto38195713_g, auto38195713_u);
        if (lv_dropUnit == null) { break; }
        libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2(lv_dropUnit);
        UnitSetPosition(lv_dropUnit, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropLocation, DistanceBetweenPoints(lv_origin, UnitGetPosition(lv_dropUnit)), DistanceBetweenPoints(lv_origin, UnitGetPosition(lv_dropUnit))), false);
    }
    return true;
}

void libCOMI_gf_CM_CoopAI_SetupAttackForce (int lp_playerA, int lp_playerB, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation) {
    // Variable Declarations
    int lv_playerIter;
    fixed[3] lv_resourcesForPlayer;
    fixed lv_totalResourceAmount;
    string lv_commanderUnitTier;
    int lv_unitTypeIter;
    playergroup lv_attackingPlayers;
    int lv_player;
    int lv_unitCount;
    string lv_unitTypeToCreate;
    unitgroup lv_attackForce;
    unit[3] lv_transportCurrent;
    unitgroup lv_transportGroup;
    string lv_transportType;
    unit lv_unitCreated;

    // Automatic Variable Declarations
    int autoD7B02B25_ae;
    const int autoD7B02B25_ai = 1;

    // Variable Initialization
    lv_attackingPlayers = PlayerGroupEmpty();
    lv_attackForce = UnitGroupEmpty();
    lv_transportGroup = UnitGroupEmpty();

    // Implementation
    PlayerGroupAdd(lv_attackingPlayers, lp_playerA);
    PlayerGroupAdd(lv_attackingPlayers, lp_playerB);
    autoD7B02B25_ae = PlayerGroupCount(lv_attackingPlayers);
    lv_playerIter = 1;
    for ( ; ( (autoD7B02B25_ai >= 0 && lv_playerIter <= autoD7B02B25_ae) || (autoD7B02B25_ai < 0 && lv_playerIter >= autoD7B02B25_ae) ) ; lv_playerIter += autoD7B02B25_ai ) {
        lv_player = PlayerGroupPlayer(lv_attackingPlayers, lv_playerIter);
        lv_resourcesForPlayer[lv_playerIter] = libCOMI_gf_CM_CoopAI_GetResourceAmount(lp_resourceSize, libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player));
        lv_totalResourceAmount += lv_resourcesForPlayer[lv_playerIter];
    }
    if ((lp_playerA == c_playerAny) && (lp_playerB == c_playerAny)) {
        return ;
    }
    else if ((lp_playerA == c_playerAny)) {
        lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_playerB, lp_techLevel);
    }
    else if ((lp_playerB == c_playerAny)) {
        lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_playerA, lp_techLevel);
    }
    else if ((libCOMI_gv_cM_CoopAIPlayer_Commander[lp_playerA] == libCOMI_gv_cM_CoopAIPlayer_Commander[lp_playerB])) {
        lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_playerA, lp_techLevel);
    }
    else if (true) {
        if ((RandomInt(0, 1) == 1)) {
            lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_playerA, lp_techLevel);
        }
        else {
            lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_playerB, lp_techLevel);
        }
    }
    if ((lp_playerA == lp_playerB)) {
        lv_totalResourceAmount = (lv_totalResourceAmount * 2.0);
    }

    if ((lv_commanderUnitTier == null)) {
        breakpoint;
    }

    libCOMI_gf_CM_CoopAI_SetupCoopAttackForceDataTable(lv_attackingPlayers, lv_totalResourceAmount, lv_commanderUnitTier);
}

void libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn (int lp_playerA, int lp_playerB, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation) {
    // Automatic Variable Declarations
    // Deprecated
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lp_playerA, lp_playerB, lp_resourceSize, lp_techLevel, lp_spawnLocation, true);
}

void libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2 (int lp_playerA, int lp_playerB, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation, bool lp_dropWarpin) {
    // Variable Declarations
    int lv_playerIter;
    fixed[3] lv_resourcesForPlayer;
    fixed lv_totalResourceAmount;
    string lv_commanderUnitTier;
    int lv_unitTypeIter;
    playergroup lv_attackingPlayers;
    int lv_player;
    int lv_unitCount;
    string lv_unitTypeToCreate;
    unitgroup lv_attackForce;

    // Automatic Variable Declarations
    int auto2AA98C2E_ae;
    const int auto2AA98C2E_ai = 1;
    int autoE237A2DD_ae;
    const int autoE237A2DD_ai = 1;
    string auto514B4646_val;

    // Variable Initialization
    lv_attackingPlayers = PlayerGroupEmpty();
    lv_attackForce = UnitGroupEmpty();

    // Implementation
    PlayerGroupAdd(lv_attackingPlayers, lp_playerA);
    PlayerGroupAdd(lv_attackingPlayers, lp_playerB);
    libCOMI_gf_CM_CoopAI_SetupAttackForce(lp_playerA, lp_playerB, lp_resourceSize, lp_techLevel, lp_spawnLocation);
    auto2AA98C2E_ae = libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount();
    lv_unitTypeIter = 1;
    for ( ; ( (auto2AA98C2E_ai >= 0 && lv_unitTypeIter <= auto2AA98C2E_ae) || (auto2AA98C2E_ai < 0 && lv_unitTypeIter >= auto2AA98C2E_ae) ) ; lv_unitTypeIter += auto2AA98C2E_ai ) {
        lv_unitTypeToCreate = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitType(lv_unitTypeIter);
        lv_unitCount = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeCount(lv_unitTypeIter);
        while ((lv_unitCount > 0)) {
            autoE237A2DD_ae = PlayerGroupCount(lv_attackingPlayers);
            lv_playerIter = 1;
            for ( ; ( (autoE237A2DD_ai >= 0 && lv_playerIter <= autoE237A2DD_ae) || (autoE237A2DD_ai < 0 && lv_playerIter >= autoE237A2DD_ae) ) ; lv_playerIter += autoE237A2DD_ai ) {
                if ((lv_unitCount > 0)) {
                    lv_player = PlayerGroupPlayer(lv_attackingPlayers, lv_playerIter);
                    if ((PlayerGroupHasPlayer(libCOMI_gf_CM_CoopAI_AttackForce_GetExcludedPlayers(lv_unitTypeIter), lv_player) == false)) {
                        UnitCreate(1, lv_unitTypeToCreate, 0, lv_player, lp_spawnLocation, libNtve_gf_RandomAngle());
                        auto514B4646_val = lv_unitTypeToCreate;
                        if (auto514B4646_val == "Scourge") {
                            if ((AIIsScriptControlled(UnitLastCreated()) == true)) {
                                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)), c_orderQueueAddToFront);
                            }
                            else {
                                libNtve_gf_AICast(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)));
                            }
                        }
                        else {
                        }
                        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                        UnitGroupAdd(lv_attackForce, UnitLastCreated());
                        lv_resourcesForPlayer[lv_playerIter] -= UnitTypeGetCost(lv_unitTypeToCreate, c_unitCostSumMineralsVespene);
                        lv_unitCount -= 1;
                    }

                }

            }
        }
    }
    libCOMI_gf_CM_CoopAI_AttackForce_ClearTable();
    DataTableSetUnitGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ForceName(), lv_attackForce);
    if ((lp_dropWarpin == true)) {
        libCOMI_gf_DropPodWarpInUnitGroup(lv_attackForce, lp_spawnLocation);
    }

}

void libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn (int lp_playerA, int lp_playerB, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation, string lp_transportType) {
    // Variable Declarations
    playergroup lv_attackingPlayers;
    int lv_playerIter;
    fixed[3] lv_resourcesForPlayer;
    int lv_unitTypeIter;
    int lv_player;
    int lv_unitCount;
    string lv_unitTypeToCreate;
    unitgroup lv_attackForce;
    unit[3] lv_transportCurrent;
    string lv_transportType;
    unit lv_unitCreated;

    // Automatic Variable Declarations
    int autoEDB32825_ae;
    const int autoEDB32825_ai = 1;
    int auto4161A881_ae;
    const int auto4161A881_ai = 1;
    string auto43B5D7F2_val;

    // Variable Initialization
    lv_attackingPlayers = PlayerGroupEmpty();
    lv_attackForce = UnitGroupEmpty();

    // Implementation
    PlayerGroupAdd(lv_attackingPlayers, lp_playerA);
    PlayerGroupAdd(lv_attackingPlayers, lp_playerB);
    libCOMI_gf_CM_CoopAI_SetupAttackForce(lp_playerA, lp_playerB, lp_resourceSize, lp_techLevel, lp_spawnLocation);
    libCOMI_gv_cM_CoopAI_AttackForce_Transports = UnitGroupEmpty();
    autoEDB32825_ae = libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount();
    lv_unitTypeIter = 1;
    for ( ; ( (autoEDB32825_ai >= 0 && lv_unitTypeIter <= autoEDB32825_ae) || (autoEDB32825_ai < 0 && lv_unitTypeIter >= autoEDB32825_ae) ) ; lv_unitTypeIter += autoEDB32825_ai ) {
        lv_unitTypeToCreate = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitType(lv_unitTypeIter);
        lv_unitCount = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeCount(lv_unitTypeIter);
        while ((lv_unitCount > 0)) {
            auto4161A881_ae = PlayerGroupCount(lv_attackingPlayers);
            lv_playerIter = 1;
            for ( ; ( (auto4161A881_ai >= 0 && lv_playerIter <= auto4161A881_ae) || (auto4161A881_ai < 0 && lv_playerIter >= auto4161A881_ae) ) ; lv_playerIter += auto4161A881_ai ) {
                if ((lv_unitCount > 0)) {
                    lv_player = PlayerGroupPlayer(lv_attackingPlayers, lv_playerIter);
                    if ((PlayerGroupHasPlayer(libCOMI_gf_CM_CoopAI_AttackForce_GetExcludedPlayers(lv_unitTypeIter), lv_player) == false)) {
                        if ((libCOMI_gf_UnitMoverExists(lv_unitTypeToCreate, "Fly") == false)) {
                            if (((lv_transportCurrent[lv_playerIter] == null) || ((UnitCargoValue(lv_transportCurrent[lv_playerIter], c_unitCargoSpaceFree) * 0.75) < (CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unitTypeToCreate, "CargoSize", lv_player) + 1)))) {
                                UnitCreate(1, lp_transportType, c_unitCreateIgnorePlacement, lv_player, lp_spawnLocation, PointGetFacing(lp_spawnLocation));
                                lv_transportCurrent[lv_playerIter] = UnitLastCreated();
                                UnitGroupAdd(lv_attackForce, lv_transportCurrent[lv_playerIter]);
                                UnitGroupAdd(libCOMI_gv_cM_CoopAI_AttackForce_Transports, lv_transportCurrent[lv_playerIter]);
                            }

                            UnitCargoCreate(lv_transportCurrent[lv_playerIter], lv_unitTypeToCreate, 1);
                            lv_unitCreated = UnitCargoLastCreated();
                        }
                        else {
                            UnitCreate(1, lv_unitTypeToCreate, 0, lv_player, lp_spawnLocation, libNtve_gf_RandomAngle());
                            auto43B5D7F2_val = lv_unitTypeToCreate;
                            if (auto43B5D7F2_val == "Scourge") {
                                if ((AIIsScriptControlled(UnitLastCreated()) == true)) {
                                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)), c_orderQueueAddToFront);
                                }
                                else {
                                    libNtve_gf_AICast(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)));
                                }
                            }
                            else {
                            }
                            lv_unitCreated = UnitLastCreated();
                        }
                        UnitSetPropertyFixed(lv_unitCreated, c_unitPropEnergyPercent, 100.0);
                        UnitGroupAdd(lv_attackForce, lv_unitCreated);
                        lv_resourcesForPlayer[lv_playerIter] -= UnitTypeGetCost(lv_unitTypeToCreate, c_unitCostSumMineralsVespene);
                        lv_unitCount -= 1;
                    }

                }

            }
        }
    }
    libCOMI_gf_CM_CoopAI_AttackForce_ClearTable();
    DataTableSetUnitGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ForceName(), lv_attackForce);
}

string libCOMI_gf_CM_CoopAI_AttackForce_ForceName () {
    // Automatic Variable Declarations
    // Implementation
    return ("CoopAI_AttackForce");
}

unitgroup libCOMI_gf_LastCreatedCoopAttackForce () {
    // Variable Declarations
    unitgroup lv_attackForce;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackForce = UnitGroupEmpty();

    // Implementation
    lv_attackForce = DataTableGetUnitGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ForceName());
    return lv_attackForce;
}

unitgroup libCOMI_gf_LastCreatedCoopAttackForceTransports () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cM_CoopAI_AttackForce_Transports;
}

void libCOMI_gf_SendAttackWaveusingCoopAttackForce (unitgroup lp_attackForce, int lp_time, bool lp_waitDontWait) {
    // Variable Declarations
    unit lv_attackForceIter;
    playergroup lv_attackingPlayers;
    int lv_playerIter;

    // Automatic Variable Declarations
    unitgroup autoD41D4580_g;
    int autoD41D4580_u;
    playergroup autoA3F04005_g;

    // Variable Initialization
    lv_attackingPlayers = PlayerGroupEmpty();

    // Implementation
    autoD41D4580_g = lp_attackForce;
    autoD41D4580_u = UnitGroupCount(autoD41D4580_g, c_unitCountAll);
    for (;; autoD41D4580_u -= 1) {
        lv_attackForceIter = UnitGroupUnitFromEnd(autoD41D4580_g, autoD41D4580_u);
        if (lv_attackForceIter == null) { break; }
        PlayerGroupAdd(lv_attackingPlayers, UnitGetOwner(lv_attackForceIter));
    }
    autoA3F04005_g = lv_attackingPlayers;
    lv_playerIter = -1;
    while (true) {
        lv_playerIter = PlayerGroupNextPlayer(autoA3F04005_g, lv_playerIter);
        if (lv_playerIter < 0) { break; }
        libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack(lv_playerIter, UnitGroupFilterPlayer(lp_attackForce, lv_playerIter, 0), lp_time, lp_waitDontWait);
    }
    libCOMI_gf_CM_CoopAI_AttackForce_ClearWaypointList();
}

trigger auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_Trigger = null;
int auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_player;
unitgroup auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_attackingUnits;
int auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_time;
bool auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_waitDontWait;

void libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack (int lp_player, unitgroup lp_attackingUnits, int lp_time, bool lp_waitDontWait) {
    auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_player = lp_player;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_attackingUnits = lp_attackingUnits;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_time = lp_time;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_waitDontWait = lp_waitDontWait;

    if (auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_player;
    unitgroup lp_attackingUnits = auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_attackingUnits;
    int lp_time = auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_time;
    bool lp_waitDontWait = auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_waitDontWait;

    // Variable Declarations
    unit lv_attackingUnitIter;
    int lv_wayPointIter;

    // Automatic Variable Declarations
    int autoF3D226E7_ae;
    const int autoF3D226E7_ai = 1;
    unitgroup autoDBAFA17A_g;
    int autoDBAFA17A_u;

    // Variable Initialization

    // Implementation
    AIAttackWaveSetGatherPoint(lp_player, UnitGroupCenterOfGroup(lp_attackingUnits));
    autoF3D226E7_ae = libCOMI_gf_CM_CoopAI_AttackForce_GetWaypointTotal();
    lv_wayPointIter = 1;
    for ( ; ( (autoF3D226E7_ai >= 0 && lv_wayPointIter <= autoF3D226E7_ae) || (autoF3D226E7_ai < 0 && lv_wayPointIter >= autoF3D226E7_ae) ) ; lv_wayPointIter += autoF3D226E7_ai ) {
        if ((libCOMI_gf_CM_CoopAI_AttackForce_GetUseTransport(lv_wayPointIter) == false)) {
            AIAttackWaveAddWaypoint(lp_player, libCOMI_gf_CM_CoopAI_AttackForce_GetWaypoint(lv_wayPointIter), false);
        }
        else {
            AIAttackWaveAddWaypoint(lp_player, libCOMI_gf_CM_CoopAI_AttackForce_GetWaypoint(lv_wayPointIter), true);
        }
    }
    autoDBAFA17A_g = lp_attackingUnits;
    autoDBAFA17A_u = UnitGroupCount(autoDBAFA17A_g, c_unitCountAll);
    for (;; autoDBAFA17A_u -= 1) {
        lv_attackingUnitIter = UnitGroupUnitFromEnd(autoDBAFA17A_g, autoDBAFA17A_u);
        if (lv_attackingUnitIter == null) { break; }
        AIAttackWaveUseUnit(lp_player, lv_attackingUnitIter);
    }
    AIAttackWaveSend(lp_player, lp_time, lp_waitDontWait);
    return true;
}

void libCOMI_gf_AddAttackForceWaypoint (point lp_waypoint, bool lp_useTransport) {
    // Variable Declarations
    int lv_waypointIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_waypointIndex = (libCOMI_gf_CM_CoopAI_AttackForce_GetWaypointTotal() + 1);
    libCOMI_gf_CM_CoopAI_AttackForce_SetWaypointTotal(lv_waypointIndex);
    libCOMI_gf_CM_CoopAI_AttackForce_SetWaypoint(lp_waypoint, lv_waypointIndex);
    if ((lp_useTransport == false)) {
        DataTableSetBool(true, libCOMI_gf_CM_CoopAI_AttackForce_UseTransportName(lv_waypointIndex), false);
    }
    else {
        DataTableSetBool(true, libCOMI_gf_CM_CoopAI_AttackForce_UseTransportName(lv_waypointIndex), true);
    }
}

void libCOMI_gf_CM_CoopAI_AttackForce_ClearWaypointList () {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CM_CoopAI_AttackForce_SetWaypointTotal(0);
}

point libCOMI_gf_CM_CoopAI_AttackForce_GetWaypoint (int lp_pARAM_AAAAAAAAAA) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(true, libCOMI_gf_CM_CoopAI_AttackForce_WaypointName(lp_pARAM_AAAAAAAAAA));
}

void libCOMI_gf_CM_CoopAI_AttackForce_SetWaypoint (point lp_waypoint, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPoint(true, libCOMI_gf_CM_CoopAI_AttackForce_WaypointName(lp_index), lp_waypoint);
}

string libCOMI_gf_CM_CoopAI_AttackForce_WaypointName (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return ("CoopAI_AttackForce_Waypoint" + IntToString(lp_index));
}

string libCOMI_gf_CM_CoopAI_AttackForce_UseTransportName (int lp_waypointIndex) {
    // Automatic Variable Declarations
    // Implementation
    return ("CoopAI_AttackForce_Waypoint_ForceTransport" + IntToString(lp_waypointIndex));
}

bool libCOMI_gf_CM_CoopAI_AttackForce_GetUseTransport (int lp_waypointIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetBool(true, libCOMI_gf_CM_CoopAI_AttackForce_UseTransportName(lp_waypointIndex));
}

string libCOMI_gf_CM_CoopAI_AttackForce_WaypointTotalName () {
    // Automatic Variable Declarations
    // Implementation
    return ("CoopAI_AttackForce_WaypointTotal");
}

int libCOMI_gf_CM_CoopAI_AttackForce_GetWaypointTotal () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, libCOMI_gf_CM_CoopAI_AttackForce_WaypointTotalName());
}

void libCOMI_gf_CM_CoopAI_AttackForce_SetWaypointTotal (int lp_waypointIndex) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libCOMI_gf_CM_CoopAI_AttackForce_WaypointTotalName(), lp_waypointIndex);
}

string libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Unit (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return ("CoopAI_AttackForce_Wave_Unit_" + IntToString(lp_index));
}

string libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Count (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return ("CoopAI_AttackForce_Wave_Count_" + IntToString(lp_index));
}

string libCOMI_gf_CM_CoopAI_AttackForce_ExcludedPlayers_Name (int lp_unitTypeIndex) {
    // Automatic Variable Declarations
    // Implementation
    return ("CoopAI_AttackForce_Wave_ExcludedPlayers_" + IntToString(lp_unitTypeIndex));
}

string libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeTotal_Name () {
    // Automatic Variable Declarations
    // Implementation
    return ("CoopAI_AttackForce_Wave_UnitTypeTotal");
}

void libCOMI_gf_CM_CoopAI_SetupCoopAttackForceDataTable (playergroup lp_attackForcePlayers, fixed lp_resourceAllocation, string lp_commanderUnitTier) {
    int init_i;

    // Variable Declarations
    string lv_unitType;
    fixed lv_waveResourceTotal;
    fixed lv_waveResourceUsed;
    string lv_commanderTier;
    int lv_unitTierIter;
    const int lv_c_WaveUnitCount = 8;
    string[lv_c_WaveUnitCount + 1] lv_unitTypesForWave;
    fixed[lv_c_WaveUnitCount + 1] lv_unitTypePercentBase;
    fixed[lv_c_WaveUnitCount + 1] lv_unitTypePercentRandom;
    int lv_c_unitTypePerWaveLimit_Max;
    int[lv_c_WaveUnitCount + 1] lv_unitTypePerWaveLimit;
    int lv_unitTypeIter;
    int lv_unitTypeLimitIter;
    int lv_indexUnitType;
    string lv_unitTypeTest;
    string lv_unitTypeTestAlternate;
    int lv_difficulty;
    int lv_difficultyAsInt;
    int lv_unitPercentBaseIter;
    int lv_unitPercentBaseCreateCount;
    int lv_unitPercentBaseCreateCountSpawnIndex;
    fixed lv_unitPercentRandomPick;
    string lv_randomUnitType;
    int lv_randomUnitTryCount;
    int lv_randomUnitIter;
    bool lv_unitAvailableOnDifficulty;
    int lv_counterUnitTypeIndex;
    string[19] lv_counterTypes;
    int[19] lv_counterTypeDesiredAmount;
    fixed[19] lv_counterTypeDesiredAmountWeighted;
    int lv_counterUnitDesiredTotal;
    int lv_counterIter;
    int lv_counterSpawnCount;
    string lv_aIDetector;
    int lv_playerIter;
    playergroup lv_attackForcePlayers;
    string lv_debugString;

    // Automatic Variable Declarations
    int auto4387DFC8_ae;
    const int auto4387DFC8_ai = 1;
    int auto45C59D69_ae;
    const int auto45C59D69_ai = 1;
    playergroup auto5FB13331_g;
    int auto90F247F5_ae;
    const int auto90F247F5_ai = 1;
    playergroup auto85E16615_g;
    string autoAFAD9377_val;
    int auto2A8D916D_ae;
    const int auto2A8D916D_ai = 1;
    int autoEA202307_ae;
    const int autoEA202307_ai = 1;
    int auto39559AED_ae;
    const int auto39559AED_ai = 1;
    int auto91C8F413_ae;
    const int auto91C8F413_ai = 1;

    // Variable Initialization
    lv_c_unitTypePerWaveLimit_Max = 99999;
    for (init_i = 0; init_i <= lv_c_WaveUnitCount; init_i += 1) {
        lv_unitTypePerWaveLimit[init_i] = lv_c_unitTypePerWaveLimit_Max;
    }
    lv_difficulty = 2;
    lv_attackForcePlayers = PlayerGroupEmpty();
    lv_debugString = "";

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(lp_attackForcePlayers, lv_attackForcePlayers);
    lv_commanderTier = lp_commanderUnitTier;
    lv_waveResourceTotal = lp_resourceAllocation;
    if ((lv_waveResourceTotal == -1)) {
        TriggerDebugOutput(3, StringExternal("Param/Value/lib_COMI_7E582714"), true);
    }

    auto4387DFC8_ae = UserDataFieldValueCount("CoopAICommanderTiers", "PhaseUnits");
    lv_unitTierIter = 1;
    for ( ; ( (auto4387DFC8_ai >= 0 && lv_unitTierIter <= auto4387DFC8_ae) || (auto4387DFC8_ai < 0 && lv_unitTierIter >= auto4387DFC8_ae) ) ; lv_unitTierIter += auto4387DFC8_ai ) {
        if ((lv_unitType == null)) {
            break;
        }

    }
    lv_indexUnitType = 1;
    auto45C59D69_ae = UserDataFieldValueCount("CoopAICommanderTiers", "PhaseUnits");
    lv_unitTypeIter = 1;
    for ( ; ( (auto45C59D69_ai >= 0 && lv_unitTypeIter <= auto45C59D69_ae) || (auto45C59D69_ai < 0 && lv_unitTypeIter >= auto45C59D69_ae) ) ; lv_unitTypeIter += auto45C59D69_ai ) {
        lv_unitTypeTest = UserDataGetUnit("CoopAICommanderTiers", lv_commanderTier, "PhaseUnits", lv_unitTypeIter);
        if ((lv_unitTypeTest != null)) {
            lv_unitTypeTestAlternate = UserDataGetUnit("CoopAICommanderTiers", lv_commanderTier, "PhaseUnitsAlternate", lv_unitTypeIter);
            if ((lv_unitTypeTestAlternate != null) && (RandomFixed(0.0, 1.0) < UserDataGetFixed("CoopAICommanderTiers", lv_commanderTier, "PhaseUnitsAlternateChance", lv_unitTierIter))) {
                lv_unitTypeTest = lv_unitTypeTestAlternate;
            }

            auto5FB13331_g = lv_attackForcePlayers;
            lv_playerIter = -1;
            while (true) {
                lv_playerIter = PlayerGroupNextPlayer(auto5FB13331_g, lv_playerIter);
                if (lv_playerIter < 0) { break; }
                lv_difficulty = libCOMI_gf_DifficultyLevelForPlayerCoop(lv_playerIter);
                lv_difficultyAsInt = libCOOC_gf_CC_DifficultyIndex(lv_difficulty);
                if ((lv_difficultyAsInt >= UserDataGetInt("CoopAICommanderTiers", lv_commanderTier, "minDifficulty", lv_unitTypeIter))) {
                    lv_unitAvailableOnDifficulty = true;
                    lv_unitTypesForWave[lv_indexUnitType] = lv_unitTypeTest;
                    lv_unitTypePercentBase[lv_indexUnitType] += UserDataGetFixed("CoopAICommanderTiers", lv_commanderTier, "PercentOfWaveBase", lv_unitTypeIter);
                    lv_unitTypePercentRandom[lv_indexUnitType] += UserDataGetFixed("CoopAICommanderTiers", lv_commanderTier, "PercentOfWaveRandom", lv_unitTypeIter);
                    auto90F247F5_ae = UserDataInstanceCount("CoopAIAttackWaveUnitLimits");
                    lv_unitTypeLimitIter = 1;
                    for ( ; ( (auto90F247F5_ai >= 0 && lv_unitTypeLimitIter <= auto90F247F5_ae) || (auto90F247F5_ai < 0 && lv_unitTypeLimitIter >= auto90F247F5_ae) ) ; lv_unitTypeLimitIter += auto90F247F5_ai ) {
                        if ((lv_unitTypesForWave[lv_indexUnitType] == UserDataGetUnit("CoopAIAttackWaveUnitLimits", UserDataInstance("CoopAIAttackWaveUnitLimits", lv_unitTypeLimitIter), "UnitToLimit", 1))) {
                            if ((lv_unitTypePerWaveLimit[lv_indexUnitType] == lv_c_unitTypePerWaveLimit_Max)) {
                                lv_unitTypePerWaveLimit[lv_indexUnitType] = UserDataGetInt("CoopAIAttackWaveUnitLimits", UserDataInstance("CoopAIAttackWaveUnitLimits", lv_unitTypeLimitIter), "LimitPerDifficulty", lv_difficultyAsInt);
                            }
                            else {
                                lv_unitTypePerWaveLimit[lv_indexUnitType] += UserDataGetInt("CoopAIAttackWaveUnitLimits", UserDataInstance("CoopAIAttackWaveUnitLimits", lv_unitTypeLimitIter), "LimitPerDifficulty", lv_difficultyAsInt);
                            }
                            break;
                        }

                    }
                }
                else {
                    libCOMI_gf_CM_CoopAI_AttackForce_SetExcludedPlayers(PlayerGroupSingle(lv_playerIter), lv_unitTypesForWave[lv_indexUnitType]);
                }
            }
            if ((lv_unitAvailableOnDifficulty == true)) {
                lv_unitAvailableOnDifficulty = false;
                lv_unitTypePercentBase[lv_indexUnitType] /= PlayerGroupCount(lv_attackForcePlayers);
                lv_unitTypePercentRandom[lv_indexUnitType] /= PlayerGroupCount(lv_attackForcePlayers);
                lv_unitTypePercentRandom[lv_indexUnitType] += lv_unitTypePercentRandom[(lv_indexUnitType - 1)];
                lv_indexUnitType += 1;
            }

        }

    }
    lv_indexUnitType -= 1;
    auto85E16615_g = lv_attackForcePlayers;
    lv_playerIter = -1;
    while (true) {
        lv_playerIter = PlayerGroupNextPlayer(auto85E16615_g, lv_playerIter);
        if (lv_playerIter < 0) { break; }
        if ((PlayerRace(lv_playerIter) != "Terr") && (libCOMI_gv_cM_CoopAI_AIDetection_AttackWaveAddDetection == true)) {
            autoAFAD9377_val = PlayerRace(lv_playerIter);
            if (autoAFAD9377_val == "Prot") {
                lv_aIDetector = "Observer";
            }
            else if (autoAFAD9377_val == "Zerg") {
                lv_aIDetector = "Overseer";
            }
            else {
            }
            libCOMI_gf_CM_CoopAI_AttackForce_AddUnitType(lv_aIDetector, libCOMI_gf_MinimumDifficultyValueCoopInteger(RandomInt(0, 1), RandomInt(0, 1), 1, 1, 0, 0));
            break;
        }

    }
    auto2A8D916D_ae = lv_indexUnitType;
    lv_unitPercentBaseIter = 1;
    for ( ; ( (auto2A8D916D_ai >= 0 && lv_unitPercentBaseIter <= auto2A8D916D_ae) || (auto2A8D916D_ai < 0 && lv_unitPercentBaseIter >= auto2A8D916D_ae) ) ; lv_unitPercentBaseIter += auto2A8D916D_ai ) {
        if ((lv_waveResourceUsed > lv_waveResourceTotal)) {
            TriggerDebugOutput(3, StringExternal("Param/Value/lib_COMI_6C078B91"), libCOMI_gv_showAIDebugging);
            break;
        }

        if ((UnitTypeGetCost(lv_unitTypesForWave[lv_unitPercentBaseIter], c_unitCostSumMineralsVespene) > 0)) {
            lv_unitPercentBaseCreateCount = MaxI(TruncI((lv_unitTypePercentBase[lv_unitPercentBaseIter] * lv_waveResourceTotal / UnitTypeGetCost(lv_unitTypesForWave[lv_unitPercentBaseIter], c_unitCostSumMineralsVespene))), 1);
        }
        else {
            breakpoint;
            lv_unitPercentBaseCreateCount = TruncI((lv_unitTypePercentBase[lv_unitPercentBaseIter] * lv_waveResourceTotal / 125.0));
        }
        autoEA202307_ae = lv_unitPercentBaseCreateCount;
        lv_unitPercentBaseCreateCountSpawnIndex = 1;
        for ( ; ( (autoEA202307_ai >= 0 && lv_unitPercentBaseCreateCountSpawnIndex <= autoEA202307_ae) || (autoEA202307_ai < 0 && lv_unitPercentBaseCreateCountSpawnIndex >= autoEA202307_ae) ) ; lv_unitPercentBaseCreateCountSpawnIndex += autoEA202307_ai ) {
            if ((lv_unitTypePerWaveLimit[lv_unitPercentBaseIter] > 0)) {
                lv_unitTypePerWaveLimit[lv_unitPercentBaseIter] -= 1;
                lv_waveResourceUsed += UnitTypeGetCost(lv_unitTypesForWave[lv_unitPercentBaseIter], c_unitCostSumMineralsVespene);
                libCOMI_gf_CM_CoopAI_AttackForce_AddUnitType(lv_unitTypesForWave[lv_unitPercentBaseIter], 1);
                if ((lv_waveResourceUsed > lv_waveResourceTotal)) {
                    TriggerDebugOutput(3, StringExternal("Param/Value/lib_COMI_46B4291D"), libCOMI_gv_showAIDebugging);
                    break;
                }

            }

        }
    }
    while (true) {
        if ((lv_waveResourceUsed < lv_waveResourceTotal)) {
            if ((lv_randomUnitTryCount <= 100)) {
                lv_unitPercentRandomPick = RandomFixed(0.01, lv_unitTypePercentRandom[lv_indexUnitType]);
                auto91C8F413_ae = lv_indexUnitType;
                lv_randomUnitIter = 1;
                for ( ; ( (auto91C8F413_ai >= 0 && lv_randomUnitIter <= auto91C8F413_ae) || (auto91C8F413_ai < 0 && lv_randomUnitIter >= auto91C8F413_ae) ) ; lv_randomUnitIter += auto91C8F413_ai ) {
                    if ((lv_unitTypePercentRandom[lv_randomUnitIter] > lv_unitPercentRandomPick) && (lv_unitTypePerWaveLimit[lv_randomUnitIter] > 0)) {
                        lv_randomUnitType = lv_unitTypesForWave[lv_randomUnitIter];
                        break;
                    }

                }
            }
            else {
                auto39559AED_ae = lv_indexUnitType;
                lv_randomUnitIter = 1;
                for ( ; ( (auto39559AED_ai >= 0 && lv_randomUnitIter <= auto39559AED_ae) || (auto39559AED_ai < 0 && lv_randomUnitIter >= auto39559AED_ae) ) ; lv_randomUnitIter += auto39559AED_ai ) {
                    if ((lv_unitTypePercentRandom[lv_randomUnitIter] != 0.0) && (lv_unitTypePerWaveLimit[lv_randomUnitIter] > 0)) {
                        lv_randomUnitType = lv_unitTypesForWave[lv_randomUnitIter];
                        break;
                    }

                }
            }
            if ((lv_randomUnitType == null)) {
                lv_randomUnitTryCount += 1;
                continue;
            }

            if ((lv_randomUnitType != null)) {
                lv_waveResourceUsed += UnitTypeGetCost(lv_randomUnitType, c_unitCostSumMineralsVespene);
                lv_unitTypePerWaveLimit[lv_randomUnitIter] -= 1;
                libCOMI_gf_CM_CoopAI_AttackForce_AddUnitType(lv_randomUnitType, 1);
            }

        }
        else {
            TriggerDebugOutput(3, StringExternal("Param/Value/lib_COMI_29DD5D09"), libCOMI_gv_showAIDebugging);
            break;
        }
    }
}

string libCOMI_gf_CM_CoopAI_AttackForce_GetUnitType (int lp_unitTypeIndex) {
    // Variable Declarations
    string lv_unitTypeAsString;
    string lv_unitTypeAsGameLink;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitTypeAsString = "";

    // Implementation
    lv_unitTypeAsString = DataTableGetString(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Unit(lp_unitTypeIndex));
    lv_unitTypeAsGameLink = (lv_unitTypeAsString);
    return lv_unitTypeAsGameLink;
}

int libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeIndex (string lp_unitType) {
    // Variable Declarations
    int lv_unitTypeIter;

    // Automatic Variable Declarations
    int autoCD256A13_ae;
    const int autoCD256A13_ai = 1;

    // Variable Initialization

    // Implementation
    autoCD256A13_ae = libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount();
    lv_unitTypeIter = 1;
    for ( ; ( (autoCD256A13_ai >= 0 && lv_unitTypeIter <= autoCD256A13_ae) || (autoCD256A13_ai < 0 && lv_unitTypeIter >= autoCD256A13_ae) ) ; lv_unitTypeIter += autoCD256A13_ai ) {
        if ((libCOMI_gf_CM_CoopAI_AttackForce_GetUnitType(lv_unitTypeIter) == lp_unitType)) {
            return lv_unitTypeIter;
        }

    }
    return libCOMI_gv_cMC_CoopAI_AttackForce_NotInDataTable;
}

void libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeIndex (string lp_unitType, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetString(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Unit(lp_index), (lp_unitType));
    libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeTotal((libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount() + 1));
}

int libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeCount (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if ((DataTableGetInt(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Count(lp_index)) > 0)) {
        return DataTableGetInt(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Count(lp_index));
    }
    else {
        return libCOMI_gv_cMC_CoopAI_AttackForce_NotInDataTable;
    }
}

void libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeCount (int lp_index, int lp_count, int lp_relativeAbsolute) {
    // Automatic Variable Declarations
    int auto5A67C010_val;

    // Implementation
    auto5A67C010_val = lp_relativeAbsolute;
    if (auto5A67C010_val == libCOMI_ge_CM_CoopAI_AttackForce_SetUnitType_Type_Relative) {
        DataTableSetInt(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Count(lp_index), (DataTableGetInt(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Count(lp_index)) + lp_count));
    }
    else if (auto5A67C010_val == libCOMI_ge_CM_CoopAI_AttackForce_SetUnitType_Type_Absolute) {
        DataTableSetInt(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Count(lp_index), lp_count);
    }
    else {
    }
}

void libCOMI_gf_CM_CoopAI_AttackForce_SetExcludedPlayers (playergroup lp_excludePlayers, string lp_unitType) {
    // Variable Declarations
    int lv_unitTypeIndex;
    playergroup lv_alreadyExcludedPlayers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_alreadyExcludedPlayers = PlayerGroupEmpty();

    // Implementation
    lv_unitTypeIndex = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeIndex(lp_unitType);
    lv_alreadyExcludedPlayers = libCOMI_gf_CM_CoopAI_AttackForce_GetExcludedPlayers(lv_unitTypeIndex);
    libNtve_gf_AddPlayerGroupToPlayerGroup(lp_excludePlayers, lv_alreadyExcludedPlayers);
    DataTableSetPlayerGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ExcludedPlayers_Name(lv_unitTypeIndex), lv_alreadyExcludedPlayers);
}

playergroup libCOMI_gf_CM_CoopAI_AttackForce_GetExcludedPlayers (int lp_unitTypeIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPlayerGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ExcludedPlayers_Name(lp_unitTypeIndex));
}

void libCOMI_gf_CM_CoopAI_AttackForce_AddUnitType (string lp_unitType, int lp_count) {
    // Variable Declarations
    int lv_unitTypeWaveIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_unitTypeWaveIndex = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeIndex(lp_unitType);
    if ((lv_unitTypeWaveIndex != libCOMI_gv_cMC_CoopAI_AttackForce_NotInDataTable)) {
        libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeCount(lv_unitTypeWaveIndex, lp_count, libCOMI_ge_CM_CoopAI_AttackForce_SetUnitType_Type_Relative);
    }
    else {
        lv_unitTypeWaveIndex = (libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount() + 1);
        libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeIndex(lp_unitType, lv_unitTypeWaveIndex);
        libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeCount(lv_unitTypeWaveIndex, lp_count, libCOMI_ge_CM_CoopAI_AttackForce_SetUnitType_Type_Relative);
    }
}

int libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeTotal_Name());
}

void libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeTotal (int lp_unitTypeTotal) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeTotal_Name(), lp_unitTypeTotal);
}

void libCOMI_gf_CM_CoopAI_AttackForce_ClearTable () {
    // Variable Declarations
    int lv_unitTypeIndex;

    // Automatic Variable Declarations
    int autoAFA74759_ae;
    const int autoAFA74759_ai = 1;

    // Variable Initialization

    // Implementation
    autoAFA74759_ae = libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount();
    lv_unitTypeIndex = 1;
    for ( ; ( (autoAFA74759_ai >= 0 && lv_unitTypeIndex <= autoAFA74759_ae) || (autoAFA74759_ai < 0 && lv_unitTypeIndex >= autoAFA74759_ae) ) ; lv_unitTypeIndex += autoAFA74759_ai ) {
        libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeCount(lv_unitTypeIndex, 0, libCOMI_ge_CM_CoopAI_AttackForce_SetUnitType_Type_Absolute);
        libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeIndex(null, lv_unitTypeIndex);
    }
    libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeTotal(0);
}

void libCOMI_gf_CM_CoopAI_CreateAttackWave2 (int lp_player, bool lp_instantAttackGroup, fixed lp_resourceAllocation, string lp_commanderUnitTier) {
    int init_i;

    // Variable Declarations
    string lv_unitType;
    fixed lv_waveResourceTotal;
    fixed lv_waveResourceUsed;
    string lv_commanderTier;
    int lv_unitTierIter;
    const int lv_c_WaveUnitCount = 8;
    string[lv_c_WaveUnitCount + 1] lv_unitTypesForWave;
    fixed[lv_c_WaveUnitCount + 1] lv_unitTypePercentBase;
    fixed[lv_c_WaveUnitCount + 1] lv_unitTypePercentRandom;
    int[lv_c_WaveUnitCount + 1] lv_unitTypePerWaveLimit;
    int lv_unitTypeIter;
    int lv_unitTypeLimitIter;
    int lv_indexUnitType;
    string lv_unitTypeTest;
    int lv_difficulty;
    int lv_difficultyAsInt;
    int lv_unitPercentBaseIter;
    int lv_unitPercentBaseCreateCount;
    int lv_unitPercentBaseCreateCountSpawnIndex;
    fixed lv_unitPercentRandomPick;
    string lv_randomUnitType;
    int lv_randomUnitTryCount;
    int lv_randomUnitIter;
    int lv_counterUnitTypeIndex;
    string[19] lv_counterTypes;
    int[19] lv_counterTypeDesiredAmount;
    fixed[19] lv_counterTypeDesiredAmountWeighted;
    int lv_counterUnitDesiredTotal;
    int lv_counterIter;
    int lv_counterSpawnCount;
    string lv_aIDetector;

    // Automatic Variable Declarations
    int auto4A308EFB_ae;
    const int auto4A308EFB_ai = 1;
    int autoA609CF0B_ae;
    const int autoA609CF0B_ai = 1;
    int autoE4FCA90D_ae;
    const int autoE4FCA90D_ai = 1;
    string autoA31F433D_val;
    int auto874C8181_ae;
    const int auto874C8181_ai = 1;
    int autoA1B74908_ae;
    const int autoA1B74908_ai = 1;
    const int autoE2E03574_ae = 25;
    const int autoE2E03574_ai = 1;
    int autoF55C4EBF_ae;
    const int autoF55C4EBF_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= lv_c_WaveUnitCount; init_i += 1) {
        lv_unitTypePerWaveLimit[init_i] = 999;
    }
    lv_difficulty = 2;

    // Implementation
    while (!((libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] != "None"))) {
        Wait(0.25, c_timeGame);
    }
    lv_difficulty = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    lv_difficultyAsInt = lv_difficulty;
    lv_commanderTier = lp_commanderUnitTier;
    lv_waveResourceTotal = (lp_resourceAllocation * UserDataGetFixed("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player], "ResourceModifier", 1));
    TextExpressionSetToken("Param/Expression/lib_COMI_91DF939C", "time", libCOOC_gf_FormatTimeCampaign(FixedToInt(GameGetMissionTime())));
    TextExpressionSetToken("Param/Expression/lib_COMI_91DF939C", "player", IntToText(lp_player));
    TextExpressionSetToken("Param/Expression/lib_COMI_91DF939C", "diff", DifficultyName(lv_difficulty));
    TextExpressionSetToken("Param/Expression/lib_COMI_91DF939C", "total", FixedToText(lv_waveResourceTotal, c_fixedPrecisionAny));
    TriggerDebugOutput(3, TextExpressionAssemble("Param/Expression/lib_COMI_91DF939C"), libCOMI_gv_showAIDebugging);
    if ((lv_waveResourceTotal <= 0.0)) {
    }

    if ((lv_waveResourceTotal == -1)) {
        TriggerDebugOutput(3, StringExternal("Param/Value/lib_COMI_01772B27"), true);
    }

    auto4A308EFB_ae = UserDataFieldValueCount("CoopAICommanderTiers", "PhaseUnits");
    lv_unitTierIter = 1;
    for ( ; ( (auto4A308EFB_ai >= 0 && lv_unitTierIter <= auto4A308EFB_ae) || (auto4A308EFB_ai < 0 && lv_unitTierIter >= auto4A308EFB_ae) ) ; lv_unitTierIter += auto4A308EFB_ai ) {
        if ((lv_unitType == null)) {
            break;
        }

    }
    lv_indexUnitType = 1;
    autoA609CF0B_ae = UserDataFieldValueCount("CoopAICommanderTiers", "PhaseUnits");
    lv_unitTypeIter = 1;
    for ( ; ( (autoA609CF0B_ai >= 0 && lv_unitTypeIter <= autoA609CF0B_ae) || (autoA609CF0B_ai < 0 && lv_unitTypeIter >= autoA609CF0B_ae) ) ; lv_unitTypeIter += autoA609CF0B_ai ) {
        lv_unitTypeTest = UserDataGetUnit("CoopAICommanderTiers", lv_commanderTier, "PhaseUnits", lv_unitTypeIter);
        if ((lv_unitTypeTest != null) && (lv_difficultyAsInt >= UserDataGetInt("CoopAICommanderTiers", lv_commanderTier, "minDifficulty", lv_unitTypeIter))) {
            lv_unitTypesForWave[lv_indexUnitType] = lv_unitTypeTest;
            lv_unitTypePercentBase[lv_indexUnitType] = UserDataGetFixed("CoopAICommanderTiers", lv_commanderTier, "PercentOfWaveBase", lv_unitTypeIter);
            lv_unitTypePercentRandom[lv_indexUnitType] = (UserDataGetFixed("CoopAICommanderTiers", lv_commanderTier, "PercentOfWaveRandom", lv_unitTypeIter) + lv_unitTypePercentRandom[(lv_indexUnitType - 1)]);
            if ((UserDataGetUnit("CoopAICommanderTiers", lv_commanderTier, "PhaseUnitsAlternate", lv_unitTypeIter) != null) && (UserDataGetFixed("CoopAICommanderTiers", lv_commanderTier, "PhaseUnitsAlternateChance", lv_unitTypeIter) != 0.0)) {
                if ((RandomFixed(0.0, 1.0) < UserDataGetFixed("CoopAICommanderTiers", lv_commanderTier, "PhaseUnitsAlternateChance", lv_unitTierIter))) {
                    lv_unitType = UserDataGetUnit("CoopAICommanderTiers", lv_commanderTier, "PhaseUnitsAlternate", lv_unitTierIter);
                    lv_unitTypesForWave[lv_indexUnitType] = lv_unitType;
                }

            }

            autoE4FCA90D_ae = UserDataInstanceCount("CoopAIAttackWaveUnitLimits");
            lv_unitTypeLimitIter = 1;
            for ( ; ( (autoE4FCA90D_ai >= 0 && lv_unitTypeLimitIter <= autoE4FCA90D_ae) || (autoE4FCA90D_ai < 0 && lv_unitTypeLimitIter >= autoE4FCA90D_ae) ) ; lv_unitTypeLimitIter += autoE4FCA90D_ai ) {
                if ((lv_unitTypesForWave[lv_indexUnitType] == UserDataGetUnit("CoopAIAttackWaveUnitLimits", UserDataInstance("CoopAIAttackWaveUnitLimits", lv_unitTypeLimitIter), "UnitToLimit", 1))) {
                    lv_unitTypePerWaveLimit[lv_indexUnitType] = UserDataGetInt("CoopAIAttackWaveUnitLimits", UserDataInstance("CoopAIAttackWaveUnitLimits", lv_unitTypeLimitIter), "LimitPerDifficulty", lv_difficultyAsInt);
                    break;
                }

            }
            lv_indexUnitType += 1;
        }

    }
    lv_indexUnitType -= 1;
    if ((libCOMI_gf_AISuspectDetectionDanger(lp_player) == true)) {
        autoA31F433D_val = PlayerRace(lp_player);
        if (autoA31F433D_val == "Prot") {
            lv_aIDetector = "Observer";
        }
        else if (autoA31F433D_val == "Terr") {
            lv_aIDetector = "Raven";
        }
        else if (autoA31F433D_val == "Zerg") {
            lv_aIDetector = "Overseer";
        }
        else {
        }
        if ((lp_instantAttackGroup == false)) {
            libCOMI_gf_AddAttackWaveUnitType(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), RandomInt(0, 1), RandomInt(0, 1), 1, 1, 2, 2), lv_aIDetector);
        }
        else {
            UnitCreate(libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), RandomInt(0, 1), RandomInt(0, 1), 1, 1, 2, 2), lv_aIDetector, 0, lp_player, libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player], libNtve_gf_RandomAngle());
            UnitGroupAddUnitGroup(libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player], UnitLastCreatedGroup());
        }
    }

    auto874C8181_ae = lv_indexUnitType;
    lv_unitPercentBaseIter = 1;
    for ( ; ( (auto874C8181_ai >= 0 && lv_unitPercentBaseIter <= auto874C8181_ae) || (auto874C8181_ai < 0 && lv_unitPercentBaseIter >= auto874C8181_ae) ) ; lv_unitPercentBaseIter += auto874C8181_ai ) {
        if ((lv_waveResourceUsed > lv_waveResourceTotal)) {
            TriggerDebugOutput(3, StringExternal("Param/Value/lib_COMI_46250DC5"), libCOMI_gv_showAIDebugging);
            break;
        }

        if ((UnitTypeGetCost(lv_unitTypesForWave[lv_unitPercentBaseIter], c_unitCostSumMineralsVespene) > 0)) {
            lv_unitPercentBaseCreateCount = MaxI(TruncI((lv_unitTypePercentBase[lv_unitPercentBaseIter] * lv_waveResourceTotal / UnitTypeGetCost(lv_unitTypesForWave[lv_unitPercentBaseIter], c_unitCostSumMineralsVespene))), 1);
        }
        else {
            breakpoint;
            lv_unitPercentBaseCreateCount = TruncI((lv_unitTypePercentBase[lv_unitPercentBaseIter] * lv_waveResourceTotal / 125.0));
        }
        autoA1B74908_ae = lv_unitPercentBaseCreateCount;
        lv_unitPercentBaseCreateCountSpawnIndex = 1;
        for ( ; ( (autoA1B74908_ai >= 0 && lv_unitPercentBaseCreateCountSpawnIndex <= autoA1B74908_ae) || (autoA1B74908_ai < 0 && lv_unitPercentBaseCreateCountSpawnIndex >= autoA1B74908_ae) ) ; lv_unitPercentBaseCreateCountSpawnIndex += autoA1B74908_ai ) {
            if ((lv_unitTypePerWaveLimit[lv_unitPercentBaseIter] > 0)) {
                lv_unitTypePerWaveLimit[lv_unitPercentBaseIter] -= 1;
                lv_waveResourceUsed += UnitTypeGetCost(lv_unitTypesForWave[lv_unitPercentBaseIter], c_unitCostSumMineralsVespene);
                if ((lp_instantAttackGroup == false)) {
                    libCOMI_gf_AddAttackWaveUnitType(1, lv_unitTypesForWave[lv_unitPercentBaseIter]);
                }
                else {
                    UnitCreate(1, lv_unitTypesForWave[lv_unitPercentBaseIter], 0, lp_player, libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player], libNtve_gf_RandomAngle());
                    UnitGroupAddUnitGroup(libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player], UnitLastCreatedGroup());
                }
                if ((lv_waveResourceUsed > lv_waveResourceTotal)) {
                    TriggerDebugOutput(3, StringExternal("Param/Value/lib_COMI_43D66564"), libCOMI_gv_showAIDebugging);
                    break;
                }

            }

        }
    }
    lv_randomUnitTryCount = 1;
    for ( ; ( (autoE2E03574_ai >= 0 && lv_randomUnitTryCount <= autoE2E03574_ae) || (autoE2E03574_ai < 0 && lv_randomUnitTryCount >= autoE2E03574_ae) ) ; lv_randomUnitTryCount += autoE2E03574_ai ) {
        if ((lv_waveResourceUsed < lv_waveResourceTotal)) {
            lv_unitPercentRandomPick = RandomFixed(0.01, lv_unitTypePercentRandom[lv_indexUnitType]);
            autoF55C4EBF_ae = lv_indexUnitType;
            lv_randomUnitIter = 1;
            for ( ; ( (autoF55C4EBF_ai >= 0 && lv_randomUnitIter <= autoF55C4EBF_ae) || (autoF55C4EBF_ai < 0 && lv_randomUnitIter >= autoF55C4EBF_ae) ) ; lv_randomUnitIter += autoF55C4EBF_ai ) {
                if ((lv_unitTypePercentRandom[lv_randomUnitIter] > lv_unitPercentRandomPick) && (lv_unitTypePerWaveLimit[lv_randomUnitIter] > 0)) {
                    lv_randomUnitType = lv_unitTypesForWave[lv_randomUnitIter];
                    break;
                }

            }
            if ((lv_randomUnitType == null) && (lv_unitTypePercentRandom[lv_indexUnitType] != 0.0)) {
                TriggerDebugOutput(3, StringExternal("Param/Value/lib_COMI_7A57997D"), libCOMI_gv_showAIDebugging);
                lv_randomUnitType = lv_unitTypesForWave[lv_indexUnitType];
            }

            if ((lv_randomUnitType != null)) {
                lv_waveResourceUsed += UnitTypeGetCost(lv_randomUnitType, c_unitCostSumMineralsVespene);
                lv_unitTypePerWaveLimit[lv_randomUnitIter] -= 1;
                if ((lp_instantAttackGroup == false)) {
                    libCOMI_gf_AddAttackWaveUnitType(1, lv_randomUnitType);
                }
                else {
                    UnitCreate(1, lv_randomUnitType, 0, lp_player, libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player], libNtve_gf_RandomAngle());
                    UnitGroupAddUnitGroup(libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player], UnitLastCreatedGroup());
                }
            }

        }
        else {
            TriggerDebugOutput(3, StringExternal("Param/Value/lib_COMI_A0619D4B"), libCOMI_gv_showAIDebugging);
            break;
        }
    }
}

void libCOMI_gf_CM_AIThinkCoop (int lp_player) {
    // Variable Declarations
    int lv_setupNextAttackWave;
    int lv_count;
    string lv_unitType;
    int lv_emptyWaveIndex;
    int lv_attackWaveIndex;
    wave lv_wave;
    int lv_startingTechStockIter;
    string lv_startingTechStockUnit;

    // Automatic Variable Declarations
    int auto47D233A5_ae;
    const int auto47D233A5_ai = 1;
    string autoE426A4D3_val;

    // Variable Initialization
    lv_count = 1;

    // Implementation
    if ((PlayerScoreValueGetAsInt(lp_player, "UnitsActiveCount") <= 5)) {
        libCOMI_gv_cM_CoopAIPlayer_IsAlive[lp_player] = false;
    }

    if ((GameGetMissionTime() < libCOMI_gv_cM_CoopAIPlayer_NextStockUpdate[lp_player])) {
        return ;
    }

    libCOMI_gv_cM_CoopAIPlayer_NextStockUpdate[lp_player] = (GameGetMissionTime() + 5.0);
    AIClearStock(lp_player);
    auto47D233A5_ae = UserDataFieldValueCount("CoopAICommanders", "StartingTech");
    lv_startingTechStockIter = 1;
    for ( ; ( (auto47D233A5_ai >= 0 && lv_startingTechStockIter <= auto47D233A5_ae) || (auto47D233A5_ai < 0 && lv_startingTechStockIter >= auto47D233A5_ae) ) ; lv_startingTechStockIter += auto47D233A5_ai ) {
        lv_startingTechStockUnit = UserDataGetUnit("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player], "StartingTech", lv_startingTechStockIter);
        if ((lv_startingTechStockUnit != null)) {
            AISetStock(lp_player, UserDataGetInt("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player], "StartingTechCount", lv_startingTechStockIter), lv_startingTechStockUnit);
        }

    }
    libCOMI_gf_CM_CoopAI_Upgrades(lp_player);
    autoE426A4D3_val = PlayerRace(lp_player);
    if (autoE426A4D3_val == "Terr") {
        AISetStockUnitNext(lp_player, 6, "SCV", false);
    }
    else if (autoE426A4D3_val == "Zerg") {
        AISetStockUnitNext(lp_player, 6, "Drone", false);
    }
    else if (autoE426A4D3_val == "Prot") {
        AISetStockUnitNext(lp_player, 6, "Probe", false);
    }
    else {
    }
    if ((PlayerRace(lp_player) == "Terr")) {
        if (((AITechCount(lp_player, "Ghost", c_techCountCompleteOnly) > 0) || (AITechCount(lp_player, "Spectre", c_techCountCompleteOnly) > 0))) {
            AISetStock(lp_player, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), 0, 0, 1, 2, 3, 4), "Nuke");
            AISetStock(lp_player, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), 0, 0, 1, 2, 3, 4), "GhostAcademy");
        }
        else {
            AISetStock(lp_player, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), 0, 0, 1, 1, 2, 2), "Ghost");
        }
        AISetStock(lp_player, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), 1, 1, 1, 1, 2, 2), "OrbitalCommand");
    }

    AIEnableStock(lp_player);
}

trigger auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_Trigger = null;
int auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_lp_player;

void libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger (int lp_player) {
    auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_lp_player;

    // Automatic Variable Declarations
    // Implementation
    Wait(2.0, c_timeAI);
    AIAddDetectionDangerCampaignUnits(lp_player);
    return true;
}

void libCOMI_gf_CM_CoopAI_SetupStartingTech (int lp_player) {
    // Variable Declarations
    string lv_unitToCreate;
    int lv_unitCreateCount;
    int lv_unitCreateIter;
    int lv_playerOwnedCount;
    int lv_iterUnitCreate;
    point lv_createPosition;

    // Automatic Variable Declarations
    int autoBC0EE9F6_ae;
    const int autoBC0EE9F6_ai = 1;
    int autoB7BAE201_ae;
    const int autoB7BAE201_ai = 1;

    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 1) || (libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 2))) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("SiegeMode", 0), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("MorphToSwarmHostBurrowedMP", 0), false);
        TechTreeUpgradeAddLevel(lp_player, "SwarmHostFakeWeapon", 1);
    }
    else {
        TechTreeUpgradeAddLevel(lp_player, "CausticSpray", 1);
    }
    TechTreeUpgradeAddLevel(lp_player, "CoopAIReaperCost", 1);
    TechTreeUpgradeAddLevel(lp_player, "CoopAIMutaliskCost", 1);
    autoBC0EE9F6_ae = UserDataFieldValueCount("CoopAICommanders", "StartingTech");
    lv_unitCreateIter = 1;
    for ( ; ( (autoBC0EE9F6_ai >= 0 && lv_unitCreateIter <= autoBC0EE9F6_ae) || (autoBC0EE9F6_ai < 0 && lv_unitCreateIter >= autoBC0EE9F6_ae) ) ; lv_unitCreateIter += autoBC0EE9F6_ai ) {
        lv_unitToCreate = UserDataGetUnit("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player], "StartingTech", lv_unitCreateIter);
        if ((lv_unitToCreate == null)) {
            continue;
        }

        lv_unitCreateCount = UserDataGetInt("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player], "StartingTechCount", lv_unitCreateIter);
        lv_playerOwnedCount = UnitGroupCount(UnitGroup(lv_unitToCreate, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        autoB7BAE201_ae = (lv_unitCreateCount - lv_playerOwnedCount);
        lv_iterUnitCreate = 1;
        for ( ; ( (autoB7BAE201_ai >= 0 && lv_iterUnitCreate <= autoB7BAE201_ae) || (autoB7BAE201_ai < 0 && lv_iterUnitCreate >= autoB7BAE201_ae) ) ; lv_iterUnitCreate += autoB7BAE201_ai ) {
            if ((UnitTypeTestAttribute(lv_unitToCreate, c_unitAttributeStructure) == true)) {
                lv_createPosition = AIGetBuildingPlacement(lp_player, UnitGroupCenterOfGroup(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), lv_unitToCreate, -1);
                if ((lv_createPosition == null)) {
                    lv_createPosition = UnitTypePlacementTestsFromPoint(lv_unitToCreate, lp_player, UnitGroupCenterOfGroup(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), 0.0, c_placementTestCreepMask | c_placementTestPowerMask | c_placementTestFogMask | c_placementTestIgnoreBlockersMask | c_placementTestIgnoreInvisibleMask | c_placementTestZoneMask | c_placementTestCliffMask | c_placementTestDensityMask);
                }
                else {
                    lv_createPosition = RegionRandomPoint(RegionCircle(UnitGroupCenterOfGroup(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), 10.0));
                }
            }
            else {
                lv_createPosition = AIGetGatherDefLocation(lp_player, -1);
            }
            UnitCreate(1, lv_unitToCreate, 0, lp_player, lv_createPosition, libNtve_gf_RandomAngle());
        }
    }
}

void libCOMI_gf_CM_CoopAI_CacheUpgradeData (int lp_player, int lp_difficulty) {
    // Variable Declarations
    int lv_upgradeIter;

    // Automatic Variable Declarations
    int auto93DD5DF8_ae;
    const int auto93DD5DF8_ai = 1;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_initialized = true;
    libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_cachedDifficulty = lp_difficulty;
    libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_numUpgrades = UserDataInstanceCount("CoopAIUpgrade");
    if ((libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_numUpgrades > libCOMI_gv_cMC_CoopAI_MaxNumUpgrades)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_CDE8D4FE"), true);
        libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_numUpgrades = libCOMI_gv_cMC_CoopAI_MaxNumUpgrades;
    }

    auto93DD5DF8_ae = libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_numUpgrades;
    lv_upgradeIter = 1;
    for ( ; ( (auto93DD5DF8_ai >= 0 && lv_upgradeIter <= auto93DD5DF8_ae) || (auto93DD5DF8_ai < 0 && lv_upgradeIter >= auto93DD5DF8_ae) ) ; lv_upgradeIter += auto93DD5DF8_ai ) {
        libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_upgrade[lv_upgradeIter] = UserDataGetUpgrade("CoopAIUpgrade", UserDataInstance("CoopAIUpgrade", lv_upgradeIter), "Upgrade", 1);
        libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_time[lv_upgradeIter] = UserDataGetFixed("CoopAIUpgrade", UserDataInstance("CoopAIUpgrade", lv_upgradeIter), "TimePerDifficult", lp_difficulty);
    }
}

void libCOMI_gf_CM_CoopAI_Upgrades (int lp_player) {
    // Variable Declarations
    int lv_upgradeIter;
    fixed lv_time;
    string lv_upgrade;
    int lv_difficulty;
    int lv_exclusiveCommanderIter;

    // Automatic Variable Declarations
    int auto56C5C2AA_ae;
    const int auto56C5C2AA_ai = 1;
    int auto3A3C35EB_ae;
    const int auto3A3C35EB_ai = 1;

    // Variable Initialization
    lv_difficulty = 2;

    // Implementation
    lv_difficulty = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    if (((libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_initialized == false) || (libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_cachedDifficulty != lv_difficulty))) {
        libCOMI_gf_CM_CoopAI_CacheUpgradeData(lp_player, lv_difficulty);
    }

    auto56C5C2AA_ae = libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_numUpgrades;
    lv_upgradeIter = 1;
    for ( ; ( (auto56C5C2AA_ai >= 0 && lv_upgradeIter <= auto56C5C2AA_ae) || (auto56C5C2AA_ai < 0 && lv_upgradeIter >= auto56C5C2AA_ae) ) ; lv_upgradeIter += auto56C5C2AA_ai ) {
        lv_upgrade = libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_upgrade[lv_upgradeIter];
        lv_time = libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_time[lv_upgradeIter];
        if ((lv_time >= 0.0) && (lv_time < GameGetMissionTime()) && (TechTreeUpgradeCount(lp_player, lv_upgrade, c_techCountQueuedOrBetter) == 0)) {
            auto3A3C35EB_ae = UserDataFieldValueCount("CoopAIUpgrade", "ExclusiveToCommander");
            lv_exclusiveCommanderIter = 1;
            for ( ; ( (auto3A3C35EB_ai >= 0 && lv_exclusiveCommanderIter <= auto3A3C35EB_ae) || (auto3A3C35EB_ai < 0 && lv_exclusiveCommanderIter >= auto3A3C35EB_ae) ) ; lv_exclusiveCommanderIter += auto3A3C35EB_ai ) {
                if (((UserDataGetUserInstance("CoopAIUpgrade", UserDataInstance("CoopAIUpgrade", lv_upgradeIter), "ExclusiveToCommander", lv_exclusiveCommanderIter) == "None") || (UserDataGetUserInstance("CoopAIUpgrade", UserDataInstance("CoopAIUpgrade", lv_upgradeIter), "ExclusiveToCommander", lv_exclusiveCommanderIter) == libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player]))) {
                    TechTreeUpgradeAddLevel(lp_player, lv_upgrade, 1);
                    break;
                }

            }
        }

    }
}

int libCOMI_gf_GetMissionDifficulty () {
    // Variable Declarations
    fixed lv_difficulty;
    int lv_returnDiff;
    int lv_player01;
    int lv_player02;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_returnDiff = 2;
    lv_player01 = 1;
    lv_player02 = 2;

    // Implementation
    if ((PlayerType(2) == c_playerTypeNone)) {
        return libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player01);
    }

    lv_difficulty = ((libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player01) + libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player02)) * 0.5);
    lv_returnDiff = RoundI(lv_difficulty);;
    return lv_returnDiff;
}

string libCOMI_gf_GetUnitRace (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_unit), "Race", UnitGetOwner(lp_unit)));
}

void libCOMI_gf_SetCoopAIAttackGroupSpawnPoint (int lp_player, point lp_spawnPoint) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player] = lp_spawnPoint;
}

trigger auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_Trigger = null;
int auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_player;
string auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_unitType;
point auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_warpInPoint;

void libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn (int lp_player, string lp_unitType, point lp_warpInPoint) {
    auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_player = lp_player;
    auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_unitType = lp_unitType;
    auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_warpInPoint = lp_warpInPoint;

    if (auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_player;
    string lp_unitType = auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_unitType;
    point lp_warpInPoint = auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_warpInPoint;

    // Automatic Variable Declarations
    // Implementation
    UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, lp_player, lp_warpInPoint, libNtve_gf_RandomAngle());
    UnitAbilityEnable(UnitLastCreated(), "attack", false);
    UnitAbilityEnable(UnitLastCreated(), "move", false);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.0, 0));
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(1.0, 2.0));
    UnitBehaviorAdd(UnitLastCreated(), "ProtossGenericWarpInOut", UnitLastCreated(), 1);
    Wait(2.0, c_timeAI);
    UnitBehaviorRemove(UnitLastCreated(), "ProtossGenericWarpInOut", 1);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(1.0, 0.0));
    UnitAbilityEnable(UnitLastCreated(), "attack", true);
    UnitAbilityEnable(UnitLastCreated(), "move", true);
    return true;
}

void libCOMI_gf_EnableDisableCoopAIWavePings (bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_CoopAI_WavePingShowAll = lp_enableDisable;
}

trigger auto_libCOMI_gf_EnableDisableCoopAIWavePing_Trigger = null;
wave auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_attackWave;
bool auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_enableDisable;

void libCOMI_gf_EnableDisableCoopAIWavePing (wave lp_attackWave, bool lp_enableDisable) {
    auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_attackWave = lp_attackWave;
    auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_enableDisable = lp_enableDisable;

    if (auto_libCOMI_gf_EnableDisableCoopAIWavePing_Trigger == null) {
        auto_libCOMI_gf_EnableDisableCoopAIWavePing_Trigger = TriggerCreate("auto_libCOMI_gf_EnableDisableCoopAIWavePing_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_EnableDisableCoopAIWavePing_Trigger, false, false);
}

bool auto_libCOMI_gf_EnableDisableCoopAIWavePing_TriggerFunc (bool testConds, bool runActions) {
    wave lp_attackWave = auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_attackWave;
    bool lp_enableDisable = auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_enableDisable;

    // Variable Declarations
    int lv_attackWavePlayerIterPrimary;
    int lv_attackWavePingIterPrimary;

    // Automatic Variable Declarations
    playergroup autoE6735AAB_g;
    int auto2A7BD62F_ae;
    const int auto2A7BD62F_ai = 1;
    fixed autoF7E66F8C_at;

    // Variable Initialization

    // Implementation
    autoE6735AAB_g = libCOMI_gv_cM_CoopAI_Players;
    lv_attackWavePlayerIterPrimary = -1;
    while (true) {
        lv_attackWavePlayerIterPrimary = PlayerGroupNextPlayer(autoE6735AAB_g, lv_attackWavePlayerIterPrimary);
        if (lv_attackWavePlayerIterPrimary < 0) { break; }
        auto2A7BD62F_ae = libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark;
        lv_attackWavePingIterPrimary = 0;
        for ( ; ( (auto2A7BD62F_ai >= 0 && lv_attackWavePingIterPrimary <= auto2A7BD62F_ae) || (auto2A7BD62F_ai < 0 && lv_attackWavePingIterPrimary >= auto2A7BD62F_ae) ) ; lv_attackWavePingIterPrimary += auto2A7BD62F_ai ) {
            if ((lp_attackWave == libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary])) {
                libCOMI_gv_cM_CoopAI_DontPingWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary] = true;
            }

        }
    }
    autoF7E66F8C_at = 0;
    while (!((lp_attackWave != null) && (AIWaveGetUnits(lp_attackWave) != UnitGroupEmpty()) && (AIWaveGetUnits(lp_attackWave) != null) && (UnitGroupCount(AIWaveGetUnits(lp_attackWave), c_unitCountAlive) > 0)) && autoF7E66F8C_at <= 90.0) {
        Wait(0.1, c_timeGame);
        autoF7E66F8C_at = autoF7E66F8C_at + 0.1;
    }
    UnitGroupAddUnitGroup(libCOMI_gv_cM_CoopAI_DontPingUnits, AIWaveGetUnits(lp_attackWave));
    while (!((lp_attackWave == null))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gv_cM_CoopAI_DontPingWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary] = false;
    return true;
}

void libCOMI_gf_EnableDisableCoopAIPlayerAttackPings (playergroup lp_players, bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enableDisable == false)) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(lp_players, libCOMI_gv_cM_CoopAI_DontPingPlayers);
    }
    else {
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, libCOMI_gv_cM_CoopAI_DontPingPlayers);
    }
}

bool libCOMI_gf_CM_CoopAI_PingWorthyUnit (unit lp_pingableUnit) {
    // Variable Declarations
    string lv_pingableUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_pingableUnitType = UnitGetType(lp_pingableUnit);
    if (((lv_pingableUnitType == "WidowMine") || (lv_pingableUnitType == "WidowMineBurrowed"))) {
        return true;
    }
    else if ((UnitWeaponCount(lp_pingableUnit) <= 0)) {
        return false;
    }
    else if ((UnitGroupHasUnit(libCOMI_gv_cM_CoopAI_DontPingUnits, lp_pingableUnit) == true)) {
        return false;
    }
    else if (((lv_pingableUnitType == "Medivac") || (lv_pingableUnitType == "Raven") || (lv_pingableUnitType == "ScienceVessel") || (lv_pingableUnitType == "Observer") || (lv_pingableUnitType == "WarpPrismPhasing") || (lv_pingableUnitType == "WarpPrism") || (lv_pingableUnitType == "Overlord") || (lv_pingableUnitType == "Overseer") || (lv_pingableUnitType == "Changeling") || (lv_pingableUnitType == "ChangelingZealot") || (lv_pingableUnitType == "ChangelingMarineShield") || (lv_pingableUnitType == "ChangelingMarine") || (lv_pingableUnitType == "ChangelingZergling") || (lv_pingableUnitType == "ChangelingZerglingWings"))) {
        return false;
    }
    return true;
}

bool libCOMI_gf_UnitisValidforanAttackWavePing (unit lp_pingableUnit) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gf_CM_CoopAI_PingWorthyUnit(lp_pingableUnit);
}

void libCOMI_gf_TacticalAIFilterSortByLife (aifilter lp_filter, fixed lp_damage, fixed lp_distance) {
    // Automatic Variable Declarations
    // Implementation
    AISetFilterLifeSortReference(lp_filter, lp_damage, lp_distance);
}

void libCOMI_gf_CreateExplosionatPointAdvanced (point lp_point, string lp_actor, soundlink lp_sound) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_point != null)) {
        if ((lp_actor != null)) {
            libNtve_gf_CreateActorAtPoint(lp_actor, lp_point);
        }

        if ((lp_sound != null)) {
            SoundPlayAtPoint(lp_sound, PlayerGroupAll(), lp_point, 0.0, 100.0, 0.0);
        }

    }

}

void libCOMI_gf_CatalogFieldValueAdditiveBonus (int lp_catalog, string lp_entry, string lp_fieldPath, int lp_player, string lp_label, fixed lp_percentage, bool lp_fieldIsPeriod) {
    // Variable Declarations
    string lv_dataPath;
    fixed lv_oldDelta;
    fixed lv_defaultValue;
    fixed lv_newDelta;
    fixed lv_changed;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dataPath = (libCOMI_gv_catalogAdditiveBonusPrefix + "_" + IntToString((lp_catalog)) + "_" + (lp_entry) + "_" + lp_label + "_" + (lp_fieldPath));
    lv_oldDelta = DataTableGetFixed(true, lv_dataPath);
    lv_defaultValue = libNtve_gf_CatalogFieldValueGetAsReal(lp_catalog, lp_entry, lp_fieldPath, c_playerAny);

    // Implementation
    if ((lv_defaultValue == 0.0)) {
        return ;
    }

    if ((lp_fieldIsPeriod == true)) {
        lv_newDelta = ((1.0 / ((1.0 / lv_defaultValue) * ((100+lp_percentage)/100))) - lv_defaultValue);
    }
    else {
        lv_newDelta = ((lv_defaultValue*lp_percentage)/100);
    }
    lv_changed = (lv_newDelta-lv_oldDelta);
    CatalogFieldValueModify(lp_catalog, lp_entry, lp_fieldPath, lp_player, FixedToString(lv_changed, c_fixedPrecisionAny), c_upgradeOperationAdd);
    DataTableSetFixed(true, lv_dataPath, lv_newDelta);
}

void libCOMI_gf_InheritDmgandAttackSpeedFromParenttoChild (unit lp_parent, unit lp_child) {
    // Variable Declarations
    string lv_b;
    int lv_bstackcount;
    fixed lv_totaldmgmultiplier;
    fixed lv_totalattackratemultiplier;
    int lv_behaviorplayer;

    // Automatic Variable Declarations
    unit autoE98657EB_u;
    int autoE98657EB_i;

    // Variable Initialization

    // Implementation
    lv_totaldmgmultiplier = 0.0;
    lv_totalattackratemultiplier = 1.0;
    autoE98657EB_u = lp_parent;
    autoE98657EB_i = 1;
    for ( ; autoE98657EB_i <= UnitBehaviorCountAll(autoE98657EB_u) ; autoE98657EB_i += BoolToInt(lv_b == UnitBehaviorGet(autoE98657EB_u, autoE98657EB_i)) ) {
        lv_b = UnitBehaviorGet(autoE98657EB_u, autoE98657EB_i);
        lv_bstackcount = UnitBehaviorCount(lp_parent, lv_b);
        if ((CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lv_b, "BehaviorCategories[" + IntToString(c_unitBehaviorFlagFast) + "]", c_playerAny) == 1)) {
            lv_behaviorplayer = UnitBehaviorEffectPlayer(lp_parent, lv_b, c_effectPlayerOrigin, 0);
            lv_totaldmgmultiplier += (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_b, "Modification.DamageDealtFraction[" + IntToString(0) + "]", lv_behaviorplayer) * lv_bstackcount);
            lv_totalattackratemultiplier *= Pow(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_b, "Modification.AttackSpeedMultiplier", lv_behaviorplayer), lv_bstackcount);
        }

    }
    libCOMI_gf_SetUnitBuffMultiplier(lp_child, lv_totalattackratemultiplier, "TriggerAttackRate", 1.01, libCOMI_ge_UnitBuffMultiplierMethod_Exponential);
    libCOMI_gf_SetUnitBuffMultiplier(lp_child, lv_totaldmgmultiplier, "TriggerDamageMultiplier", 0.01, libCOMI_ge_UnitBuffMultiplierMethod_Linear);
}

void libCOMI_gf_CopyBehaviorToMagazineAmmos (unit lp_unit, string lp_behavior) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "TriggerCopyBehaviorToTarget", "Behavior", UnitGetOwner(lp_unit), (lp_behavior));
    UnitCreateEffectUnit(lp_unit, "TriggerCopyBehaviorToMagazine", lp_unit);
}

string libCOMI_gf_TraingingUnitTypeInAbilCommand (abilcmd lp_abilityCommand, int lp_p, int lp_unitIndex) {
    // Variable Declarations
    string lv_link;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_link = AbilityCommandGetAbility(lp_abilityCommand);
    lv_index = AbilityCommandGetCommand(lp_abilityCommand);

    // Implementation
    return UnitTypeFromString(CatalogFieldValueGet(c_gameCatalogAbil, lv_link, "InfoArray[" + IntToString(lv_index) + "].Unit[" + IntToString(lp_unitIndex) + "]", lp_p));
}

bool libCOMI_gf_HeroCanSpendSkillPoint (unit lp_hero, string lp_learnAbility) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    order lv_order;

    // Automatic Variable Declarations
    int auto8C1B49B3_ae;
    const int auto8C1B49B3_ai = 1;

    // Variable Initialization
    lv_c = 19;

    // Implementation
    auto8C1B49B3_ae = lv_c;
    lv_i = 0;
    for ( ; ( (auto8C1B49B3_ai >= 0 && lv_i <= auto8C1B49B3_ae) || (auto8C1B49B3_ai < 0 && lv_i >= auto8C1B49B3_ae) ) ; lv_i += auto8C1B49B3_ai ) {
        lv_order = Order(AbilityCommand(lp_learnAbility, lv_i));
        if ((UnitOrderIsValid(lp_hero, lv_order) == true)) {
            return true;
        }

    }
    return false;
}

void libCOMI_gf_SetUnitBuffMultiplier (unit lp_unit, fixed lp_multiplierAmount, string lp_behavior, fixed lp_baseValue, int lp_method) {
    // Variable Declarations
    fixed lv_multiplierStack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitBehaviorRemove(lp_unit, lp_behavior, c_unitBehaviorCountAll);
    if ((lp_method == libCOMI_ge_UnitBuffMultiplierMethod_Exponential) && (lp_multiplierAmount != 1.0)) {
        lv_multiplierStack = libNtve_gf_Log(lp_multiplierAmount, lp_baseValue);
        CatalogFieldValueSet(c_gameCatalogBehavior, lp_behavior, "MinPoints", UnitGetOwner(lp_unit), IntToString(CeilingI(lv_multiplierStack)));
        UnitBehaviorAddPlayer(lp_unit, lp_behavior, UnitGetOwner(lp_unit), 1);
    }
    else if ((lp_method == libCOMI_ge_UnitBuffMultiplierMethod_Linear) && (lp_multiplierAmount != 0.0)) {
        lv_multiplierStack = (lp_multiplierAmount / lp_baseValue);
        CatalogFieldValueSet(c_gameCatalogBehavior, lp_behavior, "MinPoints", UnitGetOwner(lp_unit), IntToString(CeilingI(lv_multiplierStack)));
        UnitBehaviorAddPlayer(lp_unit, lp_behavior, UnitGetOwner(lp_unit), 1);
    }
}

void libCOMI_gf_PlayerApplySkinSignal (int lp_player, string lp_skin, bool lp_activateDeactivate, string lp_extraMessage) {
    // Variable Declarations
    string lv_modelOld;
    int lv_i;
    int lv_c;
    string lv_entry;
    actor lv_ar;
    string lv_fromPath;
    string lv_toPath;
    string lv_replacementType;

    // Automatic Variable Declarations
    int auto26807F49_ae;
    const int auto26807F49_ai = 1;

    // Variable Initialization
    lv_modelOld = "";
    lv_c = (CatalogFieldValueCount(c_gameCatalogSkin, lp_skin, "ReplacementArray", c_playerAny) - 1);
    lv_fromPath = "From";
    lv_toPath = "To";

    // Implementation
    PlayerApplySkin(lp_player, lp_skin, lp_activateDeactivate);
    if ((lp_activateDeactivate == false)) {
        lv_fromPath = "To";
        lv_toPath = "From";
    }

    ActorRegionCreate(null, "TriggerRegion", RegionEntireMap());
    lv_ar = libNtve_gf_ActorLastCreated();
    auto26807F49_ae = lv_c;
    lv_i = 0;
    for ( ; ( (auto26807F49_ai >= 0 && lv_i <= auto26807F49_ae) || (auto26807F49_ai < 0 && lv_i >= auto26807F49_ae) ) ; lv_i += auto26807F49_ai ) {
        lv_replacementType = CatalogFieldValueGet(c_gameCatalogSkin, lp_skin, "ReplacementArray[" + IntToString(lv_i) + "].Catalog", c_playerAny);
        if ((lv_replacementType == "Model")) {
            lv_modelOld = CatalogFieldValueGet(c_gameCatalogSkin, lp_skin, (("ReplacementArray[" + IntToString(lv_i) + "]." + lv_fromPath)), c_playerAny);
            if ((lp_extraMessage != null)) {
                ActorRegionSend(lv_ar, c_actorIntersectAgainstRadiusContact, lp_extraMessage, "Model", ("ModelName " + lv_modelOld + "; PlayerId " + IntToString(lp_player) + " " + IntToString(lp_player)));
                ActorRegionSend(lv_ar, c_actorIntersectAgainstRadiusContact, lp_extraMessage, "Unit", ("ModelName " + lv_modelOld + "; PlayerId " + IntToString(lp_player) + " " + IntToString(lp_player)));
            }

        }

    }
    ActorSend(lv_ar, "Destroy");
}

void libCOMI_gf_ButtonReplacement (int lp_player, string lp_button, string lp_buttonReplacement) {
    // Variable Declarations
    string lv_pathName;
    string lv_pathTooltip;
    string lv_pathAlertTooltip;
    string lv_pathHotkey;
    string lv_pathIcon;
    string lv_pathAlertIcon;
    string lv_itPath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pathName = "Name";
    lv_pathTooltip = "Tooltip";
    lv_pathAlertTooltip = "AlertTooltip";
    lv_pathHotkey = "Hotkey";
    lv_pathIcon = "Icon";
    lv_pathAlertIcon = "AlertIcon";
    lv_itPath = "";

    // Implementation
    lv_itPath = lv_pathName;
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, lv_itPath, lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_buttonReplacement, lv_itPath, lp_player));
    lv_itPath = lv_pathTooltip;
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, lv_itPath, lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_buttonReplacement, lv_itPath, lp_player));
    lv_itPath = lv_pathAlertTooltip;
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, lv_itPath, lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_buttonReplacement, lv_itPath, lp_player));
    lv_itPath = lv_pathIcon;
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, lv_itPath, lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_buttonReplacement, lv_itPath, lp_player));
    lv_itPath = lv_pathAlertIcon;
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, lv_itPath, lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_buttonReplacement, lv_itPath, lp_player));
}

void libCOMI_gf_CM_MasteryKerriganArmyVespeneCostList (int lp_player) {
    // Variable Declarations
    int lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryKerriganArmyGasCost", c_techCountCompleteOnly);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("Overseer", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("OverseerSiegeMode", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("Hydralisk", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("HydraliskBurrowed", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("HydraliskLurker", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("HydraliskLurkerBurrowed", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("MutaliskBroodlord", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("BroodLord", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("Ultralisk", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("UltraliskBurrowed", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("HotSTorrasque", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("HotSTorrasqueBurrowed", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("TorrasqueCorpse", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("Lurker", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction("LurkerBurrowed", lp_player, lv_upgradeCount);
}

void libCOMI_gf_CM_MasteryKerriganArmyVespeneCostReduction (string lp_unitType, int lp_player, int lp_upgradeCount) {
    // Variable Declarations
    fixed lv_unitVespeneCostOriginal;
    fixed lv_UnitVespeneCostReductionPerPoint;
    fixed lv_unitVespeneCostReduction;
    int lv_UnitVespeneCostNew;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_UnitVespeneCostReductionPerPoint = 100.0;

    // Implementation
    lv_unitVespeneCostOriginal = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(1) + "]", lp_player));
    lv_unitVespeneCostReduction = (IntToFixed(lp_upgradeCount) * lv_unitVespeneCostOriginal);
    lv_unitVespeneCostReduction = (lv_unitVespeneCostReduction / lv_UnitVespeneCostReductionPerPoint);
    lv_UnitVespeneCostNew = FixedToInt((lv_unitVespeneCostOriginal - lv_unitVespeneCostReduction));
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(1) + "]", lp_player, IntToString(lv_UnitVespeneCostNew));
}

void libCOMI_gf_CM_MasteryZagraRoachLifeIncrease (int lp_player) {
    // Variable Declarations
    fixed lv_upgradeCount;
    fixed lv_healthStarting;
    fixed lv_healthPerPoint;
    fixed lv_healthNew;
    fixed lv_damageStarting;
    fixed lv_damagePerPoint;
    fixed lv_damageNew;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_healthStarting = 145.0;
    lv_healthPerPoint = 29.0;
    lv_healthNew = 145.0;
    lv_damageStarting = 16.0;
    lv_damagePerPoint = 0.32;

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryZagaraRoachDropDamageAndHealth", c_techCountCompleteOnly);
    lv_healthNew = (lv_healthStarting+(lv_upgradeCount*lv_healthPerPoint/10));
    CatalogFieldValueSet(c_gameCatalogUnit, "Roach", "LifeMax", lp_player, IntToString(FixedToInt(lv_healthNew)));
    CatalogFieldValueSet(c_gameCatalogUnit, "Roach", "LifeStart", lp_player, IntToString(FixedToInt(lv_healthNew)));
    CatalogFieldValueSet(c_gameCatalogUnit, "RoachBurrowed", "LifeMax", lp_player, IntToString(FixedToInt(lv_healthNew)));
    CatalogFieldValueSet(c_gameCatalogUnit, "RoachBurrowed", "LifeStart", lp_player, IntToString(FixedToInt(lv_healthNew)));
    lv_damageNew = Ceiling((lv_damageStarting+(lv_upgradeCount*lv_damagePerPoint)));
    CatalogFieldValueSet(c_gameCatalogEffect, "AcidSalivaU", "Amount", lp_player, IntToString(FixedToInt(lv_damageNew)));
    CatalogFieldValueSet(c_gameCatalogEffect, "RoachUMelee", "Amount", lp_player, IntToString(FixedToInt(lv_damageNew)));
    CatalogFieldValueSet(c_gameCatalogEffect, "ZagaraAcidSalivaU", "Amount", lp_player, IntToString(FixedToInt(lv_damageNew)));
    CatalogFieldValueSet(c_gameCatalogEffect, "ZagaraRoachUMelee", "Amount", lp_player, IntToString(FixedToInt(lv_damageNew)));
    CatalogFieldValueSet(c_gameCatalogEffect, "MasteryZagaraRoachDropDamageAndHealthAttackDamageDisplayDummy", "Amount", lp_player, IntToString(FixedToInt((lv_damageNew-lv_damageStarting))));
}

void libCOMI_gf_CM_MasteryKerriganArmyVespeneCostList2 (int lp_player) {
    // Variable Declarations
    int lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryKaraxUnitCost", c_techCountCompleteOnly);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("Zealot", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("ZealotPurifier", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("ZealotPurifierReviveCorpse", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("SentryPurifier", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("SentryPhasing", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("ImmortalAiur", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("Colossus", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("ColossusPurifier", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("PhoenixPurifier", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("Carrier", lp_player, lv_upgradeCount);
    libCOMI_gf_CM_MasteryKaraxArmyCostReduction("CarrierAiur", lp_player, lv_upgradeCount);
}

void libCOMI_gf_CM_MasteryKaraxArmyCostReduction (string lp_unitType, int lp_player, int lp_upgradeCount) {
    // Variable Declarations
    fixed lv_unitCostOriginal;
    fixed lv_UnitVespeneCostReductionPerPoint;
    fixed lv_unitCostReduction;
    int lv_UnitVespeneCostNew;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_UnitVespeneCostReductionPerPoint = 133.3333;

    // Implementation
    lv_unitCostOriginal = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(1) + "]", lp_player));
    lv_unitCostReduction = (IntToFixed(lp_upgradeCount) * lv_unitCostOriginal);
    lv_unitCostReduction = (lv_unitCostReduction / lv_UnitVespeneCostReductionPerPoint);
    lv_UnitVespeneCostNew = FixedToInt((lv_unitCostOriginal - lv_unitCostReduction));
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(1) + "]", lp_player, IntToString(lv_UnitVespeneCostNew));
    lv_unitCostOriginal = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(0) + "]", lp_player));
    lv_unitCostReduction = (IntToFixed(lp_upgradeCount) * lv_unitCostOriginal);
    lv_unitCostReduction = (lv_unitCostReduction / lv_UnitVespeneCostReductionPerPoint);
    lv_UnitVespeneCostNew = FixedToInt((lv_unitCostOriginal - lv_unitCostReduction));
    CatalogFieldValueSet(c_gameCatalogUnit, lp_unitType, "CostResource[" + IntToString(0) + "]", lp_player, IntToString(lv_UnitVespeneCostNew));
}

void libCOMI_gf_CM_MasterySwannSiegeTankImmortalityProtocolCostReduction (int lp_player) {
    // Variable Declarations
    fixed lv_unitVespeneCostOriginal;
    fixed lv_UnitVespeneCostReductionPerPoint;
    fixed lv_unitVespeneCostReduction;
    int lv_UnitVespeneCostNew;
    int lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_UnitVespeneCostReductionPerPoint = 50.0;

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasterySwannImmortalityProtocol", c_techCountCompleteOnly);
    lv_unitVespeneCostOriginal = IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, "SiegeTank", "CostResource[" + IntToString(1) + "]", lp_player));
    lv_unitVespeneCostReduction = (IntToFixed(lv_upgradeCount) * lv_unitVespeneCostOriginal);
    lv_unitVespeneCostReduction = (lv_unitVespeneCostReduction / lv_UnitVespeneCostReductionPerPoint);
    lv_UnitVespeneCostNew = FixedToInt(lv_unitVespeneCostReduction);
    CatalogFieldValueSet(c_gameCatalogUnit, "SiegeTankWreckage", "CostResource[" + IntToString(1) + "]", lp_player, IntToString(lv_UnitVespeneCostNew));
}

void libCOMI_gf_CM_MasteryKerriganImmobilizationWaveDamage (int lp_player) {
    // Variable Declarations
    int lv_upgradeCount;
    fixed lv_damage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryKerriganImmobilizationWaveDamage", c_techCountCompleteOnly);
    lv_damage = (((lv_upgradeCount / 30.0) * 100.0) + 100.0);
    CatalogFieldValueSet(c_gameCatalogEffect, "PsionicLiftDamage", "Amount", lp_player, FixedToString(lv_damage, c_fixedPrecisionAny));
}

void libCOMI_gf_CM_MasteryKerriganMutatingCarapaceDegradation (int lp_player) {
    // Variable Declarations
    int lv_upgradeCount;
    fixed lv_degradation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryKerriganMutatingCarapaceLifeDegradation", c_techCountCompleteOnly);
    lv_degradation = (((lv_upgradeCount / 30.0) * 5.0) - 5.0);
    CatalogFieldValueSet(c_gameCatalogUnit, "K5Kerrigan", "ShieldRegenRate", lp_player, FixedToString(lv_degradation, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "K5KerriganBurrowed", "ShieldRegenRate", lp_player, FixedToString(lv_degradation, c_fixedPrecisionAny));
}

void libCOMI_gf_CM_MasteryKerriganResearchSpeedCost (int lp_player) {
    // Variable Declarations
    int lv_upgradeCount;
    fixed lv_costReduction;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, "MasteryKerriganResearchSpeedandCost", c_techCountCompleteOnly);
    lv_costReduction = ((175.0 * ((30.0 - lv_upgradeCount) + 20.0)) / 50.0);
    CatalogFieldValueSet(c_gameCatalogAbil, "evolutionchamberresearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    CatalogFieldValueSet(c_gameCatalogAbil, "evolutionchamberresearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    lv_costReduction = ((175.0 * ((30.0 - lv_upgradeCount) + 20.0)) / 50.0);
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireResearch", "InfoArray[" + IntToString(1) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireResearch", "InfoArray[" + IntToString(1) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    lv_costReduction = ((175.0 * ((30.0 - lv_upgradeCount) + 20.0)) / 50.0);
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireResearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
    CatalogFieldValueSet(c_gameCatalogAbil, "SpireResearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(FixedToInt(lv_costReduction)));
}

void libCOMI_gf_CM_MasteryResearchCostReduction (int lp_player, string lp_masteryUpgrade, fixed lp_percentReductionPerPoint) {
    // Variable Declarations
    string lv_ability;
    int lv_i;
    int lv_costMinerals;
    int lv_costVespene;
    int lv_upgradeCount;
    fixed lv_r;

    // Automatic Variable Declarations
    int auto0FE65364_ae;
    int auto0FE65364_ai;
    const int auto6642A659_ae = 29;
    const int auto6642A659_ai = 1;

    // Variable Initialization
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, lp_masteryUpgrade, c_techCountCompleteOnly);

    // Implementation
    auto0FE65364_ae = CatalogEntryCount(c_gameCatalogAbil);
    auto0FE65364_ai = 1;
    while (auto0FE65364_ai <= auto0FE65364_ae) {
        lv_ability = CatalogEntryGet(c_gameCatalogAbil, auto0FE65364_ai);
        auto0FE65364_ai = auto0FE65364_ai + 1;
        if ((AbilityClass(lv_ability) == c_classIdCAbilResearch)) {
            lv_i = 0;
            for ( ; ( (auto6642A659_ai >= 0 && lv_i <= auto6642A659_ae) || (auto6642A659_ai < 0 && lv_i >= auto6642A659_ae) ) ; lv_i += auto6642A659_ai ) {
                lv_costMinerals = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(0) + "]", lp_player);
                lv_costVespene = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(1) + "]", lp_player);
                if (((lv_costMinerals > 0) || (lv_costVespene > 0))) {
                    lv_r = (100.0 - (lv_upgradeCount * lp_percentReductionPerPoint));
                    lv_costMinerals = FixedToInt(RoundI(((lv_costMinerals * lv_r) / 100.0)));
                    lv_costVespene = FixedToInt(RoundI(((lv_costVespene * lv_r) / 100.0)));
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(lv_costMinerals));
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(lv_costVespene));
                }

            }
        }

    }
}

void libCOMI_gf_CM_DataUtilInit () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoBBEF2DEB_g;
    string autoCF24B7F2_val;

    // Variable Initialization

    // Implementation
    autoBBEF2DEB_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoBBEF2DEB_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        autoCF24B7F2_val = libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer);
        if (autoCF24B7F2_val == "ProtossKarax") {
            TriggerEnable(libCOMI_gt_CM_KaraxUnitReviveBarrier, true);
            TriggerEnable(libCOMI_gt_CM_KaraxSolarForgeSOAEnergy, true);
        }
        else if (autoCF24B7F2_val == "TerranRaynor") {
            TriggerEnable(libCOMI_gt_CM_HyperionMinimapIconDynamicFacingDisplay, true);
        }
        else if (autoCF24B7F2_val == "ZergKerrigan") {
            TriggerEnable(libCOMI_gt_CM_MasteryKerriganInstantReviveCooldown, true);
            TriggerEnable(libCOMI_gt_KerriganPsiStrike, true);
            TriggerEnable(libCOMI_gt_KerriganEconDrop, true);
            TriggerEnable(libCOMI_gt_BanelingScourgeEconDrop, true);
        }
        else if (autoCF24B7F2_val == "TerranSwann") {
            TriggerEnable(libCOMI_gt_AdvancedConstructionAutoUser, true);
            TriggerEnable(libCOMI_gt_AdvancedConstructionAutoAutoCast, true);
            TriggerEnable(libCOMI_gt_SwannVespeneDroneTrigger, true);
            TriggerEnable(libCOMI_gt_SwannSiegeTankRebuildController, true);
            TriggerEnable(libCOMI_gt_SwannThorRebuildController, true);
            TriggerEnable(libCOMI_gt_SwannLaserDrillCallForHelp, true);
            TriggerEnable(libCOMI_gt_CM_LaserDrillBFGActivate, true);
            TriggerEnable(libCOMI_gt_CM_LaserDrillNukeActivate, true);
            TriggerEnable(libCOMI_gt_CM_LaserDrillBFG, true);
            TriggerEnable(libCOMI_gt_LaserDrillBeamSoundRegionClear, true);
            TriggerEnable(libCOMI_gt_LaserDrillBeamSoundFiring, true);
            TriggerEnable(libCOMI_gt_LaserDrillBFGBeamSoundFiring, true);
            TriggerEnable(libCOMI_gt_LaserDrillNukeBeamSoundFiring, true);
            TriggerEnable(libCOMI_gt_LaserDrillNukeBeamSoundRegionClear, true);
        }
        else if (autoCF24B7F2_val == "ProtossAlarak") {
            TriggerEnable(libCOMI_gt_CM_Alarak_Sacrific_Scale, true);
            TriggerEnable(libCOMI_gt_CM_Alarak_Upgrade, true);
            TriggerEnable(libCOMI_gt_CM_AlarakLightningStrikes_FlashOn, true);
            TriggerEnable(libCOMI_gt_CM_AlarakLightningStrikes_FlashOff, true);
            TriggerEnable(libCOMI_gt_CM_AlarakLightningStrikes_Sacriface, true);
            TriggerEnable(libCOMI_gt_CM_Alarak_SoulAbsorption_Impact, true);
            TriggerEnable(libCOMI_gt_CM_Alarak_SoulAbsorption_Launch, true);
            TriggerEnable(libCOMI_gt_CM_Alarak_EmpowerAdd, true);
            TriggerEnable(libCOMI_gt_CM_Alarak_EmpowerRemove, true);
            TriggerEnable(libCOMI_gt_CM_Alarak_EmpowerWorshiperAdd, true);
            TriggerEnable(libCOMI_gt_CM_Alarak_EmpowerWorshiperRemove, true);
            TriggerEnable(libCOMI_gt_CM_Alarak_EmpowerUpdate, true);
        }
        else if (autoCF24B7F2_val == "ZergZagara") {
            TriggerEnable(libCOMI_gt_RoachDropScale, true);
            TriggerEnable(libCOMI_gt_CM_Zagara_WeaponSwap, true);
        }
        else {
        }
    }
}

void libCOMI_gf_CM_DetectionUpgradesApply () {
    // Variable Declarations
    int lv_i;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoFA1078A4_g;
    const int auto4E1B22AE_ae = 15;
    const int auto4E1B22AE_ai = 1;

    // Variable Initialization

    // Implementation
    autoFA1078A4_g = libCOOC_gf_CommanderPlayers();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoFA1078A4_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_itPlayer, "DetectionFriendly", 1);
    }
    lv_i = 3;
    for ( ; ( (auto4E1B22AE_ai >= 0 && lv_i <= auto4E1B22AE_ae) || (auto4E1B22AE_ai < 0 && lv_i >= auto4E1B22AE_ae) ) ; lv_i += auto4E1B22AE_ai ) {
        if (((libNtve_gf_PlayerIsEnemy(1, lv_i, libNtve_ge_PlayerRelation_Enemy) == true) || (libNtve_gf_PlayerIsEnemy(1, lv_i, libNtve_ge_PlayerRelation_EnemyMutual) == true)) && (libCOOC_gf_PlayerIsCommander(lv_i) == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "DetectionEnemy", 1);
        }

    }
}

void libCOMI_gf_CM_Abathur_BiomassSetStack (unit lp_biomass, int lp_stack) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetCustomValue(lp_biomass, 63, IntToFixed(lp_stack));
    TextExpressionSetToken("Param/Expression/lib_COMI_9DEC6D4D", "Stack", IntToText(lp_stack));
    UnitSetInfoTip(lp_biomass, TextExpressionAssemble("Param/Expression/lib_COMI_9DEC6D4D"));
}

int libCOMI_gf_CM_Abathur_BiomassGetStack (unit lp_biomass) {
    // Variable Declarations
    int lv_stack;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stack = FixedToInt(UnitGetCustomValue(lp_biomass, 63));

    // Implementation
    return lv_stack;
}

void libCOMI_gf_CM_Abathur_BiomassTransfer (int lp_indexPlayer, unit lp_trainUnit, int lp_biomassBuff100Count, int lp_biomassBuff10Count, int lp_biomassBuff1Count) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorAddPlayer(lp_trainUnit, "BiomassBuff100", lp_indexPlayer, lp_biomassBuff100Count);
    UnitBehaviorAddPlayer(lp_trainUnit, "BiomassBuff10", lp_indexPlayer, lp_biomassBuff10Count);
    UnitBehaviorAddPlayer(lp_trainUnit, "BiomassBuff1", lp_indexPlayer, lp_biomassBuff1Count);
    UnitCreateEffectUnit(lp_trainUnit, "PostMorphHeal", lp_trainUnit);
}

void libCOMI_gf_CM_Abathur_BiomassScale (unit lp_biomassUnit, bool lp_instantScale) {
    // Variable Declarations
    fixed lv_customScale;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_customScale = (UnitGetCustomValue(lp_biomassUnit, 63) / 100.0);
    lv_customScale += 0.8;
    if ((lv_customScale > 1.8)) {
        lv_customScale = 1.8;
    }

    if ((lp_instantScale == true)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_AED708CF", "A", FixedToText(lv_customScale, c_fixedPrecisionAny));
        ActorSendAsText(libNtve_gf_MainActorofUnit(lp_biomassUnit), TextExpressionAssemble("Param/Expression/lib_COMI_AED708CF"));
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COMI_139DC70E", "A", FixedToText(lv_customScale, c_fixedPrecisionAny));
        ActorSendAsText(libNtve_gf_MainActorofUnit(lp_biomassUnit), TextExpressionAssemble("Param/Expression/lib_COMI_139DC70E"));
    }
}

void libCOMI_gf_CM_Abathur_BiomassMerge (unit lp_biomassUnit, int lp_biomassUnitCount) {
    // Variable Declarations
    fixed lv_biomassCongealRadius;
    int lv_nearbyBiomassMaxCount;
    unit lv_nearbyBiomassMaxCountUnit;

    // Automatic Variable Declarations
    unitgroup autoDB6627FC_g;
    int autoDB6627FC_u;
    unit autoDB6627FC_var;

    // Variable Initialization
    lv_biomassCongealRadius = 4.0;

    // Implementation
    autoDB6627FC_g = UnitGroup("BiomassPickup", UnitGetOwner(lp_biomassUnit), RegionCircle(UnitGetPosition(lp_biomassUnit), lv_biomassCongealRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDB6627FC_u = UnitGroupCount(autoDB6627FC_g, c_unitCountAll);
    for (;; autoDB6627FC_u -= 1) {
        autoDB6627FC_var = UnitGroupUnitFromEnd(autoDB6627FC_g, autoDB6627FC_u);
        if (autoDB6627FC_var == null) { break; }
        if (((UnitGetCustomValue(autoDB6627FC_var, 63) > lv_nearbyBiomassMaxCount) && (autoDB6627FC_var != lp_biomassUnit) && (UnitHasBehavior2(autoDB6627FC_var, "BiomassTravelling") == false))) {
            lv_nearbyBiomassMaxCount = FixedToInt(UnitGetCustomValue(autoDB6627FC_var, 63));
            lv_nearbyBiomassMaxCountUnit = autoDB6627FC_var;
        }

    }
    if ((lv_nearbyBiomassMaxCountUnit != null)) {
        libCOMI_gf_CM_Abathur_BiomassSetStack(lv_nearbyBiomassMaxCountUnit, FixedToInt((UnitGetCustomValue(lv_nearbyBiomassMaxCountUnit, 63) + lp_biomassUnitCount)));
        UnitBehaviorAdd(lp_biomassUnit, "BiomassTravelling", lp_biomassUnit, 1);
        UnitCreateEffectUnit(lp_biomassUnit, "BiomassPickupFullLM", lv_nearbyBiomassMaxCountUnit);
        libCOMI_gf_CM_Abathur_BiomassScale(lv_nearbyBiomassMaxCountUnit, false);
    }

}

void libCOMI_gf_CM_DehakaConsumeFloatText (text lp_text, int lp_p, point lp_loc) {
    // Automatic Variable Declarations
    // Implementation
    TextTagCreate(lp_text, 24, lp_loc, 4.0, true, false, PlayerGroupSingle(lp_p));
    TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, 2.0);
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 100.00));
}

void libCOMI_gf_CM_DehakaConsumeUpdatePsiExplodeDamage (int lp_dehakaPlayer, unit lp_dehakaUnit, fixed lp_maguroMemorialWeaponDamage) {
    // Variable Declarations
    fixed lv_weaponDmgScalar;
    fixed lv_totalDmg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_weaponDmgScalar = 2.0;
    lv_totalDmg = (lp_maguroMemorialWeaponDamage * lv_weaponDmgScalar);

    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, libCOMI_gv_c_DehakaConsumeEffectPsiExplodeWeaponDmgLink, "Amount", lp_dehakaPlayer, (FixedToString(lv_totalDmg, c_fixedPrecisionAny)));
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogEffect, "DehakaConsumeEffectPsionicSearch", "AreaArray[" + IntToString(0) + "].Radius", lp_dehakaPlayer, UnitGetPropertyFixed(lp_dehakaUnit, c_unitPropRadius, c_unitPropCurrent), c_upgradeOperationAdd);
}

void libCOMI_gf_CM_Dehaka_UpdateDehakaLeapRadiusAmount (unit lp_dehaka, fixed lp_baseAttackDmg) {
    // Variable Declarations
    fixed lv_unitRadius;
    fixed lv_abilRadius;
    int lv_i;
    int lv_j;
    int lv_player;

    // Automatic Variable Declarations
    int auto4A212433_ae;
    const int auto4A212433_ai = 1;
    int auto42CB24AC_ae;
    const int auto42CB24AC_ai = 1;

    // Variable Initialization
    lv_unitRadius = UnitGetPropertyFixed(lp_dehaka, c_unitPropRadius, c_unitPropCurrent);
    lv_abilRadius = (lv_unitRadius + libCOMI_gv_cM_DehakaLeapExtraRadius);
    lv_player = UnitGetOwner(lp_dehaka);

    // Implementation
    auto4A212433_ae = (CatalogFieldValueCount(c_gameCatalogEffect, "DehakaLeapStompDamageSwitch", "CaseArray", c_playerAny) - 1);
    lv_i = 0;
    for ( ; ( (auto4A212433_ai >= 0 && lv_i <= auto4A212433_ae) || (auto4A212433_ai < 0 && lv_i >= auto4A212433_ae) ) ; lv_i += auto4A212433_ai ) {
        libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogEffect, libCOMI_gv_cM_DehakaDamageEffectLink[lv_i], "Amount", lv_player, lp_baseAttackDmg, c_upgradeOperationMultiply);
        CatalogFieldValueModify(c_gameCatalogEffect, libCOMI_gv_cM_DehakaDamageEffectLink[lv_i], "Amount", lv_player, "25", c_upgradeOperationAdd);
        auto42CB24AC_ae = (CatalogFieldValueCount(c_gameCatalogEffect, libCOMI_gv_cM_DehakaDamageEffectLink[lv_i], "AreaArray", c_playerAny) - 1);
        lv_j = 0;
        for ( ; ( (auto42CB24AC_ai >= 0 && lv_j <= auto42CB24AC_ae) || (auto42CB24AC_ai < 0 && lv_j >= auto42CB24AC_ae) ) ; lv_j += auto42CB24AC_ai ) {
            libNtve_gf_CatalogReferenceModifyBasedOnDefaultValue(libCOMI_gv_cM_DehakaLeapDamageRadiusReference[lv_i][lv_j], lv_player, lv_abilRadius, c_upgradeOperationMultiply);
        }
    }
}

void libCOMI_gf_CM_Dehaka_SetLevelValues (int lp_player) {
    // Variable Declarations
    int lv_i;
    fixed lv_r;
    int lv_xPTotal;

    // Automatic Variable Declarations
    int autoEC066163_ae;
    const int autoEC066163_ai = 1;

    // Variable Initialization

    // Implementation
    autoEC066163_ae = (libCOMI_gv_cM_DehakaLevelsMax[lp_player] - 1);
    lv_i = 0;
    for ( ; ( (autoEC066163_ai >= 0 && lv_i <= autoEC066163_ae) || (autoEC066163_ai < 0 && lv_i >= autoEC066163_ae) ) ; lv_i += autoEC066163_ai ) {
        lv_xPTotal += CatalogFieldValueGetAsInt(c_gameCatalogBehavior, libCOMI_gv_cM_DehakaVeterencyBehavior[lp_player], "VeterancyLevelArray[" + IntToString(lv_i) + "].MinVeterancyXP", lp_player);
        libCOMI_gv_cM_DehakaNextLevelValueArray[lv_i] = lv_xPTotal;
    }
}

void libCOMI_gf_CM_Dehaka_LevelUp (int lp_dehakaPlayer, unit lp_dehakaUnit) {
    // Variable Declarations
    fixed lv_dehakaScalePerLevel;
    fixed lv_dehakaBaseScale;
    fixed lv_dehakaScaleResult;
    int lv_dehakaAttackDamagePerLevel;
    int lv_dehakaAttackDamageBase;
    int lv_dehakaAttackDamageResult;
    unit lv_dehakaUnit;
    fixed lv_dehakaTurnSpeed;
    fixed lv_dehakaAbilityArcs;
    int lv_dehakaNextLevelCheck;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dehakaScalePerLevel = 0.1;
    lv_dehakaBaseScale = 0.5;
    lv_dehakaAttackDamagePerLevel = 10;
    lv_dehakaAttackDamageBase = 20;
    lv_dehakaUnit = libCOMI_gv_cM_HeroUnit[lp_dehakaPlayer];

    // Implementation
    if ((libCOMI_gf_HeroCanSpendSkillPoint(lv_dehakaUnit, "DehakaLearn") == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(lv_dehakaUnit), "HaloStart");
        UISetButtonFaceHighlighted(PlayerGroupSingle(lp_dehakaPlayer), "DehakaLearnAbilities", true);
    }
    else {
        ActorSend(libNtve_gf_MainActorofUnit(lv_dehakaUnit), "HaloStop");
        UISetButtonFaceHighlighted(PlayerGroupSingle(lp_dehakaPlayer), "DehakaLearnAbilities", false);
    }
    if ((libCOOC_gf_ActiveCommanderForPlayer(lp_dehakaPlayer) != "ZergDehaka")) {
        return ;
    }

    if ((libCOMI_gv_cM_Dehaka_CurrentLevel[lp_dehakaPlayer] < libCOMI_gv_cM_DehakaLevelsMax[lp_dehakaPlayer])) {
        libCOMI_gv_cM_Dehaka_CurrentLevel[lp_dehakaPlayer] = UnitLevel(lv_dehakaUnit);
        if ((libCOMI_gv_cM_Dehaka_CurrentLevel[lp_dehakaPlayer] >= libCOMI_gv_cM_DehakaLevelsMax[lp_dehakaPlayer])) {
            CatalogFieldValueSet(c_gameCatalogEffect, "EssenceDehakaDummyCurrentLevel", "Amount", lp_dehakaPlayer, IntToString(libCOMI_gv_cM_Dehaka_CurrentLevel[lp_dehakaPlayer]));
            CatalogFieldValueSet(c_gameCatalogEffect, "EssenceDehakaDummyNextLevel", "Amount", lp_dehakaPlayer, "0");
            SoundPlayOnUnitForPlayer(SoundLink("MusicDehakaMaxLevel", -1), lp_dehakaPlayer, PlayerGroupSingle(lp_dehakaPlayer), lp_dehakaUnit, 1.0, 100.0, 0.0);
        }
        else {
            CatalogFieldValueSet(c_gameCatalogEffect, "EssenceDehakaDummyCurrentLevel", "Amount", lp_dehakaPlayer, IntToString(libCOMI_gv_cM_Dehaka_CurrentLevel[lp_dehakaPlayer]));
            lv_dehakaNextLevelCheck = libCOMI_gv_cM_Dehaka_CurrentLevel[lp_dehakaPlayer];
            CatalogFieldValueSet(c_gameCatalogEffect, "EssenceDehakaDummyNextLevel", "Amount", lp_dehakaPlayer, IntToString((libCOMI_gv_cM_DehakaNextLevelValueArray[lv_dehakaNextLevelCheck] - libCOMI_gv_cM_Dehaka_TotalEssence[lp_dehakaPlayer])));
        }
    }
    else {
        CatalogFieldValueSet(c_gameCatalogEffect, "EssenceDehakaDummyNextLevel", "Amount", lp_dehakaPlayer, "0");
    }
    lv_dehakaScaleResult = ((libCOMI_gv_cM_Dehaka_CurrentLevel[lp_dehakaPlayer] * lv_dehakaScalePerLevel) + lv_dehakaBaseScale);
    ActorSend(libNtve_gf_MainActorofUnit(lv_dehakaUnit), libNtve_gf_SetScale(lv_dehakaScaleResult, lv_dehakaScaleResult, lv_dehakaScaleResult, 0.0));
    CatalogFieldValueSet(c_gameCatalogActor, "DehakaCoop", "Scale", lp_dehakaPlayer, (FixedToString(lv_dehakaScaleResult, c_fixedPrecisionAny)));
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, "DehakaCoop", "Radius", lp_dehakaPlayer, ((libCOMI_gv_cM_Dehaka_CurrentLevel[lp_dehakaPlayer] * 0.0625) + 0.5));
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, "DehakaCoopBurrowed", "Radius", lp_dehakaPlayer, ((libCOMI_gv_cM_Dehaka_CurrentLevel[lp_dehakaPlayer] * 0.0625) + 0.5));
    lv_dehakaAttackDamageResult = (lv_dehakaAttackDamageBase + ((libCOMI_gv_cM_Dehaka_CurrentLevel[lp_dehakaPlayer] - 1) * lv_dehakaAttackDamagePerLevel));
    CatalogFieldValueSet(c_gameCatalogEffect, "DehakaCoop", "Amount", lp_dehakaPlayer, (IntToString(lv_dehakaAttackDamageResult)));
    CatalogFieldValueSet(c_gameCatalogEffect, "DehakaCoopAirDamage", "Amount", lp_dehakaPlayer, (IntToString(lv_dehakaAttackDamageResult)));
    CatalogFieldValueSet(c_gameCatalogEffect, "MammothBreathDamage", "Amount", lp_dehakaPlayer, (IntToString(lv_dehakaAttackDamageResult)));
    libCOMI_gf_CM_DehakaConsumeUpdatePsiExplodeDamage(lp_dehakaPlayer, lp_dehakaUnit, lv_dehakaAttackDamageResult);
    CatalogFieldValueSet(c_gameCatalogEffect, "MammothBeamDamage", "Amount", lp_dehakaPlayer, (FixedToString((lv_dehakaAttackDamageResult * 0.25), c_fixedPrecisionAny)));
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogAbil, "EssencePickup", "Range[" + IntToString(0) + "]", lp_dehakaPlayer, (libCOMI_gv_cM_Dehaka_CurrentLevel[lp_dehakaPlayer] * 0.2), c_upgradeOperationAdd);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogAbil, "EssencePickup", "AutoCastRange", lp_dehakaPlayer, (libCOMI_gv_cM_Dehaka_CurrentLevel[lp_dehakaPlayer] * 0.2), c_upgradeOperationAdd);
    libCOMI_gf_CM_Dehaka_UpdateDehakaLeapRadiusAmount(lv_dehakaUnit, lv_dehakaAttackDamageResult);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogEffect, "DehakaCloakAuraSearch", "AreaArray[" + IntToString(0) + "].Radius", lp_dehakaPlayer, UnitGetPropertyFixed(lv_dehakaUnit, c_unitPropRadius, c_unitPropCurrent), c_upgradeOperationAdd);
    libCOMI_gv_cM_DehakaEatReviveTimerAdjustment = ((libCOMI_gv_cM_Dehaka_CurrentLevel[lp_dehakaPlayer] * 1) - 24);
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogEffect, "DehakaDroneReviveTimerRefLink", "Amount", lp_dehakaPlayer, libCOMI_gv_cM_DehakaEatReviveTimerAdjustment);
    if (((libCOMI_gf_DifficultyLevelForPlayerCoop(lp_dehakaPlayer) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(lp_dehakaPlayer) == 4)) && (libCOMI_gv_cM_Dehaka_CurrentLevel[lp_dehakaPlayer] >= 6) && (GameGetMissionTime() < 360.0)) {
        AchievementAward(lp_dehakaPlayer, "CommanderDehakaLevelUp");
    }

    lv_dehakaTurnSpeed = (800.0 - (libCOMI_gv_cM_Dehaka_CurrentLevel[lp_dehakaPlayer] * 40.0));
    if ((lv_dehakaTurnSpeed < 300.0)) {
        lv_dehakaTurnSpeed = 300.0;
    }

    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, "DehakaCoop", "TurningRate", lp_dehakaPlayer, lv_dehakaTurnSpeed);
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, "DehakaCoop", "StationaryTurningRate", lp_dehakaPlayer, lv_dehakaTurnSpeed);
    lv_dehakaAbilityArcs = (libCOMI_gv_cM_Dehaka_CurrentLevel[lp_dehakaPlayer] * 20.0);
    if ((lv_dehakaAbilityArcs > 360.0)) {
        lv_dehakaAbilityArcs = 360.0;
    }

    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "DehakaLeapStomp", "Arc", lp_dehakaPlayer, lv_dehakaAbilityArcs);
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "MammothBreath", "Arc", lp_dehakaPlayer, lv_dehakaAbilityArcs);
}

void libCOMI_gf_CM_Dehaka_EssenceSetStack (unit lp_essence, int lp_stack) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetCustomValue(lp_essence, 63, IntToFixed(lp_stack));
    TextExpressionSetToken("Param/Expression/lib_COMI_CF4EE9FC", "Stack", IntToText(lp_stack));
    UnitSetInfoTip(lp_essence, TextExpressionAssemble("Param/Expression/lib_COMI_CF4EE9FC"));
}

int libCOMI_gf_CM_Dehaka_EssenceGetStack (unit lp_essence) {
    // Variable Declarations
    int lv_stack;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_stack = FixedToInt(UnitGetCustomValue(lp_essence, 63));

    // Implementation
    return lv_stack;
}

void libCOMI_gf_CM_Dehaka_EssenceTransfer (int lp_indexPlayer, unit lp_trainUnit, int lp_essenceBuff100Count, int lp_essenceBuff10Count, int lp_essenceBuff1Count) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorAddPlayer(lp_trainUnit, "EssenceBuff100", lp_indexPlayer, lp_essenceBuff100Count);
    UnitBehaviorAddPlayer(lp_trainUnit, "EssenceBuff10", lp_indexPlayer, lp_essenceBuff10Count);
    UnitBehaviorAddPlayer(lp_trainUnit, "EssenceBuff1", lp_indexPlayer, lp_essenceBuff1Count);
    UnitCreateEffectUnit(lp_trainUnit, "PostMorphHeal", lp_trainUnit);
}

void libCOMI_gf_CM_Dehaka_EssenceScale (unit lp_essenceUnit, bool lp_instantScale) {
    // Variable Declarations
    fixed lv_customScale;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_customScale = (UnitGetCustomValue(lp_essenceUnit, 63) / 100.0);
    lv_customScale += 0.8;
    if ((lv_customScale > 1.8)) {
        lv_customScale = 1.8;
    }

    if ((lp_instantScale == true)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_43337540", "A", FixedToText(lv_customScale, c_fixedPrecisionAny));
        ActorSendAsText(libNtve_gf_MainActorofUnit(lp_essenceUnit), TextExpressionAssemble("Param/Expression/lib_COMI_43337540"));
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COMI_61EDA91E", "A", FixedToText(lv_customScale, c_fixedPrecisionAny));
        ActorSendAsText(libNtve_gf_MainActorofUnit(lp_essenceUnit), TextExpressionAssemble("Param/Expression/lib_COMI_61EDA91E"));
    }
}

void libCOMI_gf_CM_Dehaka_EssenceMerge (unit lp_essenceUnit, int lp_essenceUnitCount) {
    // Variable Declarations
    fixed lv_essenceCongealRadius;
    int lv_nearbyEssenceMaxCount;
    unit lv_nearbyEssenceMaxCountUnit;

    // Automatic Variable Declarations
    unitgroup autoDA80EBB9_g;
    int autoDA80EBB9_u;
    unit autoDA80EBB9_var;

    // Variable Initialization
    lv_essenceCongealRadius = 1.9;

    // Implementation
    autoDA80EBB9_g = UnitGroup("EssencePickup", UnitGetOwner(lp_essenceUnit), RegionCircle(UnitGetPosition(lp_essenceUnit), lv_essenceCongealRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDA80EBB9_u = UnitGroupCount(autoDA80EBB9_g, c_unitCountAll);
    for (;; autoDA80EBB9_u -= 1) {
        autoDA80EBB9_var = UnitGroupUnitFromEnd(autoDA80EBB9_g, autoDA80EBB9_u);
        if (autoDA80EBB9_var == null) { break; }
        if (((UnitGetCustomValue(autoDA80EBB9_var, 63) > lv_nearbyEssenceMaxCount) && (autoDA80EBB9_var != lp_essenceUnit) && (UnitHasBehavior2(autoDA80EBB9_var, "EssenceTravelling") == false))) {
            lv_nearbyEssenceMaxCount = FixedToInt(UnitGetCustomValue(autoDA80EBB9_var, 63));
            lv_nearbyEssenceMaxCountUnit = autoDA80EBB9_var;
        }

    }
    if ((lv_nearbyEssenceMaxCountUnit != null)) {
        libCOMI_gf_CM_Dehaka_EssenceSetStack(lv_nearbyEssenceMaxCountUnit, FixedToInt((UnitGetCustomValue(lv_nearbyEssenceMaxCountUnit, 63) + lp_essenceUnitCount)));
        UnitBehaviorAdd(lp_essenceUnit, "EssenceTravelling", lp_essenceUnit, 1);
        UnitCreateEffectUnit(lp_essenceUnit, "EssencePickupFullLM", lv_nearbyEssenceMaxCountUnit);
        libCOMI_gf_CM_Dehaka_EssenceScale(lv_nearbyEssenceMaxCountUnit, false);
    }

}

void libCOMI_gf_TransferGuardianShell (unit lp_source, unit lp_target) {
    // Variable Declarations
    string lv_itbehavior;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitBehaviorTransfer(lp_source, lp_target, "DarkTemplarRecentlyRecalled", c_unitBehaviorCountAll);
    UnitBehaviorTransfer(lp_source, lp_target, "SOARecallOnDeathRecentlyRecalled", c_unitBehaviorCountAll);
    UnitBehaviorTransfer(lp_source, lp_target, "SOAHeroicShieldWeakness", c_unitBehaviorCountAll);
    UnitBehaviorTransfer(lp_source, lp_target, "SOAHeroicShieldImmunity", c_unitBehaviorCountAll);
}

trigger auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_Trigger = null;
int auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_lp_player;
abilcmd auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_lp_cmd;
point auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_lp_targetPoint;

void libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread (int lp_player, abilcmd lp_cmd, point lp_targetPoint) {
    auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_lp_player = lp_player;
    auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_lp_cmd = lp_cmd;
    auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_lp_targetPoint = lp_targetPoint;

    if (auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_Trigger == null) {
        auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_Trigger = TriggerCreate("auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_lp_player;
    abilcmd lp_cmd = auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_lp_cmd;
    point lp_targetPoint = auto_libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread_lp_targetPoint;

    // Variable Declarations
    fixed lv_cooldown;
    string lv_cooldownLink;
    point lv_placementTarget;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(lp_cmd), "Cost[" + IntToString(0) + "].Cooldown.Link", lp_player);

    // Implementation
    lv_placementTarget = UnitTypePlacementFromPoint("FenixDragoon", lp_player, lp_targetPoint, 500.0);
    VisRevealArea(lp_player, RegionCircle(lv_placementTarget, 10.0), 5.0, false);
    Wait(4.0, c_timeGame);
    lv_placementTarget = UnitTypePlacementFromPoint("FenixDragoon", lp_player, lp_targetPoint, 500.0);
    lv_cooldown = PlayerGetCooldown(lp_player, lv_cooldownLink);
    libNtve_gf_PlayerRemoveCooldown(lp_player, lv_cooldownLink);
    UnitIssueOrder(libCOUI_gv_cU_GPUnit[lp_player], OrderTargetingPoint(lp_cmd, lv_placementTarget), c_orderQueueReplace);
    PlayerAddCooldown(lp_player, lv_cooldownLink, lv_cooldown);
    return true;
}

void libCOMI_gf_CM_Fenix_VitalMatch (unit lp_hero) {
    // Variable Declarations
    int lv_i;
    int lv_player;
    int lv_suitIndex;

    // Automatic Variable Declarations
    string auto49AD353E_val;

    // Variable Initialization
    lv_player = UnitGetOwner(lp_hero);

    // Implementation
    auto49AD353E_val = UnitGetType(lp_hero);
    if (auto49AD353E_val == "FenixCoop") {
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[1][lv_player], c_unitPropEnergy, UnitGetPropertyFixed(lp_hero, c_unitPropEnergy, c_unitPropCurrent));
        if (true) {
            lv_suitIndex = 1;
            UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[1][lv_player], c_unitPropLife, (UnitGetPropertyFixed(lp_hero, c_unitPropLife, c_unitPropCurrent) + 1.0));
            UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[1][lv_player], c_unitPropShields, UnitGetPropertyFixed(lp_hero, c_unitPropShields, c_unitPropCurrent));
        }

        libCOUI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMI_gv_cM_Fenix_Suits[1][lv_player], UnitGetOwner(lp_hero), 1);
    }
    else if (auto49AD353E_val == "FenixDragoon") {
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[2][lv_player], c_unitPropEnergy, UnitGetPropertyFixed(lp_hero, c_unitPropEnergy, c_unitPropCurrent));
        if (true) {
            lv_suitIndex = 2;
            UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[2][lv_player], c_unitPropLife, (UnitGetPropertyFixed(lp_hero, c_unitPropLife, c_unitPropCurrent) + 1.0));
            UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[2][lv_player], c_unitPropShields, UnitGetPropertyFixed(lp_hero, c_unitPropShields, c_unitPropCurrent));
        }

        libCOUI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMI_gv_cM_Fenix_Suits[2][lv_player], UnitGetOwner(lp_hero), 2);
    }
    else if (auto49AD353E_val == "FenixArbiter") {
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[3][lv_player], c_unitPropEnergy, UnitGetPropertyFixed(lp_hero, c_unitPropEnergy, c_unitPropCurrent));
        if (true) {
            lv_suitIndex = 3;
            UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[3][lv_player], c_unitPropLife, (UnitGetPropertyFixed(lp_hero, c_unitPropLife, c_unitPropCurrent) + 1.0));
            UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[3][lv_player], c_unitPropShields, UnitGetPropertyFixed(lp_hero, c_unitPropShields, c_unitPropCurrent));
        }

        libCOUI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMI_gv_cM_Fenix_Suits[3][lv_player], UnitGetOwner(lp_hero), 3);
    }
    else {
    }
    if ((libCOMI_gv_cM_Fenix_SuicideLife[lv_player] > 0.0)) {
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[lv_suitIndex][lv_player], c_unitPropLife, libCOMI_gv_cM_Fenix_SuicideLife[lv_player]);
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[lv_suitIndex][lv_player], c_unitPropShields, libCOMI_gv_cM_Fenix_SuicideShield[lv_player]);
        libCOMI_gv_cM_Fenix_SuicideLife[lv_player] = 0.0;
        libCOMI_gv_cM_Fenix_SuicideLife[lv_player] = 0.0;
    }

}

void libCOMI_gf_CM_Fenix_SetActiveHeroUIState (unit lp_unit, bool lp_active) {
    // Variable Declarations
    int lv_heroUnitID;

    // Automatic Variable Declarations
    string autoA3829BFE_val;

    // Variable Initialization

    // Implementation
    autoA3829BFE_val = UnitGetType(lp_unit);
    if (autoA3829BFE_val == "FenixCoop") {
        lv_heroUnitID = 1;
    }
    else if (autoA3829BFE_val == "FenixDragoon") {
        lv_heroUnitID = 2;
    }
    else if (autoA3829BFE_val == "FenixArbiter") {
        lv_heroUnitID = 3;
    }
    else {
        lv_heroUnitID = 0;
    }
    if ((lp_active == false)) {
        DialogControlSetAnimationState(libCOUI_gv_cU_GPCmdButtons[lv_heroUnitID][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
    }
    else if ((lp_active == true) && (lv_heroUnitID == 1)) {
        DialogControlSetAnimationState(libCOUI_gv_cU_GPCmdButtons[1][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "True");
        DialogControlSetAnimationState(libCOUI_gv_cU_GPCmdButtons[2][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
        DialogControlSetAnimationState(libCOUI_gv_cU_GPCmdButtons[3][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
    }
    else if ((lp_active == true) && (lv_heroUnitID == 2)) {
        DialogControlSetAnimationState(libCOUI_gv_cU_GPCmdButtons[2][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "True");
        DialogControlSetAnimationState(libCOUI_gv_cU_GPCmdButtons[1][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
        DialogControlSetAnimationState(libCOUI_gv_cU_GPCmdButtons[3][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
    }
    else if ((lp_active == true) && (lv_heroUnitID == 3)) {
        DialogControlSetAnimationState(libCOUI_gv_cU_GPCmdButtons[3][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "True");
        DialogControlSetAnimationState(libCOUI_gv_cU_GPCmdButtons[1][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
        DialogControlSetAnimationState(libCOUI_gv_cU_GPCmdButtons[2][UnitGetOwner(lp_unit)], PlayerGroupAll(), "ActiveState", "False");
    }
}

void libCOMI_gf_CM_Fenix_SetActiveHeroRally (unit lp_unit) {
    // Variable Declarations
    unit lv_ralliedUnit;

    // Automatic Variable Declarations
    unitgroup autoE1527CA3_g;
    int autoE1527CA3_u;

    // Variable Initialization

    // Implementation
    autoE1527CA3_g = libCOMI_gv_cM_Fenix_RalliedGroup;
    autoE1527CA3_u = UnitGroupCount(autoE1527CA3_g, c_unitCountAll);
    for (;; autoE1527CA3_u -= 1) {
        lv_ralliedUnit = UnitGroupUnitFromEnd(autoE1527CA3_g, autoE1527CA3_u);
        if (lv_ralliedUnit == null) { break; }
        UnitIssueOrder(lv_ralliedUnit, OrderTargetingUnit(AbilityCommand("Rally", 0), lp_unit), c_orderQueueAddToFront);
    }
}

void libCOMI_gf_CM_Fenix_AvengingProtocol (int lp_group, int lp_player, int lp_stacksToApply) {
    // Variable Declarations
    fixed lv_moveSpeedHastePerStack;
    fixed lv_attackSpeedHastePerStack;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_moveSpeedHastePerStack = 0.05;
    lv_attackSpeedHastePerStack = 0.1;

    // Implementation
    if ((TechTreeUpgradeCount(lp_player, "FenixChampionSwapBoost", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[lp_group] += lp_stacksToApply;
        if ((libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[lp_group] > libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBuffStackMaxCount[lp_group])) {
            libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[lp_group] = libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBuffStackMaxCount[lp_group];
        }

        CatalogFieldValueModify(c_gameCatalogBehavior, libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBehaviors[lp_group], "Modification.MoveSpeedMultiplier", lp_player, FixedToString((1.0 + (libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[lp_group] * lv_moveSpeedHastePerStack)), c_fixedPrecisionAny), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogBehavior, libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBehaviors[lp_group], "Modification.AttackSpeedMultiplier", lp_player, FixedToString((1.0 + (libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[lp_group] * lv_attackSpeedHastePerStack)), c_fixedPrecisionAny), c_upgradeOperationSet);
        UnitBehaviorAdd(libCOMI_gv_cM_Fenix_ChampionUnit[lp_group][lp_player], libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBehaviors[lp_group], libCOMI_gv_cM_Fenix_ChampionUnit[lp_group][lp_player], 1);
    }

}

void libCOMI_gf_CM_Fenix_UpdateNetworkValues (int lp_group, int lp_player) {
    // Variable Declarations
    int lv_supply;

    // Automatic Variable Declarations
    unitgroup autoF21BE722_g;
    int autoF21BE722_u;
    unit autoF21BE722_var;

    // Variable Initialization

    // Implementation
    if ((TechTreeUpgradeCount(lp_player, "FenixNetworkedSuperiority", c_techCountCompleteOnly) >= 1)) {
        autoF21BE722_g = libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[lp_group][lp_player];
        autoF21BE722_u = UnitGroupCount(autoF21BE722_g, c_unitCountAll);
        for (;; autoF21BE722_u -= 1) {
            autoF21BE722_var = UnitGroupUnitFromEnd(autoF21BE722_g, autoF21BE722_u);
            if (autoF21BE722_var == null) { break; }
            lv_supply -= CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(autoF21BE722_var), "Food", lp_player);
        }
        if ((lv_supply > libCOMI_gv_cM_Fenix_ChampionNetworkCountRequired[lp_group])) {
            lv_supply = libCOMI_gv_cM_Fenix_ChampionNetworkCountRequired[lp_group];
        }

        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libCOMI_gv_cM_Fenix_ChampionNetworkUpgrades[lp_group], lv_supply);
    }

}

void libCOMI_gf_CM_Fenix_UpdateFenixChampionShellCountValues (int lp_group, int lp_player) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_count = UnitGroupCount(libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[lp_group][lp_player], c_unitCountAlive);
    CatalogFieldValueSet(c_gameCatalogEffect, libCOMI_gv_cM_Fenix_ChampionShellCountEffects[lp_group], "Amount", lp_player, IntToString(lv_count));
}

void libCOMI_gf_CM_Horner_ScrapResourceSetStack (unit lp_scrap, int lp_minerals, int lp_vespene) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetCustomValue(lp_scrap, 62, IntToFixed(lp_minerals));
    UnitSetCustomValue(lp_scrap, 63, IntToFixed(lp_vespene));
    UnitSetInfoTip(lp_scrap, StringExternal("Param/Value/lib_COMI_96D541E3"));
    UnitSetInfoSubTip(lp_scrap, StringExternal("Param/Value/lib_COMI_8EB10230"));
}

void libCOMI_gf_CM_HornerStatUpdate (int lp_player) {
    // Variable Declarations
    fixed lv_factionBonusLifeMulti;
    fixed lv_itBonusLifeMulti;
    fixed lv_factionBonusAtkSpeedMulti;
    fixed lv_itBonusAtkSpeedMulti;
    string lv_itInstanceFaction;
    string lv_itInstanceStat;
    string lv_itStatFaction;
    int lv_itStatUnitCount;
    string lv_itStatUnitType;
    fixed lv_itStatUnitTypeSupply;
    fixed lv_itStatUnitTypeScore;
    fixed lv_factionScore;
    string lv_itWeapons;
    int lv_factionMaxStacks;
    fixed lv_bonusMulti;
    unit lv_itUnit;
    fixed lv_itScore;

    // Automatic Variable Declarations
    string auto206D8A18_userType;
    int auto206D8A18_i;
    string auto8F99D9A7_userType;
    int auto8F99D9A7_i;
    unitgroup autoF0B01DD9_g;
    int autoF0B01DD9_u;
    string auto9045C56D_userType;
    int auto9045C56D_i;
    int autoE55E46B6_catalog;
    string autoE55E46B6_entry;
    string autoE55E46B6_field;
    string autoE55E46B6_scopeField;
    int autoE55E46B6_player;
    int autoE55E46B6_i;

    // Variable Initialization
    lv_itWeapons = "";
    lv_bonusMulti = ((100+libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, libCOMI_gv_cM_HornerStatBonus, "Amount", lp_player))/100);

    // Implementation
    auto206D8A18_userType = libCOMI_gv_cM_HornerFactionUserType;
    auto206D8A18_i = 1;
    for ( ; auto206D8A18_i <= UserDataInstanceCount(auto206D8A18_userType) ; auto206D8A18_i += 1 ) {
        lv_itInstanceFaction = UserDataInstance(auto206D8A18_userType, auto206D8A18_i);
        lv_factionBonusLifeMulti = 0.0;
        lv_factionBonusAtkSpeedMulti = 0.0;
        lv_factionScore = 0.0;
        lv_factionMaxStacks = UserDataGetInt(libCOMI_gv_cM_HornerFactionUserType, lv_itInstanceFaction, "Max Stack", 1);
        lv_itBonusLifeMulti = UserDataGetFixed(libCOMI_gv_cM_HornerFactionUserType, lv_itInstanceFaction, "Bonus Life (%)", 1);
        lv_itBonusAtkSpeedMulti = UserDataGetFixed(libCOMI_gv_cM_HornerFactionUserType, lv_itInstanceFaction, "Bonus Attack Speed (%)", 1);
        auto8F99D9A7_userType = libCOMI_gv_cM_HornerStatUserType;
        auto8F99D9A7_i = 1;
        for ( ; auto8F99D9A7_i <= UserDataInstanceCount(auto8F99D9A7_userType) ; auto8F99D9A7_i += 1 ) {
            lv_itInstanceStat = UserDataInstance(auto8F99D9A7_userType, auto8F99D9A7_i);
            lv_itStatFaction = UserDataGetUserInstance(libCOMI_gv_cM_HornerStatUserType, lv_itInstanceStat, "Faction", 1);
            if ((lv_itStatFaction == lv_itInstanceFaction)) {
                lv_itStatUnitType = UserDataGetUnit(libCOMI_gv_cM_HornerStatUserType, lv_itInstanceStat, "Unit", 1);
                lv_itStatUnitTypeScore = 0.0;
                autoF0B01DD9_g = UnitGroup(lv_itStatUnitType, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoF0B01DD9_u = UnitGroupCount(autoF0B01DD9_g, c_unitCountAll);
                for (;; autoF0B01DD9_u -= 1) {
                    lv_itUnit = UnitGroupUnitFromEnd(autoF0B01DD9_g, autoF0B01DD9_u);
                    if (lv_itUnit == null) { break; }
                    lv_itScore = UnitGetPropertyFixed(lv_itUnit, c_unitPropSuppliesUsed, c_unitPropCurrent);
                    if ((lv_itScore == 0.0) && (UnitHasBehavior2(lv_itUnit, "HHMercStarportCargoInstalled") == true)) {
                        lv_itScore = 6.0;
                    }

                    lv_itStatUnitTypeScore += lv_itScore;
                }
                lv_factionScore += lv_itStatUnitTypeScore;
            }

        }
        if ((lv_itInstanceFaction == "Matt")) {
            libCOMI_gv_mattFactionSupply[lp_player] = lv_factionScore;
        }

        if ((lv_itInstanceFaction == "Mira")) {
            libCOMI_gv_miraFactionSupply[lp_player] = lv_factionScore;
        }

        lv_factionScore = MinF(lv_factionMaxStacks, lv_factionScore);
        lv_factionBonusLifeMulti = (lv_itBonusLifeMulti*lv_factionScore*lv_bonusMulti);
        lv_factionBonusAtkSpeedMulti = (lv_itBonusAtkSpeedMulti*lv_factionScore*lv_bonusMulti);
        if ((TechTreeUpgradeCount(lp_player, "HHSOBuff", c_techCountCompleteOnly) >= 1)) {
            auto9045C56D_userType = libCOMI_gv_cM_HornerStatUserType;
            auto9045C56D_i = 1;
            for ( ; auto9045C56D_i <= UserDataInstanceCount(auto9045C56D_userType) ; auto9045C56D_i += 1 ) {
                lv_itInstanceStat = UserDataInstance(auto9045C56D_userType, auto9045C56D_i);
                lv_itStatFaction = UserDataGetUserInstance(libCOMI_gv_cM_HornerStatUserType, lv_itInstanceStat, "Faction", 1);
                if ((lv_itStatFaction != lv_itInstanceFaction)) {
                    lv_itStatUnitType = UserDataGetUnit(libCOMI_gv_cM_HornerStatUserType, lv_itInstanceStat, "Unit", 1);
                    if ((lv_itBonusLifeMulti != 0.0)) {
                        libCOMI_gf_CatalogFieldValueAdditiveBonus(c_gameCatalogUnit, lv_itStatUnitType, "LifeMax", lp_player, "MSO", lv_factionBonusLifeMulti, false);
                        libCOMI_gf_CatalogFieldValueAdditiveBonus(c_gameCatalogUnit, lv_itStatUnitType, "LifeStart", lp_player, "MSO", lv_factionBonusLifeMulti, false);
                    }

                    CatalogFieldValueModify(c_gameCatalogEffect, "HornerMSOHealthDisplayDummy", "Amount", lp_player, FixedToString(lv_factionBonusLifeMulti, 2), c_upgradeOperationSet);
                    if ((lv_itBonusAtkSpeedMulti != 0.0)) {
                        autoE55E46B6_catalog = c_gameCatalogUnit;
                        autoE55E46B6_entry = lv_itStatUnitType;
                        autoE55E46B6_field = "WeaponArray";
                        autoE55E46B6_scopeField = "Link";
                        autoE55E46B6_player = lp_player;
                        autoE55E46B6_i = 0;
                        for ( ; autoE55E46B6_i <= CatalogFieldValueCount(c_gameCatalogUnit,autoE55E46B6_entry,autoE55E46B6_field,autoE55E46B6_player)-1 ; autoE55E46B6_i += 1 ) {
                            lv_itWeapons = CatalogFieldValueGet(c_gameCatalogUnit,autoE55E46B6_entry,autoE55E46B6_field+"["+IntToString(autoE55E46B6_i)+"]."+autoE55E46B6_scopeField,autoE55E46B6_player);
                            libCOMI_gf_CatalogFieldValueAdditiveBonus(c_gameCatalogWeapon, lv_itWeapons, "Period", lp_player, "MSO", lv_factionBonusAtkSpeedMulti, true);
                        }
                        CatalogFieldValueModify(c_gameCatalogEffect, "HornerMSOAttackSpeedDisplayDummy", "Amount", lp_player, FixedToString(lv_factionBonusAtkSpeedMulti, c_fixedPrecisionAny), c_upgradeOperationSet);
                        if ((TechTreeUpgradeCount(lp_player, "HHWidowMineDeathBlossom", c_techCountCompleteOnly) == 1)) {
                            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "HHWidowMineBurrowedAttack", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lp_player, (20.0 * (1.0 - (0.01 * lv_factionBonusAtkSpeedMulti))));
                            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogBehavior, "HHWidowMineAnimationController", "Duration", lp_player, (20.0 * (1.0 - (0.01 * lv_factionBonusAtkSpeedMulti))));
                        }
                        else {
                            libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogAbil, "HHWidowMineBurrowedAttack", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lp_player, (1.0 - (0.01 * lv_factionBonusAtkSpeedMulti)), c_upgradeOperationMultiply);
                            libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogBehavior, "HHWidowMineAnimationController", "Duration", lp_player, (1.0 - (0.01 * lv_factionBonusAtkSpeedMulti)), c_upgradeOperationMultiply);
                        }
                    }

                }

            }
        }

    }
}

void libCOMI_gf_CM_Horner_BomberStatusCheck (int lp_player) {
    // Variable Declarations
    fixed lv_smallestCooldown;
    int lv_behaviorCount;

    // Automatic Variable Declarations
    unitgroup autoF73BCC8E_g;
    int autoF73BCC8E_u;
    unit autoF73BCC8E_var;

    // Variable Initialization
    lv_smallestCooldown = 60.0;

    // Implementation
    autoF73BCC8E_g = libCOMI_gv_cM_Horner_BomberPlatforms[lp_player];
    autoF73BCC8E_u = UnitGroupCount(autoF73BCC8E_g, c_unitCountAll);
    for (;; autoF73BCC8E_u -= 1) {
        autoF73BCC8E_var = UnitGroupUnitFromEnd(autoF73BCC8E_g, autoF73BCC8E_u);
        if (autoF73BCC8E_var == null) { break; }
        if ((UnitIsAlive(autoF73BCC8E_var) == true)) {
            if ((UnitHasBehavior2(autoF73BCC8E_var, "HHBomberDockCooldown") == true)) {
                lv_behaviorCount += 1;
                if ((UnitBehaviorDuration(autoF73BCC8E_var, "HHBomberDockCooldown") < lv_smallestCooldown)) {
                    lv_smallestCooldown = UnitBehaviorDuration(autoF73BCC8E_var, "HHBomberDockCooldown");
                }

            }

            if (((UnitMagazineCount(autoF73BCC8E_var, "HHBomberPlatformHangar") == 1) && (UnitHasBehavior2(autoF73BCC8E_var, "HHBomberPlatformAreaBombDisabler") == false) && (UnitHasBehavior2(autoF73BCC8E_var, "HHBomberDockCooldown") == false))) {
                UnitGroupAdd(libCOMI_gv_cM_Horner_BomberPlatforms_Ready[lp_player], autoF73BCC8E_var);
            }
            else {
                UnitGroupRemove(libCOMI_gv_cM_Horner_BomberPlatforms_Ready[lp_player], autoF73BCC8E_var);
            }
        }
        else {
            UnitGroupRemove(libCOMI_gv_cM_Horner_BomberPlatforms[lp_player], autoF73BCC8E_var);
            UnitGroupRemove(libCOMI_gv_cM_Horner_BomberPlatforms_Ready[lp_player], autoF73BCC8E_var);
        }
    }
    libCOMI_gv_cM_Horner_BomberPlatforms_ReadyCount[lp_player] = UnitGroupCount(libCOMI_gv_cM_Horner_BomberPlatforms_Ready[lp_player], c_unitCountAlive);
    if (((libCOMI_gv_cM_Horner_BomberPlatforms_ReadyCount[lp_player] == 0) && (lv_smallestCooldown > 0.0) && (lv_behaviorCount > 0))) {
        UnitAbilityReset(libCOMI_gv_cM_GlobalCasterUnit[lp_player], AbilityCommand("HHBomberPlatformAreaBombTopBarDummyTimer", 0), c_spendLocationAbility);
        UnitAbilityAddCooldown(libCOMI_gv_cM_GlobalCasterUnit[lp_player], "HHBomberPlatformAreaBombTopBarDummyTimer", "Abil/HHBomberPlatformAreaBombTopBarDummyTimer", 60.0);
        UnitAbilityAddCooldown(libCOMI_gv_cM_GlobalCasterUnit[lp_player], "HHBomberPlatformAreaBombTopBarDummyTimer", "Abil/HHBomberPlatformAreaBombTopBarDummyTimer", (-1.0 * (60.0 - lv_smallestCooldown)));
        UnitBehaviorAdd(libCOMI_gv_cM_GlobalCasterUnit[lp_player], "HHBomberPlatformAreaBombTopBarDummyTimer", libCOMI_gv_cM_GlobalCasterUnit[lp_player], 1);
        UnitBehaviorSetDurationRemaining(libCOMI_gv_cM_GlobalCasterUnit[lp_player], "HHBomberPlatformAreaBombTopBarDummyTimer", lv_smallestCooldown);
    }
    else {
        UnitBehaviorRemove(libCOMI_gv_cM_GlobalCasterUnit[lp_player], "HHBomberPlatformAreaBombTopBarDummyTimer", 1);
    }
}

void libCOMI_gf_CM_KerriganMalignantCreep () {
    // Variable Declarations
    int lv_itPlayer;
    int lv_totalPlayersLevel;
    int[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_playerLevel;
    string lv_entry;
    int lv_catalog;
    int lv_index;
    int lv_count;
    fixed lv_add;

    // Automatic Variable Declarations
    playergroup auto2D521CF3_g;
    int autoECD6806E_ae;
    const int autoECD6806E_ai = 1;
    playergroup auto9D46FC29_g;

    // Variable Initialization
    lv_catalog = c_gameCatalogUnit;

    // Implementation
    auto2D521CF3_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto2D521CF3_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_playerLevel[lv_itPlayer] = TechTreeUpgradeCount(lv_itPlayer, libCOMI_gv_cM_TalentKerriganMalignantCreepUpgrade, c_techCountCompleteOnly);
        lv_totalPlayersLevel += lv_playerLevel[lv_itPlayer];
    }
    if ((lv_totalPlayersLevel <= 0)) {
        return ;
    }

    lv_count = CatalogEntryCount(lv_catalog);
    autoECD6806E_ae = lv_count;
    lv_index = 1;
    for ( ; ( (autoECD6806E_ai >= 0 && lv_index <= autoECD6806E_ae) || (autoECD6806E_ai < 0 && lv_index >= autoECD6806E_ae) ) ; lv_index += autoECD6806E_ai ) {
        lv_entry = CatalogEntryGet(lv_catalog, lv_index);
        if ((CatalogEntryIsDefault(lv_catalog, lv_entry) == false) && (UnitTypeTestFlag(lv_entry, c_unitFlagInvulnerable) == false) && (UnitTypeTestFlag(lv_entry, c_unitFlagNoDraw) == false) && (UnitTypeTestFlag(lv_entry, c_unitFlagDestructible) == false) && (UnitTypeTestFlag(lv_entry, c_unitFlagMissile) == false) && (UnitTypeTestAttribute(lv_entry, c_unitAttributeStructure) == false) && ((UnitTypeTestAttribute(lv_entry, c_unitAttributeBiological) == true) || (UnitTypeTestAttribute(lv_entry, c_unitAttributeMechanical) == true) || (UnitTypeTestAttribute(lv_entry, c_unitAttributePsionic) == true)) && (CatalogFieldValueGet(c_gameCatalogUnit, lv_entry, "PlaneArray[Ground]", c_playerAny) == "1")) {
            auto9D46FC29_g = PlayerGroupAll();
            lv_itPlayer = -1;
            while (true) {
                lv_itPlayer = PlayerGroupNextPlayer(auto9D46FC29_g, lv_itPlayer);
                if (lv_itPlayer < 0) { break; }
                if ((lv_playerLevel[lv_itPlayer] > 0)) {
                    CatalogFieldValueModify(c_gameCatalogUnit, lv_entry, "LifeRegenRateCreep", lv_itPlayer, libCOMI_gv_cM_TalentKerriganMalignantCreep_CreepRegenRate, c_upgradeOperationAdd);
                    CatalogFieldValueModify(c_gameCatalogUnit, lv_entry, "AttackSpeedMultiplierCreep", lv_itPlayer, libCOMI_gv_cM_TalentKerriganMalignantCreep_AttackSpeedMultiplierCreep, c_upgradeOperationAdd);
                }

            }
        }

    }
}

point libCOMI_gf_CM_LaserDrillTargetPoint (point lp_casterPoint, point lp_targetPoint, region lp_region, int lp_player) {
    // Variable Declarations
    point lv_casterPoint;
    fixed lv_casterXToEdgeOfMap;
    fixed lv_casterYToEdgeOfMap;
    point lv_targetPoint;
    fixed lv_targetXToEdgeOfMap;
    fixed lv_targetYToEdgeOfMap;
    fixed lv_targetAngle;
    fixed lv_cosineofTargetAngle;
    fixed lv_triangle1C;
    fixed lv_triangle2C;
    fixed lv_casterTriangle1C;
    fixed lv_casterTriangle2C;
    point lv_abilityTargetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_casterPoint = UnitGetPosition(EventUnit());
    lv_targetPoint = EventUnitTargetPoint();

    // Implementation
    if ((PointGetX(lv_casterPoint) <= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) <= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - PointGetX(lv_targetPoint));
        lv_targetYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - PointGetY(lv_targetPoint));
        lv_casterXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - PointGetX(lv_casterPoint));
        lv_casterYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - PointGetY(lv_casterPoint));
        lv_targetAngle = AngleBetweenPoints(lv_casterPoint, lv_targetPoint);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMax(RegionPlayableMap())));
        }
        else {
            lv_triangle1C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
            lv_casterTriangle1C = (lv_casterXToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMax(RegionPlayableMap())), PointGetY(lv_targetPoint));
            }
            else {
                lv_triangle2C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
                lv_casterTriangle2C = (lv_casterYToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                    libCOMI_gv_cM_LaserDrillDistance[lp_player] = FixedToInt(lv_casterTriangle1C);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                    libCOMI_gv_cM_LaserDrillDistance[lp_player] = FixedToInt(lv_casterTriangle2C);
                }
            }
        }
    }
    else if ((PointGetX(lv_casterPoint) >= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) <= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = PointGetX(lv_targetPoint);
        lv_targetYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - PointGetY(lv_targetPoint));
        lv_casterXToEdgeOfMap = PointGetX(lv_casterPoint);
        lv_casterYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - PointGetY(lv_casterPoint));
        lv_targetAngle = (AngleBetweenPoints(lv_casterPoint, lv_targetPoint) - 90.0);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(lv_targetPoint));
        }
        else {
            lv_triangle1C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
            lv_casterTriangle1C = (lv_casterYToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMax(RegionPlayableMap())));
            }
            else {
                lv_triangle2C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
                lv_casterTriangle2C = (lv_casterXToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                    libCOMI_gv_cM_LaserDrillDistance[lp_player] = FixedToInt(lv_casterTriangle1C);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                    libCOMI_gv_cM_LaserDrillDistance[lp_player] = FixedToInt(lv_casterTriangle2C);
                }
            }
        }
    }
    else if ((PointGetX(lv_casterPoint) >= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) >= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = PointGetX(lv_targetPoint);
        lv_targetYToEdgeOfMap = PointGetY(lv_targetPoint);
        lv_casterXToEdgeOfMap = PointGetX(lv_casterPoint);
        lv_casterYToEdgeOfMap = PointGetY(lv_casterPoint);
        lv_targetAngle = (AngleBetweenPoints(lv_casterPoint, lv_targetPoint) - 180.0);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())));
        }
        else {
            lv_triangle1C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
            lv_casterTriangle1C = (lv_casterXToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(lv_targetPoint));
            }
            else {
                lv_triangle2C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
                lv_casterTriangle2C = (lv_casterYToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                    libCOMI_gv_cM_LaserDrillDistance[lp_player] = FixedToInt(lv_casterTriangle1C);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                    libCOMI_gv_cM_LaserDrillDistance[lp_player] = FixedToInt(lv_casterTriangle2C);
                }
            }
        }
    }
    else if ((PointGetX(lv_casterPoint) <= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) >= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - PointGetX(lv_targetPoint));
        lv_targetYToEdgeOfMap = PointGetY(lv_targetPoint);
        lv_casterXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - PointGetX(lv_casterPoint));
        lv_casterYToEdgeOfMap = PointGetY(lv_casterPoint);
        lv_targetAngle = (AngleBetweenPoints(lv_casterPoint, lv_targetPoint) - 270.0);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMax(RegionPlayableMap())), PointGetY(lv_targetPoint));
        }
        else {
            lv_triangle1C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
            lv_casterTriangle1C = (lv_casterYToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())));
            }
            else {
                lv_triangle2C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
                lv_casterTriangle2C = (lv_casterXToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                    libCOMI_gv_cM_LaserDrillDistance[lp_player] = FixedToInt(lv_casterTriangle1C);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                    libCOMI_gv_cM_LaserDrillDistance[lp_player] = FixedToInt(lv_casterTriangle2C);
                }
            }
        }
    }
    if ((lv_abilityTargetPoint != null)) {
        return lv_abilityTargetPoint;
    }
    else {
        return null;
    }
}

text libCOMI_gf_CC_StoryArmyUnitUnitType2 (string lp_unitType) {
    // Variable Declarations
    int lv_i;
    bool lv_matchFound;
    text lv_returnText;

    // Automatic Variable Declarations
    int autoC0C83786_ae;
    const int autoC0C83786_ai = 1;

    // Variable Initialization

    // Implementation
    autoC0C83786_ae = UserDataInstanceCount("NovaUnitRanks");
    lv_i = 1;
    for ( ; ( (autoC0C83786_ai >= 0 && lv_i <= autoC0C83786_ae) || (autoC0C83786_ai < 0 && lv_i >= autoC0C83786_ae) ) ; lv_i += autoC0C83786_ai ) {
        if ((lp_unitType == UserDataGetGameLink("NovaUnitRanks", UserDataInstance("NovaUnitRanks", lv_i), "RankUnitType", 1))) {
            return UserDataGetText("NovaUnitRanks", UserDataInstance("NovaUnitRanks", lv_i), "Rank", 1);
            return null;
        }

    }
    return lv_returnText;
}

text libCOMI_gf_CC_StoryArmyUnitUnitType (int lp_armyUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("NovaUnitNames", UserDataInstance("NovaUnitNames", lp_armyUnit), "Name", 1);
}

void libCOMI_gf_NovaUnitNames_KillUpdateText (unit lp_updatingUnit, int lp_iD) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COMI_55059129", "Rank", libCOMI_gf_CC_StoryArmyUnitUnitType2(UnitGetType(lp_updatingUnit)));
    TextExpressionSetToken("Param/Expression/lib_COMI_55059129", "NameVar", libCOMI_gv_cM_NovaUnitName_Text[lp_iD]);
    TextExpressionSetToken("Param/Expression/lib_COMI_55059129", "Kills", IntToText(libNtve_gf_UnitGetPropertyKills(lp_updatingUnit, c_unitPropCurrent)));
    UnitSetInfoText2(lp_updatingUnit, TextExpressionAssemble("Param/Expression/lib_COMI_55059129"));
}

void libCOMI_gf_CM_ModifyCooldown (string lp_cooldownName, int lp_player) {
    // Variable Declarations
    fixed lv_r;
    fixed lv_r2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_r = PlayerGetChargeRegen(lp_player, lp_cooldownName);
    lv_r2 = PlayerGetChargeUsed(lp_player, lp_cooldownName);
    PlayerAddChargeRegenRemaining(lp_player, lp_cooldownName, (300.0 - lv_r));
    PlayerAddChargeUsed(lp_player, lp_cooldownName, (4.0 - lv_r2));
}

void libCOMI_gf_CM_RaynorUpgradeResearchCost (int lp_player, int lp_level) {
    // Variable Declarations
    fixed lv_changedFactor;
    const string lv_upgrade = "MasteryRaynorResearchCost";
    int lv_researchCount;
    int lv_itResearchIndex;
    string lv_itResearch;
    int lv_abilCmdCount;
    const int lv_resourceTypeCount = 4;
    int lv_itResearchCmd;
    int lv_itResourceType;
    fixed lv_default;

    // Automatic Variable Declarations
    int autoA6390321_ae;
    const int autoA6390321_ai = 1;
    int auto6BD5CD32_ae;
    const int auto6BD5CD32_ai = 1;
    int auto063B4A4F_ae;
    const int auto063B4A4F_ai = 1;

    // Variable Initialization
    lv_changedFactor = (1-(IntToFixed(lp_level)*0.02));
    lv_researchCount = CatalogFieldValueCount(c_gameCatalogUpgrade, lv_upgrade, "AffectedUnitArray", lp_player);
    lv_itResearch = "";
    lv_abilCmdCount = CatalogFieldValueCount(c_gameCatalogAbil, "ArmoryResearch", "InfoArray", c_playerAny);

    // Implementation
    autoA6390321_ae = (lv_researchCount-1);
    lv_itResearchIndex = 0;
    for ( ; ( (autoA6390321_ai >= 0 && lv_itResearchIndex <= autoA6390321_ae) || (autoA6390321_ai < 0 && lv_itResearchIndex >= autoA6390321_ae) ) ; lv_itResearchIndex += autoA6390321_ai ) {
        lv_itResearch = CatalogFieldValueGet(c_gameCatalogUpgrade, lv_upgrade, "AffectedUnitArray[" + IntToString(lv_itResearchIndex) + "]", lp_player);
        auto6BD5CD32_ae = (lv_abilCmdCount-1);
        lv_itResearchCmd = 0;
        for ( ; ( (auto6BD5CD32_ai >= 0 && lv_itResearchCmd <= auto6BD5CD32_ae) || (auto6BD5CD32_ai < 0 && lv_itResearchCmd >= auto6BD5CD32_ae) ) ; lv_itResearchCmd += auto6BD5CD32_ai ) {
            auto063B4A4F_ae = (lv_resourceTypeCount-1);
            lv_itResourceType = 0;
            for ( ; ( (auto063B4A4F_ai >= 0 && lv_itResourceType <= auto063B4A4F_ae) || (auto063B4A4F_ai < 0 && lv_itResourceType >= auto063B4A4F_ae) ) ; lv_itResourceType += auto063B4A4F_ai ) {
                lv_default = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lv_itResearch, "InfoArray[" + IntToString(lv_itResearchCmd) + "].Resource[" + IntToString(lv_itResourceType) + "]", c_playerAny);
                libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, lv_itResearch, "InfoArray[" + IntToString(lv_itResearchCmd) + "].Resource[" + IntToString(lv_itResourceType) + "]", lp_player, CeilingI((lv_default*lv_changedFactor)));
            }
        }
    }
}

void libCOMI_gf_CM_Stukov_SingleUnitGoToRally (unit lp_rallyingUnit, bool lp_overrideExistingOrders) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(lp_rallyingUnit);

    // Implementation
    if (((UnitOrderCount(lp_rallyingUnit) == 0) || (lp_overrideExistingOrders == true))) {
        if ((libCOMI_gv_cM_Stukov_RallyTarget[lv_player] == null)) {
            if ((libCOMI_gv_cM_Stukov_RallyPoint[lv_player] != null)) {
                UnitIssueOrder(lp_rallyingUnit, OrderTargetingPoint(AbilityCommand("move", 3), libCOMI_gv_cM_Stukov_RallyPoint[lv_player]), c_orderQueueReplace);
            }

        }
        else {
            if ((UnitHasBehavior2(libCOMI_gv_cM_Stukov_RallyTarget[lv_player], "ExpansionRocks") == true)) {
                UnitIssueOrder(lp_rallyingUnit, OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(libCOMI_gv_cM_Stukov_RallyTarget[lv_player])), c_orderQueueReplace);
                UnitIssueOrder(lp_rallyingUnit, OrderTargetingUnit(AbilityCommand("attack", 0), libCOMI_gv_cM_Stukov_RallyTarget[lv_player]), c_orderQueueAddToEnd);
            }
            else {
                if (((UnitHasBehavior2(libCOMI_gv_cM_Stukov_RallyTarget[lv_player], "NydusNetworkConjoined") == true) || (UnitHasBehavior2(libCOMI_gv_cM_Stukov_RallyTarget[lv_player], "NydusWormConjoined") == true) || (UnitHasBehavior2(libCOMI_gv_cM_Stukov_RallyTarget[lv_player], "GreaterNydusWormConjoined") == true))) {
                    UnitIssueOrder(lp_rallyingUnit, OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(libCOMI_gv_cM_Stukov_RallyTarget[lv_player])), c_orderQueueReplace);
                    UnitIssueOrder(lp_rallyingUnit, OrderTargetingUnit(null, libCOMI_gv_cM_Stukov_RallyTarget[lv_player]), c_orderQueueAddToEnd);
                }
                else {
                    UnitIssueOrder(lp_rallyingUnit, OrderTargetingUnit(AbilityCommand("move", 3), libCOMI_gv_cM_Stukov_RallyTarget[lv_player]), c_orderQueueReplace);
                }
            }
        }
    }

}

void libCOMI_gf_CM_Stukov_HordeGoToRally (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMI_gv_cM_Stukov_RallyTarget[lp_player] == null) || (UnitIsAlive(libCOMI_gv_cM_Stukov_RallyTarget[lp_player]) == false))) {
        if ((libCOMI_gv_cM_Stukov_RallyPoint[lp_player] != null)) {
            UnitGroupIssueOrder(libCOMI_gv_cM_Stukov_HordeGroup[lp_player], OrderTargetingPoint(AbilityCommand("move", 3), libCOMI_gv_cM_Stukov_RallyPoint[lp_player]), c_orderQueueReplace);
        }

    }
    else {
        if ((UnitHasBehavior2(libCOMI_gv_cM_Stukov_RallyTarget[lp_player], "ExpansionRocks") == true)) {
            UnitGroupIssueOrder(libCOMI_gv_cM_Stukov_HordeGroup[lp_player], OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(libCOMI_gv_cM_Stukov_RallyTarget[lp_player])), c_orderQueueReplace);
            UnitGroupIssueOrder(libCOMI_gv_cM_Stukov_HordeGroup[lp_player], OrderTargetingUnit(AbilityCommand("attack", 0), libCOMI_gv_cM_Stukov_RallyTarget[lp_player]), c_orderQueueAddToEnd);
        }
        else {
            if (((UnitHasBehavior2(libCOMI_gv_cM_Stukov_RallyTarget[lp_player], "NydusNetworkConjoined") == true) || (UnitHasBehavior2(libCOMI_gv_cM_Stukov_RallyTarget[lp_player], "NydusWormConjoined") == true) || (UnitHasBehavior2(libCOMI_gv_cM_Stukov_RallyTarget[lp_player], "GreaterNydusWormConjoined") == true))) {
                UnitGroupIssueOrder(libCOMI_gv_cM_Stukov_HordeGroup[lp_player], OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(libCOMI_gv_cM_Stukov_RallyTarget[lp_player])), c_orderQueueReplace);
                UnitGroupIssueOrder(libCOMI_gv_cM_Stukov_HordeGroup[lp_player], OrderTargetingUnit(null, libCOMI_gv_cM_Stukov_RallyTarget[lp_player]), c_orderQueueAddToEnd);
            }
            else {
                UnitGroupIssueOrder(libCOMI_gv_cM_Stukov_HordeGroup[lp_player], OrderTargetingUnit(AbilityCommand("move", 3), libCOMI_gv_cM_Stukov_RallyTarget[lp_player]), c_orderQueueReplace);
            }
        }
    }
}

void libCOMI_gf_CM_Stukov_NewBunkerUnitProcess (unit lp_newUnit) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = lp_newUnit;
    lv_player = UnitGetOwner(lp_newUnit);

    // Implementation
    if ((UnitHasBehavior2(lp_newUnit, "SIBarracksTrainTimedLifeHasBeenApplied") == false)) {
        UnitBehaviorAdd(lv_unit, "SIBarracksTrainTimedLifeHasBeenApplied", lv_unit, 1);
        UnitBehaviorAdd(lv_unit, "SIInfestedBunkerTrainTimedLife", lv_unit, 1);
        UnitSetState(lv_unit, c_unitStateUsingSupply, false);
    }

    UnitGroupAdd(libCOMI_gv_cM_Stukov_HordeGroup[lv_player], lv_unit);
    UnitGroupAdd(libCOMI_gv_cM_Stukov_HordeCurrentWave[lv_player], lv_unit);
    libCOMI_gv_cM_Stukov_HordeCount[lv_player] = UnitGroupCount(libCOMI_gv_cM_Stukov_HordeGroup[lv_player], c_unitCountAlive);
    libCOMI_gf_CM_Stukov_SingleUnitGoToRally(lp_newUnit, true);
}

void libCOMI_gf_TychusHeroEvent (trigger t, string lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, (lp_event));
}

unit libCOMI_gf_EventTychusHero () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(EventGenericName(), "EventHero"));
}

string libCOMI_gf_EventTychusHeroInstance () {
    // Automatic Variable Declarations
    // Implementation
    return (DataTableGetString(false, TriggerEventParamName(EventGenericName(), "EventHeroInstance")));
}

void libCOMI_gf_TychusStructureEvent (trigger t, string lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, (lp_event));
}

unit libCOMI_gf_EventTychusStructure () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(EventGenericName(), "EventStructure"));
}

void libCOMI_gf_CM_Tychus_UpdateHeroTechTree (int lp_p) {
    // Variable Declarations
    int lv_techLevel;
    int lv_heroCount;
    int lv_requiredTechLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_techLevel = libCOMI_gf_CM_Tychus_TechLevel(lp_p);
    lv_heroCount = libCOMI_gf_CM_Tychus_TechLevel2(lp_p);

    // Implementation
    if (((TechTreeUpgradeCount(lp_p, "TychusCoopHeroHalfCostUpgrade", c_techCountCompleteOnly) == 0) || (lv_heroCount > 1))) {
        libCOMI_gf_CM_Tychus_SetHeroCostMultiply(lp_p, 2.0, 2.0);
    }

}

void libCOMI_gf_CM_Tychus_SetHeroRequiredTechLevel (int lp_p, int lp_level) {
    // Variable Declarations
    string lv_instance;
    string lv_uT;
    abilcmd lv_cmd;
    string lv_abil;
    int lv_abilIndex;
    int lv_i;
    string lv_requirement;

    // Automatic Variable Declarations
    string auto845894D2_userType;
    int auto845894D2_i;
    int auto3D8DE2E4_ae;
    const int auto3D8DE2E4_ai = 1;

    // Variable Initialization

    // Implementation
    lv_requirement = libCOMI_gv_c_CM_Tychus_UserTypeHeroRequirmentArray[lp_level];
    auto845894D2_userType = libCOMI_gv_cM_Tychus_UserTypeHeroList;
    auto845894D2_i = 1;
    for ( ; auto845894D2_i <= UserDataInstanceCount(auto845894D2_userType) ; auto845894D2_i += 1 ) {
        lv_instance = UserDataInstance(auto845894D2_userType, auto845894D2_i);
        lv_uT = UserDataGetUnit(libCOMI_gv_cM_Tychus_UserTypeHeroList, lv_instance, "Unit Type", 1);
        if ((TechTreeUnitIsAllowed(lp_p, lv_uT) == true)) {
            auto3D8DE2E4_ae = (TechTreeUnitProducedAbilCmdCount(lv_uT) - 1);
            lv_i = 0;
            for ( ; ( (auto3D8DE2E4_ai >= 0 && lv_i <= auto3D8DE2E4_ae) || (auto3D8DE2E4_ai < 0 && lv_i >= auto3D8DE2E4_ae) ) ; lv_i += auto3D8DE2E4_ai ) {
                lv_cmd = TechTreeUnitProducedAbilCmd(lv_uT, lv_i);
                lv_abil = AbilityCommandGetAbility(lv_cmd);
                lv_abilIndex = AbilityCommandGetCommand(lv_cmd);
                CatalogFieldValueSet(c_gameCatalogAbil, lv_abil, "InfoArray[" + IntToString(lv_abilIndex) + "].Button.Requirements", lp_p, (lv_requirement));
            }
        }

    }
}

void libCOMI_gf_CM_Tychus_SetHeroCostMultiply (int lp_p, fixed lp_multiplyMinerals, fixed lp_multiplyVespene) {
    // Variable Declarations
    string lv_instance;
    string lv_uT;
    int lv_indexResource;

    // Automatic Variable Declarations
    string auto9ADCDADB_userType;
    int auto9ADCDADB_i;

    // Variable Initialization

    // Implementation
    auto9ADCDADB_userType = libCOMI_gv_cM_Tychus_UserTypeHeroList;
    auto9ADCDADB_i = 1;
    for ( ; auto9ADCDADB_i <= UserDataInstanceCount(auto9ADCDADB_userType) ; auto9ADCDADB_i += 1 ) {
        lv_instance = UserDataInstance(auto9ADCDADB_userType, auto9ADCDADB_i);
        lv_uT = UserDataGetUnit(libCOMI_gv_cM_Tychus_UserTypeHeroList, lv_instance, "Unit Type", 1);
        libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogUnit, lv_uT, "CostResource[" + IntToString(0) + "]", lp_p, lp_multiplyMinerals, c_upgradeOperationMultiply);
        libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogUnit, lv_uT, "CostResource[" + IntToString(1) + "]", lp_p, lp_multiplyVespene, c_upgradeOperationMultiply);
    }
}

int libCOMI_gf_CM_Tychus_TechLevel (int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    if ((TechTreeBehaviorCount(lp_p, "TychusTier3Behavior", c_techCountCompleteOnly) > 0)) {
        return 3;
    }

    if ((TechTreeBehaviorCount(lp_p, "TychusTier2Behavior", c_techCountCompleteOnly) > 0)) {
        return 2;
    }

    if ((TechTreeBehaviorCount(lp_p, "TychusTier1Behavior", c_techCountCompleteOnly) > 0)) {
        return 1;
    }

    return 0;
}

int libCOMI_gf_CM_Tychus_TechLevel2 (int lp_p) {
    // Variable Declarations
    int lv_incomplete;
    int lv_completed;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_incomplete = TechTreeUnitAliasCount(lp_p, "Alias_TychusUniqueUnit", c_techCountIncompleteOnly);
    lv_completed = TechTreeBehaviorCount(lp_p, "TychusHeroCount", c_techCountCompleteOnly);

    // Implementation
    return (lv_incomplete + lv_completed);
}

void libCOMI_gf_CM_Tychus_UltimateTimeAchievement (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 4)) && (libCOMI_gv_cM_Tychus_UltimatesPurchased == 5) && (GameGetMissionTime() < 1200.0)) {
        AchievementAward(lp_player, "CommanderTychusUltimateTime");
    }

}

void libCOMI_gf_CM_Tychus_InitHeroTechLimit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeSetProduceCap(lp_player, "Alias_TychusUniqueUnit", c_techCatUnit, libCOMI_gv_cM_Tychus_MaxHeroCount);
    TechTreeSetProduceCap(lp_player, "TychusCoop", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusReaper", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusWarhound", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusFirebat", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusHERC", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusMarauder", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusGhost", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusSpectre", c_techCatUnit, 1);
    TechTreeSetProduceCap(lp_player, "TychusMedic", c_techCatUnit, 1);
}

fixed libCOMI_gf_CalculateTychusRecruitmentChargeCooldown (int lp_tychusPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return (libCOMI_gv_cM_Tychus_RechargeTrainTime-(TechTreeUpgradeCount(lp_tychusPlayer, "MasteryTychusHeroCooldown", c_techCountCompleteOnly)*libCOMI_gv_cM_Tychus_RechargeTrainTimeMasteryReducePerLevel));
}

void libCOMI_gf_ApplyTychusMaxChargesPerk (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_player;

    // Automatic Variable Declarations
    const int auto7154FA6F_ae = 10;
    const int auto7154FA6F_ai = 1;
    const int autoC331B48F_ae = 10;
    const int autoC331B48F_ai = 1;

    // Variable Initialization
    lv_player = lp_player;

    // Implementation
    if ((TechTreeUpgradeCount(lv_player, "TychusCoopFifthHeroUpgrade", c_techCountCompleteOnly) == 0)) {
        libCOMI_gv_cM_Tychus_MaxHeroCount = (libCOMI_gv_cM_Tychus_MaxHeroCount - 1);
        libCOMI_gv_tychusHeroMaxCharges = (libCOMI_gv_tychusHeroMaxCharges - 1);
        lv_i = 0;
        for ( ; ( (autoC331B48F_ai >= 0 && lv_i <= autoC331B48F_ae) || (autoC331B48F_ai < 0 && lv_i >= autoC331B48F_ae) ) ; lv_i += autoC331B48F_ai ) {
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusBarracksTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.CountMax", lv_player, libCOMI_gv_tychusHeroMaxCharges);
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusFactoryTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.CountMax", lv_player, libCOMI_gv_tychusHeroMaxCharges);
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusStarportTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.CountMax", lv_player, libCOMI_gv_tychusHeroMaxCharges);
        }
        UnitCreateEffectUnit(libCOMI_gv_cM_GlobalCasterUnit[lv_player], "TychusHeroLevel1ChargeAdd", libCOMI_gv_cM_GlobalCasterUnit[lv_player]);
        UnitCreateEffectUnit(libCOMI_gv_cM_GlobalCasterUnit[lv_player], "TychusHeroLevel1ChargeRemove", libCOMI_gv_cM_GlobalCasterUnit[lv_player]);
    }
    else {
        lv_i = 0;
        for ( ; ( (auto7154FA6F_ai >= 0 && lv_i <= auto7154FA6F_ae) || (auto7154FA6F_ai < 0 && lv_i >= auto7154FA6F_ae) ) ; lv_i += auto7154FA6F_ai ) {
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusBarracksTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.CountMax", lv_player, libCOMI_gv_tychusHeroMaxCharges);
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusFactoryTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.CountMax", lv_player, libCOMI_gv_tychusHeroMaxCharges);
            libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusStarportTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.CountMax", lv_player, libCOMI_gv_tychusHeroMaxCharges);
        }
        UnitCreateEffectUnit(libCOMI_gv_cM_GlobalCasterUnit[lv_player], "TychusHeroChargeAdd", libCOMI_gv_cM_GlobalCasterUnit[lv_player]);
        UnitCreateEffectUnit(libCOMI_gv_cM_GlobalCasterUnit[lv_player], "TychusHeroChargeRemove", libCOMI_gv_cM_GlobalCasterUnit[lv_player]);
    }
}

void libCOMI_gf_CM_ReplaceTychusRageEffect (string lp_rageEffect, string lp_dummyEffectInstance, point lp_targetPoint, unit lp_targetUnit, unit lp_tychusUnit) {
    // Variable Declarations
    fixed lv_ragemultiplier;
    fixed lv_ragecost;
    fixed lv_extrarage;
    string lv_replacementeffect;
    int lv_tychusowner;
    int lv_damagetypeindex;

    // Automatic Variable Declarations
    const int auto902E4791_ae = 4;
    const int auto902E4791_ai = 1;
    const int auto34EFDB1B_ae = 4;
    const int auto34EFDB1B_ai = 1;

    // Variable Initialization
    lv_ragemultiplier = UserDataGetFixed("CoopAbilityTychusRageEffects", lp_rageEffect, "Rage Bonus Multiplier", 1);
    lv_ragecost = libNtve_gf_CostOfAbility(UserDataGetGameLink("CoopAbilityTychusRageEffects", lp_rageEffect, "Rage Ability", 1), "Energy");
    lv_extrarage = UnitGetPropertyFixed(lp_tychusUnit, c_unitPropEnergy, c_unitPropCurrent);
    lv_replacementeffect = UserDataGetGameLink("CoopAbilityTychusRageEffects", lp_rageEffect, "Replacement Effect", 1);
    lv_tychusowner = UnitGetOwner(lp_tychusUnit);

    // Implementation
    lv_damagetypeindex = 0;
    for ( ; ( (auto902E4791_ai >= 0 && lv_damagetypeindex <= auto902E4791_ae) || (auto902E4791_ai < 0 && lv_damagetypeindex >= auto902E4791_ae) ) ; lv_damagetypeindex += auto902E4791_ai ) {
        CatalogFieldValueSet(c_gameCatalogBehavior, UserDataGetGameLink("CoopAbilityTychusRageEffects", lp_rageEffect, "Rage Bonus Behavior", 1), "Modification.DamageDealtScaled[" + IntToString(lv_damagetypeindex) + "]", lv_tychusowner, IntToString(RoundI((lv_ragemultiplier * (lv_ragecost + lv_extrarage)))));
    }
    if ((lp_targetUnit == null)) {
        UnitCreateEffectPoint(lp_tychusUnit, lv_replacementeffect, lp_targetPoint);
    }
    else {
        UnitCreateEffectUnit(lp_tychusUnit, lv_replacementeffect, lp_targetUnit);
    }
    lv_damagetypeindex = 0;
    for ( ; ( (auto34EFDB1B_ai >= 0 && lv_damagetypeindex <= auto34EFDB1B_ae) || (auto34EFDB1B_ai < 0 && lv_damagetypeindex >= auto34EFDB1B_ae) ) ; lv_damagetypeindex += auto34EFDB1B_ai ) {
        CatalogFieldValueSet(c_gameCatalogBehavior, UserDataGetGameLink("CoopAbilityTychusRageEffects", lp_rageEffect, "Rage Bonus Behavior", 1), "Modification.DamageDealtScaled[" + IntToString(lv_damagetypeindex) + "]", lv_tychusowner, "0");
    }
}

void libCOMI_gf_CM_ApplyTychusRageBuffs (string lp_rageBuff, unit lp_targetUnit, unit lp_tychusUnit) {
    // Variable Declarations
    fixed lv_currentrage;
    string lv_behavior;
    int lv_existingstackcount;
    int lv_newstackcount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentrage = UnitGetPropertyFixed(lp_tychusUnit, c_unitPropEnergy, c_unitPropCurrent);
    lv_behavior = UserDataGetGameLink("CoopAbilityTychusRageBuffs", lp_rageBuff, "Behavior", 1);
    lv_existingstackcount = UnitBehaviorCount(lp_targetUnit, lv_behavior);
    lv_newstackcount = libNtve_gf_ArithmeticIntClamp(RoundI((UserDataGetFixed("CoopAbilityTychusRageBuffs", lp_rageBuff, "Rage Factor", 1) * UnitGetPropertyFixed(lp_tychusUnit, c_unitPropEnergy, c_unitPropCurrent))), UserDataGetInt("CoopAbilityTychusRageBuffs", lp_rageBuff, "Min Stacks", 1), UserDataGetInt("CoopAbilityTychusRageBuffs", lp_rageBuff, "Max Stacks", 1));

    // Implementation
    if ((UserDataGetInt("CoopAbilityTychusRageBuffs", lp_rageBuff, "Rolling Stacks", 1) == 1) && (lv_existingstackcount > lv_newstackcount)) {
        UnitBehaviorRemove(lp_targetUnit, lv_behavior, MaxI(lv_newstackcount, 0));
        UnitBehaviorAdd(lp_targetUnit, lv_behavior, lp_tychusUnit, lv_newstackcount);
    }
    else {
        UnitBehaviorRemove(lp_targetUnit, lv_behavior, lv_existingstackcount);
        UnitBehaviorAdd(lp_targetUnit, lv_behavior, lp_tychusUnit, lv_newstackcount);
    }
}

void libCOMI_gf_CM_Zeratul_ApplyDevolve (unit lp_targetUnit) {
    // Variable Declarations
    fixed lv_lifePercentage;
    fixed lv_shieldPercentage;
    fixed lv_energyPercentage;
    string lv_oldUnitType;
    string lv_newUnitType;
    int lv_owner;
    point lv_spawnPosition;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lifePercentage = UnitGetPropertyFixed(lp_targetUnit, c_unitPropLifePercent, c_unitPropCurrent);
    lv_shieldPercentage = UnitGetPropertyFixed(lp_targetUnit, c_unitPropShieldsPercent, c_unitPropCurrent);
    lv_oldUnitType = UnitGetType(lp_targetUnit);
    lv_newUnitType = libCOMI_gf_CM_Zeratul_DevolveGetNewUnitType(lv_oldUnitType, (libCOMI_gf_CM_Zeratul_DevolveGetUnitTier(UnitGetType(lp_targetUnit)) - 1));
    lv_owner = UnitGetOwner(lp_targetUnit);

    // Implementation
    if ((lv_newUnitType == null)) {
        return ;
    }

    lv_spawnPosition = UnitGetPosition(lp_targetUnit);
    PointSetFacing(lv_spawnPosition, UnitGetFacing(lp_targetUnit));
    UnitRemove(lp_targetUnit);
    libNtve_gf_CreateUnitsAtPoint2(1, lv_newUnitType, c_unitCreateIgnorePlacement, lv_owner, lv_spawnPosition);
    UnitGroupAdd(libCOMI_gv_cM_Zeratul_DevolvedUnits, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, lv_lifePercentage);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, lv_shieldPercentage);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 0.0);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create ZeratulDevolve");
    AISetUnitSuicide(UnitLastCreated(), true);
}

bool libCOMI_gf_CM_Zeratul_DevolveUnitTypeAllowed (string lp_devolveUnitType) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_devolveUnitType != "Baneling") && (lp_devolveUnitType != "Scourge") && (lp_devolveUnitType != "Oracle") && (lp_devolveUnitType != "Disruptor") && (lp_devolveUnitType != "Reaver") && (lp_devolveUnitType != "SiegeTankSieged") && (lp_devolveUnitType != "InfestedSiegeBreakerSieged") && (lp_devolveUnitType != "LiberatorAG")) {
        return true;
    }

    return false;
}

int libCOMI_gf_CM_Zeratul_DevolveGetUnitTier (string lp_unitType) {
    // Variable Declarations
    string lv_devolutioninstance;
    int lv_targettierindex;
    int lv_targettiersupplyfallbackindex;
    int lv_targetunittypeindex;
    string lv_targetunittype;
    fixed lv_targetunitsupply;
    int lv_numberofdevolutiontiers;
    int lv_numberofunittypespertier;

    // Automatic Variable Declarations
    int autoA3EE182A_ae;
    const int autoA3EE182A_ai = 1;
    int auto82DEAD83_ae;
    const int auto82DEAD83_ai = 1;

    // Variable Initialization
    lv_targettiersupplyfallbackindex = 1;
    lv_targetunitsupply = UnitTypeGetProperty(lp_unitType, c_unitPropSuppliesUsed);
    lv_numberofdevolutiontiers = UserDataInstanceCount("DevolutionTiers");
    lv_numberofunittypespertier = UserDataFieldValueCount("DevolutionTiers", "UnitsToDevolveInto");

    // Implementation
    autoA3EE182A_ae = lv_numberofdevolutiontiers;
    lv_targettierindex = 1;
    for ( ; ( (autoA3EE182A_ai >= 0 && lv_targettierindex <= autoA3EE182A_ae) || (autoA3EE182A_ai < 0 && lv_targettierindex >= autoA3EE182A_ae) ) ; lv_targettierindex += autoA3EE182A_ai ) {
        lv_devolutioninstance = UserDataInstance("DevolutionTiers", lv_targettierindex);
        if ((lv_targetunitsupply >= UserDataGetFixed("DevolutionTiers", lv_devolutioninstance, "RoughSupply", 1))) {
            lv_targettiersupplyfallbackindex = lv_targettierindex;
        }

        auto82DEAD83_ae = lv_numberofunittypespertier;
        lv_targetunittypeindex = 1;
        for ( ; ( (auto82DEAD83_ai >= 0 && lv_targetunittypeindex <= auto82DEAD83_ae) || (auto82DEAD83_ai < 0 && lv_targetunittypeindex >= auto82DEAD83_ae) ) ; lv_targetunittypeindex += auto82DEAD83_ai ) {
            lv_targetunittype = UserDataGetUnit("DevolutionTiers", lv_devolutioninstance, "UnitsToDevolveInto", lv_targetunittypeindex);
            if ((lv_targetunittype == lp_unitType)) {
                return lv_targettierindex;
            }

        }
    }
    return lv_targettiersupplyfallbackindex;
}

string libCOMI_gf_CM_Zeratul_DevolveGetNewUnitType (string lp_oldUnitType, int lp_newTier) {
    // Variable Declarations
    string lv_devolutioninstance;
    int lv_newtierindex;
    int lv_newunittypeindex;
    string lv_newunittype;
    int lv_numberofdevolutiontiers;
    int lv_numberofunittypespertier;
    string[101] lv_validunittypes;
    int lv_numberofvalidunittypes;
    string lv_oldunitrace;

    // Automatic Variable Declarations
    const int auto20C181F9_ae = 1;
    const int auto20C181F9_ai = -1;
    int auto2147B04D_ae;
    const int auto2147B04D_ai = 1;

    // Variable Initialization
    lv_numberofdevolutiontiers = UserDataInstanceCount("DevolutionTiers");
    lv_numberofunittypespertier = UserDataFieldValueCount("DevolutionTiers", "UnitsToDevolveInto");
    lv_oldunitrace = (CatalogFieldValueGet(c_gameCatalogUnit, lp_oldUnitType, "Race", c_playerAny));

    // Implementation
    if ((((lp_newTier >= 1) && (lp_newTier <= lv_numberofdevolutiontiers)) == false)) {
        return null;
    }

    lv_newtierindex = lp_newTier;
    for ( ; ( (auto20C181F9_ai >= 0 && lv_newtierindex <= auto20C181F9_ae) || (auto20C181F9_ai < 0 && lv_newtierindex >= auto20C181F9_ae) ) ; lv_newtierindex += auto20C181F9_ai ) {
        lv_devolutioninstance = UserDataInstance("DevolutionTiers", lv_newtierindex);
        lv_numberofvalidunittypes = 0;
        auto2147B04D_ae = lv_numberofunittypespertier;
        lv_newunittypeindex = 1;
        for ( ; ( (auto2147B04D_ai >= 0 && lv_newunittypeindex <= auto2147B04D_ae) || (auto2147B04D_ai < 0 && lv_newunittypeindex >= auto2147B04D_ae) ) ; lv_newunittypeindex += auto2147B04D_ai ) {
            lv_newunittype = UserDataGetUnit("DevolutionTiers", lv_devolutioninstance, "UnitsToDevolveInto", lv_newunittypeindex);
            if ((lv_newunittype != "") && (lv_newunittype != lp_oldUnitType) && (libCOMI_gf_CM_Zeratul_DevolveUnitTypeAllowed(lv_newunittype) == true) && ((CatalogFieldValueGet(c_gameCatalogUnit, lv_newunittype, "Race", c_playerAny)) == lv_oldunitrace)) {
                lv_validunittypes[lv_numberofvalidunittypes] = lv_newunittype;
                lv_numberofvalidunittypes += 1;
            }

        }
        if ((lv_numberofvalidunittypes > 0)) {
            return lv_validunittypes[RandomInt(0, (lv_numberofvalidunittypes - 1))];
        }

    }
    return null;
}

void libCOMI_gf_CM_ZeratulProphecyEvent (trigger t, string lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, (lp_event));
}

void libCOMI_gf_CM_SendZeratulProphecyEventArtifact (string lp_event, int lp_zeratulPlayer, unit lp_artifactUnit, int lp_artifactNumber) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName((lp_event), "ZeratulEventUnit"), libCOMI_gv_cM_HeroUnit[lp_zeratulPlayer]);
    DataTableSetUnit(false, TriggerEventParamName((lp_event), "ZeratulEventArtifactUnit"), lp_artifactUnit);
    DataTableSetInt(false, TriggerEventParamName((lp_event), "ZeratulEventPlayer"), lp_zeratulPlayer);
    DataTableSetInt(false, TriggerEventParamName((lp_event), "ZeratulEventArtifactNumber"), lp_artifactNumber);
    TriggerSendEvent((lp_event));
}

unit libCOMI_gf_CM_ZeratulProphecyEventGetUnit (int lp_unit) {
    // Automatic Variable Declarations
    int auto43A95D7E_val;

    // Implementation
    auto43A95D7E_val = lp_unit;
    if (auto43A95D7E_val == libCOMI_ge_CM_ZeratulProphecyEventUnits_ZeratulUnit) {
        return DataTableGetUnit(false, TriggerEventParamName(EventGenericName(), "ZeratulEventUnit"));
    }
    else if (auto43A95D7E_val == libCOMI_ge_CM_ZeratulProphecyEventUnits_ArtifactUnit) {
        return DataTableGetUnit(false, TriggerEventParamName(EventGenericName(), "ZeratulEventArtifactUnit"));
    }
    else {
    }
    return DataTableGetUnit(false, TriggerEventParamName(EventGenericName(), "ZeratulEventUnit"));
}

int libCOMI_gf_CM_ZeratulProphecyEventGetArtifactNumber () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(EventGenericName(), "ZeratulEventArtifactNumber"));
}

int libCOMI_gf_CM_ZeratulProphecyEventGetPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(EventGenericName(), "ZeratulEventPlayer"));
}

void libCOMI_gf_CM_Zeratul_PurificationNova_SpawnSmallOrb (unit lp_caster, point lp_spawnPoint, point lp_targetPoint) {
    // Variable Declarations
    point lv_point;
    unit lv_orb;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_point = lp_spawnPoint;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PurificationOrbSmall", c_unitCreateIgnorePlacement, UnitGetOwner(lp_caster), lv_point);
    lv_orb = UnitLastCreated();
    UnitIssueOrder(lv_orb, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), c_orderQueueReplace);
    UnitBehaviorAdd(lv_orb, "ZeratulPurificationNovaSmallOrbSearchBuff", lp_caster, 1);
}

int libCOMI_gf_CM_Zeratul_ProphecyHintLevel (int lp_artifactNumber) {
    // Variable Declarations
    fixed lv_hint_1_timing;
    fixed lv_hint_2_timing;
    fixed lv_hint_3_timing;
    fixed lv_masteryTimeReduction;

    // Automatic Variable Declarations
    int auto12BFBFF8_val;

    // Variable Initialization
    lv_masteryTimeReduction = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MasteryZeratulArtifactSpawnRateDisplayDummy", "Amount", libCOMI_gv_cM_ZeratulPlayer);

    // Implementation
    auto12BFBFF8_val = lp_artifactNumber;
    if (auto12BFBFF8_val == 3) {
        lv_hint_1_timing = libCOMI_gv_cM_ZeratulArtifact_3_Hint_1_Timing;
        lv_hint_2_timing = libCOMI_gv_cM_ZeratulArtifact_3_Hint_2_Timing;
        lv_hint_3_timing = libCOMI_gv_cM_ZeratulArtifact_3_Hint_3_Timing;
    }
    else if (auto12BFBFF8_val == 2) {
        lv_hint_1_timing = libCOMI_gv_cM_ZeratulArtifact_2_Hint_1_Timing;
        lv_hint_2_timing = libCOMI_gv_cM_ZeratulArtifact_2_Hint_2_Timing;
        lv_hint_3_timing = libCOMI_gv_cM_ZeratulArtifact_2_Hint_3_Timing;
    }
    else if (auto12BFBFF8_val == 1) {
        lv_hint_1_timing = libCOMI_gv_cM_ZeratulArtifact_1_Hint_1_Timing;
        lv_hint_2_timing = libCOMI_gv_cM_ZeratulArtifact_1_Hint_2_Timing;
        lv_hint_3_timing = libCOMI_gv_cM_ZeratulArtifact_1_Hint_3_Timing;
    }
    else {
        return 0;
    }
    if ((GameGetMissionTime() >= (lv_hint_3_timing - lv_masteryTimeReduction))) {
        return 3;
    }
    else if ((GameGetMissionTime() >= (lv_hint_2_timing - lv_masteryTimeReduction))) {
        return 2;
    }
    else if ((GameGetMissionTime() >= (lv_hint_1_timing - lv_masteryTimeReduction))) {
        return 1;
    }
    return 0;
}

void libCOMI_gf_CM_Zeratul_GiveProphecyHint (int lp_hintLevel) {
    // Variable Declarations
    point lv_randomPoint;
    const fixed lv_hintRadius1 = 35.0;
    const fixed lv_hintRadius2 = 25.0;
    const fixed lv_hintRadius3 = 15.0;
    point lv_p1;
    point lv_p2;
    fixed lv_r1;
    fixed lv_r2;

    // Automatic Variable Declarations
    int autoC95F4B04_val;
    int auto6B896E6D_val;

    // Variable Initialization

    // Implementation
    if ((lp_hintLevel == 0)) {
        return ;
    }
    else if ((libCOMI_gv_cM_ZeratulProphecyHintUnit != null)) {
        lv_p1 = UnitGetPosition(libCOMI_gv_cM_ZeratulProphecyHintUnit);
        lv_r1 = UnitGetCustomValue(libCOMI_gv_cM_ZeratulProphecyHintUnit, 0);
    }
    else if (true) {
        lv_p1 = PlayerStartLocation(libCOMI_gv_cM_ZeratulPlayer);
        lv_r1 = 150.0;
    }
    lv_p2 = UnitGetPosition(libCOMI_gv_cM_ZeratulProphecyArtifact);
    autoC95F4B04_val = lp_hintLevel;
    if (autoC95F4B04_val == 1) {
        lv_r2 = lv_hintRadius1;
    }
    else if (autoC95F4B04_val == 2) {
        lv_r2 = lv_hintRadius2;
    }
    else if (autoC95F4B04_val == 3) {
        lv_r2 = lv_hintRadius3;
    }
    else {
    }
    while (((lv_randomPoint == null) || (DistanceBetweenPoints(lv_randomPoint, lv_p2) > lv_r2) || (RegionContainsPoint(RegionPlayableMap(), lv_randomPoint) == false))) {
        lv_randomPoint = RegionRandomPoint(RegionCircle(lv_p1, (lv_r1 - lv_r2)));
    }
    if ((libCOMI_gv_cM_ZeratulProphecyHintUnit != null)) {
        UnitSetPosition(libCOMI_gv_cM_ZeratulProphecyHintUnit, lv_randomPoint, false);
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ProphecyArtifactHintUnit", c_unitCreateIgnorePlacement, libCOMI_gv_cM_ZeratulPlayer, lv_randomPoint);
        libCOMI_gv_cM_ZeratulProphecyHintUnit = UnitLastCreated();
    }
    UnitSetCustomValue(libCOMI_gv_cM_ZeratulProphecyHintUnit, 0, lv_r2);
    libCOMI_gf_PingMinimapCampaign(PlayerGroupSingle(libCOMI_gv_cM_ZeratulPlayer), lv_randomPoint, 2.0, Color(50.20, 100.00, 100.00));
    auto6B896E6D_val = lp_hintLevel;
    if (auto6B896E6D_val == 1) {
        libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_ZeratulProphecyHintUnit, "Signal Hint1");
    }
    else if (auto6B896E6D_val == 2) {
        libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_ZeratulProphecyHintUnit, "Signal Hint2");
    }
    else if (auto6B896E6D_val == 3) {
        libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_ZeratulProphecyHintUnit, "Signal Hint3");
    }
    else {
    }
}

void libCOMI_gf_CM_Zeratul_SetProphecyCooldown () {
    // Variable Declarations
    fixed lv_targetMissionTime;
    fixed lv_cooldownTime;
    fixed lv_masteryTimeReduction;

    // Automatic Variable Declarations
    int auto260C660D_val;

    // Variable Initialization
    lv_masteryTimeReduction = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MasteryZeratulArtifactSpawnRateDisplayDummy", "Amount", libCOMI_gv_cM_ZeratulPlayer);

    // Implementation
    auto260C660D_val = libCOMI_gv_cM_ZeratulProphecyArtifactNumber;
    if (auto260C660D_val == 2) {
        lv_targetMissionTime = (540.0 - lv_masteryTimeReduction);
    }
    else if (auto260C660D_val == 3) {
        lv_targetMissionTime = (840.0 - lv_masteryTimeReduction);
    }
    else {
    }
    lv_cooldownTime = MinF((180.0 - lv_masteryTimeReduction), (lv_targetMissionTime - GameGetMissionTime()));
    lv_cooldownTime = MaxF(lv_cooldownTime, 10.0);
    if ((PlayerGetCooldown(libCOMI_gv_cM_ZeratulPlayer, "Abil/ProphecyVision") < lv_cooldownTime)) {
        libNtve_gf_PlayerRemoveCooldown(libCOMI_gv_cM_ZeratulPlayer, "Abil/ProphecyVision");
        PlayerAddCooldown(libCOMI_gv_cM_ZeratulPlayer, "Abil/ProphecyVision", lv_cooldownTime);
    }

}

void libCOMI_gf_CM_Zeratul_SpawnResourcePickups (int lp_count, point lp_location) {
    // Variable Declarations
    fixed lv_randomValue;

    // Automatic Variable Declarations
    playergroup auto651D6CDD_g;
    int auto651D6CDD_var;
    int autoDC9A1B6C_n;
    int autoDC9A1B6C_i;

    // Variable Initialization

    // Implementation
    auto651D6CDD_g = libCOOC_gf_CommanderPlayers();
    auto651D6CDD_var = -1;
    while (true) {
        auto651D6CDD_var = PlayerGroupNextPlayer(auto651D6CDD_g, auto651D6CDD_var);
        if (auto651D6CDD_var < 0) { break; }
        autoDC9A1B6C_n = lp_count;
        for (autoDC9A1B6C_i = 1; autoDC9A1B6C_i <= autoDC9A1B6C_n; autoDC9A1B6C_i += 1) {
            UnitCreate(1, "ProphecyArtifactMineralPickup", 0, auto651D6CDD_var, lp_location, libNtve_gf_RandomAngle());
            lv_randomValue = RandomFixed(0.0, 100.0);
            if ((lv_randomValue < 50.0)) {
                UnitCreateEffectUnit(UnitLastCreated(), "ItemKnockbackBy2", UnitLastCreated());
            }
            else {
                UnitCreateEffectUnit(UnitLastCreated(), "ItemKnockbackBy3", UnitLastCreated());
            }
            UnitCreate(1, "ProphecyArtifactVespenePickup", 0, auto651D6CDD_var, lp_location, libNtve_gf_RandomAngle());
            lv_randomValue = RandomFixed(0.0, 100.0);
            if ((lv_randomValue < 50.0)) {
                UnitCreateEffectUnit(UnitLastCreated(), "ItemKnockbackBy2", UnitLastCreated());
            }
            else {
                UnitCreateEffectUnit(UnitLastCreated(), "ItemKnockbackBy3", UnitLastCreated());
            }
        }
    }
}

void libCOMI_gf_CM_Zeratul_PlaceArtifact (int lp_p) {
    // Variable Declarations
    point lv_artifactPoint;
    int lv_i;
    int lv_randomIndex;
    int lv_poolIndex;
    int lv_minDistance;
    int lv_maxDistance;

    // Automatic Variable Declarations
    int autoB6768B79_val;

    // Variable Initialization

    // Implementation
    lv_artifactPoint = libCOMI_gf_CM_Zeratul_FindArtifactPlacementPointNew(libCOMI_gv_cM_ZeratulProphecyArtifactNumber);
    autoB6768B79_val = libCOMI_gv_cM_ZeratulProphecyArtifactNumber;
    if (autoB6768B79_val == 1) {
        UnitCreate(1, "ZeratulArtifactPickup1", 0, lp_p, lv_artifactPoint, libNtve_gf_RandomAngle());
    }
    else if (autoB6768B79_val == 2) {
        UnitCreate(1, "ZeratulArtifactPickup2", 0, lp_p, lv_artifactPoint, libNtve_gf_RandomAngle());
    }
    else if (autoB6768B79_val == 3) {
        UnitCreate(1, "ZeratulArtifactPickup3", 0, lp_p, lv_artifactPoint, libNtve_gf_RandomAngle());
    }
    else {
    }
    libCOMI_gv_cM_ZeratulProphecyArtifact = UnitLastCreated();
    if ((UnitIsValid(libCOMI_gv_cM_ZeratulProphecyCamera) == true)) {
        UnitSetPosition(libCOMI_gv_cM_ZeratulProphecyCamera, UnitGetPosition(libCOMI_gv_cM_ZeratulProphecyArtifact), false);
    }
    else {
        UnitCreate(1, "ProphecyCamera", 0, lp_p, UnitGetPosition(libCOMI_gv_cM_ZeratulProphecyArtifact), 270.0);
        libCOMI_gv_cM_ZeratulProphecyCamera = UnitLastCreated();
        libNtve_gf_ShowHideUnit(libCOMI_gv_cM_ZeratulProphecyCamera, false);
        CameraSetChannel(libCOMI_gv_cM_ZeratulPlayer, libCOMI_gv_cM_ZeratulProphecyCamera, "Camera_Basic", 1, 1.0);
    }
}

void libCOMI_gf_CM_ZeratulProphecyArtifactBadRegion_Set () {
    // Automatic Variable Declarations
    unitgroup auto4FDAC2D8_g;
    int auto4FDAC2D8_u;
    unit auto4FDAC2D8_var;

    // Implementation
    libCOMI_gv_cM_ZeratulProphecyArtifactBadRegion = null;
    auto4FDAC2D8_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), (1 << (c_targetFilterInvulnerable - 32)), 0, (1 << (c_targetFilterDead - 32))), 0);
    auto4FDAC2D8_u = UnitGroupCount(auto4FDAC2D8_g, c_unitCountAll);
    for (;; auto4FDAC2D8_u -= 1) {
        auto4FDAC2D8_var = UnitGroupUnitFromEnd(auto4FDAC2D8_g, auto4FDAC2D8_u);
        if (auto4FDAC2D8_var == null) { break; }
        if ((libCOMI_gv_cM_ZeratulProphecyArtifactBadRegion == null)) {
            libCOMI_gv_cM_ZeratulProphecyArtifactBadRegion = RegionCircle(UnitGetPosition(auto4FDAC2D8_var), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(auto4FDAC2D8_var), "Radius", UnitGetOwner(auto4FDAC2D8_var)));
        }
        else {
            RegionAddRegion(libCOMI_gv_cM_ZeratulProphecyArtifactBadRegion, RegionCircle(UnitGetPosition(auto4FDAC2D8_var), libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(auto4FDAC2D8_var), "Radius", UnitGetOwner(auto4FDAC2D8_var))));
        }
    }
}

int libCOMI_gf_CM_Zeratul_GetArtifactDifficultyIndex (int lp_artifactNumber, string lp_artifactData) {
    // Variable Declarations
    int lv_artifactdifficultyindex;
    int lv_difficultylevel;

    // Automatic Variable Declarations
    const int auto136FCBDF_ae = 1;
    const int auto136FCBDF_ai = -1;

    // Variable Initialization
    lv_difficultylevel = libCOOC_gf_CC_DifficultyIndex(libCOMI_gf_DifficultyLevelForPlayerCoop(libCOMI_gv_cM_ZeratulPlayer));

    // Implementation
    lv_artifactdifficultyindex = lp_artifactNumber;
    for ( ; ( (auto136FCBDF_ai >= 0 && lv_artifactdifficultyindex <= auto136FCBDF_ae) || (auto136FCBDF_ai < 0 && lv_artifactdifficultyindex >= auto136FCBDF_ae) ) ; lv_artifactdifficultyindex += auto136FCBDF_ai ) {
        if ((UserDataGetInt("CoopTechZeratulArtifactPlacement", lp_artifactData, "minDifficulty", lv_artifactdifficultyindex) <= lv_difficultylevel)) {
            return lv_artifactdifficultyindex;
        }

    }
    return 1;
}

point libCOMI_gf_CM_Zeratul_FindArtifactPlacementPointOld (fixed lp_maxDistance) {
    // Variable Declarations
    fixed lv_startLocationBuffer;
    fixed lv_nearbyUnitHealth;
    fixed lv_nearbyUnitHealthLimit;
    fixed lv_distanceBetweenPoints;
    fixed lv_angleDelta;
    fixed lv_angleIter;
    point lv_pointIter;
    fixed lv_radiusIter;
    int lv_validPointsCount;
    point lv_pickedPoint;
    unit lv_dEBUG_lastPicked;

    // Automatic Variable Declarations
    fixed autoB9DE4296_ae;
    fixed autoB9DE4296_ai;
    const fixed auto4EC1E152_ae = 360.0;
    fixed auto4EC1E152_ai;
    unitgroup auto38554CDB_g;
    int auto38554CDB_u;
    unit auto38554CDB_var;

    // Variable Initialization
    lv_startLocationBuffer = 15.0;
    lv_nearbyUnitHealthLimit = 1000.0;
    lv_distanceBetweenPoints = 8.0;

    // Implementation
    autoB9DE4296_ae = lv_startLocationBuffer;
    autoB9DE4296_ai = (0.0 - lv_distanceBetweenPoints);
    lv_radiusIter = lp_maxDistance;
    for ( ; ( (autoB9DE4296_ai >= 0 && lv_radiusIter <= autoB9DE4296_ae) || (autoB9DE4296_ai < 0 && lv_radiusIter >= autoB9DE4296_ae) ) ; lv_radiusIter += autoB9DE4296_ai ) {
        lv_angleDelta = (ASin(((lv_distanceBetweenPoints / 2.0) / lv_radiusIter)) * 2.0);
        auto4EC1E152_ai = lv_angleDelta;
        lv_angleIter = RandomFixed(0.0, lv_angleDelta);
        for ( ; ( (auto4EC1E152_ai >= 0 && lv_angleIter <= auto4EC1E152_ae) || (auto4EC1E152_ai < 0 && lv_angleIter >= auto4EC1E152_ae) ) ; lv_angleIter += auto4EC1E152_ai ) {
            lv_pointIter = PointWithOffsetPolar(PlayerStartLocation(libCOMI_gv_cM_ZeratulPlayer), lv_radiusIter, lv_angleIter);
            if ((IntToFixed(lv_validPointsCount) < (lp_maxDistance * 0.33)) && (PointPathingPassable(lv_pointIter) == true) && (PointPathingCost(PlayerStartLocation(libCOMI_gv_cM_ZeratulPlayer), lv_pointIter) <= FixedToInt(lp_maxDistance)) && (DistanceBetweenPoints(PlayerStartLocation(PlayerGroupPlayer(libCOOC_gf_CommanderPlayers(), 1)), lv_pointIter) >= lv_startLocationBuffer) && (DistanceBetweenPoints(PlayerStartLocation(PlayerGroupPlayer(libCOOC_gf_CommanderPlayers(), 2)), lv_pointIter) >= lv_startLocationBuffer) && ((UnitIsAlive(libCOMI_gv_cM_HeroUnit[libCOMI_gv_cM_ZeratulPlayer]) == false) || (DistanceBetweenPoints(UnitGetPosition(libCOMI_gv_cM_HeroUnit[libCOMI_gv_cM_ZeratulPlayer]), lv_pointIter) > libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "ProphecyArtifactRevealSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny)))) {
                lv_nearbyUnitHealth = 0;
                auto38554CDB_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gv_cM_ZeratulPlayer, c_unitAllianceEnemy, RegionCircle(lv_pointIter, 10.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto38554CDB_u = UnitGroupCount(auto38554CDB_g, c_unitCountAll);
                for (;; auto38554CDB_u -= 1) {
                    auto38554CDB_var = UnitGroupUnitFromEnd(auto38554CDB_g, auto38554CDB_u);
                    if (auto38554CDB_var == null) { break; }
                    lv_nearbyUnitHealth += UnitGetPropertyFixed(auto38554CDB_var, c_unitPropLife, c_unitPropCurrent);
                    lv_nearbyUnitHealth += UnitGetPropertyFixed(auto38554CDB_var, c_unitPropShields, c_unitPropCurrent);
                }
                if ((lv_nearbyUnitHealth <= lv_nearbyUnitHealthLimit)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapeCube", 0, 0, lv_pointIter);
                    lv_validPointsCount += 1;
                    if ((RandomFixed(0.0, 1.0) <= (1.0 / lv_validPointsCount))) {
                        lv_pickedPoint = lv_pointIter;
                        if ((UnitIsValid(lv_dEBUG_lastPicked) == true)) {
                            ActorSend(libNtve_gf_MainActorofUnit(lv_dEBUG_lastPicked), "SetTintColor 255,255,255");
                        }

                        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetTintColor 255,0,0");
                        lv_dEBUG_lastPicked = UnitLastCreated();
                    }

                }

            }

        }
    }
    return lv_pickedPoint;
}

point libCOMI_gf_CM_Zeratul_FindArtifactPlacementPointNew (int lp_artifactNumber) {
    // Variable Declarations
    string lv_artifactPlacementData;
    int lv_artifactIndex;
    point lv_artifactOrigin;
    fixed lv_minSearchRadius;
    fixed lv_maxSearchRadius;
    fixed lv_maxWalkingDistance;
    bool lv_checkPathing;
    point lv_pathingCheckPoint;
    fixed lv_nearbyUnitHealth;
    fixed lv_nearbyUnitHealthLimit;
    fixed lv_zeratulSearchRadius;
    bool lv_pointIsPassableAndNotNearZeratul;
    fixed lv_distanceBetweenPoints;
    fixed lv_angleDelta;
    fixed lv_angleIter;
    point lv_pointIter;
    fixed lv_radiusIter;
    int lv_validPointsCount;
    point lv_pickedPoint;
    unit lv_dEBUG_lastPicked;

    // Automatic Variable Declarations
    fixed autoFC6C9A4D_ae;
    fixed autoFC6C9A4D_ai;
    const fixed autoF54F88EB_ae = 360.0;
    fixed autoF54F88EB_ai;
    unitgroup auto1246FD3D_g;
    int auto1246FD3D_u;
    unit auto1246FD3D_var;

    // Variable Initialization
    lv_artifactPlacementData = libCOMI_gf_CM_Zeratul_GetArtifactPlacementDataInstance();
    lv_artifactIndex = libCOMI_gf_CM_Zeratul_GetArtifactDifficultyIndex(lp_artifactNumber, lv_artifactPlacementData);
    lv_artifactOrigin = libCOMI_gf_CM_Zeratul_GetArtifactPlacementOrigin(lv_artifactPlacementData);
    lv_minSearchRadius = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "minSearchRadius", lv_artifactIndex);
    lv_maxSearchRadius = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "maxSearchRadius", lv_artifactIndex);
    lv_maxWalkingDistance = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "maxWalkingDistance", lv_artifactIndex);
    lv_checkPathing = (UserDataGetInt("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "checkPathing", lv_artifactIndex) != 0);
    lv_pathingCheckPoint = UnitTypePlacementFromPoint("ZeratulCoop", libCOMI_gv_cM_ZeratulPlayer, lv_artifactOrigin, 500.0);
    lv_nearbyUnitHealthLimit = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "maxNearbyHealth", lv_artifactIndex);
    lv_zeratulSearchRadius = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "ProphecyArtifactRevealSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny);
    lv_distanceBetweenPoints = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "distanceBetweenPoints", 1);

    // Implementation
    libCOMI_gf_CM_ZeratulProphecyArtifactBadRegion_Set();
    autoFC6C9A4D_ae = lv_minSearchRadius;
    autoFC6C9A4D_ai = (0.0 - lv_distanceBetweenPoints);
    lv_radiusIter = lv_maxSearchRadius;
    for ( ; ( (autoFC6C9A4D_ai >= 0 && lv_radiusIter <= autoFC6C9A4D_ae) || (autoFC6C9A4D_ai < 0 && lv_radiusIter >= autoFC6C9A4D_ae) ) ; lv_radiusIter += autoFC6C9A4D_ai ) {
        lv_angleDelta = (ASin(((lv_distanceBetweenPoints / 2.0) / lv_radiusIter)) * 2.0);
        autoF54F88EB_ai = lv_angleDelta;
        lv_angleIter = RandomFixed(0.0, lv_angleDelta);
        for ( ; ( (autoF54F88EB_ai >= 0 && lv_angleIter <= autoF54F88EB_ae) || (autoF54F88EB_ai < 0 && lv_angleIter >= autoF54F88EB_ae) ) ; lv_angleIter += autoF54F88EB_ai ) {
            lv_pointIter = PointWithOffsetPolar(lv_artifactOrigin, lv_radiusIter, lv_angleIter);
            lv_pointIsPassableAndNotNearZeratul = ((PointPathingPassable(lv_pointIter) == true) && (!(UnitIsAlive(libCOMI_gv_cM_HeroUnit[libCOMI_gv_cM_ZeratulPlayer])) || (DistanceBetweenPoints(UnitGetPosition(libCOMI_gv_cM_HeroUnit[libCOMI_gv_cM_ZeratulPlayer]), lv_pointIter) > lv_zeratulSearchRadius)) && (RegionContainsPoint(libCOMI_gv_cM_ZeratulProphecyArtifactBadRegion, lv_pointIter) == false));
            if ((lv_pointIsPassableAndNotNearZeratul == true) && ((lv_checkPathing == false) || (PointPathingIsConnected(lv_pathingCheckPoint, lv_pointIter) == true)) && ((lv_maxWalkingDistance == 0.0) || (PointPathingCost(lv_pathingCheckPoint, lv_pointIter) <= FixedToInt(lv_maxWalkingDistance)))) {
                if ((lv_nearbyUnitHealthLimit > 0.0)) {
                    lv_nearbyUnitHealth = 0;
                    auto1246FD3D_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gv_cM_ZeratulPlayer, c_unitAllianceEnemy, RegionCircle(lv_pointIter, 10.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto1246FD3D_u = UnitGroupCount(auto1246FD3D_g, c_unitCountAll);
                    for (;; auto1246FD3D_u -= 1) {
                        auto1246FD3D_var = UnitGroupUnitFromEnd(auto1246FD3D_g, auto1246FD3D_u);
                        if (auto1246FD3D_var == null) { break; }
                        if (((UnitFilterMatch(auto1246FD3D_var, UnitGetOwner(auto1246FD3D_var), UnitFilter(0, 0, (1 << c_targetFilterStructure), 0)) == true) || (UnitGetType(auto1246FD3D_var) == "PhotonCannon") || (UnitGetType(auto1246FD3D_var) == "SpineCrawler") || (UnitGetType(auto1246FD3D_var) == "Bunker"))) {
                            lv_nearbyUnitHealth += UnitGetPropertyFixed(auto1246FD3D_var, c_unitPropLife, c_unitPropCurrent);
                            lv_nearbyUnitHealth += UnitGetPropertyFixed(auto1246FD3D_var, c_unitPropShields, c_unitPropCurrent);
                        }

                    }
                }

                if (((lv_nearbyUnitHealthLimit <= 0.0) || (lv_nearbyUnitHealth <= lv_nearbyUnitHealthLimit))) {
                    lv_validPointsCount += 1;
                    if ((RandomFixed(0.0, 1.0) <= (1.0 / lv_validPointsCount))) {
                        lv_pickedPoint = lv_pointIter;
                    }

                }

            }
        }
    }
    if ((lv_validPointsCount == 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_37E803EE"), true);
        return UnitTypePlacementFromPoint("ZeratulArtifactPickup1", libCOMI_gv_cM_ZeratulPlayer, lv_artifactOrigin, 500.0);
    }

    return lv_pickedPoint;
}

point libCOMI_gf_CM_Zeratul_FindArtifactPlacementPointDebug (int lp_artifactNumber, color lp_color, color lp_pickedColor) {
    // Variable Declarations
    string lv_artifactPlacementData;
    int lv_artifactIndex;
    point lv_artifactOrigin;
    fixed lv_minSearchRadius;
    fixed lv_maxSearchRadius;
    fixed lv_maxWalkingDistance;
    bool lv_checkPathing;
    point lv_pathingCheckPoint;
    fixed lv_nearbyUnitHealth;
    fixed lv_nearbyUnitHealthLimit;
    fixed lv_zeratulSearchRadius;
    bool lv_pointIsPassableAndNotNearZeratul;
    fixed lv_distanceBetweenPoints;
    fixed lv_angleDelta;
    fixed lv_angleIter;
    point lv_pointIter;
    fixed lv_radiusIter;
    int lv_validPointsCount;
    point lv_pickedPoint;
    unit lv_dEBUG_lastPicked;
    string lv_tintactormessage;
    string lv_pickedtintactormessage;

    // Automatic Variable Declarations
    fixed autoFE9D12AD_ae;
    fixed autoFE9D12AD_ai;
    const fixed autoDC2ACA37_ae = 360.0;
    fixed autoDC2ACA37_ai;
    unitgroup auto977017AF_g;
    int auto977017AF_u;
    unit auto977017AF_var;

    // Variable Initialization
    lv_artifactPlacementData = libCOMI_gf_CM_Zeratul_GetArtifactPlacementDataInstance();
    lv_artifactIndex = libCOMI_gf_CM_Zeratul_GetArtifactDifficultyIndex(lp_artifactNumber, lv_artifactPlacementData);
    lv_artifactOrigin = libCOMI_gf_CM_Zeratul_GetArtifactPlacementOrigin(lv_artifactPlacementData);
    lv_minSearchRadius = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "minSearchRadius", lv_artifactIndex);
    lv_maxSearchRadius = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "maxSearchRadius", lv_artifactIndex);
    lv_maxWalkingDistance = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "maxWalkingDistance", lv_artifactIndex);
    lv_checkPathing = (UserDataGetInt("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "checkPathing", lv_artifactIndex) != 0);
    lv_pathingCheckPoint = UnitTypePlacementFromPoint("ZeratulCoop", libCOMI_gv_cM_ZeratulPlayer, lv_artifactOrigin, 500.0);
    lv_nearbyUnitHealthLimit = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "maxNearbyHealth", lv_artifactIndex);
    lv_zeratulSearchRadius = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "ProphecyArtifactRevealSearch", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny);
    lv_distanceBetweenPoints = UserDataGetFixed("CoopTechZeratulArtifactPlacement", lv_artifactPlacementData, "distanceBetweenPoints", 1);
    lv_tintactormessage = (("SetTintColor " + libNtve_gf_ConvertColorToString(lp_color)));
    lv_pickedtintactormessage = (("SetTintColor " + libNtve_gf_ConvertColorToString(lp_pickedColor)));

    // Implementation
    libCOMI_gf_CM_ZeratulProphecyArtifactBadRegion_Set();
    autoFE9D12AD_ae = lv_minSearchRadius;
    autoFE9D12AD_ai = (0.0 - lv_distanceBetweenPoints);
    lv_radiusIter = lv_maxSearchRadius;
    for ( ; ( (autoFE9D12AD_ai >= 0 && lv_radiusIter <= autoFE9D12AD_ae) || (autoFE9D12AD_ai < 0 && lv_radiusIter >= autoFE9D12AD_ae) ) ; lv_radiusIter += autoFE9D12AD_ai ) {
        lv_angleDelta = (ASin(((lv_distanceBetweenPoints / 2.0) / lv_radiusIter)) * 2.0);
        autoDC2ACA37_ai = lv_angleDelta;
        lv_angleIter = RandomFixed(0.0, lv_angleDelta);
        for ( ; ( (autoDC2ACA37_ai >= 0 && lv_angleIter <= autoDC2ACA37_ae) || (autoDC2ACA37_ai < 0 && lv_angleIter >= autoDC2ACA37_ae) ) ; lv_angleIter += autoDC2ACA37_ai ) {
            lv_pointIter = PointWithOffsetPolar(lv_artifactOrigin, lv_radiusIter, lv_angleIter);
            lv_pointIsPassableAndNotNearZeratul = ((PointPathingPassable(lv_pointIter) == true) && (!(UnitIsAlive(libCOMI_gv_cM_HeroUnit[libCOMI_gv_cM_ZeratulPlayer])) || (DistanceBetweenPoints(UnitGetPosition(libCOMI_gv_cM_HeroUnit[libCOMI_gv_cM_ZeratulPlayer]), lv_pointIter) > lv_zeratulSearchRadius)) && (RegionContainsPoint(libCOMI_gv_cM_ZeratulProphecyArtifactBadRegion, lv_pointIter) == false));
            if ((lv_pointIsPassableAndNotNearZeratul == true) && ((lv_checkPathing == false) || (PointPathingIsConnected(lv_pathingCheckPoint, lv_pointIter) == true)) && ((lv_maxWalkingDistance == 0.0) || (PointPathingCost(lv_pathingCheckPoint, lv_pointIter) <= FixedToInt(lv_maxWalkingDistance)))) {
                if ((lv_nearbyUnitHealthLimit > 0.0)) {
                    lv_nearbyUnitHealth = 0;
                    auto977017AF_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gv_cM_ZeratulPlayer, c_unitAllianceEnemy, RegionCircle(lv_pointIter, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto977017AF_u = UnitGroupCount(auto977017AF_g, c_unitCountAll);
                    for (;; auto977017AF_u -= 1) {
                        auto977017AF_var = UnitGroupUnitFromEnd(auto977017AF_g, auto977017AF_u);
                        if (auto977017AF_var == null) { break; }
                        if (((UnitFilterMatch(auto977017AF_var, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure), 0)) == true) || (UnitGetType(auto977017AF_var) == "PhotonCannon") || (UnitGetType(auto977017AF_var) == "SpineCrawler") || (UnitGetType(auto977017AF_var) == "Bunker"))) {
                            lv_nearbyUnitHealth += UnitGetPropertyFixed(auto977017AF_var, c_unitPropLife, c_unitPropCurrent);
                            lv_nearbyUnitHealth += UnitGetPropertyFixed(auto977017AF_var, c_unitPropShields, c_unitPropCurrent);
                        }

                    }
                }

                if (((lv_nearbyUnitHealthLimit <= 0.0) || (lv_nearbyUnitHealth <= lv_nearbyUnitHealthLimit))) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapeCube", 0, 0, lv_pointIter);
                    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), lv_tintactormessage);
                    lv_validPointsCount += 1;
                    if ((RandomFixed(0.0, 1.0) <= (1.0 / lv_validPointsCount))) {
                        lv_pickedPoint = lv_pointIter;
                        if ((UnitIsValid(lv_dEBUG_lastPicked) == true)) {
                            ActorSend(libNtve_gf_MainActorofUnit(lv_dEBUG_lastPicked), lv_tintactormessage);
                        }

                        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), lv_pickedtintactormessage);
                        lv_dEBUG_lastPicked = UnitLastCreated();
                    }

                }

            }
        }
    }
    TextExpressionSetToken("Param/Expression/lib_COMI_2DE837E2", "A", IntToText(lv_validPointsCount));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_2DE837E2"), true);
    if ((lv_validPointsCount == 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_97B1CE4C"), true);
        return UnitTypePlacementFromPoint("ZeratulArtifactPickup1", libCOMI_gv_cM_ZeratulPlayer, lv_artifactOrigin, 0.0);
    }

    return lv_pickedPoint;
}

string libCOMI_gf_CM_Zeratul_GetArtifactPlacementDataInstance () {
    // Variable Declarations
    string lv_instance;

    // Automatic Variable Declarations
    string auto3445456B_userType;
    int auto3445456B_i;

    // Variable Initialization

    // Implementation
    auto3445456B_userType = "CoopTechZeratulArtifactPlacement";
    auto3445456B_i = 1;
    for ( ; auto3445456B_i <= UserDataInstanceCount(auto3445456B_userType) ; auto3445456B_i += 1 ) {
        lv_instance = UserDataInstance(auto3445456B_userType, auto3445456B_i);
        if ((UserDataGetGameLink("CoopTechZeratulArtifactPlacement", lv_instance, "MapLink", 1) == libCOOC_gf_CC_CurrentMap())) {
            return lv_instance;
        }

    }
    return "GlobalDefault";
}

point libCOMI_gf_CM_Zeratul_GetArtifactPlacementOrigin (string lp_artifactPlacementData) {
    // Automatic Variable Declarations
    // Implementation
    if ((UserDataGetInt("CoopTechZeratulArtifactPlacement", lp_artifactPlacementData, "useZeratulArtifactOrigin", 1) != 0)) {
        return PointFromName("ZeratulArtifactOrigin");
    }

    return MidPoint(PlayerStartLocation(PlayerGroupPlayer(libCOOC_gf_CommanderPlayers(), 1)), PlayerStartLocation(PlayerGroupPlayer(libCOOC_gf_CommanderPlayers(), 2)));
}

void libCOMI_gf_ResourcePickupAlly (int lp_player, int lp_minerals, int lp_vespene) {
    // Automatic Variable Declarations
    // Implementation
    PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, lp_minerals);
    PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperAdd, lp_vespene);
    SoundPlayForPlayer(SoundLink("UI_ResourcePickup", -1), lp_player, PlayerGroupSingle(lp_player), 100.0, 0.0);
}

void libCOMI_gf_CM_SoACasterUnitSet (unit lp_unit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_SoACasterUnit[lp_player] = lp_unit;
    libCOMI_gv_cM_SoACasterGroup[lp_player] = libNtve_gf_ConvertUnitToUnitGroup(lp_unit);
}

void libCOMI_gf_CM_SoATargetingModeEnter (int lp_player) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_SoATargetingUnrefundableStageEntered[lp_player] = false;
    libCOMI_gv_cM_SoATargetingAlreadyCanceled[lp_player] = false;
    while (!((libCOMI_gv_cM_SoATargetingTransitioning[lp_player] == false))) {
        Wait(0.0625, c_timeGame);
    }
    if ((libCOMI_gf_PlayerInCinematicModeCampaign() == true)) {
        return ;
    }

    TriggerEnable(libCOMI_gt_CM_SoATargetingCancel, true);
    libCOMI_gv_cM_SoAExitInstantly = false;
    libCOMI_gv_cM_SoATargetingUsageCount += 1;
    libCOMI_gv_cM_SoATargetingChargesSpent[lp_player] = 0;
    libCOUI_gf_CU_TargetingSetCharges(libCOMI_gv_cM_SoATargetingChargesTotal[lp_player], libCOMI_gv_cM_SoATargetingChargesTotal[lp_player], lp_player);
    if ((libCOMI_gv_cM_SoATargetingOrder[lp_player] != null)) {
        TriggerEnable(libCOMI_gt_CM_SoATargetingPointChosen, true);
        TriggerEnable(libCOMI_gt_CM_SoATargetingDirectionChosen, true);
        UISetTargetingOrder(PlayerGroupSingle(lp_player), libCOMI_gv_cM_SoACasterGroup[lp_player], libCOMI_gv_cM_SoATargetingOrder[lp_player], false);
        libCOMI_gv_cM_SoATargetingPhase[lp_player] = libCOMI_ge_CM_SoATargetingPhaseType_Location;
    }
    else {
        libCOMI_gv_cM_SoATargetingPhase[lp_player] = libCOMI_ge_CM_SoATargetingPhaseType_None;
    }
    libCOMI_gv_cM_SoATargetingTransitioning[lp_player] = true;
    libCOUI_gf_PU_TargetingUI_EnterTargetingMode(true, false, lp_player);
    libCOUI_gf_CU_TargetingSetInstructionText(libCOMI_gv_cM_SoATargetingInstructionsPrimary[lp_player], lp_player);
    libCOMI_gf_CM_SetFogAlphaOverTime(100.0, 0.5, lp_player);
    CameraSetValue(lp_player, c_cameraValueDistance, 50.0, 1.0, -1, 10.0);
    CameraSetValue(lp_player, c_cameraValuePitch, 70.0, 1.0, -1, 10.0);
    CameraSetData(PlayerGroupSingle(lp_player), "SOATargetingModeCamera");
    libCOMI_gv_cM_SoATargetingTransitioning[lp_player] = false;
    libCOMI_gv_cM_SoATargetingCycling[lp_player] = false;
}

void libCOMI_gf_CM_SoATargetingModeExit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_SoATargetingPhase[lp_player] = libCOMI_ge_CM_SoATargetingPhaseType_None;
    while (!((libCOMI_gv_cM_SoATargetingTransitioning[lp_player] == false))) {
        Wait(0.0625, c_timeGame);
    }
    libCOMI_gv_cM_SoATargetingTransitioning[lp_player] = true;
    if ((libCOMI_gv_cM_SoAExitInstantly == true)) {
        CameraSetValue(lp_player, c_cameraValueDistance, 34.0, 0.0, -1, 10.0);
        CameraSetValue(lp_player, c_cameraValuePitch, 56.0, 0.0, -1, 10.0);
    }
    else {
        CameraSetValue(lp_player, c_cameraValueDistance, 34.0, 0.5, -1, 10.0);
        CameraSetValue(lp_player, c_cameraValuePitch, 56.0, 0.5, -1, 10.0);
    }
    CameraSetData(PlayerGroupSingle(lp_player), "Dflt");
    if ((libCOMI_gv_cM_SoAExitInstantly == true)) {
        VisResetFoWAlpha(lp_player);
        libCOUI_gf_PU_TargetingUI_EnterTargetingMode(false, true, lp_player);
    }
    else {
        libCOMI_gf_CM_ResetFogAlphaOverTime(0.5, lp_player);
        libCOUI_gf_PU_TargetingUI_EnterTargetingMode(false, false, lp_player);
    }
    libNtve_gf_RestoreUnitSelection(lp_player);
    libCOMI_gv_cM_SoATargetingActivateAbility[lp_player] = null;
    libCOMI_gv_cM_SoATargetingTransitioning[lp_player] = false;
    libCOMI_gv_cM_SoATargetingUsageCount -= 1;
    if ((libCOMI_gv_cM_SoATargetingUsageCount == 0)) {
        TriggerEnable(libCOMI_gt_CM_SoATargetingCancel, false);
        TriggerEnable(libCOMI_gt_CM_SoATargetingPointChosen, false);
        TriggerEnable(libCOMI_gt_CM_SoATargetingDirectionChosen, false);
    }

}

void libCOMI_gf_CM_SoATargetingCleanupActorsAndUnits (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoA7000234_ae = libCOMI_gv_cMC_SOATARGETCOUNTMAX;
    const int autoA7000234_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoA7000234_ai >= 0 && lv_index <= autoA7000234_ae) || (autoA7000234_ai < 0 && lv_index >= autoA7000234_ae) ) ; lv_index += autoA7000234_ai ) {
        if ((libCOMI_gv_cM_SoATargetingActors[lv_index][lp_player] != null)) {
            ActorSend(libCOMI_gv_cM_SoATargetingActors[lv_index][lp_player], "Signal Destroy");
            libCOMI_gv_cM_SoATargetingActors[lv_index][lp_player] = null;
        }

        if ((libCOMI_gv_cM_SoATargetingUnit[lv_index][lp_player] != null)) {
            UnitRemove(libCOMI_gv_cM_SoATargetingUnit[lv_index][lp_player]);
            libCOMI_gv_cM_SoATargetingUnit[lv_index][lp_player] = null;
        }

    }
}

trigger auto_libCOMI_gf_CM_SetFogAlphaOverTime_Trigger = null;
fixed auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_targetAlpha;
fixed auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_duration;
int auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_player;

void libCOMI_gf_CM_SetFogAlphaOverTime (fixed lp_targetAlpha, fixed lp_duration, int lp_player) {
    auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_targetAlpha = lp_targetAlpha;
    auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_duration = lp_duration;
    auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_SetFogAlphaOverTime_Trigger == null) {
        auto_libCOMI_gf_CM_SetFogAlphaOverTime_Trigger = TriggerCreate("auto_libCOMI_gf_CM_SetFogAlphaOverTime_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_SetFogAlphaOverTime_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_SetFogAlphaOverTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_targetAlpha = auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_targetAlpha;
    fixed lp_duration = auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_duration;
    int lp_player = auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_player;

    // Variable Declarations
    fixed lv_currentAlpha;
    fixed lv_alphaIncrement;
    fixed lv_incrementFrequency;
    int lv_increments;

    // Automatic Variable Declarations
    int autoE1EEDFCD_n;
    int autoE1EEDFCD_i;

    // Variable Initialization

    // Implementation
    if (((libCOMU_gf_MutatorIsEnabled("BlackFog") == true) || (libCOMU_gf_MutatorIsEnabled("UberDarkness") == true))) {
        return true;
    }

    lv_incrementFrequency = 0.05;
    lv_currentAlpha = VisGetFoWAlpha(lp_player);
    lv_increments = AbsI(FixedToInt((lp_duration / lv_incrementFrequency)));
    lv_alphaIncrement = ((lp_targetAlpha-lv_currentAlpha)/IntToFixed(lv_increments));
    autoE1EEDFCD_n = lv_increments;
    for (autoE1EEDFCD_i = 1; autoE1EEDFCD_i <= autoE1EEDFCD_n; autoE1EEDFCD_i += 1) {
        Wait(lv_incrementFrequency, c_timeGame);
        lv_currentAlpha += lv_alphaIncrement;
        VisSetFoWAlpha(lp_player, lv_currentAlpha);
    }
    VisSetFoWAlpha(lp_player, lp_targetAlpha);
    return true;
}

trigger auto_libCOMI_gf_CM_ResetFogAlphaOverTime_Trigger = null;
fixed auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_duration;
int auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_player;

void libCOMI_gf_CM_ResetFogAlphaOverTime (fixed lp_duration, int lp_player) {
    auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_duration = lp_duration;
    auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_ResetFogAlphaOverTime_Trigger == null) {
        auto_libCOMI_gf_CM_ResetFogAlphaOverTime_Trigger = TriggerCreate("auto_libCOMI_gf_CM_ResetFogAlphaOverTime_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_ResetFogAlphaOverTime_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_ResetFogAlphaOverTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_duration = auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_duration;
    int lp_player = auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_player;

    // Variable Declarations
    fixed lv_currentAlpha;
    fixed lv_alphaIncrement;
    fixed lv_incrementFrequency;
    int lv_increments;
    fixed lv_targetAlpha;

    // Automatic Variable Declarations
    int auto26F5891F_n;
    int auto26F5891F_i;

    // Variable Initialization

    // Implementation
    if (((libCOMU_gf_MutatorIsEnabled("BlackFog") == true) || (libCOMU_gf_MutatorIsEnabled("UberDarkness") == true))) {
        return true;
    }

    lv_incrementFrequency = 0.05;
    lv_currentAlpha = VisGetFoWAlpha(lp_player);
    VisResetFoWAlpha(lp_player);
    lv_targetAlpha = VisGetFoWAlpha(lp_player);
    lv_increments = AbsI(FixedToInt((lp_duration / lv_incrementFrequency)));
    lv_alphaIncrement = ((lv_targetAlpha-lv_currentAlpha)/IntToFixed(lv_increments));
    VisSetFoWAlpha(lp_player, lv_currentAlpha);
    auto26F5891F_n = lv_increments;
    for (auto26F5891F_i = 1; auto26F5891F_i <= auto26F5891F_n; auto26F5891F_i += 1) {
        Wait(lv_incrementFrequency, c_timeGame);
        lv_currentAlpha += lv_alphaIncrement;
        VisSetFoWAlpha(lp_player, lv_currentAlpha);
    }
    VisResetFoWAlpha(lp_player);
    return true;
}

void libCOMI_gf_CM_SoATargetingCancel (int lp_player) {
    // Variable Declarations
    string lv_cost;
    string lv_costField;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cost = "";
    lv_costField = "";

    // Implementation
    UnitIssueOrder(libCOMI_gv_cM_SoACasterUnit[lp_player], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libCOMI_gv_cM_SoATargetingAlreadyCanceled[lp_player] = true;
    libCOMI_gf_CM_SoATargetingCleanupActorsAndUnits(lp_player);
    if ((libCOMI_gv_cM_SoATargetingUnitType[lp_player] != null) && (libCOMI_gv_cM_SoATargetingPhase[lp_player] == libCOMI_ge_CM_SoATargetingPhaseType_Direction)) {
        libCOMI_gv_cM_SoATargetingChargesSpent[lp_player] -= 1;
    }

    if ((libCOMI_gv_cM_SoATargetingChargesSpent[lp_player] == 0) && (libCOMI_gv_cM_SoATargetingUnrefundableStageEntered[lp_player] == false)) {
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_SoACasterUnit[lp_player], libCOMI_gv_cM_SoATargetingActivateAbility[lp_player], libCOMI_gv_cM_SoATargetingCooldown[lp_player]);
        lv_costField = ("Cost[0].Vital[" + "Energy" + "]");
        lv_cost = CatalogFieldValueGet(c_gameCatalogAbil, libCOMI_gv_cM_SoATargetingActivateAbility[lp_player], (lv_costField), lp_player);
        UnitSetPropertyFixed(libCOMI_gv_cM_SoACasterUnit[lp_player], c_unitPropEnergy, (UnitGetPropertyFixed(libCOMI_gv_cM_SoACasterUnit[lp_player], c_unitPropEnergy, c_unitPropCurrent) + StringToFixed(lv_cost)));
        if ((TechTreeUpgradeCount(lp_player, "NovaCommander", c_techCountCompleteOnly) == 1)) {
            PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, libCOMI_gv_cM_NovaGriffinBombingRunCost[lp_player]);
        }

    }

    UnitBehaviorRemove(libCOMI_gv_cM_SoACasterUnit[lp_player], libCOMI_gv_cM_SoATargetingBehavior[lp_player], 1);
    libCOMI_gv_cM_SoATargetingUnrefundableStageEntered[lp_player] = true;
}

void libCOMI_gf_CM_SoATimeFreezeApply (int lp_castingPlayer) {
    // Automatic Variable Declarations
    // Implementation
    libCOOC_gf_CC_AchievementToggleTimeStop(true);
    PlayerCreateEffectPoint(lp_castingPlayer, "SOATimeFreezeVisual", Point(PointGetX(CameraGetTarget(lp_castingPlayer)), PointGetY(CameraGetTarget(lp_castingPlayer))));
    libCOOC_gf_CC_TimeAITemporarySet(true);
    TriggerEnable(libCOMI_gt_CM_SoATimeFreezeCleanup, true);
    TimerStart(libCOMI_gv_cM_SoATimeFreezeTimer, CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "SOATimeFreeze", "Duration", c_playerAny), false, c_timeGame);
}

fixed libCOMI_gf_Lerp (fixed lp_valueZero, fixed lp_valueOne, fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    return ((1 - lp_amount) * lp_valueZero + lp_amount*lp_valueOne);
}

int libCOMI_gf_DifficultyValueInt2 (int lp_difficulty, int lp_beginner, int lp_normal, int lp_advanced, int lp_expert, int lp_virtuoso, int lp_master) {
    // Automatic Variable Declarations
    int autoA10F946A_val;

    // Implementation
    autoA10F946A_val = lp_difficulty;
    if (autoA10F946A_val == 1) {
        return lp_beginner;
    }
    else if (autoA10F946A_val == 2) {
        return lp_normal;
    }
    else if (autoA10F946A_val == 3) {
        return lp_advanced;
    }
    else if (autoA10F946A_val == 4) {
        return lp_expert;
    }
    else if (autoA10F946A_val == 5) {
        return lp_virtuoso;
    }
    else if (autoA10F946A_val == 6) {
        return lp_master;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_1BD6E20E"), true);
        return -1;
    }
}

fixed libCOMI_gf_DifficultyValueFixed2 (int lp_difficulty, fixed lp_beginner, fixed lp_normal, fixed lp_advanced, fixed lp_expert, fixed lp_virtuoso, fixed lp_master) {
    // Automatic Variable Declarations
    int auto0E3D2A41_val;

    // Implementation
    auto0E3D2A41_val = lp_difficulty;
    if (auto0E3D2A41_val == 1) {
        return lp_beginner;
    }
    else if (auto0E3D2A41_val == 2) {
        return lp_normal;
    }
    else if (auto0E3D2A41_val == 3) {
        return lp_advanced;
    }
    else if (auto0E3D2A41_val == 4) {
        return lp_expert;
    }
    else if (auto0E3D2A41_val == 5) {
        return lp_virtuoso;
    }
    else if (auto0E3D2A41_val == 6) {
        return lp_master;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_AC873AC0"), true);
        return -1.0;
    }
}

string libCOMI_gf_DifficultyValueFixed3 (int lp_difficulty, string lp_beginner, string lp_normal, string lp_advanced, string lp_expert, string lp_virtuoso, string lp_master) {
    // Automatic Variable Declarations
    int autoB51CE0AB_val;

    // Implementation
    autoB51CE0AB_val = lp_difficulty;
    if (autoB51CE0AB_val == 1) {
        return lp_beginner;
    }
    else if (autoB51CE0AB_val == 2) {
        return lp_normal;
    }
    else if (autoB51CE0AB_val == 3) {
        return lp_advanced;
    }
    else if (autoB51CE0AB_val == 4) {
        return lp_expert;
    }
    else if (autoB51CE0AB_val == 5) {
        return lp_virtuoso;
    }
    else if (autoB51CE0AB_val == 6) {
        return lp_master;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_68A54BFE"), true);
        return null;
    }
}

bool libCOMI_gf_DifficultyValueFixed4 (int lp_difficulty, bool lp_beginner, bool lp_normal, bool lp_advanced, bool lp_expert, bool lp_virtuoso, bool lp_master) {
    // Automatic Variable Declarations
    int auto76AE2043_val;

    // Implementation
    auto76AE2043_val = lp_difficulty;
    if (auto76AE2043_val == 1) {
        return lp_beginner;
    }
    else if (auto76AE2043_val == 2) {
        return lp_normal;
    }
    else if (auto76AE2043_val == 3) {
        return lp_advanced;
    }
    else if (auto76AE2043_val == 4) {
        return lp_expert;
    }
    else if (auto76AE2043_val == 5) {
        return lp_virtuoso;
    }
    else if (auto76AE2043_val == 6) {
        return lp_master;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_74421686"), true);
        return false;
    }
}

int libCOMI_gf_MinimumDifficultyValueCoopInteger (int lp_casual, int lp_normal, int lp_hard, int lp_brutal, int lp_extreme, int lp_unlikely) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerDifficulty(1) <= libCOMI_gf_DifficultyLevelForPlayerCoop(2)) == true)) {
        return libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(1), lp_casual, lp_normal, lp_hard, lp_brutal, lp_extreme, lp_unlikely);
    }

    return libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(2), lp_casual, lp_normal, lp_hard, lp_brutal, lp_extreme, lp_unlikely);
}

fixed libCOMI_gf_MinimumDifficultyValueCoopReal (fixed lp_beginner, fixed lp_normal, fixed lp_advanced, fixed lp_expert, fixed lp_virtuoso, fixed lp_master) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerDifficulty(1) <= libCOMI_gf_DifficultyLevelForPlayerCoop(2)) == true)) {
        return libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(1), lp_beginner, lp_normal, lp_advanced, lp_expert, lp_virtuoso, lp_master);
    }

    return libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(2), lp_beginner, lp_normal, lp_advanced, lp_expert, lp_virtuoso, lp_master);
}

void libCOMI_gf_CM_MissionEndAwardAchievements (int lp_player) {
    // Automatic Variable Declarations
    int autoD7DFB478_val;

    // Implementation
    if ((libCOMI_gv_cM_EndMissionResult[lp_player] != c_gameOverVictory)) {
        return ;
    }

    if ((libCOOC_gv_cC_InContestMap == true)) {
        return ;
    }

    autoD7DFB478_val = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    if (autoD7DFB478_val == 1) {
        AchievementAward(lp_player, "DifficultyRecruit1");
    }
    else if (autoD7DFB478_val == 2) {
        AchievementAward(lp_player, "DifficultyRecruit1");
        AchievementAward(lp_player, "DifficultySoldier1");
    }
    else if (autoD7DFB478_val == 3) {
        AchievementAward(lp_player, "DifficultyRecruit1");
        AchievementAward(lp_player, "DifficultySoldier1");
        AchievementAward(lp_player, "DifficultyVeteran1");
    }
    else if (autoD7DFB478_val == 4) {
        AchievementAward(lp_player, "DifficultyRecruit1");
        AchievementAward(lp_player, "DifficultySoldier1");
        AchievementAward(lp_player, "DifficultyVeteran1");
        AchievementAward(lp_player, "DifficultyCommander1");
    }
    else {
    }
    AchievementTermQuantitySet(lp_player, libCOOC_gf_CC_MapAchievementTerm(libCOOC_gf_CC_CurrentMap(), libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player)), 1);
}

void libCOMI_gf_GameOver (int lp_gameOverType) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_GameOverResult = lp_gameOverType;
    GameCheatAllow(c_gameCheatVictory, false);
    GameCheatAllow(c_gameCheatDefeat, false);
}

bool libCOMI_gf_GameIsOver () {
    // Automatic Variable Declarations
    // Implementation
    return (libCOMI_gv_cM_GameOverResult != libCOMI_ge_CampaignMissionGameResultType_None);
}

void libCOMI_gf_RunMissionVictorySequence (trigger lp_victoryCinematic) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_GameOver(libCOMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerQueuePause(false);
    libCOMI_gv_cM_MissionVictoryActionQueyeEmpty = false;
    TriggerExecute(libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute, true, false);
    while (!((libCOMI_gv_cM_MissionVictoryActionQueyeEmpty == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueClear(c_triggerQueueKill);
    TriggerExecute(lp_victoryCinematic, true, false);
    TriggerExecute(libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueue, true, false);
}

void libCOMI_gf_EndCampaignMission (int lp_type) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto38057D5B_g;
    playergroup auto86D69DDE_g;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COMI_E4C5B378", "A", IntToText(libCOMI_gv_cM_DebugDehakaEssenceCollected));
    TextExpressionSetToken("Param/Expression/lib_COMI_E4C5B378", "B", IntToText(libCOMI_gv_cM_DebugDehakaEssenceDroppedNormal));
    TextExpressionSetToken("Param/Expression/lib_COMI_E4C5B378", "C", IntToText(libCOMI_gv_cM_DebugDehakaEssenceLost));
    TextExpressionSetToken("Param/Expression/lib_COMI_E4C5B378", "D", IntToText(libCOMI_gv_cM_DebugDehakaEssenceDroppedRefund));
    TriggerDebugOutput(13, TextExpressionAssemble("Param/Expression/lib_COMI_E4C5B378"), false);
    PerfTestStop();
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerQueuePause(true);
    auto38057D5B_g = libCOOC_gf_NondefeatedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto38057D5B_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOOC_gf_CC_PlayerAwardMissionXP(lp_type, lv_indexPlayer);
        libCOOC_gf_CC_SaveAllTransitionData((lp_type != c_gameOverVictory), lv_indexPlayer);
        libCOMI_gv_cM_EndMissionResult[lv_indexPlayer] = lp_type;
        libCOMI_gf_CM_MissionEndAwardAchievements(lv_indexPlayer);
    }
    auto86D69DDE_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto86D69DDE_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((lp_type == c_gameOverVictory)) {
            UIAlert("VictoryAlertCoop", lv_indexPlayer, StringToText(""), null);
        }

        if ((lp_type == c_gameOverDefeat)) {
            UIAlert("DefeatAlertCoop", lv_indexPlayer, StringToText(""), null);
        }

        if ((lp_type == c_gameOverTie)) {
            UIAlert("DrawAlertCoop", lv_indexPlayer, StringToText(""), null);
        }

        libCOOC_gf_CC_SetPlayerDefeated(lv_indexPlayer);
        if ((libCOOC_gv_cC_InContestMap == true)) {
            GameOver(lv_indexPlayer, libCOMI_gv_cM_EndMissionResult[lv_indexPlayer], true, true);
        }
        else {
            libCOUI_gf_CU_FanfareDisplay(lp_type, lv_indexPlayer);
        }
    }
    if ((libCOOC_gf_CoopDebugModeIsOn("LogPerf", 1) == true)) {
        PerfTestStop();
        TriggerStop(libCOMI_gt_CM_CampaignMissionPerfLog);
    }

}

void libCOMI_gf_ZerglingRespawnSetPrimaryHatchery (unit lp_hatchery) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreateEffectUnit(lp_hatchery, "ZerglingRespawnPrimaryRemoveOthers", lp_hatchery);
    UnitBehaviorAdd(lp_hatchery, "ZerglingRespawnPrimary", lp_hatchery, 1);
    libCOMI_gv_cM_PrimaryTownHall[UnitGetOwner(lp_hatchery)] = lp_hatchery;
}

unit libCOMI_gf_CM_PrimaryTownHall (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitIsAlive(libCOMI_gv_cM_PrimaryTownHall[lp_player]) == false) || (UnitFilterMatch(libCOMI_gv_cM_PrimaryTownHall[lp_player], lp_player, UnitFilter((1 << c_targetFilterGround), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false))) {
        return null;
    }

    return libCOMI_gv_cM_PrimaryTownHall[lp_player];
}

void libCOMI_gf_CM_StartingTechForHumanPlayer (int lp_player) {
    // Variable Declarations
    point lv_spawnPoint;
    point lv_mineralPoint;
    unitgroup lv_geysers;
    int lv_unitIter;
    fixed lv_distance;
    fixed lv_startingAngle;
    fixed lv_placementAngle;
    unit lv_townHall;
    unit lv_workerRally;
    point lv_mercSpawnPoint;
    unit lv_indexHatchery;

    // Automatic Variable Declarations
    unitgroup auto15C64F69_g;
    int auto15C64F69_u;
    unitgroup autoB2884491_g;
    int autoB2884491_u;
    string auto11CC9962_val;
    unitgroup auto422C838A_g;
    int auto422C838A_u;
    unit auto422C838A_var;

    // Variable Initialization
    lv_geysers = UnitGroupEmpty();

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COMI_156ACD5F", "A", IntToText(lp_player));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_156ACD5F"), false);
    if ((PlayerStartLocation(lp_player) == null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_6FCB8F89", "A", IntToText(lp_player));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_6FCB8F89"), false);
        return ;
    }

    MeleeInitUnitsForPlayer(lp_player, libCOOC_gf_CC_CommanderSpawnRace(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), PlayerStartLocation(lp_player));
    auto15C64F69_g = UnitGroup("Hatchery", lp_player, RegionCircle(PlayerStartLocation(lp_player), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto15C64F69_u = UnitGroupCount(auto15C64F69_g, c_unitCountAll);
    for (;; auto15C64F69_u -= 1) {
        lv_indexHatchery = UnitGroupUnitFromEnd(auto15C64F69_g, auto15C64F69_u);
        if (lv_indexHatchery == null) { break; }
        UnitBehaviorAdd(lv_indexHatchery, "SpawnLarvaInstant", lv_indexHatchery, 3);
    }
    autoB2884491_g = UnitGroup("SICommandCenter", lp_player, RegionCircle(PlayerStartLocation(lp_player), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB2884491_u = UnitGroupCount(autoB2884491_g, c_unitCountAll);
    for (;; autoB2884491_u -= 1) {
        lv_indexHatchery = UnitGroupUnitFromEnd(autoB2884491_g, autoB2884491_u);
        if (lv_indexHatchery == null) { break; }
        UnitBehaviorAdd(lv_indexHatchery, "SpawnLarvaInstant", lv_indexHatchery, 3);
    }
    auto11CC9962_val = PlayerRace(lp_player);
    if (auto11CC9962_val == "Prot") {
        if ((TechTreeUpgradeCount(lp_player, "FenixCommander", c_techCountCompleteOnly) == 1)) {
            TriggerExecute(libCOMI_gt_CM_Fenix_TriggersInit, true, false);
        }

        if ((TechTreeUpgradeCount(lp_player, "ZeratulCommander", c_techCountCompleteOnly) == 1)) {
            TriggerExecute(libCOMI_gt_CM_Zeratul_TriggersInit, true, false);
        }

    }
    else if (auto11CC9962_val == "Terr") {
        if ((TechTreeUpgradeCount(lp_player, "MasteryRaynorResearchCost", c_techCountCompleteOnly) >= 1)) {
            libCOMI_gf_CM_RaynorUpgradeResearchCost(lp_player, TechTreeUpgradeCount(lp_player, "MasteryRaynorResearchCost", c_techCountCompleteOnly));
        }

        if ((TechTreeUpgradeCount(lp_player, "SwannCommander", c_techCountCompleteOnly) == 1)) {
            if ((TechTreeUpgradeCount(lp_player, "SwannCommanderStartingOrbitalCommand", c_techCountCompleteOnly) == 1)) {
                auto422C838A_g = UnitGroup("CommandCenter", lp_player, RegionCircle(PlayerStartLocation(lp_player), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
                auto422C838A_u = UnitGroupCount(auto422C838A_g, c_unitCountAll);
                for (;; auto422C838A_u -= 1) {
                    auto422C838A_var = UnitGroupUnitFromEnd(auto422C838A_g, auto422C838A_u);
                    if (auto422C838A_var == null) { break; }
                    UnitIssueOrder(auto422C838A_var, Order(AbilityCommand("UpgradeToOrbitalCoop", 0)), c_orderQueueReplace);
                }
            }

            if ((TechTreeUpgradeCount(lp_player, "SwannCommanderStartingRefinery", c_techCountCompleteOnly) == 1)) {
                UnitGroupAddUnitGroup(lv_geysers, UnitGroup("VespeneGeyser", c_playerAny, RegionCircle(PlayerStartLocation(lp_player), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2));
                UnitGroupAddUnitGroup(lv_geysers, UnitGroup("ProtossVespeneGeyser", c_playerAny, RegionCircle(PlayerStartLocation(lp_player), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2));
                UnitGroupAddUnitGroup(lv_geysers, UnitGroup("SpacePlatformGeyser", c_playerAny, RegionCircle(PlayerStartLocation(lp_player), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2));
                if ((TechTreeUpgradeCount(lp_player, "AutoHarvester", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AutomatedRefinery", c_unitCreateIgnorePlacement, lp_player, UnitGetPosition(UnitGroupUnit(lv_geysers, 1)));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AutomatedRefinery", c_unitCreateIgnorePlacement, lp_player, UnitGetPosition(UnitGroupUnit(lv_geysers, 2)));
                }
                else {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Refinery", c_unitCreateIgnorePlacement, lp_player, UnitGetPosition(UnitGroupUnit(lv_geysers, 1)));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Refinery", c_unitCreateIgnorePlacement, lp_player, UnitGetPosition(UnitGroupUnit(lv_geysers, 2)));
                }
            }

        }

        if ((TechTreeUpgradeCount(lp_player, "NovaCommander", c_techCountCompleteOnly) == 1)) {
            TriggerExecute(libCOMI_gt_CM_Nova_TriggersInit, true, false);
        }

        if ((TechTreeUpgradeCount(lp_player, "HornerCommander", c_techCountCompleteOnly) == 1)) {
            TriggerExecute(libCOMI_gt_CM_Horner_TriggersInit, true, false);
        }

        if ((TechTreeUpgradeCount(lp_player, "TychusCommander", c_techCountCompleteOnly) == 1)) {
            TriggerExecute(libCOMI_gt_CM_Tychus_TriggersInit, true, false);
        }

    }
    else if (auto11CC9962_val == "Zerg") {
        if ((TechTreeUpgradeCount(lp_player, "KerriganCommander", c_techCountCompleteOnly) == 1)) {
            TriggerEnable(libCOMI_gt_KerriganEconDrop, true);
            TriggerEnable(libCOMI_gt_CM_Kerrigan_WeaponSwap, true);
            libCOMI_gf_CM_KerriganMalignantCreep();
        }

        if ((TechTreeUpgradeCount(lp_player, "AbathurCommander", c_techCountCompleteOnly) == 1)) {
            TriggerExecute(libCOMI_gt_CM_Abathur_TriggersInit, true, false);
        }

        if ((TechTreeUpgradeCount(lp_player, "StukovCommander", c_techCountCompleteOnly) == 1)) {
            TriggerExecute(libCOMI_gt_CM_Stukov_TriggersInit, true, false);
        }

        if ((TechTreeUpgradeCount(lp_player, "DehakaCommander", c_techCountCompleteOnly) == 1)) {
            if ((TechTreeUpgradeCount(lp_player, "CommanderLevel", c_techCountCompleteOnly) >= 5)) {
                libCOMI_gv_cM_DehakaLevelsMax[lp_player] = 12;
                libCOMI_gv_cM_DehakaVeterencyBehavior[lp_player] = "DehakaVeterancyCoopMedium";
            }

            if ((TechTreeUpgradeCount(lp_player, "CommanderLevel", c_techCountCompleteOnly) >= 12)) {
                libCOMI_gv_cM_DehakaLevelsMax[lp_player] = 14;
                libCOMI_gv_cM_DehakaVeterencyBehavior[lp_player] = "DehakaVeterancyCoopHigh";
            }

            if ((TechTreeUpgradeCount(lp_player, "CommanderLevel", c_techCountCompleteOnly) >= 14)) {
                libCOMI_gv_cM_DehakaLevelsMax[lp_player] = 15;
                libCOMI_gv_cM_DehakaVeterencyBehavior[lp_player] = "DehakaVeterancyCoopFinal";
            }

            libCOMI_gf_CM_Dehaka_SetLevelValues(lp_player);
            TriggerExecute(libCOMI_gt_CM_Dehaka_TriggersInit, true, false);
        }

    }
    else {
    }
    if ((TechTreeUpgradeCount(lp_player, "MasteryKerriganArmyGasCost", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryKerriganArmyVespeneCostList(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasterySwannImmortalityProtocol", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasterySwannSiegeTankImmortalityProtocolCostReduction(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryKaraxUnitCost", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryKerriganArmyVespeneCostList2(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryKerriganImmobilizationWaveDamage", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryKerriganImmobilizationWaveDamage(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryKerriganResearchSpeedandCost", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryKerriganResearchSpeedCost(lp_player);
    }

    TechTreeBehaviorAllow(lp_player, libCOMI_gv_cM_Alarak_EmpowerBehaviorCaster, false);
    if ((TechTreeUpgradeCount(lp_player, "MasteryZagaraRoachDropDamageAndHealth", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryZagraRoachLifeIncrease(lp_player);
    }

    if ((TechTreeUpgradeCount(lp_player, "MasteryFenixReducedResearchCosts", c_techCountCompleteOnly) >= 1)) {
        libCOMI_gf_CM_MasteryResearchCostReduction(lp_player, "MasteryFenixReducedResearchCosts", 1.0);
    }

    libCOMI_gf_VoicePackOverridesApply(lp_player);
}

void libCOMI_gf_VoicePackOverridesApply (int lp_player) {
    // Variable Declarations
    string lv_itReward;
    string lv_appReward;
    string lv_rewardStringIDCombine;

    // Automatic Variable Declarations
    int auto08666BD0_catalog;
    int auto08666BD0_i;
    int auto895D551D_catalog;
    int auto895D551D_i;

    // Variable Initialization
    lv_rewardStringIDCombine = "";

    // Implementation
    auto08666BD0_catalog = c_gameCatalogReward;
    auto08666BD0_i = 1;
    for ( ; auto08666BD0_i <= CatalogEntryCount(c_gameCatalogReward) ; auto08666BD0_i += 1 ) {
        lv_itReward = CatalogEntryGet(auto08666BD0_catalog, auto08666BD0_i);
        if ((CatalogEntryScope(c_gameCatalogReward, lv_itReward) == "CRewardVoicePack")) {
            if ((PlayerHasReward(lp_player, lv_itReward) == true)) {
                lv_rewardStringIDCombine = (((lv_itReward) + "_" + (libCOOC_gf_ActiveCommanderForPlayer(lp_player))));
                auto895D551D_catalog = c_gameCatalogReward;
                auto895D551D_i = 1;
                for ( ; auto895D551D_i <= CatalogEntryCount(c_gameCatalogReward) ; auto895D551D_i += 1 ) {
                    lv_appReward = CatalogEntryGet(auto895D551D_catalog, auto895D551D_i);
                    if ((CatalogEntryScope(c_gameCatalogReward, lv_appReward) == "CRewardVoicePack")) {
                        if (((lv_appReward) == lv_rewardStringIDCombine)) {
                            PlayerAddReward(lp_player, lv_rewardStringIDCombine);
                        }

                    }

                }
            }

        }

    }
}

void libCOMI_gf_EnableDisableZerglingRespawn (bool lp_enableDisable) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto01668500_g;
    playergroup auto08715052_g;

    // Variable Initialization

    // Implementation
    if ((lp_enableDisable == true)) {
        auto08715052_g = libCOOC_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto08715052_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawn", 0), true);
            TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawnPrimary", 0), true);
            TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawnDeath", 0), true);
        }
        TriggerEnable(libCOMI_gt_CM_HatcheryPrimarySearch, true);
    }
    else {
        auto01668500_g = libCOOC_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto01668500_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawn", 0), false);
            TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawnPrimary", 0), false);
            TechTreeAbilityAllow(lv_indexPlayer, AbilityCommand("ZerglingRespawnDeath", 0), false);
        }
        TriggerEnable(libCOMI_gt_CM_HatcheryPrimarySearch, false);
    }
}

trigger auto_libCOMI_gf_CM_HeroHandleDeath_Trigger = null;
int auto_libCOMI_gf_CM_HeroHandleDeath_lp_player;

void libCOMI_gf_CM_HeroHandleDeath (int lp_player) {
    auto_libCOMI_gf_CM_HeroHandleDeath_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_HeroHandleDeath_Trigger == null) {
        auto_libCOMI_gf_CM_HeroHandleDeath_Trigger = TriggerCreate("auto_libCOMI_gf_CM_HeroHandleDeath_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_HeroHandleDeath_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_HeroHandleDeath_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_HeroHandleDeath_lp_player;

    // Variable Declarations
    text lv_tip;
    text lv_subtip;
    string lv_commander;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_commander = libCOOC_gf_ActiveCommanderForPlayer(lp_player);

    // Implementation
    libCOMI_gv_cM_HeroDeathCount[lp_player] += 1;
    libCOMI_gv_zS_ReviveCooldownTimeKerrigan = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, libCOOC_gf_CC_CommanderHeroNormalReviveBehavior(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), "Duration", lp_player));
    libCOUI_gv_cU_HeroReviveTimer[1][lp_player] = libCOMI_gv_zS_ReviveCooldownTimeKerrigan;
    if (((libCOMI_gv_cM_HeroDeathCount[lp_player] > 0))) {
        if ((libCOMI_gf_CM_PrimaryTownHall(lp_player) == null) && (TechTreeUpgradeCount(lp_player, "DehakaCommander", c_techCountCompleteOnly) == 0)) {
            libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(lp_player), libCOMI_ge_CampaignMessageType_Warning, libCOMI_gf_CM_HeroReviveMsgNoTownHall(lp_player), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        }
        else {
            libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(lp_player), libCOMI_ge_CampaignMessageType_Warning, libCOMI_gf_CM_HeroNormalReviveMsgPending(lp_player), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        }
        libNtve_gf_PlayerRemoveCooldown(lp_player, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lp_player)));
        if ((TechTreeUpgradeCount(lp_player, "NovaCommander", c_techCountCompleteOnly) == 1)) {
            TechTreeUpgradeAddLevel(lp_player, "NovaBuybackUnlock", 1);
        }

        Wait(2.0, c_timeGame);
    }
    else {
        libNtve_gf_PlayerRemoveCooldown(lp_player, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lp_player)));
        Wait(0.0625, c_timeGame);
    }
    while (((libCOMI_gf_CM_PrimaryTownHall(lp_player) == null) && (TechTreeUpgradeCount(lp_player, "DehakaCommander", c_techCountCompleteOnly) == 0))) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(libCOMI_gv_cM_HeroUnit[lp_player]) == false)) {
        if ((lv_commander == "ZergDehaka")) {
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, libCOOC_gf_CC_CommanderHeroReviveUnitType(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), 0, lp_player, UnitGetPosition(libCOMI_gf_CM_PrimaryTownHall(lp_player)));
            libCOMI_gv_cM_HeroReviver[lp_player] = UnitLastCreated();
            UnitCreateEffectUnit(libCOMI_gv_cM_HeroReviver[lp_player], "CopyTargetSelectionAndControlGroups", libCOMI_gv_cM_HeroUnit[lp_player]);
        }
        if ((PlayerRace(lp_player) == "Zerg") && (PlayerCommander(lp_player) != "Dehaka")) {
            UnitCreateEffectUnit(libCOMI_gf_CM_PrimaryTownHall(lp_player), "CopyHatcheryRally", libCOMI_gv_cM_HeroReviver[lp_player]);
        }

        libCOUI_gf_SetHeroPanelUnit(1, libCOMI_gv_cM_HeroReviver[lp_player], lp_player);
        if ((libCOMI_gv_cM_HeroDeathCount[lp_player] > 0)) {
            UnitBehaviorAdd(libCOMI_gv_cM_HeroReviver[lp_player], libCOOC_gf_CC_CommanderHeroNormalReviveBehavior(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), libCOMI_gv_cM_HeroReviver[lp_player], 1);
            UnitBehaviorAdd(libCOMI_gv_cM_HeroReviver[lp_player], libCOOC_gf_CC_CommanderHeroReviverExtraBehavior(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), libCOMI_gv_cM_HeroReviver[lp_player], 1);
            libNtve_gf_PlayerRemoveCooldown(lp_player, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lp_player)));
            PlayerAddCooldown(lp_player, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), libCOMI_gv_zS_ReviveCooldownTimeKerrigan);
        }
        else {
            UnitBehaviorAdd(libCOMI_gv_cM_HeroReviver[lp_player], libCOOC_gf_CC_CommanderHeroFirstReviveBehavior(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), libCOMI_gv_cM_HeroReviver[lp_player], 1);
            libCOMI_gv_zS_ReviveCooldownTimeKerrigan = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, libCOOC_gf_CC_CommanderHeroFirstReviveBehavior(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), "Duration", lp_player));
            libCOUI_gv_cU_HeroReviveTimer[1][lp_player] = libCOMI_gv_zS_ReviveCooldownTimeKerrigan;
            libNtve_gf_PlayerRemoveCooldown(lp_player, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lp_player)));
            PlayerAddCooldown(lp_player, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), libCOMI_gv_zS_ReviveCooldownTimeKerrigan);
        }
        UnitIssueOrder(libCOMI_gv_cM_HeroReviver[lp_player], OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), libCOMI_gv_cM_HeroReviver[lp_player]), c_orderQueueReplace);
        UnitIssueOrder(libCOMI_gv_cM_HeroReviver[lp_player], OrderTargetingUnit(AbilityCommand("RallyHatchery", 2), libCOMI_gv_cM_HeroReviver[lp_player]), c_orderQueueReplace);
        UnitSetFacing(libCOMI_gv_cM_HeroUnit[lp_player], UnitGetFacing(libCOMI_gv_cM_HeroReviver[lp_player]), 0.0);
        if ((libCOMI_gv_cM_HeroDeathCount[lp_player] > 0)) {
            UnitSetState(libCOMI_gv_cM_HeroReviver[lp_player], c_unitStateTooltipable, true);
            lv_tip = UnitTypeGetName(UnitGetType(libCOMI_gv_cM_HeroReviver[lp_player]));
            libCOMI_gf_SetUnitInfoTextCampaign(libCOMI_gv_cM_HeroReviver[lp_player], null, lv_tip, lv_subtip);
        }

        if ((PlayerRace(lp_player) == "Zerg")) {
            UnitSetPropertyFixed(libCOMI_gv_cM_HeroReviver[lp_player], c_unitPropLifeRegen, (UnitGetPropertyFixed(libCOMI_gv_cM_HeroReviver[lp_player], c_unitPropLifeMax, c_unitPropCurrent)/libCOMI_gv_zS_ReviveCooldownTimeKerrigan));
        }

        if ((TechTreeUpgradeCount(lp_player, "NovaCommander", c_techCountCompleteOnly) == 1)) {
            if ((libCOMI_gv_cM_HeroDeathCount[lp_player] > 0)) {
                TriggerEnable(libCOMI_gt_CM_NovaRespawnBuyBackCostAdjustment, true);
            }

        }

        libCOMI_gf_CM_HeroWaitForRevive(lp_player);
        Wait(10.0, c_timeGame);
        if ((UnitIsAlive(libCOMI_gv_cM_HeroUnit[lp_player]) == false) && (UnitIsValid(libCOMI_gv_cM_HeroReviver[lp_player]) == true)) {
            UnitSetPosition(libCOMI_gv_cM_HeroUnit[lp_player], UnitGetPosition(libCOMI_gv_cM_HeroReviver[lp_player]), false);
        }

    }

    return true;
}

text libCOMI_gf_CM_HeroNormalReviveMsgPending (int lp_player) {
    // Automatic Variable Declarations
    string auto8E21667C_val;

    // Implementation
    auto8E21667C_val = libCOOC_gf_ActiveCommanderForPlayer(lp_player);
    if (auto8E21667C_val == "ZergKerrigan") {
        TextExpressionSetToken("Param/Expression/lib_COMI_D7AD3E1A", "Duration", FixedToText(libCOMI_gv_zS_ReviveCooldownTimeKerrigan, 0));
        return TextExpressionAssemble("Param/Expression/lib_COMI_D7AD3E1A");
    }
    else if (auto8E21667C_val == "ZergZagara") {
        TextExpressionSetToken("Param/Expression/lib_COMI_11BCBA90", "Duration", FixedToText(libCOMI_gv_zS_ReviveCooldownTimeKerrigan, 0));
        return TextExpressionAssemble("Param/Expression/lib_COMI_11BCBA90");
    }
    else if (auto8E21667C_val == "TerranNova") {
        TextExpressionSetToken("Param/Expression/lib_COMI_F90FD3F3", "Duration", FixedToText(libCOMI_gv_zS_ReviveCooldownTimeKerrigan, 0));
        return TextExpressionAssemble("Param/Expression/lib_COMI_F90FD3F3");
    }
    else if (auto8E21667C_val == "ProtossAlarak") {
        TextExpressionSetToken("Param/Expression/lib_COMI_C759BEF1", "Duration", FixedToText(libCOMI_gv_zS_ReviveCooldownTimeKerrigan, 0));
        return TextExpressionAssemble("Param/Expression/lib_COMI_C759BEF1");
    }
    else if (auto8E21667C_val == "ZergDehaka") {
        TextExpressionSetToken("Param/Expression/lib_COMI_EFA4A2E6", "Duration", FixedToText(libCOMI_gv_zS_ReviveCooldownTimeKerrigan, 0));
        return TextExpressionAssemble("Param/Expression/lib_COMI_EFA4A2E6");
    }
    else if (auto8E21667C_val == "ProtossZeratul") {
        TextExpressionSetToken("Param/Expression/lib_COMI_22C1F924", "Duration", FixedToText(libCOMI_gv_zS_ReviveCooldownTimeKerrigan, 0));
        return TextExpressionAssemble("Param/Expression/lib_COMI_22C1F924");
    }
    else {
    }
    return TextExpressionAssemble("Param/Expression/lib_COMI_0C0853FD");
}

text libCOMI_gf_CM_HeroReviveMsgNoTownHall (int lp_player) {
    // Automatic Variable Declarations
    string auto79E1ED1E_val;

    // Implementation
    auto79E1ED1E_val = libCOOC_gf_ActiveCommanderForPlayer(lp_player);
    if (auto79E1ED1E_val == "ZergKerrigan") {
        return StringExternal("Param/Value/lib_COMI_95EFD188");
    }
    else if (auto79E1ED1E_val == "ZergZagara") {
        return StringExternal("Param/Value/lib_COMI_261331FE");
    }
    else if (auto79E1ED1E_val == "ProtossAlarak") {
        return StringExternal("Param/Value/lib_COMI_1E4D119E");
    }
    else if (auto79E1ED1E_val == "TerranNova") {
        return StringExternal("Param/Value/lib_COMI_93FA8BC9");
    }
    else if (auto79E1ED1E_val == "ZergDehaka") {
        return StringExternal("Param/Value/lib_COMI_920F3CCB");
    }
    else if (auto79E1ED1E_val == "ProtossZeratul") {
        return StringExternal("Param/Value/lib_COMI_17E9CA21");
    }
    else {
    }
    return TextExpressionAssemble("Param/Expression/lib_COMI_9902A686");
}

text libCOMI_gf_CM_HeroReviveMsgComplete (int lp_player) {
    // Automatic Variable Declarations
    string auto4AF238FC_val;

    // Implementation
    auto4AF238FC_val = libCOOC_gf_ActiveCommanderForPlayer(lp_player);
    if (auto4AF238FC_val == "ZergKerrigan") {
        if ((libCOMI_gv_cM_HeroDeathCount[lp_player] > 0)) {
            return StringExternal("Param/Value/lib_COMI_10C0B343");
        }
        else {
            return StringExternal("Param/Value/lib_COMI_84DABCBC");
        }
    }
    else if (auto4AF238FC_val == "ZergZagara") {
        if ((libCOMI_gv_cM_HeroDeathCount[lp_player] > 0)) {
            return StringExternal("Param/Value/lib_COMI_BAEB7C3F");
        }
        else {
            return StringExternal("Param/Value/lib_COMI_DC380D10");
        }
    }
    else if (auto4AF238FC_val == "TerranNova") {
        if ((libCOMI_gv_cM_HeroDeathCount[lp_player] > 0)) {
            return StringExternal("Param/Value/lib_COMI_1769E792");
        }
        else {
            return StringExternal("Param/Value/lib_COMI_11150123");
        }
    }
    else if (auto4AF238FC_val == "ProtossAlarak") {
        if ((libCOMI_gv_cM_HeroDeathCount[lp_player] > 0)) {
            return StringExternal("Param/Value/lib_COMI_325425B9");
        }
        else {
            return StringExternal("Param/Value/lib_COMI_8E0E31E2");
        }
    }
    else if (auto4AF238FC_val == "ZergDehaka") {
        if ((libCOMI_gv_cM_HeroDeathCount[lp_player] > 0)) {
            return StringExternal("Param/Value/lib_COMI_12A8AB36");
        }
        else {
            return StringExternal("Param/Value/lib_COMI_86B95DEF");
        }
    }
    else if (auto4AF238FC_val == "ProtossZeratul") {
        if ((libCOMI_gv_cM_HeroDeathCount[lp_player] > 0)) {
            return StringExternal("Param/Value/lib_COMI_001302B2");
        }
        else {
            return StringExternal("Param/Value/lib_COMI_5BBB9DBA");
        }
    }
    else {
    }
    return TextExpressionAssemble("Param/Expression/lib_COMI_5386C966");
}

trigger auto_libCOMI_gf_CM_HeroWaitForRevive_Trigger = null;
int auto_libCOMI_gf_CM_HeroWaitForRevive_lp_player;

void libCOMI_gf_CM_HeroWaitForRevive (int lp_player) {
    auto_libCOMI_gf_CM_HeroWaitForRevive_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_HeroWaitForRevive_Trigger == null) {
        auto_libCOMI_gf_CM_HeroWaitForRevive_Trigger = TriggerCreate("auto_libCOMI_gf_CM_HeroWaitForRevive_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_HeroWaitForRevive_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_HeroWaitForRevive_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_HeroWaitForRevive_lp_player;

    // Variable Declarations
    point lv_reviveFallbackPoint;
    string lv_commander;

    // Automatic Variable Declarations
    unitgroup autoE01594B5_g;
    int autoE01594B5_u;
    unit autoE01594B5_var;

    // Variable Initialization
    lv_commander = libCOOC_gf_ActiveCommanderForPlayer(lp_player);

    // Implementation
    while (!((PlayerGetCooldown(lp_player, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lp_player))) == 0.0))) {
        Wait(1.0, c_timeGame);
    }
    if ((libCOMI_gv_cM_GameOverResult != libCOMI_ge_CampaignMissionGameResultType_None)) {
        return true;
    }

    UnitBehaviorAdd(libCOMI_gv_cM_HeroUnit[lp_player], "SuppressCollisionRevive", libCOMI_gv_cM_HeroUnit[lp_player], 1);
    if ((libCOMI_gv_cM_HeroReviveTargetLocation[lp_player] != null)) {
        UnitIssueOrder(libCOMI_gv_cM_HeroReviver[lp_player], libNtve_gf_ReviveOrderTargetingPoint(AbilityCommand("NovaRevive", 20), libCOMI_gv_cM_HeroReviveTargetLocation[lp_player], libCOMI_gv_cM_HeroUnit[lp_player]), c_orderQueueReplace);
        lv_reviveFallbackPoint = libCOMI_gv_cM_HeroReviveTargetLocation[lp_player];
        libCOMI_gv_cM_HeroReviveTargetLocation[lp_player] = null;
    }
    else {
        UnitIssueOrder(libCOMI_gv_cM_HeroReviver[lp_player], libNtve_gf_ReviveOrderWithNoTarget(libCOOC_gf_CC_CommanderHeroReviveCommand(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), libCOMI_gv_cM_HeroUnit[lp_player]), c_orderQueueReplace);
        lv_reviveFallbackPoint = UnitGetPosition(libCOMI_gv_cM_HeroReviver[lp_player]);
    }
    libCOUI_gf_SetHeroPanelUnit(1, libCOMI_gv_cM_HeroUnit[lp_player], lp_player);
    Wait(0.125, c_timeGame);
    if ((UnitIsAlive(libCOMI_gv_cM_HeroUnit[lp_player]) == false)) {
        UnitRevive(libCOMI_gv_cM_HeroUnit[lp_player]);
        UnitCreateEffectUnit(libCOMI_gv_cM_HeroUnit[lp_player], libCOMI_gv_cM_HeroReviveHealEffect, libCOMI_gv_cM_HeroUnit[lp_player]);
        if ((RegionContainsPoint(RegionPlayableMap(), lv_reviveFallbackPoint) == true)) {
            UnitSetPosition(libCOMI_gv_cM_HeroUnit[lp_player], lv_reviveFallbackPoint, false);
        }

    }

    autoE01594B5_g = UnitGroupSelected(lp_player);
    autoE01594B5_u = UnitGroupCount(autoE01594B5_g, c_unitCountAll);
    for (;; autoE01594B5_u -= 1) {
        autoE01594B5_var = UnitGroupUnitFromEnd(autoE01594B5_g, autoE01594B5_u);
        if (autoE01594B5_var == null) { break; }
        if ((autoE01594B5_var == libCOMI_gv_cM_HeroReviver[lp_player])) {
            UnitSelect(libCOMI_gv_cM_HeroUnit[lp_player], lp_player, true);
        }

    }
    UnitSelect(libCOMI_gv_cM_HeroReviver[lp_player], lp_player, false);
    if ((lv_commander != "ZergDehaka")) {
        UnitCreateEffectUnit(libCOMI_gv_cM_HeroUnit[lp_player], "CopyTargetSelectionAndControlGroups", libCOMI_gv_cM_HeroReviver[lp_player]);
        UnitKill(libCOMI_gv_cM_HeroReviver[lp_player]);
    }
    else {
        UnitBehaviorRemove(libCOMI_gv_cM_HeroReviver[lp_player], libCOOC_gf_CC_CommanderHeroFirstReviveBehavior(lv_commander), c_unitBehaviorCountAll);
        UnitBehaviorRemove(libCOMI_gv_cM_HeroReviver[lp_player], libCOOC_gf_CC_CommanderHeroNormalReviveBehavior(lv_commander), c_unitBehaviorCountAll);
        UnitBehaviorRemove(libCOMI_gv_cM_HeroReviver[lp_player], libCOOC_gf_CC_CommanderHeroReviverExtraBehavior(lv_commander), c_unitBehaviorCountAll);
    }
    if ((libCOOC_gf_ActiveCommanderForPlayer(lp_player) != "ZergDehaka")) {
        UnitIssueOrder(libCOMI_gv_cM_HeroUnit[lp_player], Order(AbilityCommand("K5KerriganUnburrow", 0)), c_orderQueueReplace);
    }

    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(lp_player), libCOMI_ge_CampaignMessageType_SimpleHint, libCOMI_gf_CM_HeroReviveMsgComplete(lp_player), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    if ((TechTreeUpgradeCount(lp_player, "NovaCommander", c_techCountCompleteOnly) == 1)) {
        TriggerEnable(libCOMI_gt_CM_NovaRespawnBuyBackCostAdjustment, false);
        CatalogFieldValueSet(c_gameCatalogAbil, "NovaReviveInstantBuyback", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", lp_player, "450");
    }

    if ((TechTreeUpgradeCount(lp_player, "DehakaCommander", c_techCountCompleteOnly) == 1)) {
        libCOMI_gf_CM_Dehaka_LevelUp(lp_player, null);
    }

    if ((TechTreeUpgradeCount(lp_player, "ZeratulCommander", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAdd(libCOMI_gv_cM_HeroUnit[lp_player], "ZeratulProphecyCooldownTracker", libCOMI_gv_cM_HeroUnit[lp_player], 1);
    }

    return true;
}

void libCOMI_gf_CM_HeroCreateForPlayer (point lp_spawnPoint, int lp_player, fixed lp_facing, int lp_flags) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreate(1, libCOOC_gf_CC_CommanderHeroUnitType(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), lp_flags, lp_player, lp_spawnPoint, lp_facing);
    libCOMI_gv_cM_HeroUnit[lp_player] = UnitLastCreated();
    UnitGroupAdd(libCOMI_gv_cM_HeroUnitsOfAllCommanders, UnitLastCreated());
}

void libCOMI_gf_CM_HeroStructureCreateForPlayer (point lp_spawnPoint, int lp_player, fixed lp_facing, int lp_flags) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOOC_gf_ActiveCommanderForPlayer(lp_player) != "ProtossFenix")) {
        UnitCreate(1, libCOOC_gf_CC_CommanderHeroStructureType(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), lp_flags, lp_player, lp_spawnPoint, lp_facing);
    }
    else {
        if ((libCOOC_gf_CC_CommanderLevel(lp_player, libCOOC_gf_ActiveCommanderForPlayer(lp_player)) > 1)) {
            UnitCreate(1, libCOOC_gf_CC_CommanderHeroStructureType(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), lp_flags, lp_player, lp_spawnPoint, lp_facing);
        }

    }
    if ((TechTreeUpgradeCount(lp_player, "SwannCommander", c_techCountCompleteOnly) == 1)) {
        libCOMI_gv_cM_LaserDrillUnit[lp_player] = UnitLastCreated();
        libCOMI_gv_cM_LaserDrillUnitGroup[lp_player] = libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated());
    }

    if ((TechTreeUpgradeCount(lp_player, "DehakaCommander", c_techCountCompleteOnly) == 1)) {
        libCOMI_gv_cM_HeroReviver[lp_player] = UnitLastCreated();
    }

    if ((TechTreeUpgradeCount(lp_player, "FenixCommander", c_techCountCompleteOnly) == 1)) {
        libCOMI_gv_cM_Fenix_ChampionStructure[lp_player] = UnitLastCreated();
    }

    if ((TechTreeUpgradeCount(lp_player, "TychusCommander", c_techCountCompleteOnly) == 1)) {
        libCOUI_gf_CU_TychusSetBarUnit(UnitLastCreated());
    }

    if ((TechTreeUpgradeCount(lp_player, "ZeratulCommander", c_techCountCompleteOnly) == 1)) {
        libCOMI_gv_cM_Zeratul_HeroStructure[lp_player] = UnitLastCreated();
        libCOMI_gv_cM_Zeratul_HeroStructureUnitGroup[lp_player] = libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated());
    }

}

void libCOMI_gf_CM_GlobalCasterCreateUnit (int lp_player) {
    // Automatic Variable Declarations
    string autoA976BC21_val;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, libCOOC_gf_CC_CommanderGlobalCastUnitType(libCOOC_gf_ActiveCommanderForPlayer(lp_player)), c_unitCreateIgnorePlacement, lp_player, Point(0.0, 0.0));
    libCOMI_gv_cM_GlobalCasterUnit[lp_player] = UnitLastCreated();
    libCOMI_gv_cM_GlobalCasterUnitGroup[lp_player] = libNtve_gf_ConvertUnitToUnitGroup(libCOMI_gv_cM_GlobalCasterUnit[lp_player]);
    autoA976BC21_val = libCOOC_gf_ActiveCommanderForPlayer(lp_player);
    if (autoA976BC21_val == "ProtossZeratul") {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CoopCasterZeratulSpecialization", c_unitCreateIgnorePlacement, lp_player, Point(0.0, 0.0));
        libCOMI_gv_cM_GlobalCasterUnitSecondary[lp_player] = UnitLastCreated();
        libCOMI_gv_cM_GlobalCasterUnitGroupSecondary[lp_player] = libNtve_gf_ConvertUnitToUnitGroup(libCOMI_gv_cM_GlobalCasterUnitSecondary[lp_player]);
    }
    else {
    }
    UnitSetState(libCOMI_gv_cM_GlobalCasterUnit[lp_player], c_unitStateSelectable, false);
    libCOUI_gf_CU_GPSetUnit(libCOMI_gv_cM_GlobalCasterUnit[lp_player], lp_player);
    libCOMI_gf_CM_SoACasterUnitSet(UnitLastCreated(), lp_player);
}

unit libCOMI_gf_CM_GlobalCasterUnitForCommander (string lp_commanderType) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto4DEC6871_g;

    // Variable Initialization

    // Implementation
    auto4DEC6871_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto4DEC6871_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer) == lp_commanderType)) {
            return libCOMI_gv_cM_GlobalCasterUnit[lv_indexPlayer];
        }

    }
    return null;
}

void libCOMI_gf_CM_PlayerSetGlobalCaster (int lp_player, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_GlobalCasterUnit[lp_player] = lp_unit;
}

unit libCOMI_gf_CM_PlayerGetGlobalCaster (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cM_GlobalCasterUnit[lp_player];
}

void libCOMI_gf_CreateRevealerCoop (int lp_player, region lp_area) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_RevealerCount += 1;
    VisRevealerCreate(lp_player, lp_area);
    DataTableSetRevealer(true, ("CM_Revealer_" + IntToString(libCOMI_gv_cM_RevealerCount)), VisRevealerLastCreated());
    DataTableSetBool(true, ("CM_RevealerOn_" + IntToString(libCOMI_gv_cM_RevealerCount)), true);
    if ((libCOMI_gv_cM_RevealersEnabled == false)) {
        VisRevealerEnable(VisRevealerLastCreated(), false);
    }

}

void libCOMI_gf_EnableDisableRevealerCoop (revealer lp_r, bool lp_enable) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetBool(true, ("CM_RevealerOn_" + IntToString(libCOMI_gf_CM_RevealerIndex(lp_r))), (lp_enable == true));
    if ((lp_enable == true) && (libCOMI_gv_cM_RevealersEnabled == false)) {
        return ;
    }

    VisRevealerEnable(lp_r, lp_enable);
}

void libCOMI_gf_DestroyRevealerCoop (revealer lp_r) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetRevealer(true, ("CM_Revealer_" + IntToString(libCOMI_gf_CM_RevealerIndex(lp_r))), null);
    VisRevealerDestroy(lp_r);
}

int libCOMI_gf_CM_RevealerIndex (revealer lp_revealer) {
    // Variable Declarations
    int lv_revealerIndex;

    // Automatic Variable Declarations
    int autoC6418414_ae;
    const int autoC6418414_ai = 1;

    // Variable Initialization

    // Implementation
    autoC6418414_ae = libCOMI_gv_cM_RevealerCount;
    lv_revealerIndex = 1;
    for ( ; ( (autoC6418414_ai >= 0 && lv_revealerIndex <= autoC6418414_ae) || (autoC6418414_ai < 0 && lv_revealerIndex >= autoC6418414_ae) ) ; lv_revealerIndex += autoC6418414_ai ) {
        if ((libCOMI_gf_CM_RevealerFromIndex(lv_revealerIndex) == lp_revealer)) {
            return lv_revealerIndex;
        }

    }
    return 0;
}

revealer libCOMI_gf_CM_RevealerFromIndex (int lp_revealerIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetRevealer(true, ("CM_Revealer_" + IntToString(lp_revealerIndex)));
}

void libCOMI_gf_CM_RevealersEnableDisable (bool lp_enabled) {
    // Variable Declarations
    bool lv_enableDisable;
    int lv_revealerIndex;
    revealer lv_indexRevealer;

    // Automatic Variable Declarations
    int auto5A33B3FD_ae;
    const int auto5A33B3FD_ai = 1;

    // Variable Initialization
    lv_enableDisable = true;

    // Implementation
    libCOMI_gv_cM_RevealersEnabled = lp_enabled;
    if ((lp_enabled == true)) {
        lv_enableDisable = true;
    }
    else {
        lv_enableDisable = false;
    }
    auto5A33B3FD_ae = libCOMI_gv_cM_RevealerCount;
    lv_revealerIndex = 1;
    for ( ; ( (auto5A33B3FD_ai >= 0 && lv_revealerIndex <= auto5A33B3FD_ae) || (auto5A33B3FD_ai < 0 && lv_revealerIndex >= auto5A33B3FD_ae) ) ; lv_revealerIndex += auto5A33B3FD_ai ) {
        lv_indexRevealer = libCOMI_gf_CM_RevealerFromIndex(lv_revealerIndex);
        if ((lv_indexRevealer != null)) {
            VisRevealerEnable(lv_indexRevealer, lv_enableDisable);
        }

    }
}

void libCOMI_gf_AutoRevealRegionCoop (region lp_visibilityRegion, region lp_triggeringRegion, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libLbty_gv_autoRevealers.lv_count >= 64)) {
        return ;
    }

    libCOMI_gf_CreateRevealerCoop(lp_player, lp_visibilityRegion);
    libLbty_gv_autoRevealers.lv_revealers[libLbty_gv_autoRevealers.lv_count] = VisRevealerLastCreated();
    libCOMI_gf_EnableDisableRevealerCoop(VisRevealerLastCreated(), false);
    libLbty_gv_autoRevealers.lv_triggeringRegions[libLbty_gv_autoRevealers.lv_count] = lp_triggeringRegion;
    libLbty_gv_autoRevealers.lv_triggeringPlayers[libLbty_gv_autoRevealers.lv_count] = lp_player;
    libLbty_gv_autoRevealers.lv_count += 1;
    TriggerExecute(libCOMI_gt_CM_AutoRevealRegionController, true, false);
}

void libCOMI_gf_SetAllianceCoop (int lp_sourcePlayer, int lp_targetPlayer, int lp_alliance) {
    // Variable Declarations
    int lv_humanPlayer;
    int lv_aIPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_SetAlliance(lp_sourcePlayer, lp_targetPlayer, lp_alliance);
    if ((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lp_sourcePlayer) == true) && (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lp_targetPlayer) == false)) {
        lv_humanPlayer = lp_sourcePlayer;
        lv_aIPlayer = lp_targetPlayer;
    }
    else if ((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lp_sourcePlayer) == false) && (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lp_targetPlayer) == true)) {
        lv_humanPlayer = lp_targetPlayer;
        lv_aIPlayer = lp_sourcePlayer;
    }
    else if (true) {
        return ;
    }
    if ((PlayerGetAlliance(lv_aIPlayer, c_allianceIdVision, lv_humanPlayer) == true)) {
        PlayerGroupAdd(libCOMI_gv_cM_SharedVisionPlayers[lv_humanPlayer], lv_aIPlayer);
        if ((libCOMI_gv_cM_VisionShareEnabled == false)) {
            PlayerSetAlliance(lv_aIPlayer, c_allianceIdVision, lv_humanPlayer, false);
        }

    }
    else {
        PlayerGroupRemove(libCOMI_gv_cM_SharedVisionPlayers[lv_humanPlayer], lv_aIPlayer);
    }
}

void libCOMI_gf_SetAllianceOneWayCoop (int lp_sourcePlayer, int lp_targetPlayer, int lp_alliance) {
    // Automatic Variable Declarations
    int auto9570F556_val;

    // Implementation
    if ((lp_sourcePlayer != lp_targetPlayer)) {
        libNtve_gf_ClearAlliance(lp_sourcePlayer, lp_targetPlayer);
        libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, false);
        auto9570F556_val = lp_alliance;
        if (auto9570F556_val == libNtve_ge_AllianceSetting_Ally) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_AllyWithSharedVision) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdControl, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdControl, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdSpend, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_Neutral) {
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_NeutralWithSharedVision) {
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_NeutralWithSharedVisionAndPushable) {
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, true);
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_Enemy) {
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_EnemyWithSharedVision) {
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
        }
        else {
        }
    }

}

void libCOMI_gf_SetAllianceAspectCoop (int lp_inSourcePlayer, int lp_inAllianceId, int lp_inTargetPlayer, bool lp_ally) {
    // Variable Declarations
    int lv_humanPlayer;
    int lv_aIPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_inAllianceId != c_allianceIdVision)) {
        PlayerSetAlliance(lp_inSourcePlayer, lp_inAllianceId, lp_inTargetPlayer, lp_ally);
        return ;
    }

    if ((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lp_inSourcePlayer) == false) && (PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lp_inTargetPlayer) == true)) {
        if ((lp_ally == true)) {
            PlayerGroupAdd(libCOMI_gv_cM_SharedVisionPlayers[lp_inTargetPlayer], lp_inSourcePlayer);
        }
        else {
            PlayerGroupRemove(libCOMI_gv_cM_SharedVisionPlayers[lp_inTargetPlayer], lp_inSourcePlayer);
        }
        if ((libCOMI_gv_cM_VisionShareEnabled == false)) {
            PlayerSetAlliance(lp_inSourcePlayer, c_allianceIdVision, lp_inTargetPlayer, false);
            return ;
        }

    }

    PlayerSetAlliance(lp_inSourcePlayer, lp_inAllianceId, lp_inTargetPlayer, lp_ally);
}

void libCOMI_gf_SetPlayerGroupAlliance (playergroup lp_players, int lp_alliance) {
    // Variable Declarations
    int lv_player1;
    int lv_player2;

    // Automatic Variable Declarations
    playergroup auto8B275F3C_g;
    playergroup auto764B97E8_g;

    // Variable Initialization

    // Implementation
    auto8B275F3C_g = lp_players;
    lv_player1 = -1;
    while (true) {
        lv_player1 = PlayerGroupNextPlayer(auto8B275F3C_g, lv_player1);
        if (lv_player1 < 0) { break; }
        auto764B97E8_g = lp_players;
        lv_player2 = -1;
        while (true) {
            lv_player2 = PlayerGroupNextPlayer(auto764B97E8_g, lv_player2);
            if (lv_player2 < 0) { break; }
            if ((lv_player1 != lv_player2)) {
                libCOMI_gf_SetAllianceOneWayCoop(lv_player1, lv_player2, lp_alliance);
            }

        }
    }
}

void libCOMI_gf_CM_RestorePlayerVision () {
    // Automatic Variable Declarations
}

void libCOMI_gf_CM_GPRemindersInit () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoA2050480_g;
    string autoEB535506_val;

    // Variable Initialization

    // Implementation
    autoA2050480_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoA2050480_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if (((libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) == 4) || (libCOOC_gf_CC_CommanderLevel(lv_indexPlayer, libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer)) <= 2))) {
            libCOMI_gv_cM_GPRemindersOn[lv_indexPlayer] = false;
            return ;
        }

        autoEB535506_val = libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer);
        if (autoEB535506_val == "TerranRaynor") {
            libCOMI_gv_cM_GPRemindersOn[lv_indexPlayer] = true;
            libCOMI_gf_CM_GPReminderRaynor(lv_indexPlayer);
        }
        else if (autoEB535506_val == "ProtossArtanis") {
            libCOMI_gv_cM_GPRemindersOn[lv_indexPlayer] = true;
            TriggerEnable(libCOMI_gt_CM_GPReminderAbilityUsed, true);
            libCOMI_gf_CM_GPReminderArtanis(lv_indexPlayer);
        }
        else if (autoEB535506_val == "ProtossVorazun") {
            libCOMI_gv_cM_GPRemindersOn[lv_indexPlayer] = true;
            TriggerEnable(libCOMI_gt_CM_GPReminderAbilityUsed, true);
            libCOMI_gf_CM_GPReminderVorazun(lv_indexPlayer);
        }
        else if (autoEB535506_val == "ZergAbathur") {
            libCOMI_gv_cM_GPRemindersOn[lv_indexPlayer] = true;
            TriggerEnable(libCOMI_gt_CM_GPReminderAbilityUsed, true);
            libCOMI_gf_CM_GPReminderAbathur(lv_indexPlayer);
        }
        else if (autoEB535506_val == "TerranHorner") {
            libCOMI_gv_cM_GPRemindersOn[lv_indexPlayer] = true;
            TriggerEnable(libCOMI_gt_CM_GPReminderAbilityUsed, true);
            libCOMI_gf_CM_GPReminderHorner(lv_indexPlayer);
        }
        else if (autoEB535506_val == "TerranTychus") {
            libCOMI_gv_cM_GPRemindersOn[lv_indexPlayer] = true;
            TriggerEnable(libCOMI_gt_CM_GPReminderAbilityUsed, true);
            libCOMI_gf_CM_GPReminderTychus(lv_indexPlayer);
        }
        else {
            libCOMI_gv_cM_GPRemindersOn[lv_indexPlayer] = false;
        }
    }
}

trigger auto_libCOMI_gf_CM_GPReminderRaynor_Trigger = null;
int auto_libCOMI_gf_CM_GPReminderRaynor_lp_player;

void libCOMI_gf_CM_GPReminderRaynor (int lp_player) {
    auto_libCOMI_gf_CM_GPReminderRaynor_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_GPReminderRaynor_Trigger == null) {
        auto_libCOMI_gf_CM_GPReminderRaynor_Trigger = TriggerCreate("auto_libCOMI_gf_CM_GPReminderRaynor_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_GPReminderRaynor_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_GPReminderRaynor_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_GPReminderRaynor_lp_player;

    // Variable Declarations
    timer lv_reminderTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reminderTimer = TimerCreate();

    // Implementation
    TimerStart(lv_reminderTimer, 600.0, false, c_timeGame);
    libNtve_gf_WaitForTimer(lv_reminderTimer, 0.0, false);
    if ((libCOMI_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOUI_gf_CU_GPHighlightButton(1, true, lp_player);
    libCOUI_gf_CU_GPHighlightButton(2, true, lp_player);
    return true;
}

trigger auto_libCOMI_gf_CM_GPReminderArtanis_Trigger = null;
int auto_libCOMI_gf_CM_GPReminderArtanis_lp_player;

void libCOMI_gf_CM_GPReminderArtanis (int lp_player) {
    auto_libCOMI_gf_CM_GPReminderArtanis_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_GPReminderArtanis_Trigger == null) {
        auto_libCOMI_gf_CM_GPReminderArtanis_Trigger = TriggerCreate("auto_libCOMI_gf_CM_GPReminderArtanis_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_GPReminderArtanis_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_GPReminderArtanis_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_GPReminderArtanis_lp_player;

    // Automatic Variable Declarations
    // Implementation
    while ((libCOMI_gv_cM_GPRemindersOn[lp_player] == true)) {
        if ((UnitGetPropertyFixed(libCOMI_gv_cM_GlobalCasterUnit[lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0)) {
            break;
        }

        Wait(2.0, c_timeGame);
    }
    Wait(10.0, c_timeGame);
    if ((libCOMI_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOUI_gf_CU_GPHighlightButton(2, true, lp_player);
    libCOUI_gf_CU_GPHighlightButton(3, true, lp_player);
    while (!((UnitGetPropertyFixed(libCOMI_gv_cM_GlobalCasterUnit[lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_CM_GPReminderDisable(lp_player);
    return true;
}

trigger auto_libCOMI_gf_CM_GPReminderVorazun_Trigger = null;
int auto_libCOMI_gf_CM_GPReminderVorazun_lp_player;

void libCOMI_gf_CM_GPReminderVorazun (int lp_player) {
    auto_libCOMI_gf_CM_GPReminderVorazun_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_GPReminderVorazun_Trigger == null) {
        auto_libCOMI_gf_CM_GPReminderVorazun_Trigger = TriggerCreate("auto_libCOMI_gf_CM_GPReminderVorazun_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_GPReminderVorazun_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_GPReminderVorazun_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_GPReminderVorazun_lp_player;

    // Automatic Variable Declarations
    // Implementation
    while ((libCOMI_gv_cM_GPRemindersOn[lp_player] == true)) {
        if ((UnitGetPropertyFixed(libCOMI_gv_cM_GlobalCasterUnit[lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0)) {
            break;
        }

        Wait(2.0, c_timeGame);
    }
    Wait(10.0, c_timeGame);
    if ((libCOMI_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOUI_gf_CU_GPHighlightButton(1, true, lp_player);
    libCOUI_gf_CU_GPHighlightButton(2, true, lp_player);
    libCOUI_gf_CU_GPHighlightButton(3, true, lp_player);
    while (!((UnitGetPropertyFixed(libCOMI_gv_cM_GlobalCasterUnit[lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0))) {
        Wait(1.0, c_timeGame);
    }
    libCOMI_gf_CM_GPReminderDisable(lp_player);
    return true;
}

trigger auto_libCOMI_gf_CM_GPReminderAbathur_Trigger = null;
int auto_libCOMI_gf_CM_GPReminderAbathur_lp_player;

void libCOMI_gf_CM_GPReminderAbathur (int lp_player) {
    auto_libCOMI_gf_CM_GPReminderAbathur_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_GPReminderAbathur_Trigger == null) {
        auto_libCOMI_gf_CM_GPReminderAbathur_Trigger = TriggerCreate("auto_libCOMI_gf_CM_GPReminderAbathur_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_GPReminderAbathur_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_GPReminderAbathur_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_GPReminderAbathur_lp_player;

    // Variable Declarations
    timer lv_reminderTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reminderTimer = TimerCreate();

    // Implementation
    TimerStart(lv_reminderTimer, 600.0, false, c_timeGame);
    libNtve_gf_WaitForTimer(lv_reminderTimer, 0.0, false);
    if ((libCOMI_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOUI_gf_CU_GPHighlightButton(1, true, lp_player);
    libCOUI_gf_CU_GPHighlightButton(2, true, lp_player);
    return true;
}

trigger auto_libCOMI_gf_CM_GPReminderHorner_Trigger = null;
int auto_libCOMI_gf_CM_GPReminderHorner_lp_player;

void libCOMI_gf_CM_GPReminderHorner (int lp_player) {
    auto_libCOMI_gf_CM_GPReminderHorner_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_GPReminderHorner_Trigger == null) {
        auto_libCOMI_gf_CM_GPReminderHorner_Trigger = TriggerCreate("auto_libCOMI_gf_CM_GPReminderHorner_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_GPReminderHorner_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_GPReminderHorner_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_GPReminderHorner_lp_player;

    // Variable Declarations
    timer lv_reminderTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reminderTimer = TimerCreate();

    // Implementation
    TimerStart(lv_reminderTimer, 600.0, false, c_timeGame);
    libNtve_gf_WaitForTimer(lv_reminderTimer, 0.0, false);
    if ((libCOMI_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOUI_gf_CU_GPHighlightButton(1, true, lp_player);
    if ((libCOOC_gf_CC_PerkStateCheck("HornerPHLevel5", libCOOC_ge_CC_PerkState_Locked, "TerranHorner", lp_player) == false)) {
        libCOUI_gf_CU_GPHighlightButton(3, true, lp_player);
    }

    if ((libCOOC_gf_CC_PerkStateCheck("HornerPHLevel10", libCOOC_ge_CC_PerkState_Locked, "TerranHorner", lp_player) == false)) {
        libCOUI_gf_CU_GPHighlightButton(4, true, lp_player);
    }

    return true;
}

trigger auto_libCOMI_gf_CM_GPReminderTychus_Trigger = null;
int auto_libCOMI_gf_CM_GPReminderTychus_lp_player;

void libCOMI_gf_CM_GPReminderTychus (int lp_player) {
    auto_libCOMI_gf_CM_GPReminderTychus_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_GPReminderTychus_Trigger == null) {
        auto_libCOMI_gf_CM_GPReminderTychus_Trigger = TriggerCreate("auto_libCOMI_gf_CM_GPReminderTychus_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_GPReminderTychus_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_GPReminderTychus_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_GPReminderTychus_lp_player;

    // Variable Declarations
    timer lv_reminderTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reminderTimer = TimerCreate();

    // Implementation
    TimerStart(lv_reminderTimer, 600.0, false, c_timeGame);
    libNtve_gf_WaitForTimer(lv_reminderTimer, 0.0, false);
    if ((libCOMI_gv_cM_GPRemindersOn[lp_player] == false)) {
        return true;
    }

    libCOUI_gf_CU_GPHighlightButton(2, true, lp_player);
    return true;
}

void libCOMI_gf_CM_GPReminderDisable (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cM_GPRemindersOn[lp_player] == false)) {
        return ;
    }

    libCOMI_gv_cM_GPRemindersOn[lp_player] = false;
    libCOUI_gf_CU_GPHighlightButton(1, false, lp_player);
    libCOUI_gf_CU_GPHighlightButton(2, false, lp_player);
    libCOUI_gf_CU_GPHighlightButton(3, false, lp_player);
    libCOUI_gf_CU_GPHighlightButton(4, false, lp_player);
}

bool libCOMI_gf_ValidAntiAirUnitIsNearUnit (int lp_player, unit lp_unit) {
    // Variable Declarations
    bool lv_validAttackerFound;
    point lv_unitPosition;

    // Automatic Variable Declarations
    unitgroup auto4C6B244C_g;
    int auto4C6B244C_u;
    unit auto4C6B244C_var;
    unitgroup auto89AFDACF_g;
    int auto89AFDACF_u;
    unit auto89AFDACF_var;

    // Variable Initialization

    // Implementation
    lv_unitPosition = UnitGetPosition(lp_unit);
    auto4C6B244C_g = UnitGroup(null, lp_player, RegionCircle(lv_unitPosition, 16.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4C6B244C_u = UnitGroupCount(auto4C6B244C_g, c_unitCountAll);
    for (;; auto4C6B244C_u -= 1) {
        auto4C6B244C_var = UnitGroupUnitFromEnd(auto4C6B244C_g, auto4C6B244C_u);
        if (auto4C6B244C_var == null) { break; }
        if ((UnitCanAttackTarget(auto4C6B244C_var, lp_unit) == true)) {
            lv_validAttackerFound = true;
            break;
        }

    }
    if ((lv_validAttackerFound == false)) {
        auto89AFDACF_g = UnitGroup(null, lp_player, RegionCircle(lv_unitPosition, 8.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto89AFDACF_u = UnitGroupCount(auto89AFDACF_g, c_unitCountAll);
        for (;; auto89AFDACF_u -= 1) {
            auto89AFDACF_var = UnitGroupUnitFromEnd(auto89AFDACF_g, auto89AFDACF_u);
            if (auto89AFDACF_var == null) { break; }
            if ((UnitCanAttackTarget(auto89AFDACF_var, lp_unit) == true)) {
                lv_validAttackerFound = true;
                break;
            }

        }
    }

    return lv_validAttackerFound;
}

trigger auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_Trigger = null;

void libCOMI_gf_RemindPlayertoCreateAntiAirUnits () {
    if (auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_Trigger == null) {
        auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_Trigger = TriggerCreate("auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_Trigger, false, false);
}

bool auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_currentUnit;
    bool lv_sendTransmission;

    // Automatic Variable Declarations
    unitgroup auto78DC738F_g;
    int auto78DC738F_u;

    // Variable Initialization

    // Implementation
    while (true) {
        auto78DC738F_g = UnitGroupAlliance(1, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterPassive - 32))), 0);
        auto78DC738F_u = UnitGroupCount(auto78DC738F_g, c_unitCountAll);
        for (;; auto78DC738F_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto78DC738F_g, auto78DC738F_u);
            if (lv_currentUnit == null) { break; }
            if ((UnitGroupCount(UnitGroup(null, 1, RegionCircle(UnitGetPosition(lv_currentUnit), 4.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                if ((libCOMI_gf_ValidAntiAirUnitIsNearUnit(1, lv_currentUnit) == false)) {
                    Wait(5.0, c_timeAI);
                    if ((UnitIsAlive(lv_currentUnit) == true)) {
                        if ((UnitGroupCount(UnitGroup(null, 1, RegionCircle(UnitGetPosition(lv_currentUnit), 4.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) && (libCOMI_gf_ValidAntiAirUnitIsNearUnit(1, lv_currentUnit) == false)) {
                            lv_sendTransmission = true;
                        }

                    }

                }

                break;
            }

            Wait(0.1, c_timeAI);
        }
        if ((lv_sendTransmission == true)) {
            break;
        }

        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Speech);
    libCOOC_gf_SetAllSoundChannelVolumesCampaign(libCOOC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

void libCOMI_gf_SetPlayerColors () {
    // Variable Declarations
    int lv_terranColorPrimary;
    int lv_terranColorSecondary;
    int lv_zergColorPrimary;
    int lv_zergColorSecondary;
    int lv_protossColorPrimary;
    int lv_protossColorSecondary;
    int lv_i;

    // Automatic Variable Declarations
    const int auto583267D6_ae = 2;
    const int auto583267D6_ai = 1;
    string autoA8B54D99_val;

    // Variable Initialization
    lv_terranColorPrimary = 1;
    lv_terranColorSecondary = 1;
    lv_zergColorPrimary = 1;
    lv_zergColorSecondary = 1;
    lv_protossColorPrimary = 1;
    lv_protossColorSecondary = 1;

    // Implementation
    lv_i = 1;
    for ( ; ( (auto583267D6_ai >= 0 && lv_i <= auto583267D6_ae) || (auto583267D6_ai < 0 && lv_i >= auto583267D6_ae) ) ; lv_i += auto583267D6_ai ) {
        autoA8B54D99_val = PlayerCommander(lv_i);
        if (autoA8B54D99_val == "Raynor") {
            libCOMI_gv_playerColor[lv_i] = 2;
        }
        else if (autoA8B54D99_val == "Swann") {
            libCOMI_gv_playerColor[lv_i] = 6;
        }
        else if (autoA8B54D99_val == "Nova") {
            libCOMI_gv_playerColor[lv_i] = 3;
        }
        else if (autoA8B54D99_val == "Kerrigan") {
            libCOMI_gv_playerColor[lv_i] = 15;
        }
        else if (autoA8B54D99_val == "Zagara") {
            libCOMI_gv_playerColor[lv_i] = 13;
        }
        else if (autoA8B54D99_val == "Abathur") {
            libCOMI_gv_playerColor[lv_i] = 5;
        }
        else if (autoA8B54D99_val == "Stukov") {
            libCOMI_gv_playerColor[lv_i] = 8;
        }
        else if (autoA8B54D99_val == "Artanis") {
            libCOMI_gv_playerColor[lv_i] = 3;
        }
        else if (autoA8B54D99_val == "Karax") {
            libCOMI_gv_playerColor[lv_i] = 5;
        }
        else if (autoA8B54D99_val == "Vorazun") {
            libCOMI_gv_playerColor[lv_i] = 4;
        }
        else if (autoA8B54D99_val == "Alarak") {
            libCOMI_gv_playerColor[lv_i] = 14;
        }
        else if (autoA8B54D99_val == "Fenix") {
            libCOMI_gv_playerColor[lv_i] = 6;
        }
        else if (autoA8B54D99_val == "Dehaka") {
            libCOMI_gv_playerColor[lv_i] = 12;
        }
        else if (autoA8B54D99_val == "Horner") {
            libCOMI_gv_playerColor[lv_i] = 11;
        }
        else if (autoA8B54D99_val == "Tychus") {
            libCOMI_gv_playerColor[lv_i] = 10;
        }
        else if (autoA8B54D99_val == "Zeratul") {
            libCOMI_gv_playerColor[lv_i] = 7;
        }
        else {
            libCOMI_gv_playerColor[lv_i] = 0;
        }
    }
}

int libCOMI_gf_EnemyPlayerColor () {
    // Automatic Variable Declarations
    // Implementation
    return 1;
}

int libCOMI_gf_HumanPlayerColor (int lp_player) {
    // Automatic Variable Declarations
    int auto71C3AFB3_val;

    // Implementation
    auto71C3AFB3_val = lp_player;
    if (auto71C3AFB3_val == 1) {
        return libCOMI_gv_playerColor[1];
    }
    else if (auto71C3AFB3_val == 2) {
        return libCOMI_gv_playerColor[2];
    }
    else {
        return 15;
    }
}

int libCOMI_gf_AllyPlayerColor () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

void libCOMI_gf_ResearchAIUpgrade (int lp_count, string lp_upgrade, int lp_player) {
    // Automatic Variable Declarations
    int auto2117ABBB_n;
    int auto2117ABBB_i;

    // Implementation
    auto2117ABBB_n = lp_count;
    for (auto2117ABBB_i = 1; auto2117ABBB_i <= auto2117ABBB_n; auto2117ABBB_i += 1) {
        AIResearch(lp_player, 4, -1, lp_upgrade);
    }
}

void libCOMI_gf_ShareVisionAmongPlayers (playergroup lp_players) {
    // Variable Declarations
    int lv_indexPlayer1;
    int lv_indexPlayer2;

    // Automatic Variable Declarations
    playergroup autoE1FC9780_g;
    playergroup auto201B96D5_g;

    // Variable Initialization

    // Implementation
    autoE1FC9780_g = lp_players;
    lv_indexPlayer1 = -1;
    while (true) {
        lv_indexPlayer1 = PlayerGroupNextPlayer(autoE1FC9780_g, lv_indexPlayer1);
        if (lv_indexPlayer1 < 0) { break; }
        auto201B96D5_g = lp_players;
        lv_indexPlayer2 = -1;
        while (true) {
            lv_indexPlayer2 = PlayerGroupNextPlayer(auto201B96D5_g, lv_indexPlayer2);
            if (lv_indexPlayer2 < 0) { break; }
            if ((lv_indexPlayer1 != lv_indexPlayer2)) {
                PlayerSetAlliance(lv_indexPlayer1, c_allianceIdVision, lv_indexPlayer2, true);
            }

        }
    }
}

void libCOMI_gf_TurnPlayerFlagOnOffForGroup (playergroup lp_players, int lp_playerFlag, bool lp_onOff) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoB6C32126_g;

    // Variable Initialization

    // Implementation
    autoB6C32126_g = lp_players;
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoB6C32126_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        PlayerSetState(lv_indexPlayer, lp_playerFlag, lp_onOff);
    }
}

void libCOMI_gf_CreateAlertAtPointCampaign (string lp_alertType, text lp_text, string lp_icon, point lp_point) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto30CC37A9_g;

    // Variable Initialization

    // Implementation
    auto30CC37A9_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto30CC37A9_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        UIAlertPoint(lp_alertType, lv_indexPlayer, lp_text, lp_icon, lp_point);
    }
}

void libCOMI_gf_CreateAlertAtUnitCampaign (string lp_alertType, text lp_text, string lp_icon, unit lp_unit) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto0BE3493B_g;

    // Variable Initialization

    // Implementation
    auto0BE3493B_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto0BE3493B_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        UIAlertUnit(lp_alertType, lv_indexPlayer, lp_text, lp_icon, lp_unit);
    }
}

void libCOMI_gf_SetAlliedCommandersstartingResources () {
    // Automatic Variable Declarations
    // Implementation
    MeleeInitResources();
}

int libCOMI_gf_DifficultyLevelForPlayerCoop (int lp_player) {
    // Automatic Variable Declarations
    int autoF9E6B533_val;

    // Implementation
    if ((GameIsOnline() == true)) {
        autoF9E6B533_val = lp_player;
        if (autoF9E6B533_val == 1) {
            return PlayerDifficulty(3);
        }
        else if (autoF9E6B533_val == 2) {
            return PlayerDifficulty(4);
        }
        else {
            return PlayerDifficulty(lp_player);
        }
    }
    else {
        return PlayerDifficulty(lp_player);
    }
}

bool libCOMI_gf_PlayerIsInCombat (int lp_player) {
    // Variable Declarations
    fixed lv_combatTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(lp_player) == true)) {
        return false;
    }

    lv_combatTime = MaxF(PlayerGetPropertyFixed(lp_player, c_playerPropDamageDealtTime), PlayerGetPropertyFixed(lp_player, c_playerPropDamageTakenTime));
    lv_combatTime = (TimerGetElapsed(libCOMI_gv_cM_CombatTimer) - lv_combatTime);
    return (lv_combatTime < 4.0);
}

int libCOMI_gf_MissionObjectiveItemCountCoop (string lp_objectiveData) {
    // Variable Declarations
    int lv_itemCountReturn;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_itemCountReturn = DataTableGetInt(true, libCOMI_gf_CM_ObjectiveRequiredCount(lp_objectiveData));
    if ((lv_itemCountReturn == 0)) {
        lv_itemCountReturn = libCOOC_gf_MissionObjectiveItemCount(lp_objectiveData);
        DataTableSetInt(true, libCOMI_gf_CM_ObjectiveRequiredCount(lp_objectiveData), lv_itemCountReturn);
    }

    return lv_itemCountReturn;
}

string libCOMI_gf_CM_ObjectiveRequiredCount (string lp_objectiveData) {
    // Automatic Variable Declarations
    // Implementation
    return (libCOOC_gf_CS_ObjectiveTableString(lp_objectiveData) + "_RequiredCount");
}

string libCOMI_gf_CM_ObjectiveTimer (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return (libCOOC_gf_CS_ObjectiveTableString(lp_objective) + "_Timer");
}

void libCOMI_gf_SetMissionObjectiveProgress (string lp_objective, int lp_current) {
    // Variable Declarations
    text lv_name;
    text lv_bonusText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCOOC_gf_ZS_SetObjectiveProgressData(lp_objective, lp_current);
    if ((libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective) == null)) {
        return ;
    }

    libCOMI_gf_CM_UpdateObjectiveTextCampaign(lp_objective);
}

void libCOMI_gf_CreateObjectiveCampaign (string lp_objectiveData) {
    // Variable Declarations
    bool lv_isPrimary;
    text lv_name;
    text lv_bonusText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCOOC_gf_CC_ObjectiveRegister(lp_objectiveData);
    if ((libCOMI_gf_MissionObjectiveItemCountCoop(lp_objectiveData) == 0)) {
        libCOMI_gf_SetObjectiveRequiredCountCampaign(lp_objectiveData, CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objectiveData), "RequiredCount", c_playerAny));
    }

    lv_name = libCOOC_gf_MissionObjectiveName(lp_objectiveData);
    lv_bonusText = libCOOC_gf_CS_CampaignObjectiveBonusText(lp_objectiveData);
    ObjectiveCreate(lv_name, libCOOC_gf_MissionObjectiveDescription(lp_objectiveData), c_objectiveStateActive, libCOOC_gf_CS_GetObjectiveTypeBoolean(lp_objectiveData));
    DataTableSetObjective(true, libCOOC_gf_CS_ObjectiveTableString(lp_objectiveData), ObjectiveLastCreated());
    if ((libCOOC_gf_CS_ObjectiveCountsDown(lp_objectiveData) == false)) {
        if ((libCOOC_gf_MissionObjectiveItemCount(lp_objectiveData) == 1)) {
            libCOOC_gf_ZS_SetObjectiveProgressData(lp_objectiveData, 0);
        }
        else {
            libCOMI_gf_SetMissionObjectiveProgress(lp_objectiveData, 0);
        }
    }
    else {
        if ((libCOOC_gf_MissionObjectiveItemCount(lp_objectiveData) == 1)) {
            libCOOC_gf_ZS_SetObjectiveProgressData(lp_objectiveData, libCOOC_gf_MissionObjectiveItemCount(lp_objectiveData));
        }
        else {
            libCOMI_gf_SetMissionObjectiveProgress(lp_objectiveData, libCOOC_gf_MissionObjectiveItemCount(lp_objectiveData));
        }
    }
    libCOMI_gf_CM_UpdateObjectiveTextCampaign(lp_objectiveData);
}

void libCOMI_gf_ZS_SetMissionObjectiveState (string lp_objective, int lp_state) {
    // Automatic Variable Declarations
    int autoD2FFF70D_val;

    // Implementation
    autoD2FFF70D_val = lp_state;
    if (autoD2FFF70D_val == libCOOC_ge_MissionObjectiveState_Available) {
        UserDataSetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Available", 1, 1);
        UserDataSetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 0);
        ObjectiveSetState(DataTableGetObjective(true, libCOOC_gf_CS_ObjectiveTableString(lp_objective)), c_objectiveStateActive);
    }
    else if (autoD2FFF70D_val == libCOOC_ge_MissionObjectiveState_Completed) {
        UserDataSetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 1);
        UserDataSetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Available", 1, 0);
        ObjectiveSetState(DataTableGetObjective(true, libCOOC_gf_CS_ObjectiveTableString(lp_objective)), c_objectiveStateCompleted);
        TextExpressionSetToken("Param/Expression/lib_COMI_0B6E0658", "A", ObjectiveGetName(DataTableGetObjective(true, libCOOC_gf_CS_ObjectiveTableString(lp_objective))));
        ObjectiveSetName(DataTableGetObjective(true, libCOOC_gf_CS_ObjectiveTableString(lp_objective)), TextExpressionAssemble("Param/Expression/lib_COMI_0B6E0658"));
        libCOOC_gf_ZS_SetObjectiveProgressData(lp_objective, libCOOC_gf_MissionObjectiveItemCount(lp_objective));
    }
    else if (autoD2FFF70D_val == libCOOC_ge_MissionObjectiveState_Undiscovered) {
        UserDataSetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 0);
        UserDataSetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Available", 1, 0);
        ObjectiveSetState(DataTableGetObjective(true, libCOOC_gf_CS_ObjectiveTableString(lp_objective)), c_objectiveStateHidden);
    }
    else if (autoD2FFF70D_val == libCOOC_ge_MissionObjectiveState_Failed) {
        UserDataSetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 0);
        ObjectiveSetState(DataTableGetObjective(true, libCOOC_gf_CS_ObjectiveTableString(lp_objective)), c_objectiveStateFailed);
    }
    else {
    }
}

void libCOMI_gf_SetObjectiveRequiredCountCampaign (string lp_objective, int lp_requiredCount) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libCOMI_gf_CM_ObjectiveRequiredCount(lp_objective), lp_requiredCount);
    libCOMI_gf_CM_UpdateObjectiveTextCampaign(lp_objective);
}

void libCOMI_gf_SetObjectiveTimerCampaign (string lp_objective, timer lp_timer) {
    // Automatic Variable Declarations
    // Implementation
    if ((DataTableGetTimer(true, libCOOC_gf_CS_ObjectiveTableString(lp_objective)) != lp_timer)) {
        DataTableSetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective), lp_timer);
        libCOMI_gf_CM_UpdateObjectiveTimerCampaign(lp_objective);
    }

}

void libCOMI_gf_SetObjectiveTimerColorThresholdCampaign (string lp_objective, int lp_color, int lp_remainingTime) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, (libCOMI_gf_CM_ObjectiveTimer(lp_objective) + "_" + libCOMI_ge_ObjectiveTimerThresholds_Ident(lp_color)), lp_remainingTime);
}

void libCOMI_gf_SetMissionObjectiveCustomText (string lp_objective, text lp_customText) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetText(true, (libCOOC_gf_CS_ObjectiveTableString(lp_objective) + "_" + "CustomToken"), lp_customText);
    libCOMI_gf_CM_UpdateObjectiveTextCampaign(lp_objective);
}

void libCOMI_gf_CM_UpdateObjectiveTextCampaign (string lp_objective) {
    // Variable Declarations
    text lv_name;
    text lv_bonusText;
    int lv_progress;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_progress = UserDataGetInt("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "Progress", 1);
    lv_name = TextReplaceWord(UserDataGetText("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "FormatText", 1), StringExternal("Param/Value/lib_COMI_90EC773D"), libCOOC_gf_MissionObjectiveName(lp_objective), c_stringReplaceAll, c_stringCase);
    lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_COMI_F72DF09B"), IntToText(lv_progress), c_stringReplaceAll, c_stringCase);
    lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_COMI_7AA38B9D"), IntToText(libCOMI_gf_MissionObjectiveItemCountCoop(lp_objective)), c_stringReplaceAll, c_stringCase);
    lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_COMI_9C9EACB0"), DataTableGetText(true, (libCOOC_gf_CS_ObjectiveTableString(lp_objective) + "_" + "CustomToken")), c_stringReplaceAll, c_stringCase);
    if ((libCOOC_gf_MissionObjectiveStateCheck(lp_objective, libCOOC_ge_MissionObjectiveState_Completed) == true)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_BEDEFD56", "A", lv_name);
        lv_name = TextExpressionAssemble("Param/Expression/lib_COMI_BEDEFD56");
    }

    lv_bonusText = libCOOC_gf_CS_CampaignObjectiveBonusText(lp_objective);
    if (((lv_bonusText != null) == true)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_5966D169", "A", lv_name);
        TextExpressionSetToken("Param/Expression/lib_COMI_5966D169", "B", lv_bonusText);
        lv_name = TextExpressionAssemble("Param/Expression/lib_COMI_5966D169");
    }

    if ((libCOOC_gf_MissionObjectiveStateCheck(lp_objective, libCOOC_ge_MissionObjectiveState_Completed) == true)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_E3BF1656", "A", lv_name);
        lv_name = TextExpressionAssemble("Param/Expression/lib_COMI_E3BF1656");
    }

    ObjectiveSetName(DataTableGetObjective(true, libCOOC_gf_CS_ObjectiveTableString(lp_objective)), lv_name);
}

trigger auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_Trigger = null;
string auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_lp_objective;

void libCOMI_gf_CM_UpdateObjectiveTimerCampaign (string lp_objective) {
    auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_lp_objective = lp_objective;

    if (auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_Trigger == null) {
        auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_Trigger = TriggerCreate("auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_TriggerFunc (bool testConds, bool runActions) {
    string lp_objective = auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_lp_objective;

    // Variable Declarations
    text lv_name;
    timer lv_timerCurrent;

    // Automatic Variable Declarations
    int auto3EF0D545_val;

    // Variable Initialization
    lv_timerCurrent = TimerCreate();

    // Implementation
    lv_timerCurrent = DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective));
    while ((libCOMI_gf_GameIsOver() == false) && (lv_timerCurrent == DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective)))) {
        lv_timerCurrent = DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective));
        auto3EF0D545_val = ObjectiveGetState(libCOOC_gf_CS_GetObjectiveForData(lp_objective));
        if (auto3EF0D545_val == c_objectiveStateActive) {
            lv_name = TextReplaceWord(UserDataGetText("MissionObjective", libCOOC_gf_CS_ObjectiveUserDataInstance(lp_objective), "FormatText", 1), StringExternal("Param/Value/lib_COMI_4D91C023"), libCOOC_gf_MissionObjectiveName(lp_objective), c_stringReplaceAll, c_stringCase);
            if ((TimerGetRemaining(DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective))) > 0.0)) {
                if ((TimerGetRemaining(DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective))) <= DataTableGetInt(true, (libCOMI_gf_CM_ObjectiveTimer(lp_objective) + "_" + libCOMI_ge_ObjectiveTimerThresholds_Ident(libCOMI_ge_ObjectiveTimerThresholds_Red))))) {
                    lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_COMI_251B217F"), TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective))))), Color(100.00, 0.00, 0.00)), c_stringReplaceAll, c_stringCase);
                }
                else {
                    if ((TimerGetRemaining(DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective))) <= DataTableGetInt(true, (libCOMI_gf_CM_ObjectiveTimer(lp_objective) + "_" + libCOMI_ge_ObjectiveTimerThresholds_Ident(libCOMI_ge_ObjectiveTimerThresholds_Yellow))))) {
                        lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_COMI_A59236C2"), TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective))))), Color(100.00, 100.00, 0.00)), c_stringReplaceAll, c_stringCase);
                    }
                    else {
                        lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_COMI_6CC50938"), TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective))))), c_stringReplaceAll, c_stringCase);
                    }
                }
            }
            else if (true) {
                lv_name = libCOOC_gf_MissionObjectiveName(lp_objective);
            }
            ObjectiveSetName(DataTableGetObjective(true, libCOOC_gf_CS_ObjectiveTableString(lp_objective)), lv_name);
        }
        else if (auto3EF0D545_val == c_objectiveStateCompleted) {
            ObjectiveSetName(DataTableGetObjective(true, libCOOC_gf_CS_ObjectiveTableString(lp_objective)), libCOOC_gf_MissionObjectiveName(lp_objective));
            return true;
        }
        else {
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

void libCOMI_gf_AddMissionTipCampaign (string lp_tipData) {
    // Automatic Variable Declarations
}

trigger auto_libCOMI_gf_DisplayMissionTip_Trigger = null;

void libCOMI_gf_DisplayMissionTip () {
    if (auto_libCOMI_gf_DisplayMissionTip_Trigger == null) {
        auto_libCOMI_gf_DisplayMissionTip_Trigger = TriggerCreate("auto_libCOMI_gf_DisplayMissionTip_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_DisplayMissionTip_Trigger, false, false);
}

bool auto_libCOMI_gf_DisplayMissionTip_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

void libCOMI_gf_CM_CommanderVOInit () {
    // Variable Declarations
    int lv_indexPlayer;
    string lv_indexCommander;

    // Automatic Variable Declarations
    playergroup auto24DB78C3_g;
    int auto53C20295_ai;
    int auto53C20295_ae;
    playergroup auto8051EF80_g;
    string autoCD6ED918_val;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_VOGroupGender = c_genderFemale;
    auto24DB78C3_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto24DB78C3_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOOC_gf_CC_CommanderGender(libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer)) == c_genderMale)) {
            libCOMI_gv_cM_VOGroupGender = c_genderMale;
            break;
        }

    }
    ConversationDataSetListenerGender("acObj", libCOMI_gv_cM_VOGroupGender);
    ConversationDataSetListenerGender("acResponses", libCOMI_gv_cM_VOGroupGender);
    ConversationDataRegisterPortrait("char_TerranAdjutant", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ProtossExecutor", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_Izsha", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_SgtHammer", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACScientist", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_DominionOfficer", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ShakurasAlly", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_Hill", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_TDChampion", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_Vermillion", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_BelshirScientist", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACJarbanMiner", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACMeinhoffMedic", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACAiurSiege", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACCybrosEscort", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACPartAndParcel", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_Stone", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    auto53C20295_ai = 1;
    auto53C20295_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (auto53C20295_ai < auto53C20295_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", auto53C20295_ai);
        auto53C20295_ai = auto53C20295_ai+1;
        ConversationDataRegisterPortrait(libCOOC_gf_CC_CommanderConversationLink(lv_indexCommander), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    }
    ConversationDataRegisterPortrait("char_Han", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    libCOMI_gf_CM_VOResourceInit();
    TriggerEnable(libCOMI_gt_CM_VOEnemySpotted, true);
    TriggerExecute(libCOMI_gt_CM_VOUnitsLostCheck, true, false);
    auto8051EF80_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto8051EF80_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) != 2)) {
            TriggerEnable(libCOMI_gt_CM_VOEnemyCloakedSpotted, true);
        }

        autoCD6ED918_val = libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer);
        if (autoCD6ED918_val == "TerranRaynor") {
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionRaynorHyperion, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionRaynorBansheesUsed, true);
            if ((libCOOC_gf_CC_PerkStateCheck("RaynorBansheeAirstrike", libCOOC_ge_CC_PerkState_Locked, "TerranRaynor", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("AdjutantAlert_RaynorAirStrikeReady", -1), "Abil/BansheeAirstrike", null);
            }

            libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("AdjutantAlert_RaynorHyperionReady", -1), "Abil/VoidCoopSummonHyperion", null);
        }
        else if (autoCD6ED918_val == "TerranSwann") {
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionSwannDrone, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionSwannCombatDropUsed, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionSwannLaserDrill, true);
            if ((libCOOC_gf_CC_PerkStateCheck("SwannSpecialDelivery", libCOOC_ge_CC_PerkState_Locked, "TerranSwann", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("AdjutantAlert_SwannCombatDropReady", -1), "Abil/SpecialDelivery", null);
            }

            if ((libCOOC_gf_CC_PerkStateCheck("SwannLaserDrillUpgrades", libCOOC_ge_CC_PerkState_Locked, "TerranSwann", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("AdjutantAlert_SwannPulseCannonReady", -1), "Abil/DrakkenLaserDrillNuke", null);
            }

            libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("AdjutantAlert_SwannConcentratedBeamReady", -1), "Abil/DrakkenLaserDrillBFG", null);
        }
        else if (autoCD6ED918_val == "ZergKerrigan") {
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionKerriganCrushingGrip, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionKerriganAssimilation, true);
            if ((libCOOC_gf_CC_PerkStateCheck("KerriganUnlockCrushingGripWave", libCOOC_ge_CC_PerkState_Locked, "ZergKerrigan", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("IzshaAlert_KerriganImmobilWave", -1), "Abil/KerriganVoidCoopCrushingGripWave", libCOMI_gv_cM_HeroUnit[lv_indexPlayer]);
            }

            libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("IzshaAlert_KerriganAssmilAura", -1), "Abil/KerriganVoidCoopEconDrop", libCOMI_gv_cM_HeroUnit[lv_indexPlayer]);
        }
        else if (autoCD6ED918_val == "ZergZagara") {
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionZagaraRoachDrop, true);
            if ((libCOOC_gf_CC_PerkStateCheck("ZagaraUnlockMassRoachDrop", libCOOC_ge_CC_PerkState_Locked, "ZergZagara", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("IzshaAlert_ZagaraInfestedDrop", -1), "ZagaraVoidCoopInfestedPods", libCOMI_gv_cM_HeroUnit[lv_indexPlayer]);
            }

            libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("IzshaAlert_ZagaraMassFrenzy", -1), "ZagaraVoidCoopMassFrenzy", libCOMI_gv_cM_HeroUnit[lv_indexPlayer]);
        }
        else if (autoCD6ED918_val == "ProtossArtanis") {
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionArtanisSuperShields, true);
            libCOMI_gf_CM_CommanderVOAbilityWatchUnit(lv_indexPlayer, SoundLink("ExecutorAlert_ArtanisOverchargeReady", -1), "Abil/SoASuperShield", libCOMI_gv_cM_GlobalCasterUnit[lv_indexPlayer], "SoASuperShield");
            if ((libCOOC_gf_CC_PerkStateCheck("ArtanisUnlockStrafeAttack", libCOOC_ge_CC_PerkState_Locked, "ProtossArtanis", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatchUnit(lv_indexPlayer, SoundLink("ExecutorAlert_ArtanisSolarBombardReady", -1), "Abil/SOAStrafeAttack", libCOMI_gv_cM_GlobalCasterUnit[lv_indexPlayer], "SOAStrafeAttack");
            }

        }
        else if (autoCD6ED918_val == "ProtossVorazun") {
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionVorazunTimeStop, true);
            libCOMI_gf_CM_CommanderVOAbilityWatchUnit(lv_indexPlayer, SoundLink("ExecutorAlert_VorazunShadowGuardReady", -1), "Abil/SOAShadowGuardCalldown", libCOMI_gv_cM_GlobalCasterUnit[lv_indexPlayer], "SOAShadowGuardCalldown");
            if ((libCOOC_gf_CC_PerkStateCheck("VorazunUnlockTimeStop", libCOOC_ge_CC_PerkState_Locked, "ProtossVorazun", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatchUnit(lv_indexPlayer, SoundLink("ExecutorAlert_VorazunTimeStopReady", -1), "Abil/SOATimeFreeze", libCOMI_gv_cM_GlobalCasterUnit[lv_indexPlayer], "SOATimeFreeze");
            }

        }
        else if (autoCD6ED918_val == "ProtossKarax") {
            TriggerExecute(libCOMI_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost, true, false);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionKaraxChronoMap, true);
            libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("ExecutorAlert_KaraxPurifierBeamReady", -1), "Abil/SOAPurifierBeam", null);
        }
        else if (autoCD6ED918_val == "ZergAbathur") {
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionAbathurMend, true);
            libCOMI_gf_CM_CommanderVOAbilityWatchUnit(lv_indexPlayer, SoundLink("IzshaAlert_AbathurMend", -1), "Abil/AbathurMend", libCOMI_gv_cM_GlobalCasterUnit[lv_indexPlayer], "AbathurMend");
            libCOMI_gf_CM_AbilityTransmissionAbathurNestReminderActionVer(lv_indexPlayer);
        }
        else if (autoCD6ED918_val == "ProtossAlarak") {
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionAlarakOvercharge, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionAlarakEmpower, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionAlarakDeathFleet, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionAlarakSacrifice, true);
            if ((libCOOC_gf_CC_PerkStateCheck("AlarakDeathFleet", libCOOC_ge_CC_PerkState_Locked, "ProtossAlarak", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("AlarakCommander_DFReady", -1), "Abil/AlarakACSummonDeathfleetTarget", null);
            }

            libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("AlarakCommander_EMReady", -1), "Abil/AlarakEmpower", libCOMI_gv_cM_HeroUnit[lv_indexPlayer]);
        }
        else if (autoCD6ED918_val == "TerranNova") {
            if ((libCOOC_gf_CC_PerkStateCheck("NovaUnlockGriffinBombingRun", libCOOC_ge_CC_PerkState_Locked, "TerranNova", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatchUnit(lv_indexPlayer, SoundLink("NovaCommander_GriffinAirstrikeReady", -1), "Abil/NovaGriffinBombingRunActivate", libCOMI_gv_cM_GlobalCasterUnit[lv_indexPlayer], "NovaGriffinBombingRunActivate");
            }

            if ((libCOOC_gf_CC_PerkStateCheck("NovaUnlockGriffinTransport", libCOOC_ge_CC_PerkState_Locked, "TerranNova", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatchUnit(lv_indexPlayer, SoundLink("NovaCommander_GriffinAirliftReady", -1), "Abil/NovaGriffinTransportLoadUnits", libCOMI_gv_cM_GlobalCasterUnit[lv_indexPlayer], "NovaGriffinTransportLoadUnits");
            }

            libCOMI_gf_CM_AbilityTransmissionNovaNukeReadyActionVer(lv_indexPlayer);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionNovaTransport, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionNovaBombingRun, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionNovaDMatrix, true);
        }
        else if (autoCD6ED918_val == "ZergStukov") {
            if ((libCOOC_gf_CC_PerkStateCheck("CommanderStukovAleksander", libCOOC_ge_CC_PerkState_Locked, "ZergStukov", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("StukovCommander_AleksanderReady", -1), "Abil/StukovSummonAleksander", null);
            }

            if ((libCOOC_gf_CC_PerkStateCheck("CommanderStukovApocalisk", libCOOC_ge_CC_PerkState_Locked, "ZergStukov", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("StukovCommander_ApocaliskReady", -1), "Abil/StukovSummonApocalisk", null);
            }

            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionStukovInfestStructure, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionStukovApocalisk, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionStukovAleksander, true);
        }
        else if (autoCD6ED918_val == "ProtossFenix") {
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateKaldalis, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateTalis, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateTaldarin, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateWarbringer, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateMojo, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateClolarion, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixZealotSuit, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixDragoonSuit, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixArbiterSuit, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixMassRecall, true);
            TriggerEnable(libCOMI_gt_CM_HeroTransmissionFenixHeroDies, true);
            TriggerEnable(libCOMI_gt_CM_HeroTransmissionFenixHeroRepaired, true);
            TriggerEnable(libCOMI_gt_CM_HeroTransmissionFenixNameChange, true);
            libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime(lv_indexPlayer, "SOASummonFenix", libCOMI_gv_cM_GlobalCasterUnit[lv_indexPlayer]);
        }
        else if (autoCD6ED918_val == "ZergDehaka") {
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionDehakaGlevig, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionDehakaMurvar, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionDehakaDakrun, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionDehakaPrimalWurm, true);
            TriggerEnable(libCOMI_gt_CM_UnitTransmissionDehakaGlevigConstruct, true);
            TriggerEnable(libCOMI_gt_CM_UnitTransmissionDehakaMurvarConstruct, true);
            TriggerEnable(libCOMI_gt_CM_UnitTransmissionDehakaDakrunConstruct, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderLearn, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderLevel, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt, true);
            libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("DehakaCommander_GlevigReady", -1), "Abil/DehakaGlevigTopBar", null);
            libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("DehakaCommander_MurvarReady", -1), "Abil/DehakaMurvarTopBar", null);
            libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("DehakaCommander_DakrunReady", -1), "Abil/DehakaDakrunTopBar", null);
            libCOMI_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer(lv_indexPlayer);
            libCOMI_gv_cM_DehakaVODehakaPlayer = lv_indexPlayer;
        }
        else if (autoCD6ED918_val == "TerranHorner") {
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionHornerFleet, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionHornerStation, true);
            TriggerEnable(libCOMI_gt_CM_UnitTransmissionHornerBomberBuild, true);
            if ((libCOOC_gf_CC_PerkStateCheck("HornerPHLevel5", libCOOC_ge_CC_PerkState_Locked, "TerranHorner", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer(lv_indexPlayer, SoundLink("HornerHan_CallFleet", -1), "Abil/HornerAirFleetActivate", libCOMI_gv_cM_GlobalCasterUnit[lv_indexPlayer], "HornerAirFleetActivate");
            }

            if ((libCOOC_gf_CC_PerkStateCheck("HornerPHLevel10", libCOOC_ge_CC_PerkState_Locked, "TerranHorner", lv_indexPlayer) == false)) {
                libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("HornerHan_Spacestation", -1), "Abil/HHSummonMercenarySpaceStation", null);
            }

            libCOMI_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer(lv_indexPlayer);
            libCOMI_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer(lv_indexPlayer);
            libCOMI_gv_cM_HornerVOHornerPlayer = lv_indexPlayer;
        }
        else if (autoCD6ED918_val == "TerranTychus") {
            TimerStart(libCOMI_gv_cM_TychusVOTransportReminderTimer, libCOMI_gv_cMC_TychusVOTransportReminderDelay, false, c_timeGame);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusCreateReaper, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusCreateFirebat, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusCreatePhantom, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusCreateMedic, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusTransportReminder, true);
            TriggerEnable(libCOMI_gt_CM_UnitTransmissionTychusTransportBuild, true);
            TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusTransportUse, true);
            TriggerEnable(libCOMI_gt_CM_UnitTransmissionTychusOutlawFirstDeath, true);
            TriggerEnable(libCOMI_gt_CM_UnitTransmissionTychusOutlawDeath, true);
            TriggerEnable(libCOMI_gt_CM_UnitTransmissionTychusOutlawRevived, true);
            TriggerEnable(libCOMI_gt_CM_UnitTransmissionTychusOutlawReviveReminder, true);
            TriggerEnable(libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable, true);
            TriggerEnable(libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruited, true);
            TriggerEnable(libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruitReminder, true);
            if ((libCOOC_gf_CC_PerkStateCheck("TychusPHLevel3", libCOOC_ge_CC_PerkState_Locked, "TerranTychus", lv_indexPlayer) == false)) {
                TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusOdinUse, true);
                libCOMI_gf_CM_CommanderVOAbilityWatch(lv_indexPlayer, SoundLink("TychusCommander_OdinReady", -1), "Abil/TychusCalldownOdinTargeted", null);
            }

            if ((libCOOC_gf_CC_PerkStateCheck("TychusPHLevel4", libCOOC_ge_CC_PerkState_Locked, "TerranTychus", lv_indexPlayer) == false)) {
                TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusCreateMarauder, true);
            }

            if ((libCOOC_gf_CC_PerkStateCheck("TychusPHLevel6", libCOOC_ge_CC_PerkState_Locked, "TerranTychus", lv_indexPlayer) == false)) {
                TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusCreateWarhound, true);
            }

            if ((libCOOC_gf_CC_PerkStateCheck("TychusPHLevel8", libCOOC_ge_CC_PerkState_Locked, "TerranTychus", lv_indexPlayer) == false)) {
                TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusCreateHERC, true);
            }

            if ((libCOOC_gf_CC_PerkStateCheck("TychusPHLevel10", libCOOC_ge_CC_PerkState_Locked, "TerranTychus", lv_indexPlayer) == false)) {
                TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusCreateGhost, true);
            }

            libCOMI_gv_cM_TychusVOTychusPlayer = lv_indexPlayer;
        }
        else if (autoCD6ED918_val == "ProtossZeratul") {
            TriggerEnable(libCOMI_gt_CM_ArtifactTransmission_Hint, true);
            TriggerEnable(libCOMI_gt_CM_ArtifactTransmission_PickedUp, true);
            TriggerEnable(libCOMI_gt_CM_ArtifactTransmission_Upgraded, true);
            TriggerEnable(libCOMI_gt_CM_ArtifactTransmission_ProphecyCast, true);
            TriggerEnable(libCOMI_gt_CM_ArtifactTransmission_SelectAbilityReminder, true);
        }
        else {
        }
    }
}

void libCOMI_gf_CM_CommanderVOSend (int lp_listenerPlayer, soundlink lp_vOSound, playergroup lp_targetPlayers) {
    // Automatic Variable Declarations
    // Implementation
    SoundSetListenerGender(lp_vOSound, libCOOC_gf_CC_CommanderGender(libCOOC_gf_ActiveCommanderForPlayer(lp_listenerPlayer)));
    SoundPlayForPlayer(lp_vOSound, 1, lp_targetPlayers, 100.0, 0.0);
}

trigger auto_libCOMI_gf_CM_CommanderVOAbilityWatch_Trigger = null;
int auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_player;
soundlink auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_vOSound;
string auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_cooldownLink;
unit auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_unit;

void libCOMI_gf_CM_CommanderVOAbilityWatch (int lp_player, soundlink lp_vOSound, string lp_cooldownLink, unit lp_unit) {
    auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_player = lp_player;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_vOSound = lp_vOSound;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_cooldownLink = lp_cooldownLink;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_unit = lp_unit;

    if (auto_libCOMI_gf_CM_CommanderVOAbilityWatch_Trigger == null) {
        auto_libCOMI_gf_CM_CommanderVOAbilityWatch_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CommanderVOAbilityWatch_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CommanderVOAbilityWatch_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CommanderVOAbilityWatch_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_player;
    soundlink lp_vOSound = auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_vOSound;
    string lp_cooldownLink = auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_cooldownLink;
    unit lp_unit = auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    while (true) {
        while (!((PlayerGetCooldown(lp_player, lp_cooldownLink) > 0.0))) {
            Wait(1.0, c_timeGame);
        }
        while (!((PlayerGetCooldown(lp_player, lp_cooldownLink) <= 0.0))) {
            Wait(1.0, c_timeGame);
        }
        if (((lp_unit == null) || (UnitIsAlive(lp_unit) == true))) {
            libCOMI_gf_CM_CommanderVOSend(lp_player, lp_vOSound, PlayerGroupSingle(lp_player));
        }

    }
    return true;
}

trigger auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_Trigger = null;
int auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_player;
soundlink auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_vOSound;
string auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_cooldownLink;
unit auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_unit;
string auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_ability;

void libCOMI_gf_CM_CommanderVOAbilityWatchUnit (int lp_player, soundlink lp_vOSound, string lp_cooldownLink, unit lp_unit, string lp_ability) {
    auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_player = lp_player;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_vOSound = lp_vOSound;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_cooldownLink = lp_cooldownLink;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_unit = lp_unit;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_ability = lp_ability;

    if (auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_Trigger == null) {
        auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_player;
    soundlink lp_vOSound = auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_vOSound;
    string lp_cooldownLink = auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_cooldownLink;
    unit lp_unit = auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_unit;
    string lp_ability = auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_ability;

    // Automatic Variable Declarations
    // Implementation
    while (true) {
        while (!(((UnitAbilityGetCooldown(lp_unit, lp_ability, lp_cooldownLink) > 20.0) || ((UnitAbilityChargeInfo(lp_unit, AbilityCommand(lp_ability, 0), c_unitAbilChargeCountLeft) == 0.0) && (UnitAbilityGetChargeRegen(lp_unit, lp_ability, lp_cooldownLink) > 20.0))))) {
            Wait(1.0, c_timeGame);
        }
        while (!((UnitAbilityGetCooldown(lp_unit, lp_ability, lp_cooldownLink) <= 0.0) && ((UnitAbilityGetChargeRegen(lp_unit, lp_ability, lp_cooldownLink) <= 0.0) || (UnitAbilityChargeInfo(lp_unit, AbilityCommand(lp_ability, 0), c_unitAbilChargeCountLeft) > 0.0)))) {
            Wait(1.0, c_timeGame);
        }
        if ((UnitIsAlive(lp_unit) == true)) {
            libCOMI_gf_CM_CommanderVOSend(lp_player, lp_vOSound, PlayerGroupSingle(lp_player));
        }

    }
    return true;
}

trigger auto_libCOMI_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_Trigger = null;
int auto_libCOMI_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_lp_abathurPlayer;

void libCOMI_gf_CM_AbilityTransmissionAbathurNestReminderActionVer (int lp_abathurPlayer) {
    auto_libCOMI_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_lp_abathurPlayer = lp_abathurPlayer;

    if (auto_libCOMI_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_Trigger == null) {
        auto_libCOMI_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_Trigger = TriggerCreate("auto_libCOMI_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_TriggerFunc (bool testConds, bool runActions) {
    int lp_abathurPlayer = auto_libCOMI_gf_CM_AbilityTransmissionAbathurNestReminderActionVer_lp_abathurPlayer;

    // Variable Declarations
    int lv_locAbathurPlayer;
    bool lv_belowStandardCap;
    bool lv_belowFinalCap;
    const fixed lv_c_StandardCapAmount = 5.0;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_belowStandardCap = true;
    lv_belowFinalCap = true;

    // Implementation
    lv_locAbathurPlayer = lp_abathurPlayer;
    while (true) {
        Wait(5.0, c_timeGame);
        if ((UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locAbathurPlayer], AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) < lv_c_StandardCapAmount)) {
            lv_belowStandardCap = true;
            continue;
        }
        else if ((lv_belowStandardCap == true) && (UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locAbathurPlayer], AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) >= lv_c_StandardCapAmount)) {
            Wait(10.0, c_timeGame);
            if ((UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locAbathurPlayer], AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) >= lv_c_StandardCapAmount)) {
                lv_belowStandardCap = false;
                libCOMI_gf_CM_CommanderVOSend(lv_locAbathurPlayer, SoundLink("AbathurCommander_ToxicNest", -1), PlayerGroupSingle(lv_locAbathurPlayer));
                continue;
            }

        }
        else if ((UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locAbathurPlayer], AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountMax) <= (lv_c_StandardCapAmount+2.0))) {
            continue;
        }
        else if ((UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locAbathurPlayer], AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) < UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locAbathurPlayer], AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountMax))) {
            lv_belowFinalCap = true;
            continue;
        }
        else if ((lv_belowFinalCap == true) && (UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locAbathurPlayer], AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) >= UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locAbathurPlayer], AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountMax))) {
            Wait(10.0, c_timeGame);
            if ((UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locAbathurPlayer], AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) >= UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locAbathurPlayer], AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountMax))) {
                lv_belowFinalCap = false;
                libCOMI_gf_CM_CommanderVOSend(lv_locAbathurPlayer, SoundLink("AbathurCommander_ToxicNest", -1), PlayerGroupSingle(lv_locAbathurPlayer));
            }

        }
    }
    return true;
}

trigger auto_libCOMI_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_Trigger = null;
int auto_libCOMI_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_lp_novaPlayer;

void libCOMI_gf_CM_AbilityTransmissionNovaNukeReadyActionVer (int lp_novaPlayer) {
    auto_libCOMI_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_lp_novaPlayer = lp_novaPlayer;

    if (auto_libCOMI_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_Trigger == null) {
        auto_libCOMI_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_Trigger = TriggerCreate("auto_libCOMI_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_TriggerFunc (bool testConds, bool runActions) {
    int lp_novaPlayer = auto_libCOMI_gf_CM_AbilityTransmissionNovaNukeReadyActionVer_lp_novaPlayer;

    // Variable Declarations
    int lv_locNovaPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_locNovaPlayer = lp_novaPlayer;

    // Implementation
    if ((libCOOC_gf_CC_PerkStateCheck("NovaUnlockUltimates", libCOOC_ge_CC_PerkState_Active, "TerranNova", lv_locNovaPlayer) == false)) {
        return true;
    }

    while (true) {
        while (!((UnitAbilityChargeInfo(libCOMI_gv_cM_HeroUnit[lv_locNovaPlayer], AbilityCommand("NovaCoopCasterNuke", 0), c_unitAbilChargeCountLeft) <= 0.0))) {
            Wait(1.0, c_timeGame);
        }
        while (!((UnitAbilityChargeInfo(libCOMI_gv_cM_HeroUnit[lv_locNovaPlayer], AbilityCommand("NovaCoopCasterNuke", 0), c_unitAbilChargeCountLeft) >= 1.0))) {
            Wait(1.0, c_timeGame);
        }
        if (((libCOMI_gv_cM_HeroUnit[lv_locNovaPlayer] == null) || (UnitIsAlive(libCOMI_gv_cM_HeroUnit[lv_locNovaPlayer]) == true))) {
            libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(lv_locNovaPlayer), SoundLink("NovaCommander_NukeReady", -1), PlayerGroupSingle(lv_locNovaPlayer));
        }

    }
    return true;
}

trigger auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_Trigger = null;
int auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_player;
string auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_cooldownLink;
unit auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_unit;

void libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime (int lp_player, string lp_cooldownLink, unit lp_unit) {
    auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_player = lp_player;
    auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_cooldownLink = lp_cooldownLink;
    auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_unit = lp_unit;

    if (auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_Trigger == null) {
        auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_Trigger = TriggerCreate("auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_player;
    string lp_cooldownLink = auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_cooldownLink;
    unit lp_unit = auto_libCOMI_gf_CM_AbilityTransmissionFenixSuitsReadyFirstTime_lp_unit;

    // Variable Declarations
    int lv_vOChoice;
    int lv_vOOptions;

    // Automatic Variable Declarations
    int auto40476489_val;

    // Variable Initialization
    lv_vOOptions = 2;

    // Implementation
    while (!((PlayerGetCooldown(lp_player, lp_cooldownLink) > 0.0))) {
        Wait(1.0, c_timeGame);
    }
    while (!((PlayerGetCooldown(lp_player, lp_cooldownLink) <= 0.0))) {
        Wait(1.0, c_timeGame);
    }
    if (((lp_unit == null) || (UnitIsAlive(lp_unit) == true))) {
        if ((libCOOC_gf_CC_PerkStateCheck("FenixUnlockArbiterSuit", libCOOC_ge_CC_PerkState_Locked, "ProtossFenix", lp_player) == false)) {
            lv_vOOptions = 3;
        }

        lv_vOChoice = RandomInt(1, lv_vOOptions);
        auto40476489_val = lv_vOChoice;
        if (auto40476489_val == 2) {
            libCOMI_gf_CM_CommanderVOSend(lp_player, SoundLink("FenixCommander_DragoonSuitReady", -1), PlayerGroupSingle(lp_player));
        }
        else if (auto40476489_val == 3) {
            libCOMI_gf_CM_CommanderVOSend(lp_player, SoundLink("FenixCommander_ArbiterSuitReady", -1), PlayerGroupSingle(lp_player));
        }
        else {
            libCOMI_gf_CM_CommanderVOSend(lp_player, SoundLink("FenixCommander_ZealotSuitReady", -1), PlayerGroupSingle(lp_player));
        }
    }

    return true;
}

trigger auto_libCOMI_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_Trigger = null;
int auto_libCOMI_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_lp_dehakaPlayer;

void libCOMI_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer (int lp_dehakaPlayer) {
    auto_libCOMI_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_lp_dehakaPlayer = lp_dehakaPlayer;

    if (auto_libCOMI_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_Trigger == null) {
        auto_libCOMI_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_Trigger = TriggerCreate("auto_libCOMI_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_TriggerFunc (bool testConds, bool runActions) {
    int lp_dehakaPlayer = auto_libCOMI_gf_CM_AbilityTransmissionDehakaWurmReminderActionVer_lp_dehakaPlayer;

    // Variable Declarations
    int lv_locDehakaPlayer;
    bool lv_belowStandardCap;
    const fixed lv_c_StandardCapAmount = 3.0;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_belowStandardCap = true;

    // Implementation
    lv_locDehakaPlayer = lp_dehakaPlayer;
    while (true) {
        Wait(5.0, c_timeGame);
        if ((libCOMI_gv_cM_DehakaVOWurmStructureAlive == false)) {
            continue;
        }
        else if ((UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locDehakaPlayer], AbilityCommand("DehakaNydusDestroyerTopBar", 0), c_unitAbilChargeCountLeft) < lv_c_StandardCapAmount)) {
            lv_belowStandardCap = true;
            continue;
        }
        else if ((lv_belowStandardCap == true) && (UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locDehakaPlayer], AbilityCommand("DehakaNydusDestroyerTopBar", 0), c_unitAbilChargeCountLeft) >= lv_c_StandardCapAmount) && (PlayerGetPropertyInt(lv_locDehakaPlayer, c_playerPropSuppliesUsed) < FixedToInt((PlayerGetPropertyInt(lv_locDehakaPlayer, c_playerPropSuppliesLimit) - UnitTypeGetProperty("DehakaNydusDestroyer", c_unitPropSuppliesUsed))))) {
            Wait(10.0, c_timeGame);
            if ((UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locDehakaPlayer], AbilityCommand("DehakaNydusDestroyerTopBar", 0), c_unitAbilChargeCountLeft) >= lv_c_StandardCapAmount) && (PlayerGetPropertyInt(lv_locDehakaPlayer, c_playerPropSuppliesUsed) < FixedToInt((PlayerGetPropertyInt(lv_locDehakaPlayer, c_playerPropSuppliesLimit) - UnitTypeGetProperty("DehakaNydusDestroyer", c_unitPropSuppliesUsed)))) && (libCOMI_gv_cM_DehakaVOWurmStructureAlive == true)) {
                lv_belowStandardCap = false;
                libCOMI_gf_CM_CommanderVOSend(lv_locDehakaPlayer, SoundLink("DehakaCommander_PrimalWurmReminder", -1), PlayerGroupSingle(lv_locDehakaPlayer));
                continue;
            }

        }
    }
    return true;
}

trigger auto_libCOMI_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_Trigger = null;
int auto_libCOMI_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_lp_hornerPlayer;

void libCOMI_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer (int lp_hornerPlayer) {
    auto_libCOMI_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_lp_hornerPlayer = lp_hornerPlayer;

    if (auto_libCOMI_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_Trigger == null) {
        auto_libCOMI_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_Trigger = TriggerCreate("auto_libCOMI_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_TriggerFunc (bool testConds, bool runActions) {
    int lp_hornerPlayer = auto_libCOMI_gf_CM_UnitTransmissionHornerBomberBuildReminderActionVer_lp_hornerPlayer;

    // Variable Declarations
    int lv_locHornerPlayer;
    const int lv_reminderDelay = 720;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_locHornerPlayer = lp_hornerPlayer;
    Wait(lv_reminderDelay, c_timeGame);
    if ((libCOMI_gv_cM_HornerVOBomberBuilt == false)) {
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(lv_locHornerPlayer), SoundLink("HornerHan_BomberPlatformBuild", -1), PlayerGroupSingle(lv_locHornerPlayer));
    }

    return true;
}

trigger auto_libCOMI_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_Trigger = null;
int auto_libCOMI_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_lp_hornerPlayer;

void libCOMI_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer (int lp_hornerPlayer) {
    auto_libCOMI_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_lp_hornerPlayer = lp_hornerPlayer;

    if (auto_libCOMI_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_Trigger == null) {
        auto_libCOMI_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_Trigger = TriggerCreate("auto_libCOMI_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_TriggerFunc (bool testConds, bool runActions) {
    int lp_hornerPlayer = auto_libCOMI_gf_CM_AbilityTransmissionHornerMagMineReminderActionVer_lp_hornerPlayer;

    // Variable Declarations
    int lv_locHornerPlayer;
    bool lv_belowStandardCap;
    bool lv_belowFinalCap;
    const fixed lv_c_StandardCapAmount = 5.0;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_belowStandardCap = true;
    lv_belowFinalCap = true;

    // Implementation
    lv_locHornerPlayer = lp_hornerPlayer;
    while (true) {
        Wait(5.0, c_timeGame);
        if ((UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locHornerPlayer], AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft) < lv_c_StandardCapAmount)) {
            lv_belowStandardCap = true;
            continue;
        }
        else if ((lv_belowStandardCap == true) && (UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locHornerPlayer], AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft) >= lv_c_StandardCapAmount)) {
            Wait(10.0, c_timeGame);
            if ((UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locHornerPlayer], AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft) >= lv_c_StandardCapAmount)) {
                lv_belowStandardCap = false;
                libCOMI_gf_CM_CommanderVOSend(lv_locHornerPlayer, SoundLink("HornerHan_MagMine", -1), PlayerGroupSingle(lv_locHornerPlayer));
                continue;
            }

        }
        else if ((UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locHornerPlayer], AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountMax) <= (lv_c_StandardCapAmount+2.0))) {
            continue;
        }
        else if ((UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locHornerPlayer], AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft) < UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locHornerPlayer], AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountMax))) {
            lv_belowFinalCap = true;
            continue;
        }
        else if ((lv_belowFinalCap == true) && (UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locHornerPlayer], AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft) >= UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locHornerPlayer], AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountMax))) {
            Wait(10.0, c_timeGame);
            if ((UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locHornerPlayer], AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft) >= UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[lv_locHornerPlayer], AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountMax))) {
                lv_belowFinalCap = false;
                libCOMI_gf_CM_CommanderVOSend(lv_locHornerPlayer, SoundLink("HornerHan_MagMine", -1), PlayerGroupSingle(lv_locHornerPlayer));
            }

        }
    }
    return true;
}

trigger auto_libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_Trigger = null;
int auto_libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_player;
soundlink auto_libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_vOSound;
string auto_libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_cooldownLink;
unit auto_libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_unit;
string auto_libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_ability;

void libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer (int lp_player, soundlink lp_vOSound, string lp_cooldownLink, unit lp_unit, string lp_ability) {
    auto_libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_player = lp_player;
    auto_libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_vOSound = lp_vOSound;
    auto_libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_cooldownLink = lp_cooldownLink;
    auto_libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_unit = lp_unit;
    auto_libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_ability = lp_ability;

    if (auto_libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_Trigger == null) {
        auto_libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_Trigger = TriggerCreate("auto_libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_player;
    soundlink lp_vOSound = auto_libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_vOSound;
    string lp_cooldownLink = auto_libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_cooldownLink;
    unit lp_unit = auto_libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_unit;
    string lp_ability = auto_libCOMI_gf_CM_AbilityTransmissionHornerFleetReminderActionVer_lp_ability;

    // Automatic Variable Declarations
    // Implementation
    while (true) {
        while (!((libCOMI_gv_cM_HornerVOFleetOffCooldown == false) && ((UnitAbilityGetCooldown(lp_unit, lp_ability, lp_cooldownLink) > 20.0) || ((UnitAbilityChargeInfo(lp_unit, AbilityCommand(lp_ability, 0), c_unitAbilChargeCountLeft) == 0.0) && (UnitAbilityGetChargeRegen(lp_unit, lp_ability, lp_cooldownLink) > 20.0))))) {
            Wait(1.0, c_timeGame);
        }
        while (!((UnitAbilityGetCooldown(lp_unit, lp_ability, lp_cooldownLink) <= 0.0) && ((UnitAbilityGetChargeRegen(lp_unit, lp_ability, lp_cooldownLink) <= 0.0) || (UnitAbilityChargeInfo(lp_unit, AbilityCommand(lp_ability, 0), c_unitAbilChargeCountLeft) > 0.0)))) {
            Wait(1.0, c_timeGame);
        }
        if ((UnitIsAlive(lp_unit) == true)) {
            libCOMI_gf_CM_CommanderVOSend(lp_player, lp_vOSound, PlayerGroupSingle(lp_player));
            libCOMI_gv_cM_HornerVOFleetOffCooldown = true;
        }

    }
    return true;
}

trigger auto_libCOMI_gf_CM_VOResourceInit_Trigger = null;

void libCOMI_gf_CM_VOResourceInit () {
    if (auto_libCOMI_gf_CM_VOResourceInit_Trigger == null) {
        auto_libCOMI_gf_CM_VOResourceInit_Trigger = TriggerCreate("auto_libCOMI_gf_CM_VOResourceInit_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_VOResourceInit_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_VOResourceInit_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_VOResourceReqSendButton = DialogControlLastCreated();
    TriggerEnable(libCOMI_gt_CM_VOResourceSent, true);
    TriggerEnable(libCOMI_gt_CM_VOResourceRequest, true);
    return true;
}

void libCOMI_gf_SendMissionTransmission (string lp_transmissionType, bool lp_waitUntilDone, int lp_sourcePlayer) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_TransmissionCurrentType = lp_transmissionType;
    libCOMI_gv_cM_TransmissionSource = lp_sourcePlayer;
    TriggerExecute(libCOMI_gt_CM_TransmissionSend, true, lp_waitUntilDone);
}

void libCOMI_gf_SendSplitMissionTransmission (string lp_transmissionType, bool lp_waitUntilDone, int lp_primaryPlayer, int lp_sourcePlayer) {
    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_primaryPlayers;
    playergroup lv_secondaryPlayers;

    // Automatic Variable Declarations
    playergroup auto0346F589_g;

    // Variable Initialization
    lv_primaryPlayers = PlayerGroupEmpty();
    lv_secondaryPlayers = PlayerGroupEmpty();

    // Implementation
    libCOMI_gv_cM_TransmissionPrimaryPlayers = PlayerGroupEmpty();
    libCOMI_gv_cM_TransmissionSecondaryPlayers = PlayerGroupEmpty();
    auto0346F589_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto0346F589_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerStatus(lv_indexPlayer) == c_playerStatusLeft)) {
            continue;
        }

        if ((lv_indexPlayer == lp_primaryPlayer)) {
            PlayerGroupAdd(libCOMI_gv_cM_TransmissionPrimaryPlayers, lv_indexPlayer);
        }
        else {
            PlayerGroupAdd(libCOMI_gv_cM_TransmissionSecondaryPlayers, lv_indexPlayer);
        }
    }
    libCOMI_gf_SendMissionTransmission(lp_transmissionType, lp_waitUntilDone, lp_sourcePlayer);
}

void libCOMI_gf_WaitForMissionTransmission () {
    // Variable Declarations
    int lv_originalCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((TriggerActiveCount(libCOMI_gt_CM_TransmissionSend) == 0)) {
        return ;
    }

    lv_originalCount = libCOMI_gv_cM_TransmissionCount;
    while (!(((lv_originalCount != libCOMI_gv_cM_TransmissionCount) || (libCOMI_gv_cM_TransmissionCurrentType == null)))) {
        Wait(0.0625, c_timeGame);
    }
}

void libCOMI_gf_CM_TransmissionUpdateConvoPlayers (string lp_conversation) {
    // Variable Declarations
    playergroup lv_terranPlayers;
    playergroup lv_zergPlayers;
    playergroup lv_protossPlayers;
    playergroup lv_primaryTerranPlayers;
    playergroup lv_primaryZergPlayers;
    playergroup lv_primaryProtossPlayers;
    playergroup lv_secondaryTerranPlayers;
    playergroup lv_secondaryZergPlayers;
    playergroup lv_secondaryProtossPlayers;
    playergroup lv_alarakPlayers;
    playergroup lv_notAlarakPlayers;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto6088D53C_g;
    string auto11F928C9_val;

    // Variable Initialization
    lv_terranPlayers = PlayerGroupEmpty();
    lv_zergPlayers = PlayerGroupEmpty();
    lv_protossPlayers = PlayerGroupEmpty();
    lv_primaryTerranPlayers = PlayerGroupEmpty();
    lv_primaryZergPlayers = PlayerGroupEmpty();
    lv_primaryProtossPlayers = PlayerGroupEmpty();
    lv_secondaryTerranPlayers = PlayerGroupEmpty();
    lv_secondaryZergPlayers = PlayerGroupEmpty();
    lv_secondaryProtossPlayers = PlayerGroupEmpty();
    lv_alarakPlayers = PlayerGroupEmpty();
    lv_notAlarakPlayers = PlayerGroupEmpty();

    // Implementation
    auto6088D53C_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto6088D53C_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerStatus(lv_indexPlayer) == c_playerStatusLeft)) {
            continue;
        }

        if ((lp_conversation == "acVictory")) {
            ConversationDataLineSetPlayers("acVictory", (libCOOC_gf_CC_CommanderConvoTag(libCOOC_gf_ActiveCommanderForPlayer(libCOOC_gf_CC_PlayerAlly(lv_indexPlayer)))), PlayerGroupSingle(lv_indexPlayer));
        }

        auto11F928C9_val = PlayerRace(lv_indexPlayer);
        if (auto11F928C9_val == "Terr") {
            PlayerGroupAdd(lv_terranPlayers, lv_indexPlayer);
            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionPrimaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_primaryTerranPlayers, lv_indexPlayer);
            }

            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionSecondaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_secondaryTerranPlayers, lv_indexPlayer);
            }

        }
        else if (auto11F928C9_val == "Prot") {
            PlayerGroupAdd(lv_protossPlayers, lv_indexPlayer);
            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionPrimaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_primaryProtossPlayers, lv_indexPlayer);
            }

            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionSecondaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_secondaryProtossPlayers, lv_indexPlayer);
            }

        }
        else if (auto11F928C9_val == "Zerg") {
            PlayerGroupAdd(lv_zergPlayers, lv_indexPlayer);
            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionPrimaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_primaryZergPlayers, lv_indexPlayer);
            }

            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionSecondaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_secondaryZergPlayers, lv_indexPlayer);
            }

        }
        else {
            PlayerGroupAdd(lv_terranPlayers, lv_indexPlayer);
        }
    }
    ConversationDataLineSetPlayers(lp_conversation, ("Protoss"), lv_protossPlayers);
    ConversationDataLineSetPlayers(lp_conversation, ("Terran"), lv_terranPlayers);
    ConversationDataLineSetPlayers(lp_conversation, ("Zerg"), lv_zergPlayers);
    if ((PlayerGroupCount(libCOMI_gv_cM_TransmissionPrimaryPlayers) > 0)) {
        ConversationDataLineSetPlayers(lp_conversation, ("PrimaryProtoss"), lv_primaryProtossPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("PrimaryZerg"), lv_primaryZergPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("PrimaryTerran"), lv_primaryTerranPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("SecondaryProtoss"), lv_secondaryProtossPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("SecondaryZerg"), lv_secondaryZergPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("SecondaryTerran"), lv_secondaryTerranPlayers);
    }

    if ((libCOOC_gf_CC_CurrentMap() == "AC_SlaynPayload")) {
        lv_notAlarakPlayers = libCOOC_gf_CommanderPlayers();
        lv_alarakPlayers = libCOOC_gf_CC_PlayersOfCommander("ProtossAlarak");
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_alarakPlayers, lv_notAlarakPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("Alarak"), lv_alarakPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("NotAlarak"), lv_notAlarakPlayers);
    }

}

bool libCOMI_gf_CM_PlayerHasTransmission (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerStatus(lp_player) != c_playerStatusActive)) {
        return false;
    }

    if ((TransmissionPlayerHasActiveTransmission(lp_player) == false)) {
        return false;
    }

    return true;
}

void libCOMI_gf_CM_SendTransmissionCampaignInternal (bool lp_isPlaceHolder, unit lp_unit, string lp_model, soundlink lp_sound, text lp_speaker, text lp_message, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption, string lp_portraitActor) {
    // Variable Declarations
    int lv_portrait;
    transmissionsource lv_source;
    int lv_localIndex;
    unit lv_oldSpeaker;
    trigger lv_oldTrigger;
    actor lv_talkBubble;
    actor lv_talkRing;
    int lv_ping;
    bool lv_flashOption;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_portrait = c_invalidPortraitId;
    lv_source = TransmissionSource();
    lv_ping = c_invalidPingId;
    lv_flashOption = true;

    // Implementation
    if ((lp_sound == null)) {
        return ;
    }

    libCOMI_gv_cM_SendTransmissionCampaignIndex += 1;
    lv_localIndex = libCOMI_gv_cM_SendTransmissionCampaignIndex;
    lv_oldSpeaker = libCOMI_gv_cM_SendTransmissionCampaignSpeaker;
    libCOMI_gv_cM_SendTransmissionCampaignSpeaker = lp_unit;
    lv_oldTrigger = libCOMI_gv_cM_SendTransmissionCampaignTrigger;
    libCOMI_gv_cM_SendTransmissionCampaignTrigger = TriggerGetCurrent();
    if ((lp_keepPortraitVisible != libCOMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait) && ((lp_model != null) || ((lp_model == null) && (SoundPortraitModel(lp_sound) != null)) || ((lp_isPlaceHolder == true) && (lp_unit != null)))) {
        if ((libNtve_gf_PlayerInCinematicMode(1) == false) && (libNtve_gf_PlayerInStoryMode(1) == false)) {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft);
        }
        else {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft);
        }
    }
    else {
        lv_portrait = c_invalidPortraitId;
    }
    if (((lp_cueSoundOption == libCOMI_ge_MissionTransmissionCueSoundOptions_PlayCueSound) || ((lp_cueSoundOption == libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior) && (libNtve_gf_PlayerInCinematicMode(1) == false) && (lv_portrait != c_invalidPortraitId) && (PortraitVisible(libCOMI_gv_cM_SendTransmissionCampaignPortrait, 1) == false)))) {
        libLbty_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    libCOMI_gv_cM_SendTransmissionCampaignPortrait = lv_portrait;
    if ((libCOMI_gv_cM_SendTransmissionCampaignPortrait != c_invalidPortraitId)) {
        PortraitSetVisible(libCOMI_gv_cM_SendTransmissionCampaignPortrait, PlayerGroupAll(), true, false);
    }

    libCOMI_gv_cM_SendTransmissionCampaignPlayingTick = 3;
    if ((lp_unit == null)) {
        if ((lv_portrait == c_invalidPortraitId)) {
            lv_source = TransmissionSource();
        }
        else {
            if ((lp_model == null)) {
                lv_source = TransmissionSourceFromModel(null);
            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
        }
    }
    else {
        if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
            lv_flashOption = false;
        }
        else {
            lv_flashOption = true;
        }
        if ((lp_isPlaceHolder == false)) {
            lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, false, "Talk");
        }
        else {
            if ((lp_model == null)) {
                if ((PlayerType(UnitGetOwner(lp_unit)) == c_playerTypeUser)) {
                    lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, true, "Talk");
                }

            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
        }
    }
    if ((lp_unit != null) && (lp_unit != lv_oldSpeaker) && (UnitIsAlive(lp_unit) == true)) {
        if ((libCOMI_gv_cM_SendTransmissionCampaignChatBubbleOn == true)) {
            if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
                if (((UnitGetType(lp_unit) == "Marine") || (UnitGetType(lp_unit) == "WarPig") || (UnitGetType(lp_unit) == "MengskMarine") || (UnitGetType(lp_unit) == "Medic") || (UnitGetType(lp_unit) == "Firebat") || (UnitGetType(lp_unit) == "Marauder"))) {
                    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,0.500000");
                }
                else {
                    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,0.600000");
                }
            }
            else {
                ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,0.600000");
            }
            lv_talkBubble = ActorFrom("::LastCreatedActual");
            libNtve_gf_AttachModelToUnit(lp_unit, "TalkIconRing", "Ref_Origin");
            lv_talkRing = libNtve_gf_ActorLastCreated();
        }

        if ((libNtve_gf_UnitIsVisibleToPlayer(lp_unit, 1) == true)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "TalkIcon", PointWithOffset(UnitGetPosition(lp_unit), 0.5, 3.5), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 2.0, 270.0);
            lv_ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.3);
        }

    }

    TransmissionSendAdvanced(PlayerGroupAll(), lv_source, lv_portrait, lp_portraitActor, "Talk", lp_sound, lp_speaker, lp_message, lp_duration, lp_durationType, lp_waitUntilDone);
    if ((lp_waitUntilDone == false)) {
        libCOMI_gf_CM_SendTransmissionCampaignCleanUp(TransmissionLastSent(), lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_ping, lv_localIndex);
    }
    else {
        libCOMI_gf_CM_SendTransmissionCampaignCleanUp(c_invalidTransmissionId, lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_ping, lv_localIndex);
    }
}

trigger auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_Trigger = null;
int auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_transmission;
int auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
int auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_portrait;
actor auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_talkIcon;
int auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_ping;
int auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_localIndex;

void libCOMI_gf_CM_SendTransmissionCampaignCleanUp (int lp_transmission, int lp_keepPortraitVisible, int lp_portrait, actor lp_talkIcon, int lp_ping, int lp_localIndex) {
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_transmission = lp_transmission;
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible = lp_keepPortraitVisible;
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_portrait = lp_portrait;
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_talkIcon = lp_talkIcon;
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_ping = lp_ping;
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_localIndex = lp_localIndex;

    if (auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_Trigger == null) {
        auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_Trigger = TriggerCreate("auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_TriggerFunc (bool testConds, bool runActions) {
    int lp_transmission = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_transmission;
    int lp_keepPortraitVisible = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
    int lp_portrait = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_portrait;
    actor lp_talkIcon = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_talkIcon;
    int lp_ping = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_ping;
    int lp_localIndex = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_localIndex;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_transmission != c_invalidTransmissionId)) {
        TransmissionWait(lp_transmission, 0.0);
    }

    Wait(0.75, c_timeReal);
    if ((lp_localIndex != libCOMI_gv_cM_SendTransmissionCampaignIndex)) {
        if ((libCOMI_gv_cM_SendTransmissionCampaignPortrait != lp_portrait) && (lp_portrait != c_invalidPortraitId) && (lp_keepPortraitVisible == libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter)) {
            PortraitSetModel(lp_portrait, "StaticPortrait", false);
            PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
        }

        return true;
    }

    libCOMI_gv_cM_SendTransmissionCampaignIndex = 0;
    libCOMI_gv_cM_SendTransmissionCampaignSpeaker = null;
    TriggerExecute(libCOMI_gt_CM_SendTransmissionCampaignTick, true, false);
    if ((lp_keepPortraitVisible == libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter) && (lp_portrait != c_invalidPortraitId)) {
        PortraitSetModel(lp_portrait, "StaticPortrait", false);
        PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    }

    if ((lp_talkIcon != null)) {
        libNtve_gf_KillModel(lp_talkIcon);
    }

    if ((lp_ping != c_invalidPingId)) {
        PingDestroy(lp_ping);
    }

    return true;
}

void libCOMI_gf_HideCampaignTransmissionPortrait () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
}

void libCOMI_gf_TurnTransmissionOptionsOnOffCampaign (int lp_option, bool lp_onOff) {
    // Automatic Variable Declarations
    int auto664A67F5_val;

    // Implementation
    auto664A67F5_val = lp_option;
    if (auto664A67F5_val == libCOMI_ge_MissionTransmissionOptions_ChatBubble) {
        libCOMI_gv_cM_SendTransmissionCampaignChatBubbleOn = lp_onOff;
    }
    else {
    }
}

fixed libCOMI_gf_ConvesationLineDuration (string lp_conversationLine) {
    // Variable Declarations
    soundlink lv_sound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_sound = SoundLink(ConversationDataGetSound(lp_conversationLine, true), c_soundIndexAny);
    return SoundLengthSync(lv_sound);
}

void libCOMI_gf_SendTransmissionCampaign (unit lp_unit, string lp_conversationLine, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption) {
    // Variable Declarations
    soundlink lv_sound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_sound = SoundLink(ConversationDataGetSound(lp_conversationLine, true), c_soundIndexAny);
    if ((lv_sound == null)) {
        return ;
    }

    libCOMI_gf_CM_SendTransmissionCampaignInternal(false, lp_unit, null, lv_sound, null, null, lp_durationType, lp_duration, lp_waitUntilDone, lp_keepPortraitVisible, lp_cueSoundOption, CatalogFieldValueGet(c_gameCatalogSound, ConversationDataGetSound(lp_conversationLine, true), "AssetArray[" + IntToString(0) + "].PortraitActor", c_playerAny));
}

void libCOMI_gf_SendTransmissionCampaignPlaceHolder (unit lp_unit, string lp_model, text lp_speaker, text lp_message, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption) {
    // Variable Declarations
    soundlink lv_sound;
    string lv_portraitActor;

    // Automatic Variable Declarations
    string auto41A5E975_val;

    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_portraitActor = "";

    // Implementation
    auto41A5E975_val = UnitGetType(lp_unit);
    if (auto41A5E975_val == "KerriganVoidUlnar02") {
        lv_portraitActor = "KerriganPrimalPortrait";
    }
    else if (auto41A5E975_val == "KerriganVoidBurrowed") {
        lv_portraitActor = "KerriganPrimalPortrait";
    }
    else if (auto41A5E975_val == "KerriganEpilogue02") {
        lv_portraitActor = "KerriganPrimalPortrait";
    }
    else {
    }
    lv_sound = SoundLink("PlaceholderSoundFile", c_soundIndexAny);
    libCOMI_gf_CM_SendTransmissionCampaignInternal(true, lp_unit, lp_model, lv_sound, lp_speaker, (StringExternal("Param/Value/lib_COMI_19071613") + lp_message), c_transmissionDurationSet, lp_duration, lp_waitUntilDone, lp_keepPortraitVisible, lp_cueSoundOption, lv_portraitActor);
}

void libCOMI_gf_ShareVisionofUnitCoop (unit lp_unit, bool lp_shareUnshare, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lp_player) == true)) {
        if ((lp_shareUnshare == true)) {
            UnitGroupAdd(libCOMI_gv_cM_VisionShareUnits[lp_player], lp_unit);
            if ((libCOMI_gv_cM_VisionShareEnabled == false)) {
                return ;
            }

        }
        else {
            UnitGroupRemove(libCOMI_gv_cM_VisionShareUnits[lp_player], lp_unit);
        }
    }

    libNtve_gf_ShareVisionofUnit(lp_unit, lp_shareUnshare, lp_player);
}

void libCOMI_gf_ShareVisionofUnitWithHumansCoop (unit lp_unit, bool lp_shareUnshare) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto5067DF11_g;

    // Variable Initialization

    // Implementation
    auto5067DF11_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto5067DF11_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOMI_gf_ShareVisionofUnitCoop(lp_unit, lp_shareUnshare, lv_indexPlayer);
    }
}

void libCOMI_gf_CM_VisionShareEnable (bool lp_enable) {
    // Variable Declarations
    unit lv_indexUnit;
    int lv_indexPlayer;
    bool lv_shareUnshare;
    int lv_aIPlayer;

    // Automatic Variable Declarations
    playergroup auto1DE572BF_g;
    unitgroup auto9D7EC34C_g;
    int auto9D7EC34C_u;
    playergroup autoD3C255DD_g;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_VisionShareEnabled = lp_enable;
    if ((lp_enable == true)) {
        lv_shareUnshare = true;
    }
    else {
        lv_shareUnshare = false;
    }
    auto1DE572BF_g = libCOOC_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto1DE572BF_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto9D7EC34C_g = libCOMI_gv_cM_VisionShareUnits[lv_indexPlayer];
        auto9D7EC34C_u = UnitGroupCount(auto9D7EC34C_g, c_unitCountAll);
        for (;; auto9D7EC34C_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(auto9D7EC34C_g, auto9D7EC34C_u);
            if (lv_indexUnit == null) { break; }
            libNtve_gf_ShareVisionofUnit(lv_indexUnit, lv_shareUnshare, lv_indexPlayer);
        }
        autoD3C255DD_g = libCOMI_gv_cM_SharedVisionPlayers[lv_indexPlayer];
        lv_aIPlayer = -1;
        while (true) {
            lv_aIPlayer = PlayerGroupNextPlayer(autoD3C255DD_g, lv_aIPlayer);
            if (lv_aIPlayer < 0) { break; }
            libCOMI_gf_SetAllianceAspectCoop(lv_aIPlayer, c_allianceIdVision, lv_indexPlayer, true);
        }
    }
}

void libCOMI_gf_CM_DropPod_Zerg_Wait (point lp_location, unitgroup lp_units, int lp_player) {
    // Variable Declarations
    unit lv_chosenUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    point lv_dropLocation;
    int lv_moveAttempts;
    unit lv_creep;

    // Automatic Variable Declarations
    unitgroup auto29D5EF81_g;
    int auto29D5EF81_u;
    unitgroup auto7E0D3E3B_g;
    int auto7E0D3E3B_u;
    const int auto23F26CA9_ae = 100;
    const int auto23F26CA9_ai = 1;

    // Variable Initialization

    // Implementation
    auto29D5EF81_g = lp_units;
    auto29D5EF81_u = UnitGroupCount(auto29D5EF81_g, c_unitCountAll);
    for (;; auto29D5EF81_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(auto29D5EF81_g, auto29D5EF81_u);
        if (lv_chosenUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        libNtve_gf_PauseUnit(lv_chosenUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "ZergDropPod", c_unitCreateIgnorePlacement, lp_player, lp_location);
    lv_dropPod = UnitLastCreated();
    Wait(2.5, c_timeGame);
    lv_dropPodLocation = UnitGetPosition(lv_dropPod);
    libNtve_gf_CreateUnitsAtPoint2(1, "ZergDropPodCreep", c_unitCreateIgnorePlacement, lp_player, lv_dropPodLocation);
    lv_creep = UnitLastCreated();
    Wait(1.0, c_timeGame);
    lv_angle = 0.0;
    auto7E0D3E3B_g = lp_units;
    auto7E0D3E3B_u = UnitGroupCount(auto7E0D3E3B_g, c_unitCountAll);
    for (;; auto7E0D3E3B_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(auto7E0D3E3B_g, auto7E0D3E3B_u);
        if (lv_chosenUnit == null) { break; }
        lv_moveAttempts = 1;
        for ( ; ( (auto23F26CA9_ai >= 0 && lv_moveAttempts <= auto23F26CA9_ae) || (auto23F26CA9_ai < 0 && lv_moveAttempts >= auto23F26CA9_ae) ) ; lv_moveAttempts += auto23F26CA9_ai ) {
            lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, RandomFixed(0.5, 2.0), lv_angle);
            lv_angle = (lv_angle + 77.0);
            if ((PathingType(lv_dropLocation) == c_pathingGround) && (PointPathingIsConnected(lv_dropLocation, lv_dropPodLocation) == true) && (PointPathingPassable(lv_dropLocation) == true)) {
                break;
            }

        }
        UnitSetPosition(lv_chosenUnit, lv_dropLocation, false);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, true);
        libNtve_gf_PauseUnit(lv_chosenUnit, false);
        Wait(0.125, c_timeGame);
    }
    libNtve_gf_PauseUnit(lv_creep, true);
    Wait(3.0, c_timeGame);
    UnitRemove(lv_creep);
    Wait(4.0, c_timeGame);
    UnitKill(lv_dropPod);
}

void libCOMI_gf_CM_DropPod_Terran_Wait (point lp_location, unitgroup lp_units, int lp_player) {
    // Variable Declarations
    unit lv_indexUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    fixed lv_angleStart;
    point lv_dropLocation;
    fixed lv_distance;
    int lv_subIndex;
    point lv_moveLocation;
    int lv_countPerLine;
    int lv_moveAttempts;
    fixed lv_spawnAngle;

    // Automatic Variable Declarations
    unitgroup autoB56D9329_g;
    int autoB56D9329_u;
    unitgroup auto7DD6500F_g;
    int auto7DD6500F_u;
    const int autoE2C02429_ae = 100;
    const int autoE2C02429_ai = 1;

    // Variable Initialization

    // Implementation
    autoB56D9329_g = lp_units;
    autoB56D9329_u = UnitGroupCount(autoB56D9329_g, c_unitCountAll);
    for (;; autoB56D9329_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoB56D9329_g, autoB56D9329_u);
        if (lv_indexUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_indexUnit, false);
        libNtve_gf_PauseUnit(lv_indexUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "TerranDropPod", c_unitCreateIgnorePlacement, lp_player, lp_location);
    lv_dropPod = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_dropPod), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.5, c_timeGame);
    lv_countPerLine = 4;
    if ((UnitGroupCount(lp_units, c_unitCountAlive) > 16)) {
        lv_countPerLine = ((UnitGroupCount(lp_units, c_unitCountAlive) + 3) / 4);
    }

    lv_dropPodLocation = UnitGetPosition(lv_dropPod);
    lv_distance = (0.8 + ((IntToFixed((UnitGroupCount(lp_units, c_unitCountAlive) + 3)) / IntToFixed(lv_countPerLine)) * 0.8));
    lv_subIndex = 1;
    lv_angleStart = 225.0;
    lv_angle = lv_angleStart;
    auto7DD6500F_g = lp_units;
    auto7DD6500F_u = UnitGroupCount(auto7DD6500F_g, c_unitCountAll);
    for (;; auto7DD6500F_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto7DD6500F_g, auto7DD6500F_u);
        if (lv_indexUnit == null) { break; }
        lv_moveAttempts = 1;
        for ( ; ( (autoE2C02429_ai >= 0 && lv_moveAttempts <= autoE2C02429_ae) || (autoE2C02429_ai < 0 && lv_moveAttempts >= autoE2C02429_ae) ) ; lv_moveAttempts += autoE2C02429_ai ) {
            lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, 1.0, lv_spawnAngle);
            lv_spawnAngle = (lv_spawnAngle + 77.0);
            if ((PathingType(lv_dropLocation) == c_pathingGround) && (PointPathingIsConnected(lv_dropLocation, lv_dropPodLocation) == true)) {
                break;
            }

        }
        SoundPlayAtPoint(SoundLink("Medivac_Unload", 0), PlayerGroupAll(), lv_dropLocation, 0.0, 100.0, 0.0);
        Wait(0.125, c_timeGame);
        UnitSetPosition(lv_indexUnit, lv_dropLocation, false);
        libNtve_gf_ShowHideUnit(lv_indexUnit, true);
        libNtve_gf_PauseUnit(lv_indexUnit, false);
        lv_moveLocation = PointWithOffsetPolar(lv_dropPodLocation, lv_distance, lv_angle);
        UnitIssueOrder(lv_indexUnit, OrderTargetingPoint(null, lv_moveLocation), c_orderQueueReplace);
        if ((lv_subIndex == lv_countPerLine)) {
            lv_subIndex = 1;
            lv_angle = lv_angleStart;
            lv_distance -= 0.8;
        }
        else {
            lv_subIndex += 1;
            lv_angle += 10.0;
        }
    }
    UnitKill(lv_dropPod);
}

void libCOMI_gf_CreateDropPod (int lp_race, point lp_location, unitgroup lp_units, bool lp_waitDontWait, int lp_player) {
    // Variable Declarations
    point lv_dropLocation;
    unitgroup lv_dropUnits;

    // Automatic Variable Declarations
    int auto30FEF00B_val;

    // Variable Initialization
    lv_dropUnits = UnitGroupEmpty();

    // Implementation
    lv_dropLocation = Point(PointGetX(lp_location), PointGetY(lp_location));
    PointSetFacing(lv_dropLocation, PointGetFacing(lp_location));
    lv_dropUnits = UnitGroupCopy(lp_units);
    DataTableSetUnitGroup(false, libCOMI_gf_CM_DropPod_LastDroppedUnitsDataTableName(), lv_dropUnits);
    auto30FEF00B_val = lp_race;
    if (auto30FEF00B_val == libCOMI_ge_DropPodRace_Terran) {
        if ((lp_waitDontWait == true)) {
            libCOMI_gf_CM_DropPod_Terran_Wait(lv_dropLocation, lv_dropUnits, lp_player);
        }
        else {
            libCOMI_gv_cM_DropPod_TP_Location = lv_dropLocation;
            libCOMI_gv_cM_DropPod_TP_Units = lv_dropUnits;
            libCOMI_gv_cM_DropPod_TP_Player = lp_player;
            TriggerExecute(libCOMI_gt_CM_DropPod_Terran_DontWait, true, false);
        }
    }
    else if (auto30FEF00B_val == libCOMI_ge_DropPodRace_Zerg) {
        if ((lp_waitDontWait == true)) {
            libCOMI_gf_CM_DropPod_Zerg_Wait(lv_dropLocation, lv_dropUnits, lp_player);
        }
        else {
            libCOMI_gv_cM_DropPod_TP_Location = lv_dropLocation;
            libCOMI_gv_cM_DropPod_TP_Units = lv_dropUnits;
            libCOMI_gv_cM_DropPod_TP_Player = lp_player;
            TriggerExecute(libCOMI_gt_CM_DropPod_Zerg_DontWait, true, false);
        }
    }
    else {
    }
}

void libCOMI_gf_CreateDropPodForZergBuilding (string lp_buildingType, point lp_landingPoint, int lp_player, bool lp_waitDontWait) {
    // Automatic Variable Declarations
    bool autoFAF09496_val;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_buildingType, c_unitCreateIgnorePlacement, lp_player, lp_landingPoint);
    libCOMI_gv_cM_DropPod_TP_ZergBuilding = UnitLastCreated();
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    DataTableSetUnitGroup(false, libCOMI_gf_CM_DropPod_LastDroppedUnitsDataTableName(), UnitLastCreatedGroup());
    autoFAF09496_val = lp_waitDontWait;
    if (autoFAF09496_val == true) {
        libCOMI_gf_CM_DropPodCreateZergBuilding_Wait(lp_buildingType, lp_landingPoint, lp_player);
    }
    else if (autoFAF09496_val == false) {
        libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait(lp_buildingType, lp_landingPoint, lp_player);
    }
    else {
    }
}

trigger auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_Trigger = null;
string auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_buildingType;
point auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_landingPoint;
int auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_player;

void libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait (string lp_buildingType, point lp_landingPoint, int lp_player) {
    auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_buildingType = lp_buildingType;
    auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_landingPoint = lp_landingPoint;
    auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_Trigger == null) {
        auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_Trigger = TriggerCreate("auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_TriggerFunc (bool testConds, bool runActions) {
    string lp_buildingType = auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_buildingType;
    point lp_landingPoint = auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_landingPoint;
    int lp_player = auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_player;

    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CM_DropPodCreateZergBuilding_Wait(lp_buildingType, lp_landingPoint, lp_player);
    return true;
}

void libCOMI_gf_CM_DropPodCreateZergBuilding_Wait (string lp_buildingType, point lp_landingPoint, int lp_player) {
    // Variable Declarations
    unit lv_droppod;

    // Automatic Variable Declarations
    unitgroup auto5CF01D86_g;
    int auto5CF01D86_u;
    unit auto5CF01D86_var;

    // Variable Initialization

    // Implementation
    UnitCreate(1, "ZergDropPod", c_unitCreateIgnorePlacement, lp_player, lp_landingPoint, 270.0);
    lv_droppod = UnitLastCreated();
    Wait(2.0, c_timeReal);
    UnitTypeMoveBlockersFromPoint(lp_buildingType, lp_player, lp_landingPoint, 0.0);
    Wait(1.25, c_timeReal);
    auto5CF01D86_g = UnitGroup(null, c_playerAny, RegionCircle(lp_landingPoint, 2.5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5CF01D86_u = UnitGroupCount(auto5CF01D86_g, c_unitCountAll);
    for (;; auto5CF01D86_u -= 1) {
        auto5CF01D86_var = UnitGroupUnitFromEnd(auto5CF01D86_g, auto5CF01D86_u);
        if (auto5CF01D86_var == null) { break; }
        if ((UnitGetType(auto5CF01D86_var) != "ZergDropPodLarge") && (auto5CF01D86_var != UnitLastCreated())) {
            if (((UnitGetOwner(auto5CF01D86_var) == lp_player) || (libNtve_gf_PlayerIsEnemy(lp_player, UnitGetOwner(auto5CF01D86_var), libNtve_ge_PlayerRelation_Ally) == true))) {
                UnitSetPosition(auto5CF01D86_var, UnitTypePlacementFromPoint(lp_buildingType, UnitGetOwner(auto5CF01D86_var), lp_landingPoint, 4.0), true);
            }
            else {
                UnitKill(auto5CF01D86_var);
            }
        }

    }
    libNtve_gf_ShowHideUnit(libCOMI_gv_cM_DropPod_TP_ZergBuilding, true);
    Wait(5.0, c_timeReal);
    UnitKill(lv_droppod);
}

string libCOMI_gf_CM_DropPod_LastDroppedUnitsDataTableName () {
    // Automatic Variable Declarations
    // Implementation
    return "LASTDROPPODEDUNITS";
}

unitgroup libCOMI_gf_LastDroppedUnits () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnitGroup(false, libCOMI_gf_CM_DropPod_LastDroppedUnitsDataTableName());
}

unit libCOMI_gf_CM_NexusBestWorkerRallyMineral (unit lp_nexus) {
    // Variable Declarations
    unit lv_indexUnitOuter;
    unit lv_indexUnitInner;
    fixed lv_bestDistance;
    fixed lv_curDistance;
    region lv_searchArea;
    unitgroup lv_mineralGroup;
    unit lv_bestMineral;

    // Automatic Variable Declarations
    unitgroup auto956D9CE4_g;
    int auto956D9CE4_u;
    unitgroup auto226EA3E5_g;
    int auto226EA3E5_u;

    // Variable Initialization
    lv_mineralGroup = UnitGroupEmpty();

    // Implementation
    lv_searchArea = RegionCircle(UnitGetPosition(lp_nexus), 10.0);
    lv_mineralGroup = UnitGroup("MineralField", c_playerAny, lv_searchArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    UnitGroupAddUnitGroup(lv_mineralGroup, UnitGroup("RichMineralField", c_playerAny, lv_searchArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    UnitGroupAddUnitGroup(lv_mineralGroup, UnitGroup("UmojanLabMineralField", c_playerAny, lv_searchArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    auto956D9CE4_g = lv_mineralGroup;
    auto956D9CE4_u = UnitGroupCount(auto956D9CE4_g, c_unitCountAll);
    for (;; auto956D9CE4_u -= 1) {
        lv_indexUnitOuter = UnitGroupUnitFromEnd(auto956D9CE4_g, auto956D9CE4_u);
        if (lv_indexUnitOuter == null) { break; }
        lv_curDistance = 0.0;
        auto226EA3E5_g = lv_mineralGroup;
        auto226EA3E5_u = UnitGroupCount(auto226EA3E5_g, c_unitCountAll);
        for (;; auto226EA3E5_u -= 1) {
            lv_indexUnitInner = UnitGroupUnitFromEnd(auto226EA3E5_g, auto226EA3E5_u);
            if (lv_indexUnitInner == null) { break; }
            if ((lv_indexUnitOuter != lv_indexUnitInner)) {
                lv_curDistance += DistanceBetweenPoints(UnitGetPosition(lv_indexUnitOuter), UnitGetPosition(lv_indexUnitInner));
            }

        }
        if (((lv_bestDistance == 0.0) || (lv_curDistance < lv_bestDistance))) {
            lv_bestDistance = lv_curDistance;
            lv_bestMineral = lv_indexUnitOuter;
        }

    }
    return lv_bestMineral;
}

void libCOMI_gf_SetWorkerRallyPointforNexus (unit lp_nexus) {
    // Variable Declarations
    unit lv_bestMineral;
    point lv_rallyPoint;

    // Automatic Variable Declarations
    string autoE70E9910_val;

    // Variable Initialization

    // Implementation
    lv_bestMineral = libCOMI_gf_CM_NexusBestWorkerRallyMineral(lp_nexus);
    if ((lv_bestMineral != null)) {
        if ((libCOMI_gf_DifficultyLevelForPlayerCoop(UnitGetOwner(lp_nexus)) == 1)) {
            autoE70E9910_val = UnitGetType(lp_nexus);
            if (autoE70E9910_val == "Nexus") {
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyNexus", 0), lp_nexus), c_orderQueueReplace);
                TechTreeUpgradeAddLevel(UnitGetOwner(lp_nexus), "VoidCasualRallyBlock", 1);
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyNexus", 1), lv_bestMineral), c_orderQueueAddToEnd);
            }
            else if (autoE70E9910_val == "CommandCenter") {
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyCommand", 0), lp_nexus), c_orderQueueReplace);
                TechTreeUpgradeAddLevel(UnitGetOwner(lp_nexus), "VoidCasualRallyBlock", 1);
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyCommand", 1), lv_bestMineral), c_orderQueueAddToEnd);
            }
            else if (autoE70E9910_val == "OrbitalCommand") {
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyCommand", 0), lp_nexus), c_orderQueueReplace);
                TechTreeUpgradeAddLevel(UnitGetOwner(lp_nexus), "VoidCasualRallyBlock", 1);
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyCommand", 1), lv_bestMineral), c_orderQueueAddToEnd);
            }
            else if (autoE70E9910_val == "PlanetaryFortress") {
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyCommand", 0), lp_nexus), c_orderQueueReplace);
                TechTreeUpgradeAddLevel(UnitGetOwner(lp_nexus), "VoidCasualRallyBlock", 1);
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyCommand", 1), lv_bestMineral), c_orderQueueAddToEnd);
            }
            else if (autoE70E9910_val == "Hatchery") {
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), lp_nexus), c_orderQueueReplace);
                TechTreeUpgradeAddLevel(UnitGetOwner(lp_nexus), "VoidCasualRallyBlock", 1);
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyHatchery", 2), lv_bestMineral), c_orderQueueAddToEnd);
            }
            else if (autoE70E9910_val == "Lair") {
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), lp_nexus), c_orderQueueReplace);
                TechTreeUpgradeAddLevel(UnitGetOwner(lp_nexus), "VoidCasualRallyBlock", 1);
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyHatchery", 2), lv_bestMineral), c_orderQueueAddToEnd);
            }
            else if (autoE70E9910_val == "Hive") {
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), lp_nexus), c_orderQueueReplace);
                TechTreeUpgradeAddLevel(UnitGetOwner(lp_nexus), "VoidCasualRallyBlock", 1);
                UnitIssueOrder(lp_nexus, OrderTargetingUnit(AbilityCommand("RallyHatchery", 2), lv_bestMineral), c_orderQueueAddToEnd);
            }
            else {
            }
        }

    }

}

void libCOMI_gf_SetWorkerRallyPointsPlayersNexuses (int lp_player) {
    // Variable Declarations
    unit lv_indexNexus;
    unitgroup lv_nexusGroup;

    // Automatic Variable Declarations
    string auto1EA0163E_val;
    unitgroup auto01E01BBA_g;
    int auto01E01BBA_u;

    // Variable Initialization
    lv_nexusGroup = UnitGroupEmpty();

    // Implementation
    auto1EA0163E_val = PlayerRace(lp_player);
    if (auto1EA0163E_val == "Prot") {
        UnitGroupAddUnitGroup(lv_nexusGroup, UnitGroup("Nexus", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else if (auto1EA0163E_val == "Terr") {
        UnitGroupAddUnitGroup(lv_nexusGroup, UnitGroup("CommandCenter", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_nexusGroup, UnitGroup("OrbitalCommand", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_nexusGroup, UnitGroup("PlanetaryFortress", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else if (auto1EA0163E_val == "Zerg") {
        UnitGroupAddUnitGroup(lv_nexusGroup, UnitGroup("Hatchery", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_nexusGroup, UnitGroup("Lair", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_nexusGroup, UnitGroup("Hive", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else {
    }
    auto01E01BBA_g = lv_nexusGroup;
    auto01E01BBA_u = UnitGroupCount(auto01E01BBA_g, c_unitCountAll);
    for (;; auto01E01BBA_u -= 1) {
        lv_indexNexus = UnitGroupUnitFromEnd(auto01E01BBA_g, auto01E01BBA_u);
        if (lv_indexNexus == null) { break; }
        libCOMI_gf_SetWorkerRallyPointforNexus(lv_indexNexus);
    }
}

void libCOMI_gf_CM_UseUnitNameAsUnitTip (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "ZergDropPod") || (UnitGetType(lp_unit) == "ZergDropPodLarge") || (UnitGetType(lp_unit) == "TerranDropPod") || (UnitGetType(lp_unit) == "ZergDropPodCreep"))) {
        return ;
    }

    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libCOMI_gf_CM_ApplyCampaignTeachingToUnit (unit lp_teachUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetType(lp_teachUnit) == "DrakkenLaserDrillCoop")) {
        TextTagCreate(StringExternal("Param/Value/lib_COMI_AFA9A35D"), 18, UnitGetPosition(lp_teachUnit), 1.0, true, false, PlayerGroupSingle(UnitGetOwner(lp_teachUnit)));
        TextTagAttachToUnit(TextTagLastCreated(), lp_teachUnit, 2.5);
        libCOMI_gv_cM_DrillTextTagCreated = TextTagLastCreated();
        TriggerEnable(libCOMI_gt_CM_CampaignLaserDrillSelected, true);
        TriggerEnable(libCOMI_gt_CM_CampaignLaserDrillDamaged, true);
    }

    if ((UnitGetType(lp_teachUnit) == "SolarForge") && (TechTreeUpgradeCount(UnitGetOwner(lp_teachUnit), "KaraxCommander", c_techCountCompleteOnly) == 1)) {
        TextTagCreate(StringExternal("Param/Value/lib_COMI_00AC11D7"), 18, UnitGetPosition(lp_teachUnit), 1.0, true, false, PlayerGroupSingle(UnitGetOwner(lp_teachUnit)));
        TextTagAttachToUnit(TextTagLastCreated(), lp_teachUnit, 2.5);
        libCOMI_gv_cM_SolarForgeTextTag = TextTagLastCreated();
        TriggerEnable(libCOMI_gt_CM_CampaignSolarForgeSelected, true);
    }

}

void libCOMI_gf_SetUnitInfoTextCampaign (unit lp_unit, text lp_info, text lp_tip, text lp_subTip) {
    // Variable Declarations
    text lv_tipStyled;
    text lv_subTipStyled;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_tip != null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_3704A828", "A", lp_tip);
        lv_tipStyled = TextExpressionAssemble("Param/Expression/lib_COMI_3704A828");
    }
    else {
        lv_tipStyled = lp_tip;
    }
    if ((lp_subTip != null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_50F2381C", "A", lp_subTip);
        lv_subTipStyled = TextExpressionAssemble("Param/Expression/lib_COMI_50F2381C");
    }
    else {
        lv_subTipStyled = lp_subTip;
    }
    UnitSetInfoText(lp_unit, lp_info, lv_tipStyled, lv_subTipStyled);
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libCOMI_gf_SetUnitInfoTextCampaignDetailed (unit lp_unit, text lp_info, text lp_tip, text lp_subTip) {
    // Variable Declarations
    text lv_tipStyled;
    text lv_subTipStyled;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_tip != null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_1C88F6E4", "A", lp_tip);
        lv_tipStyled = TextExpressionAssemble("Param/Expression/lib_COMI_1C88F6E4");
    }
    else {
        lv_tipStyled = lp_tip;
    }
    if ((lp_subTip != null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_08BB63F6", "A", lp_subTip);
        lv_subTipStyled = TextExpressionAssemble("Param/Expression/lib_COMI_08BB63F6");
    }
    else {
        lv_subTipStyled = lp_subTip;
    }
    UnitSetInfoText(lp_unit, lp_info, lv_tipStyled, lv_subTipStyled);
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libCOMI_gf_SpawnLarvaForHatchery (unit lp_hatchery, int lp_larvaCount) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorSpawn(lp_hatchery, "SpawnLarva", lp_larvaCount);
}

void libCOMI_gf_SendActorMessageToDoodadsInRegion (string lp_message, string lp_doodadType, region lp_target) {
    // Variable Declarations
    actor lv_actorRegion;
    string lv_terms;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_terms = "";

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_target);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    if ((lp_doodadType != null)) {
        lv_terms = ("ScopeContains " + lp_doodadType);
    }

    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, lp_message, "Doodad", lv_terms);
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

void libCOMI_gf_DestroyCacheAndGivePlayerResources (unit lp_cacheUnit, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_GivePlayerResources(UnitGetPosition(lp_cacheUnit), lp_resourceType, lp_resourceAmount, lp_resourceIcon, lp_resourceText, lp_player);
    UnitKill(lp_cacheUnit);
}

void libCOMI_gf_GivePlayerResources (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    // Variable Declarations
    text lv_text;

    // Automatic Variable Declarations
    int auto8ED25223_val;

    // Variable Initialization

    // Implementation
    auto8ED25223_val = lp_resourceType;
    if (auto8ED25223_val == libCOMI_ge_CacheResourceType_Mineral) {
        PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, lp_resourceAmount);
    }
    else if (auto8ED25223_val == libCOMI_ge_CacheResourceType_Vespene) {
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperAdd, lp_resourceAmount);
    }
    else {
    }
    libCOMI_gf_DisplayRewardFloatingText(lp_location, lp_resourceType, lp_resourceAmount, lp_resourceIcon, lp_resourceText, lp_player);
}

void libCOMI_gf_DisplayRewardFloatingText (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    // Variable Declarations
    text lv_text;
    text lv_signPrefix;

    // Automatic Variable Declarations
    int auto2128925C_val;
    int autoC4309F63_val;

    // Variable Initialization

    // Implementation
    if ((lp_resourceAmount >= 0)) {
        lv_signPrefix = StringExternal("Param/Value/lib_COMI_3E03BDBE");
    }

    auto2128925C_val = lp_resourceType;
    if (auto2128925C_val == libCOMI_ge_CacheResourceType_Mineral) {
        TextExpressionSetToken("Param/Expression/lib_COMI_FA2F2D3B", "A", StringToText(("Kicker_Minerals")));
        TextExpressionSetToken("Param/Expression/lib_COMI_FA2F2D3B", "SIGN", lv_signPrefix);
        TextExpressionSetToken("Param/Expression/lib_COMI_FA2F2D3B", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_FA2F2D3B");
    }
    else if (auto2128925C_val == libCOMI_ge_CacheResourceType_Vespene) {
        TextExpressionSetToken("Param/Expression/lib_COMI_3D845762", "A", StringToText(("Kicker_Gas")));
        TextExpressionSetToken("Param/Expression/lib_COMI_3D845762", "SIGN", lv_signPrefix);
        TextExpressionSetToken("Param/Expression/lib_COMI_3D845762", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_3D845762");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COMI_261E2441", "A", StringToText(("Kicker_Zerg")));
        TextExpressionSetToken("Param/Expression/lib_COMI_261E2441", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_261E2441");
    }
    if ((lp_resourceIcon != null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_F881F2B7", "A", lv_text);
        TextExpressionSetToken("Param/Expression/lib_COMI_F881F2B7", "B", StringToText(lp_resourceIcon));
        lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_F881F2B7");
    }
    else {
        autoC4309F63_val = lp_resourceType;
        if (autoC4309F63_val == libCOMI_ge_CacheResourceType_Mineral) {
            TextExpressionSetToken("Param/Expression/lib_COMI_C99B9DE4", "A", lv_text);
            lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_C99B9DE4");
        }
        else if (autoC4309F63_val == libCOMI_ge_CacheResourceType_Vespene) {
            TextExpressionSetToken("Param/Expression/lib_COMI_6CB2A27A", "A", lv_text);
            lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_6CB2A27A");
        }
        else {
        }
    }
    if (((lp_resourceText != null) == true)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_A8624C75", "A", lv_text);
        TextExpressionSetToken("Param/Expression/lib_COMI_A8624C75", "B", lp_resourceText);
        lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_A8624C75");
    }

    if ((lp_resourceAmount >= 0)) {
        SoundPlay(SoundLink("UI_ResourcePickup", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
    }
    else {
        SoundPlay(SoundLink("UI_Mutator_MicroTransactions", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
    }
    TextTagCreate(lv_text, 24, lp_location, 2.0, true, false, PlayerGroupSingle(lp_player));
    TextTagSetVelocity(TextTagLastCreated(), 0.7, 90.0);
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\blank.dds", true);
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
}

void libCOMI_gf_DisplayMissionObjectiveRewardFloatingText (point lp_location, string lp_objective, int lp_player) {
    // Automatic Variable Declarations
}

bool libCOMI_gf_CM_StartingWorkerAutoHarvestEnabled () {
    // Automatic Variable Declarations
    // Implementation
    return PlayerGetState(1, c_playerStateStartingRallyEnabled);
}

void libCOMI_gf_StartingWorkersAutoHarvest (region lp_regionMineralWorker, region lp_regionGasWorker) {
    // Variable Declarations
    unit lv_indexWorker;
    unitgroup lv_resourceGroup;
    unit lv_indexResource;
    unitgroup lv_unitGroupHarvestMinerals;
    unitgroup lv_unitGroupHarvestGas;

    // Automatic Variable Declarations
    unitgroup autoA8D4E691_g;
    int autoA8D4E691_u;
    unitgroup auto7A456887_g;
    int auto7A456887_u;
    unitgroup auto219ADB5D_g;
    int auto219ADB5D_u;
    unitgroup auto85EF0FC7_g;
    int auto85EF0FC7_u;

    // Variable Initialization
    lv_resourceGroup = UnitGroupEmpty();
    lv_unitGroupHarvestMinerals = UnitGroupEmpty();
    lv_unitGroupHarvestGas = UnitGroupEmpty();

    // Implementation
    if ((libCOMI_gf_CM_StartingWorkerAutoHarvestEnabled() == false)) {
        return ;
    }

    if ((lp_regionMineralWorker != null)) {
        lv_unitGroupHarvestMinerals = UnitGroup(null, c_playerAny, lp_regionMineralWorker, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }

    if ((TechTreeUpgradeCount(1, "K5AutoExtractor", c_techCountQueuedOrBetter) > 0)) {
        UnitGroupAddUnitGroup(lv_unitGroupHarvestMinerals, UnitGroup(null, c_playerAny, lp_regionGasWorker, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    else {
        if ((lp_regionGasWorker != null)) {
            lv_unitGroupHarvestGas = UnitGroup(null, c_playerAny, lp_regionGasWorker, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }

    }
    if ((lv_unitGroupHarvestMinerals != UnitGroupEmpty())) {
        autoA8D4E691_g = lv_unitGroupHarvestMinerals;
        autoA8D4E691_u = UnitGroupCount(autoA8D4E691_g, c_unitCountAll);
        for (;; autoA8D4E691_u -= 1) {
            lv_indexWorker = UnitGroupUnitFromEnd(autoA8D4E691_g, autoA8D4E691_u);
            if (lv_indexWorker == null) { break; }
            UnitGroupClear(lv_resourceGroup);
            auto7A456887_g = UnitGroup(null, 0, RegionCircle(UnitGetPosition(lv_indexWorker), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto7A456887_u = UnitGroupCount(auto7A456887_g, c_unitCountAll);
            for (;; auto7A456887_u -= 1) {
                lv_indexResource = UnitGroupUnitFromEnd(auto7A456887_g, auto7A456887_u);
                if (lv_indexResource == null) { break; }
                if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_indexResource), "ResourceType", c_playerAny) == "Minerals")) {
                    UnitGroupAdd(lv_resourceGroup, lv_indexResource);
                }

            }
            if ((UnitGroupCount(lv_resourceGroup, c_unitCountAlive) > 0)) {
            }

        }
    }

    if ((lv_unitGroupHarvestGas != UnitGroupEmpty())) {
        auto219ADB5D_g = lv_unitGroupHarvestGas;
        auto219ADB5D_u = UnitGroupCount(auto219ADB5D_g, c_unitCountAll);
        for (;; auto219ADB5D_u -= 1) {
            lv_indexWorker = UnitGroupUnitFromEnd(auto219ADB5D_g, auto219ADB5D_u);
            if (lv_indexWorker == null) { break; }
            UnitGroupClear(lv_resourceGroup);
            auto85EF0FC7_g = UnitGroup(null, UnitGetOwner(lv_indexWorker), RegionCircle(UnitGetPosition(lv_indexWorker), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto85EF0FC7_u = UnitGroupCount(auto85EF0FC7_g, c_unitCountAll);
            for (;; auto85EF0FC7_u -= 1) {
                lv_indexResource = UnitGroupUnitFromEnd(auto85EF0FC7_g, auto85EF0FC7_u);
                if (lv_indexResource == null) { break; }
                if (((UnitGetType(lv_indexResource) == "Refinery") || (UnitGetType(lv_indexResource) == "Extractor") || (UnitGetType(lv_indexResource) == "Assimilator"))) {
                    UnitGroupAdd(lv_resourceGroup, lv_indexResource);
                }

            }
            if ((UnitGroupCount(lv_resourceGroup, c_unitCountAlive) > 0)) {
            }

        }
    }

}

bool libCOMI_gf_UnitMoverExists (string lp_unitType, string lp_mover) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "Mover", c_playerAny) == lp_mover)) {
        return true;
    }
    else {
        return false;
    }
}

fixed libCOMI_gf_ExpansionRockLife (int lp_rockType) {
    // Variable Declarations
    fixed lv_rockLife;
    int lv_difficulty;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_difficulty = 2;

    // Implementation
    lv_difficulty = libCOMI_gf_GetMissionDifficulty();
    if ((lp_rockType == libCOMI_ge_ExpansionRockType_GeyserRock)) {
        if (((lv_difficulty == 1) || (lv_difficulty == 2))) {
            lv_rockLife = 500.0;
        }
        else {
            lv_rockLife = 1000.0;
        }
    }

    if ((lp_rockType == libCOMI_ge_ExpansionRockType_TownHallRock)) {
        if (((lv_difficulty == 1) || (lv_difficulty == 2))) {
            lv_rockLife = 1000.0;
        }
        else {
            lv_rockLife = 2000.0;
        }
    }

    return lv_rockLife;
}

void libCOMI_gf_SleepWakeUpUnitCoop (unit lp_unit, bool lp_sleepWakeUp, int lp_alwaysExclusions) {
    // Variable Declarations
    string lv_typeOfSleepyUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_sleepWakeUp == true) && (lp_alwaysExclusions == libCOMI_ge_SleepWakeUpExcludeOption_RespectExclusions)) {
        if ((lv_typeOfSleepyUnit != "OrbitalCommand") && (lv_typeOfSleepyUnit != "CommandCenter")) {
            libNtve_gf_SleepUnit(lp_unit, lp_sleepWakeUp);
        }

    }
    else {
        libNtve_gf_SleepUnit(lp_unit, lp_sleepWakeUp);
    }
}

point libCOMI_gf_CM_NearbyGroundPathablePoint (point lp_initialDropPoint, fixed lp_distanceOffsetMin, fixed lp_distanceOffsetMax) {
    // Variable Declarations
    point lv_returnedDropPoint;
    point lv_testDropPoint;
    int lv_moveAttempts;

    // Automatic Variable Declarations
    const int auto773DC6B0_ae = 100;
    const int auto773DC6B0_ai = 1;

    // Variable Initialization

    // Implementation
    lv_returnedDropPoint = lp_initialDropPoint;
    lv_moveAttempts = 1;
    for ( ; ( (auto773DC6B0_ai >= 0 && lv_moveAttempts <= auto773DC6B0_ae) || (auto773DC6B0_ai < 0 && lv_moveAttempts >= auto773DC6B0_ae) ) ; lv_moveAttempts += auto773DC6B0_ai ) {
        lv_testDropPoint = PointWithOffsetPolar(lp_initialDropPoint, RandomFixed(lp_distanceOffsetMin, lp_distanceOffsetMax), libNtve_gf_RandomAngle());
        if ((PathingType(lv_testDropPoint) == c_pathingGround) && (PointPathingIsConnected(lv_testDropPoint, lp_initialDropPoint) == true) && (PointPathingPassable(lv_testDropPoint) == true)) {
            lv_returnedDropPoint = lv_testDropPoint;
            break;
        }

    }
    return lv_returnedDropPoint;
}

void libCOMI_gf_CM_ChatBarSetMode (int lp_mode, playergroup lp_players) {
    // Automatic Variable Declarations
    int auto3055BBDE_val;

    // Implementation
    if ((libCOMI_gv_cM_FullScreenUpperContainer == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
        libCOMI_gv_cM_FullScreenUpperContainer = DialogControlLastCreated();
    }

    auto3055BBDE_val = lp_mode;
    if (auto3055BBDE_val == libCOMI_ge_CM_ChatBarMode_CM_ChatBarMutator) {
        DialogControlSetAnimationState(libCOMI_gv_cM_FullScreenUpperContainer, lp_players, "MutatorSelectionState", "Active");
    }
    else {
        DialogControlSetAnimationState(libCOMI_gv_cM_FullScreenUpperContainer, lp_players, "MutatorSelectionState", "Inactive");
    }
}

void libCOMI_gf_DisplayCampaignMessage (playergroup lp_toPlayerGroup, int lp_messageType, text lp_message, int lp_formatOrNot) {
    // Automatic Variable Declarations
    int auto859F408A_val;

    // Implementation
    if ((lp_formatOrNot == libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage)) {
        auto859F408A_val = lp_messageType;
        if (auto859F408A_val == libCOMI_ge_CampaignMessageType_Hint) {
            TextExpressionSetToken("Param/Expression/lib_COMI_64DF7A24", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_64DF7A24"));
            SoundPlayForPlayer(SoundLink("UI_TerranHint", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_SimpleHint) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, lp_message);
            SoundPlayForPlayer(SoundLink("UI_TerranHint", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_Secret) {
            TextExpressionSetToken("Param/Expression/lib_COMI_C1624255", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_C1624255"));
            SoundPlayForPlayer(SoundLink("TUISecret", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_NewUnitAcquired) {
            TextExpressionSetToken("Param/Expression/lib_COMI_A49EDD0B", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_A49EDD0B"));
            SoundPlayForPlayer(SoundLink("UI_TerranNewUnitAvailable", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_NewUnitAvailable) {
            TextExpressionSetToken("Param/Expression/lib_COMI_BA0BF873", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_BA0BF873"));
            SoundPlayForPlayer(SoundLink("UI_TerranNewUnitAvailable", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_NewTechAvailable) {
            TextExpressionSetToken("Param/Expression/lib_COMI_39320B7C", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_39320B7C"));
            SoundPlayForPlayer(SoundLink("UI_TerranNewTechAvailable", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_NewUnitAvailable2) {
            TextExpressionSetToken("Param/Expression/lib_COMI_D6A0DA61", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_D6A0DA61"));
            SoundPlayForPlayer(SoundLink("UI_TerranNewTechAvailable", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_Warning) {
            TextExpressionSetToken("Param/Expression/lib_COMI_19CBF466", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_19CBF466"));
            SoundPlayForPlayer(SoundLink("UI_ZergWarning", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_MissionFailed) {
            TextExpressionSetToken("Param/Expression/lib_COMI_A4179B16", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_A4179B16"));
            SoundPlayForPlayer(SoundLink("UI_TerranMissionFailed", 1), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_MissionVictory) {
            TextExpressionSetToken("Param/Expression/lib_COMI_A60635A0", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_A60635A0"));
            SoundPlayForPlayer(SoundLink("UI_MissionComplete", 3), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else {
        }
    }
    else {
        UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, lp_message);
    }
}

string libCOMI_gf_CM_ReticleModelOfStyle (int lp_type, int lp_size) {
    // Variable Declarations
    string lv_model;

    // Automatic Variable Declarations
    int autoCDEF28CD_val;
    int autoBEC58E6C_val;
    int auto993B9915_val;
    int auto1B271D82_val;

    // Variable Initialization

    // Implementation
    autoCDEF28CD_val = lp_size;
    if (autoCDEF28CD_val == libCOMI_ge_CampaginReticleSize_Large) {
        autoBEC58E6C_val = lp_type;
        if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectLargeRed";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelectLarge";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectLargeRed";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelectLarge";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectLargeZergGreen";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectLargeZergRed";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectLargeZergGreen";
        }
        else {
        }
    }
    else if (autoCDEF28CD_val == libCOMI_ge_CampaginReticleSize_Medium) {
        auto993B9915_val = lp_type;
        if (auto993B9915_val == libCOMI_ge_CampaginReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectRed";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelect";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectRed";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelect";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectZergGreen";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectZergRed";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectZergGreen";
        }
        else {
        }
    }
    else if (autoCDEF28CD_val == libCOMI_ge_CampaginReticleSize_Small) {
        auto1B271D82_val = lp_type;
        if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectRedSmall";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelectSmall";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectRedSmall";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelectSmall";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectZergSmallGreen";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectZergSmallRed";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectZergSmallGreen";
        }
        else {
        }
    }
    else {
    }
    return lv_model;
}

string libCOMI_gf_CM_ReticleTextFontOfStyle (int lp_type) {
    // Variable Declarations
    string lv_fontStyle;

    // Automatic Variable Declarations
    int auto4C012C4E_val;

    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    auto4C012C4E_val = lp_type;
    if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_ProtossBonusObjective) {
        lv_fontStyle = "VoidReticleProtossBonusObjective";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_ProtossEnemy) {
        lv_fontStyle = "VoidReticleProtossEnemy";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_ProtossMainObjective) {
        lv_fontStyle = "VoidReticleProtossMainObjective";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_TerranBonusObjective) {
        lv_fontStyle = "VoidReticleTerranBonusObjective";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_TerranEnemy) {
        lv_fontStyle = "VoidReticleTerranEnemy";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_TerranMainObjective) {
        lv_fontStyle = "VoidReticleTerranMainObjective";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_ZergBonusObjective) {
        lv_fontStyle = "VoidReticleZergBonusObjective";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_ZergEnemy) {
        lv_fontStyle = "VoidReticleZergEnemy";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_ZergMainObjective) {
        lv_fontStyle = "VoidReticleZergMainObjective";
    }
    else {
    }
    return lv_fontStyle;
}

void libCOMI_gf_CreateReticleEffectAndTextTagAtPoint (int lp_type, int lp_size, text lp_text, point lp_location) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lv_model = libCOMI_gf_CM_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_CreateModelAtPoint(lv_model, lp_location);
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = libCOMI_gf_CM_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_COMI_C1B831B2", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_COMI_C1B831B2", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COMI_C1B831B2"), 24, lp_location, 0.0, true, true, libCOOC_gf_HumanPlayers());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

void libCOMI_gf_AttachReticleEffectAndTextTagOnUnit (int lp_type, int lp_size, text lp_text, unit lp_target, string lp_attachPoint) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lv_model = libCOMI_gf_CM_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_AttachModelToUnitInheritVisibility(lp_target, lv_model, lp_attachPoint);
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = libCOMI_gf_CM_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_COMI_242FDFAD", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_COMI_242FDFAD", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COMI_242FDFAD"), 24, UnitGetPosition(lp_target), 0.0, true, true, libCOOC_gf_HumanPlayers());
    TextTagAttachToUnit(TextTagLastCreated(), lp_target, 0.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

int libCOMI_gf_LeaderboardTimeScore (int lp_maxScore, int lp_parTimeMinutes) {
    // Variable Declarations
    int lv_parTimeSeconds;
    fixed lv_scoreModifierReal;
    int lv_scoreValue;
    fixed lv_scoreValueReal;
    int lv_adjustedMaxScore;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_parTimeSeconds = (lp_parTimeMinutes * 60);
    lv_adjustedMaxScore = (lp_maxScore + (lv_parTimeSeconds * 16));
    lv_scoreModifierReal = (IntToFixed(lp_maxScore) / IntToFixed(lv_parTimeSeconds));
    lv_scoreValueReal = (IntToFixed(lv_adjustedMaxScore) - (GameGetMissionTime() * lv_scoreModifierReal));
    lv_scoreValue = FixedToInt(lv_scoreValueReal);
    if ((lv_scoreValueReal > 0)) {
        return lv_scoreValue;
    }
    else {
        return 0;
    }
}

int libCOMI_gf_LeaderboardFinalScoreChecker (int lp_scoreValue, int lp_objective, bool lp_checkCompletion) {
    // Variable Declarations
    int lv_pityScore;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pityScore = 1000;

    // Implementation
    if ((lp_objective == c_invalidObjectiveId)) {
        return 0;
    }
    else {
        if ((lp_checkCompletion == true)) {
            if (((ObjectiveGetState(lp_objective) != c_objectiveStateCompleted))) {
                return 0;
            }
            else {
                if ((lp_scoreValue < lv_pityScore)) {
                    return lv_pityScore;
                }
                else {
                    return lp_scoreValue;
                }
            }
        }
        else {
            if ((ObjectiveGetState(lp_objective) == c_objectiveStateFailed)) {
                return 0;
            }
            else {
                if ((lp_scoreValue < lv_pityScore)) {
                    return lv_pityScore;
                }
                else {
                    return lp_scoreValue;
                }
            }
        }
    }
}

int libCOMI_gf_LeaderboardObjectiveHealthScore (unit lp_objectiveUnit, int lp_maxScore) {
    // Variable Declarations
    int lv_scoreModifier;
    int lv_scoreValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_scoreModifier = (lp_maxScore / 100);
    lv_scoreValue = FixedToInt((UnitGetPropertyFixed(lp_objectiveUnit, c_unitPropLifePercent, c_unitPropCurrent) * lv_scoreModifier));
    if (((lv_scoreValue > 0) || (UnitIsAlive(lp_objectiveUnit) == true))) {
        return lv_scoreValue;
    }
    else {
        return 0;
    }
}

fixed libCOMI_gf_LeaderboardObjectDurationModifierValue (int lp_maxScore, int lp_maxDurationMinutes) {
    // Variable Declarations
    int lv_maxDurationSeconds;
    fixed lv_scoreModifier;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_maxDurationSeconds = (lp_maxDurationMinutes * (960));
    lv_scoreModifier = (IntToFixed(lp_maxScore) / IntToFixed(lv_maxDurationSeconds));
    return lv_scoreModifier;
}

void libCOMI_gf_CM_CampaignMissionInit () {
    // Variable Declarations
    unit lv_indexUnit;
    int lv_indexPlayer;
    playergroup lv_itPlayerGroup;

    // Automatic Variable Declarations
    playergroup autoD1FA3909_playerPool;
    int autoD1FA3909_itPlayer;
    playergroup autoD1FA3909_itTestPool;
    playergroup auto72F1BEA2_g;
    playergroup autoFBC5769B_g;

    // Variable Initialization
    lv_itPlayerGroup = PlayerGroupEmpty();

    // Implementation
    if ((libCOMI_gv_cM_CampaignMissionPerfTest == true)) {
        PerfTestStart(StringExternal("Param/Value/lib_COMI_8A49EC89"));
        TriggerExecute(libCOMI_gt_CM_CampaignMissionPerfLog, true, false);
    }

    libCOMI_gv_cM_CombatTimer = TimerCreate();
    TimerStart(libCOMI_gv_cM_CombatTimer, 86400.0, false, c_timeGame);
    UnitEventSetNullVariableInvalid(true);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    libCOUI_gv_cU_MissionUIContainer = DialogControlLastCreated();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    autoD1FA3909_playerPool = PlayerGroupAll();
    autoD1FA3909_itPlayer = 0;
    autoD1FA3909_itTestPool=null;
    while (PlayerGroupCount(autoD1FA3909_playerPool)) {
        autoD1FA3909_itPlayer = PlayerGroupPlayer(autoD1FA3909_playerPool, 1);
        autoD1FA3909_itTestPool = libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(autoD1FA3909_itPlayer);
        PlayerGroupRemove(autoD1FA3909_playerPool, autoD1FA3909_itPlayer);
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_AllyMutual,autoD1FA3909_itPlayer), autoD1FA3909_playerPool);
        if(PlayerGroupCount(autoD1FA3909_itTestPool)){
            lv_itPlayerGroup = autoD1FA3909_itTestPool;
            libNtve_gf_SetPlayerGroupAlliance(lv_itPlayerGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
            auto72F1BEA2_g = lv_itPlayerGroup;
            lv_indexPlayer = -1;
            while (true) {
                lv_indexPlayer = PlayerGroupNextPlayer(auto72F1BEA2_g, lv_indexPlayer);
                if (lv_indexPlayer < 0) { break; }
                if ((PlayerStatus(lv_indexPlayer) == c_playerStatusLeft)) {
                    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(PlayerGroupSingle(lv_indexPlayer), lv_itPlayerGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
                }

            }
            libNtve_gf_SetAllianceAspectForPlayerGroup(lv_itPlayerGroup, c_allianceIdDefeat, true);
        }
    }
    libLbty_gf_EnableDisablePingPanel(true, PlayerGroupAll());
    if ((libCOOC_gf_CC_DifficultyIndex(PlayerDifficulty(3)) != 0)) {
        PlayerSetDifficulty(1, PlayerDifficulty(3));
    }

    if ((libCOOC_gf_CC_DifficultyIndex(PlayerDifficulty(4)) != 0)) {
        PlayerSetDifficulty(2, PlayerDifficulty(4));
    }

    GameSetSpeedLocked(true);
    if ((libCOMU_gf_CT_MutatorInCustom() == false)) {
        if ((libCOMI_gf_DifficultyLevelForPlayerCoop(1) == 4) && (libCOMI_gf_DifficultyLevelForPlayerCoop(2) == 4)) {
            GameSetSpeedValue(c_gameSpeedFaster);
        }
        else {
            GameSetSpeedValue(c_gameSpeedFast);
        }
    }

    libCOMU_gf_CT_InitializeAll();
    TriggerExecute(libCOMI_gt_CM_CampaignUnitTeaching, true, false);
    TriggerExecute(libCOMI_gt_CM_StartingTech, true, false);
    libCOMI_gf_EnableDisableZerglingRespawn(true);
    TriggerExecute(libCOMI_gt_CM_HatcheryPrimarySearch, false, false);
    TriggerExecute(libCOMI_gt_CM_HeroSpawn, true, false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/ObjectivePanel");
    libCOUI_gv_cU_ObjectivePanel = DialogControlLastCreated();
    libCOUI_gf_CU_UpdateObjectivePanel();
    autoFBC5769B_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoFBC5769B_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        MeleeSetOption(lv_indexPlayer, c_meleeOptionPoints, true);
        PlayerSetState(lv_indexPlayer, c_playerStateXPGain, true);
        UserDataSetInt("PlayerCommanders", libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer), "InThisMission", 1, 1);
        libCOMI_gf_CM_DifficultyApplySettings(lv_indexPlayer);
    }
    if ((PlayerType(2) == c_playerTypeComputer)) {
        AIMeleeStart(2);
    }

    TriggerExecute(libCOMI_gt_CM_GlobalCasterInit, true, false);
    libCOUI_gf_CU_HelpInit();
    libCOMI_gf_CM_DataUtilInit();
    libCOMI_gf_CM_CommanderVOInit();
    libCOUI_gf_CU_MinimapAllyViewInit();
    libCOUI_gf_CU_MutatorListInit();
    libCOMI_gf_CM_ChatBarSetMode(libCOMI_ge_CM_ChatBarMode_CM_ChatBarNormal, PlayerGroupAll());
    libCOMI_gf_CM_GPRemindersInit();
}

void libCOMI_gf_CM_CampaignHelpPanelTempSetup () {
    // Automatic Variable Declarations
    // Implementation
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
}

void libCOMI_gf_CM_DifficultyApplySettings (int lp_player) {
    // Automatic Variable Declarations
    int autoC8030729_val;

    // Implementation
    autoC8030729_val = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    if (autoC8030729_val == 1) {
        PlayerModifyPropertyInt(lp_player, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, FixedToInt((UserDataGetFixed("DifficultySettings", "Casual", "DamageTakenRatio", 1) * 100.0)));
    }
    else if (autoC8030729_val == 2) {
        PlayerModifyPropertyInt(lp_player, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, FixedToInt((UserDataGetFixed("DifficultySettings", "Normal", "DamageTakenRatio", 1) * 100.0)));
    }
    else if (autoC8030729_val == 3) {
        PlayerModifyPropertyInt(lp_player, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, FixedToInt((UserDataGetFixed("DifficultySettings", "Hard", "DamageTakenRatio", 1) * 100.0)));
    }
    else if (autoC8030729_val == 4) {
        PlayerModifyPropertyInt(lp_player, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, FixedToInt((UserDataGetFixed("DifficultySettings", "Brutal", "DamageTakenRatio", 1) * 100.0)));
    }
    else {
    }
}

void libCOMI_gf_PlayMapIntroZoom (bool lp_waitDontWait) {
    // Automatic Variable Declarations
    // Implementation
    TriggerExecute(libCOMI_gt_CM_CampaignMissionIntroZoomIn, true, lp_waitDontWait);
}

void libCOMI_gf_LoadCoopMission (string lp_map, trigger lp_startTrigger) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CoopPresetCommanderAndTeam();
    libCOMI_gv_cM_CampaignMissionStartTrigger = lp_startTrigger;
    libCOOC_gf_LoadAlliedCommandersData(lp_map, libCOMI_gt_CM_CampaignMissionInitialize);
}

void libCOMI_gf_CoopPresetCommanderAndTeam () {
    // Variable Declarations
    int lv_index;
    string lv_itPlayerInstance;
    int lv_itPlayerId;
    string lv_playerUserType;
    string lv_itIsCommander;
    string lv_itPresetTeam;

    // Automatic Variable Declarations
    string autoFD293270_userType;
    int autoFD293270_i;
    const int auto96CB44EA_ae = libCOMI_gv_cC_CoopPresetTeamsCount;
    const int auto96CB44EA_ai = 1;

    // Variable Initialization
    lv_playerUserType = "PresetCoopPlayers";

    // Implementation
    autoFD293270_userType = lv_playerUserType;
    autoFD293270_i = 1;
    for ( ; autoFD293270_i <= UserDataInstanceCount(autoFD293270_userType) ; autoFD293270_i += 1 ) {
        lv_itPlayerInstance = UserDataInstance(autoFD293270_userType, autoFD293270_i);
        lv_itIsCommander = UserDataGetUserInstance(lv_playerUserType, lv_itPlayerInstance, "Is Commander", 1);
        lv_itPlayerId = UserDataGetInt(lv_playerUserType, lv_itPlayerInstance, "Player Id", 1);
        lv_itPresetTeam = UserDataGetUserInstance(lv_playerUserType, lv_itPlayerInstance, "Preset Team", 1);
        if ((lv_itIsCommander == "True")) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_itPlayerId, "PlayerCommander", 1);
        }

        if ((lv_itPresetTeam != "No Preset Team")) {
            PlayerGroupAdd(libCOMI_gv_coopPresetTeams[libNtve_gf_UserDataInstanceGetIndex("PresetCoopPlayerTeams", lv_itPresetTeam)], lv_itPlayerId);
        }

    }
    lv_index = 0;
    for ( ; ( (auto96CB44EA_ai >= 0 && lv_index <= auto96CB44EA_ae) || (auto96CB44EA_ai < 0 && lv_index >= auto96CB44EA_ae) ) ; lv_index += auto96CB44EA_ai ) {
        libNtve_gf_SetPlayerGroupAlliance(libCOMI_gv_coopPresetTeams[lv_index], libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Void Ping Sound
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_VoidPingSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMU_gf_MutatorIsEnabled("BlackFog") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("UI_TerranPing", -1)), c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_VoidPingSound_Init () {
    libCOMI_gt_VoidPingSound = TriggerCreate("libCOMI_gt_VoidPingSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugAbathurBiomassReport
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DebugAbathurBiomassReport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_COMI_684BFF34", "A", IntToText(libCOMI_gv_cM_DebugAbathurBiomassCollected));
    TextExpressionSetToken("Param/Expression/lib_COMI_684BFF34", "B", IntToText(libCOMI_gv_cM_DebugAbathurBiomassDroppedNormal));
    TextExpressionSetToken("Param/Expression/lib_COMI_684BFF34", "C", IntToText(libCOMI_gv_cM_DebugAbathurBiomassLost));
    TextExpressionSetToken("Param/Expression/lib_COMI_684BFF34", "D", IntToText(libCOMI_gv_cM_DebugAbathurBiomassDroppedRefund));
    TriggerDebugOutput(13, TextExpressionAssemble("Param/Expression/lib_COMI_684BFF34"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DebugAbathurBiomassReport_Init () {
    libCOMI_gt_CM_DebugAbathurBiomassReport = TriggerCreate("libCOMI_gt_CM_DebugAbathurBiomassReport_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_DebugAbathurBiomassReport, c_playerAny, "-bioreport", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugAIPersonalityChange
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DebugAIPersonalityChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_CoopAIPlayer_CommanderShared = libCOUI_gf_CU_AIChoiceSelectedPersonality(1);
    libCOUI_gf_CU_AIChoiceClose(1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DebugAIPersonalityChange_Init () {
    libCOMI_gt_CM_DebugAIPersonalityChange = TriggerCreate("libCOMI_gt_CM_DebugAIPersonalityChange_Func");
    libCOUI_gf_CU_AIChoiceClosed(libCOMI_gt_CM_DebugAIPersonalityChange);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugHeroReviveInstant
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DebugHeroReviveInstant_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = 1;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != "")) {
        lv_player = StringToInt(StringWord(EventChatMessage(false), 2));
    }

    libNtve_gf_PlayerRemoveCooldown(lv_player, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lv_player)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DebugHeroReviveInstant_Init () {
    libCOMI_gt_CM_DebugHeroReviveInstant = TriggerCreate("libCOMI_gt_CM_DebugHeroReviveInstant_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_DebugHeroReviveInstant, c_playerAny, "revivenow", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugCommanderCooldowns
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DebugCommanderCooldowns_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto864A12EB_val;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto864A12EB_val = PlayerCommander(EventPlayer());
    if (auto864A12EB_val == "Fenix") {
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "SOASummonFenix");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "SOASummonFenixDragoon");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "SOASummonFenixArbiter");
    }
    else if (auto864A12EB_val == "Alarak") {
        libNtve_gf_UnitAbilityRemoveChargeUsed(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "AlarakStructureOvercharge", "Abil/AlarakStructureOvercharge");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/AlarakACSummonDeathfleetTarget");
    }
    else if (auto864A12EB_val == "Artanis") {
        libNtve_gf_UnitRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SOACaster");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SoASuperShield", "Abil/SoASuperShield");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SOAOrbitalStrikeActivate", "Abil/SOAOrbitalStrikeActivate");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SOAStrafeAttack", "Abil/SOAStrafeAttack");
    }
    else if (auto864A12EB_val == "Vorazun") {
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SOADarkPylon", "Abil/SOADarkPylon");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SOAShadowGuardCalldown", "Abil/SOAShadowGuardCalldown");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SOATimeFreeze", "Abil/SOATimeFreeze");
    }
    else if (auto864A12EB_val == "Karax") {
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SOAThermalLanceActivate", "Abil/SOAThermalLanceActivate");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SOAMapWideChrono", "Abil/SOAMapWideChrono");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SOAPurifierBeam", "Abil/SOAPurifierBeam");
    }
    else if (auto864A12EB_val == "Raynor") {
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/VoidCoopSummonHyperion");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/BansheeAirstrike");
    }
    else if (auto864A12EB_val == "Swann") {
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/DrakkenLaserDrillBFG");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/DrakkenLaserDrillNuke");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/SpecialDelivery");
    }
    else if (auto864A12EB_val == "Nova") {
        libNtve_gf_PlayerRemoveChargeUsed(EventPlayer(), "Abil/NovaDefensiveMatrixDrone");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "NovaGriffinBombingRunActivate", "Abil/NovaGriffinBombingRunActivate");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "NovaGriffinTransportLoadUnits", "Abil/NovaGriffinTransportLoadUnits");
    }
    else if (auto864A12EB_val == "Abathur") {
        libNtve_gf_PlayerRemoveChargeUsed(EventPlayer(), "Abil/ToxicNestBuild");
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "AbathurMend", "Abil/AbathurMend");
        libNtve_gf_UnitAbilityRemoveChargeUsed(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "AbathurMend", "Abil/AbathurMend");
    }
    else if (auto864A12EB_val == "Stukov") {
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SIStukovInfestStructure", "Abil/SIStukovInfestStructure");
        libNtve_gf_UnitAbilityRemoveChargeUsed(libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()], "SIStukovInfestStructureUpgraded", "Abil/SIStukovInfestStructureUpgraded");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/StukovSummonApocalisk");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/StukovSummonAleksander");
    }
    else if (auto864A12EB_val == "Dehaka") {
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/DehakaGlevigTopBar");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/DehakaMurvarTopBar");
        libNtve_gf_PlayerRemoveCooldown(EventPlayer(), "Abil/DehakaDakrunTopBar");
    }
    else {
    }
    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_COMI_86CE1B79") + IntToText(EventPlayer())), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DebugCommanderCooldowns_Init () {
    libCOMI_gt_CM_DebugCommanderCooldowns = TriggerCreate("libCOMI_gt_CM_DebugCommanderCooldowns_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_DebugCommanderCooldowns, c_playerAny, "-coopcd", false);
    TriggerAddEventChatMessage(libCOMI_gt_CM_DebugCommanderCooldowns, c_playerAny, "cdr", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugApplySkin
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DebugApplySkin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringLength(StringWord(EventChatMessage(false), 3)) >= 1)) {
        PlayerApplySkin(StringToInt(StringWord(EventChatMessage(false), 3)), (StringWord(EventChatMessage(false), 2)), true);
    }
    else {
        PlayerApplySkin(EventPlayer(), (StringWord(EventChatMessage(false), 2)), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DebugApplySkin_Init () {
    libCOMI_gt_CM_DebugApplySkin = TriggerCreate("libCOMI_gt_CM_DebugApplySkin_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_DebugApplySkin, c_playerAny, "-skin", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugTargetSpawnersSet
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DebugTargetSpawnersSet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_parameter;

    // Automatic Variable Declarations
    string auto2C90CD67_val;
    playergroup autoE85E0ABA_g;
    int autoE85E0ABA_var;

    // Variable Initialization
    lv_parameter = "";

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_parameter = StringWord(EventChatMessage(false), 2);
    lv_parameter = StringCase(lv_parameter, false);
    auto2C90CD67_val = lv_parameter;
    if (auto2C90CD67_val == "on") {
        libCOMI_gv_cM_DebugAITargetSpawners = true;
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libCOMI_ge_CampaignMessageType_Hint, StringExternal("Param/Value/lib_COMI_EE76CFA8"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }
    else if (auto2C90CD67_val == "off") {
        libCOMI_gv_cM_DebugAITargetSpawners = false;
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libCOMI_ge_CampaignMessageType_Hint, StringExternal("Param/Value/lib_COMI_33955EE2"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }
    else if (auto2C90CD67_val == "random") {
        if ((RandomInt(0, 1) == 1)) {
            libCOMI_gv_cM_DebugAITargetSpawners = true;
        }
        else {
            libCOMI_gv_cM_DebugAITargetSpawners = false;
        }
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libCOMI_ge_CampaignMessageType_Hint, StringExternal("Param/Value/lib_COMI_BE409C6F"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }
    else {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libCOMI_ge_CampaignMessageType_Hint, StringExternal("Param/Value/lib_COMI_5A218560"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        return true;
    }
    autoE85E0ABA_g = PlayerGroupAll();
    autoE85E0ABA_var = -1;
    while (true) {
        autoE85E0ABA_var = PlayerGroupNextPlayer(autoE85E0ABA_g, autoE85E0ABA_var);
        if (autoE85E0ABA_var < 0) { break; }
        AISetDifficulty(autoE85E0ABA_var, c_diffTargetSpawners, libCOMI_gv_cM_DebugAITargetSpawners);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DebugTargetSpawnersSet_Init () {
    libCOMI_gt_CM_DebugTargetSpawnersSet = TriggerCreate("libCOMI_gt_CM_DebugTargetSpawnersSet_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_DebugTargetSpawnersSet, c_playerAny, "-TargetSpawners", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CinematicModeOn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CinematicModeOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CinematicModeOn_Init () {
    libCOMI_gt_CM_CinematicModeOn = TriggerCreate("libCOMI_gt_CM_CinematicModeOn_Func");
    TriggerAddEventGeneric(libCOMI_gt_CM_CinematicModeOn, "CinematicModeOn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CinematicModeOff
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CinematicModeOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CinematicModeOff_Init () {
    libCOMI_gt_CM_CinematicModeOff = TriggerCreate("libCOMI_gt_CM_CinematicModeOff_Func");
    TriggerAddEventGeneric(libCOMI_gt_CM_CinematicModeOff, "CinematicModeOff");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CoopAI_AIManager
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CoopAI_AIManager_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopIndex;
    int lv_playerArrayIndex;
    bool lv_firstWave;

    // Automatic Variable Declarations
    const int autoE4C113EF_ae = libCOMI_gv_cMC_CoopAI_HighestPlayerIndex;
    const int autoE4C113EF_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_loopIndex = 0;
    for ( ; ( (autoE4C113EF_ai >= 0 && lv_loopIndex <= autoE4C113EF_ae) || (autoE4C113EF_ai < 0 && lv_loopIndex >= autoE4C113EF_ae) ) ; lv_loopIndex += autoE4C113EF_ai ) {
        lv_playerArrayIndex = (lv_loopIndex + (libCOMI_gv_cM_CoopAI_LastAIThinker + 1));
        lv_playerArrayIndex = ModI(lv_playerArrayIndex, (libCOMI_gv_cMC_CoopAI_HighestPlayerIndex + 1));
        if ((libCOMI_gv_cM_CoopAIPlayer_Commander[lv_playerArrayIndex] != "None")) {
            libCOMI_gf_CM_AIThinkCoop(lv_playerArrayIndex);
            libCOMI_gv_cM_CoopAI_LastAIThinker = lv_playerArrayIndex;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CoopAI_AIManager_Init () {
    libCOMI_gt_CM_CoopAI_AIManager = TriggerCreate("libCOMI_gt_CM_CoopAI_AIManager_Func");
    TriggerEnable(libCOMI_gt_CM_CoopAI_AIManager, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_CM_CoopAI_AIManager, 0.4375, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CoopAI_AttackWaveSetup
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CoopAI_AttackWaveSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_setupNextAttackWave;
    int lv_count;
    string lv_unitType;
    int lv_emptyWaveIndex;
    int lv_attackWaveIndex;
    wave lv_wave;
    int lv_startingTechStockIter;
    string lv_startingTechStockUnit;
    fixed lv_resourcesInWave;
    unit lv_resourceUnit;
    int lv_player;
    unitgroup lv_unitGroup;

    // Automatic Variable Declarations
    const int auto5BD83473_ae = libCOMI_gv_cMC_CoopAI_MaxWaveCount;
    const int auto5BD83473_ai = 1;

    // Variable Initialization
    lv_count = 1;
    lv_unitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_wave = EventPlayerWave();
    if ((lv_wave == null)) {
        return true;
    }

    lv_unitGroup = AIWaveGetUnits(EventPlayerWave());
    if ((UnitGroupCount(lv_unitGroup, c_unitCountAlive) == 0)) {
        return true;
    }

    lv_player = UnitGetOwner(UnitGroupUnit(lv_unitGroup, 1));
    if ((PlayerGroupHasPlayer(libCOMI_gv_cM_CoopAI_Players, lv_player) == false)) {
        return true;
    }

    lv_emptyWaveIndex = 0;
    for ( ; ( (auto5BD83473_ai >= 0 && lv_emptyWaveIndex <= auto5BD83473_ae) || (auto5BD83473_ai < 0 && lv_emptyWaveIndex >= auto5BD83473_ae) ) ; lv_emptyWaveIndex += auto5BD83473_ai ) {
        if ((libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_player][lv_emptyWaveIndex] == null)) {
            if ((lv_emptyWaveIndex > libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark)) {
                libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark = lv_emptyWaveIndex;
            }

            libCOMI_gv_cM_CoopAI_WaveShowPing[lv_player][lv_emptyWaveIndex] = true;
            libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_player][lv_emptyWaveIndex] = EventPlayerWave();
            if ((libCOMI_gv_cM_CoopAIPlayer_WaveProps_Count[lv_player] == 1)) {
                libCOMI_gv_cM_CoopAIPlayer_WaveProps_Retreat[lv_player][lv_emptyWaveIndex] = 0;
            }
            else {
                libCOMI_gv_cM_CoopAIPlayer_WaveProps_Retreat[lv_player][lv_emptyWaveIndex] = UserDataGetInt("CoopAICommanders", libCOMI_gv_cM_CoopAIPlayer_Commander[lv_player], "baseRetreatThreshold", 1);
            }
            break;
        }

    }
    libCOMI_gv_cM_CoopAIPlayer_WaveProps_Count[lv_player] += 1;
    TriggerEnable(libCOMI_gt_CM_CoopAI_AttackWavePingManager, true);
    if ((libCOMI_gv_cM_CoopAI_AIDetection_AttackWaveAddDetection == false)) {
        UnitGroupAddUnitGroup(libCOMI_gv_cM_CoopAI_AIDetection_AttackWave, lv_unitGroup);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CoopAI_AttackWaveSetup_Init () {
    libCOMI_gt_CM_CoopAI_AttackWaveSetup = TriggerCreate("libCOMI_gt_CM_CoopAI_AttackWaveSetup_Func");
    TriggerAddEventPlayerAIWave(libCOMI_gt_CM_CoopAI_AttackWaveSetup, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CoopAI_AIDetectionManager
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CoopAI_AIDetectionManager_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point[7] lv_cloakedAttackerLocation;
    point lv_cloakedAttacker_Current;
    int lv_cloakedAttackerIter;
    bool lv_aIHasSeenCloakedUnit;
    bool lv_newCloakedAttacker;
    unit lv_bestDetector;
    unit lv_nearbyDetector;
    unitgroup lv_nearbyDetectors;
    string[6] lv_detectors;
    int lv_detectorsIter;
    unit lv_lastAttacker;
    int lv_playerWavesIter;
    int lv_playerIter;
    unit lv_attackWaveUnitIter;

    // Automatic Variable Declarations
    playergroup auto3F461774_g;
    int auto3F461774_var;
    int auto5B454CEB_ae;
    int auto5B454CEB_var;
    int auto62A946DE_ae;
    int auto62A946DE_var;
    playergroup autoE0B4BAF2_g;
    int autoE0B4BAF2_var;
    const int auto6C9E8A6C_ae = 5;
    const int auto6C9E8A6C_ai = 1;
    playergroup autoD7B3C3D7_g;
    int autoD7B3C3D7_var;
    const int auto7524CC91_ae = libCOMI_gv_cMC_CoopAI_HighestPlayerIndex;
    const int auto7524CC91_ai = 1;
    int auto7A411C1C_ae;
    const int auto7A411C1C_ai = 1;
    unitgroup autoADEF27AE_g;
    int autoADEF27AE_u;

    // Variable Initialization
    lv_nearbyDetectors = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_detectors[1] = "Raven";
    lv_detectors[2] = "ScienceVessel";
    lv_detectors[3] = "Observer";
    lv_detectors[4] = "Oracle";
    lv_detectors[5] = "Overseer";
    auto3F461774_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
    auto3F461774_var = -1;
    while (true) {
        auto3F461774_var = PlayerGroupNextPlayer(auto3F461774_g, auto3F461774_var);
        if (auto3F461774_var < 0) { break; }
        lv_aIHasSeenCloakedUnit = AISawCloakedUnit(auto3F461774_var);
        lv_cloakedAttacker_Current = AIGetCloakedAttacker(auto3F461774_var);
        if (((lv_aIHasSeenCloakedUnit == true) || (lv_cloakedAttacker_Current != null) || (libCOMI_gf_AISuspectDetectionDanger(auto3F461774_var) == true))) {
            libCOMI_gv_cM_CoopAI_AIDetection_Build = true;
            libCOMI_gv_cM_CoopAI_AIDetection_AttackWaveAddDetection = true;
        }

        if ((lv_cloakedAttacker_Current != null)) {
            lv_newCloakedAttacker = true;
            auto5B454CEB_ae = lv_cloakedAttackerIter;
            auto5B454CEB_var = 1;
            for ( ; auto5B454CEB_var <= auto5B454CEB_ae; auto5B454CEB_var += 1 ) {
                if ((DistanceBetweenPoints(lv_cloakedAttacker_Current, lv_cloakedAttackerLocation[auto5B454CEB_var]) < 5.0)) {
                    lv_newCloakedAttacker = false;
                    break;
                }

            }
            if ((lv_newCloakedAttacker == true)) {
                lv_cloakedAttackerIter += 1;
                lv_cloakedAttackerLocation[lv_cloakedAttackerIter] = lv_cloakedAttacker_Current;
            }

            lv_cloakedAttacker_Current = null;
        }

    }
    auto62A946DE_ae = lv_cloakedAttackerIter;
    auto62A946DE_var = 1;
    for ( ; auto62A946DE_var <= auto62A946DE_ae; auto62A946DE_var += 1 ) {
        autoE0B4BAF2_g = libCOMI_gv_cM_CoopAI_Players;
        autoE0B4BAF2_var = -1;
        while (true) {
            autoE0B4BAF2_var = PlayerGroupNextPlayer(autoE0B4BAF2_g, autoE0B4BAF2_var);
            if (autoE0B4BAF2_var < 0) { break; }
            lv_detectorsIter = 1;
            for ( ; ( (auto6C9E8A6C_ai >= 0 && lv_detectorsIter <= auto6C9E8A6C_ae) || (auto6C9E8A6C_ai < 0 && lv_detectorsIter >= auto6C9E8A6C_ae) ) ; lv_detectorsIter += auto6C9E8A6C_ai ) {
                lv_nearbyDetector = AIGrabUnit(autoE0B4BAF2_var, (lv_detectors[lv_detectorsIter]), c_prioStaticBully, lv_cloakedAttackerLocation[auto62A946DE_var]);
                UnitGroupAdd(lv_nearbyDetectors, lv_nearbyDetector);
            }
        }
        lv_bestDetector = UnitGroupClosestToPoint(lv_nearbyDetectors, lv_cloakedAttackerLocation[auto62A946DE_var]);
        if ((lv_bestDetector != null)) {
            libNtve_gf_AICast(lv_bestDetector, OrderTargetingPoint(AbilityCommand("attack", 0), lv_cloakedAttackerLocation[auto62A946DE_var]));
            autoD7B3C3D7_g = PlayerGroupAlliance(c_playerGroupEnemy, 1);
            autoD7B3C3D7_var = -1;
            while (true) {
                autoD7B3C3D7_var = PlayerGroupNextPlayer(autoD7B3C3D7_g, autoD7B3C3D7_var);
                if (autoD7B3C3D7_var < 0) { break; }
                AIClearCloakedAttacker(autoD7B3C3D7_var, lv_cloakedAttackerLocation[auto62A946DE_var]);
            }
        }

        lv_nearbyDetectors = UnitGroupEmpty();
    }
    if ((libCOMI_gv_cM_CoopAI_AIDetection_AttackWaveAddDetection == false)) {
        lv_playerIter = 3;
        for ( ; ( (auto7524CC91_ai >= 0 && lv_playerIter <= auto7524CC91_ae) || (auto7524CC91_ai < 0 && lv_playerIter >= auto7524CC91_ae) ) ; lv_playerIter += auto7524CC91_ai ) {
            auto7A411C1C_ae = libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark;
            lv_playerWavesIter = 0;
            for ( ; ( (auto7A411C1C_ai >= 0 && lv_playerWavesIter <= auto7A411C1C_ae) || (auto7A411C1C_ai < 0 && lv_playerWavesIter >= auto7A411C1C_ae) ) ; lv_playerWavesIter += auto7A411C1C_ai ) {
                if ((AIWaveUnitCount(libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_playerIter][lv_playerWavesIter]) > 0)) {
                    autoADEF27AE_g = AIWaveGetUnits(libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_playerIter][lv_playerWavesIter]);
                    autoADEF27AE_u = UnitGroupCount(autoADEF27AE_g, c_unitCountAll);
                    for (;; autoADEF27AE_u -= 1) {
                        lv_attackWaveUnitIter = UnitGroupUnitFromEnd(autoADEF27AE_g, autoADEF27AE_u);
                        if (lv_attackWaveUnitIter == null) { break; }
                        lv_lastAttacker = AILastAttacker(lv_attackWaveUnitIter);
                        if ((lv_lastAttacker != null) && (UnitFilterMatch(lv_lastAttacker, UnitGetOwner(lv_attackWaveUnitIter), UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                            libCOMI_gv_cM_CoopAI_AIDetection_AttackWaveAddDetection = true;
                            break;
                        }

                    }
                }

            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CoopAI_AIDetectionManager_Init () {
    libCOMI_gt_CM_CoopAI_AIDetectionManager = TriggerCreate("libCOMI_gt_CM_CoopAI_AIDetectionManager_Func");
    TriggerEnable(libCOMI_gt_CM_CoopAI_AIDetectionManager, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_CM_CoopAI_AIDetectionManager, 2.8, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CoopAI_AttackWavePingManager
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CoopAI_AttackWavePingManager_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pingGroupIter;
    int lv_attackWavePlayerIterPrimary;
    int lv_attackWavePingIterPrimary;
    unit lv_pingableUnitIter;
    bool lv_addedUnitToGroup;
    bool lv_foundWorthyUnit;

    // Automatic Variable Declarations
    const int autoFAE2A104_ae = libCOMI_gv_cMC_CoopAI_MaxPingCount;
    const int autoFAE2A104_ai = 1;
    playergroup autoB34DF2A3_g;
    int autoDC457FFC_ae;
    const int autoDC457FFC_ai = 1;
    unitgroup auto8125420D_g;
    int auto8125420D_u;
    const int autoC3A72AF9_ae = libCOMI_gv_cMC_CoopAI_MaxPingCount;
    const int autoC3A72AF9_ai = 1;
    const int auto57362279_ae = libCOMI_gv_cMC_CoopAI_MaxPingCount;
    const int auto57362279_ai = 1;
    unitgroup auto04F62776_g;
    int auto04F62776_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pingGroupIter = 0;
    for ( ; ( (autoFAE2A104_ai >= 0 && lv_pingGroupIter <= autoFAE2A104_ae) || (autoFAE2A104_ai < 0 && lv_pingGroupIter >= autoFAE2A104_ae) ) ; lv_pingGroupIter += autoFAE2A104_ai ) {
        UnitGroupClear(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter]);
    }
    autoB34DF2A3_g = libCOMI_gv_cM_CoopAI_Players;
    lv_attackWavePlayerIterPrimary = -1;
    while (true) {
        lv_attackWavePlayerIterPrimary = PlayerGroupNextPlayer(autoB34DF2A3_g, lv_attackWavePlayerIterPrimary);
        if (lv_attackWavePlayerIterPrimary < 0) { break; }
        if ((PlayerGroupHasPlayer(libCOMI_gv_cM_CoopAI_DontPingPlayers, lv_attackWavePlayerIterPrimary) == true)) {
            continue;
        }

        autoDC457FFC_ae = libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark;
        lv_attackWavePingIterPrimary = 0;
        for ( ; ( (autoDC457FFC_ai >= 0 && lv_attackWavePingIterPrimary <= autoDC457FFC_ae) || (autoDC457FFC_ai < 0 && lv_attackWavePingIterPrimary >= autoDC457FFC_ae) ) ; lv_attackWavePingIterPrimary += autoDC457FFC_ai ) {
            if ((libCOMI_gv_cM_CoopAI_DontPingWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary] == false) && (libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary] != null) && (AIWaveGetUnits(libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary]) != null)) {
                auto8125420D_g = AIWaveGetUnits(libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary]);
                auto8125420D_u = UnitGroupCount(auto8125420D_g, c_unitCountAll);
                for (;; auto8125420D_u -= 1) {
                    lv_pingableUnitIter = UnitGroupUnitFromEnd(auto8125420D_g, auto8125420D_u);
                    if (lv_pingableUnitIter == null) { break; }
                    lv_addedUnitToGroup = false;
                    lv_pingGroupIter = 0;
                    for ( ; ( (autoC3A72AF9_ai >= 0 && lv_pingGroupIter <= autoC3A72AF9_ae) || (autoC3A72AF9_ai < 0 && lv_pingGroupIter >= autoC3A72AF9_ae) ) ; lv_pingGroupIter += autoC3A72AF9_ai ) {
                        if (((UnitGroupCount(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter], c_unitCountAlive) == 0) || ((UnitGroupCount(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter], c_unitCountAlive) > 0) && (DistanceBetweenPoints(UnitGroupCenterOfGroup(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter]), UnitGetPosition(lv_pingableUnitIter)) <= libCOMI_gv_cM_CoopAI_PingCombineDist)))) {
                            UnitGroupAdd(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter], lv_pingableUnitIter);
                            lv_addedUnitToGroup = true;
                            break;
                        }

                    }
                    if ((lv_addedUnitToGroup == false)) {
                        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_B90F2179"), true);
                    }

                }
            }

        }
    }
    lv_pingGroupIter = 0;
    for ( ; ( (auto57362279_ai >= 0 && lv_pingGroupIter <= auto57362279_ae) || (auto57362279_ai < 0 && lv_pingGroupIter >= auto57362279_ae) ) ; lv_pingGroupIter += auto57362279_ai ) {
        lv_foundWorthyUnit = false;
        auto04F62776_g = libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter];
        auto04F62776_u = UnitGroupCount(auto04F62776_g, c_unitCountAll);
        for (;; auto04F62776_u -= 1) {
            lv_pingableUnitIter = UnitGroupUnitFromEnd(auto04F62776_g, auto04F62776_u);
            if (lv_pingableUnitIter == null) { break; }
            if ((libCOMI_gf_CM_CoopAI_PingWorthyUnit(lv_pingableUnitIter) == true)) {
                lv_foundWorthyUnit = true;
                break;
            }

        }
        if ((lv_foundWorthyUnit == true)) {
            if ((libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter] == c_invalidPingId)) {
                libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), PlayerStartLocation(UnitGetOwner(UnitGroupUnit(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter], 1))), 270.0, "PingDiamond", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
                libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter] = PingLastCreated();
                PingSetTooltip(libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter], StringExternal("Param/Value/lib_COMI_488AE332"));
                PingSetScale(libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter], 0.3);
            }

            PingSetPosition(libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter], UnitGroupCenterOfGroup(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter]));
        }
        else {
            PingDestroy(libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter]);
            libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter] = c_invalidPingId;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CoopAI_AttackWavePingManager_Init () {
    libCOMI_gt_CM_CoopAI_AttackWavePingManager = TriggerCreate("libCOMI_gt_CM_CoopAI_AttackWavePingManager_Func");
    TriggerEnable(libCOMI_gt_CM_CoopAI_AttackWavePingManager, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_CM_CoopAI_AttackWavePingManager, 0.5625, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CoopAI_InitAIDebugging
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CoopAI_InitAIDebugging_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugSetTypeFile(3, "CoopAIDebug.txt");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CoopAI_InitAIDebugging_Init () {
    libCOMI_gt_CM_CoopAI_InitAIDebugging = TriggerCreate("libCOMI_gt_CM_CoopAI_InitAIDebugging_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle AI Debug Messages
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ToggleAIDebugMessages_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_showAIDebugging == true)) {
        libCOMI_gv_showAIDebugging = false;
    }
    else {
        libCOMI_gv_showAIDebugging = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ToggleAIDebugMessages_Init () {
    libCOMI_gt_ToggleAIDebugMessages = TriggerCreate("libCOMI_gt_ToggleAIDebugMessages_Func");
    TriggerAddEventChatMessage(libCOMI_gt_ToggleAIDebugMessages, c_playerAny, "togaidebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Scourge Deathrattle Scrap Deaths
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_BanelingScourgeDeathrattleScrapDeaths_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dyingUnitMineralCost;
    int lv_dyingUnitVespeneCost;
    int lv_dyingUnitPlayer;
    int lv_scrapPlayerDivisor;
    int lv_hornerCommander;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scrapPlayerDivisor = 10;
    lv_hornerCommander = libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CommanderPlayers());

    // Conditions
    if (testConds) {
        if (!((lv_hornerCommander != c_playerAny))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "HHScrapPickup", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Baneling") || (UnitGetType(EventUnit()) == "BanelingBurrowed") || (UnitGetType(EventUnit()) == "HotSSplitterlingBig") || (UnitGetType(EventUnit()) == "HotSSplitterlingBigBurrowed") || (UnitGetType(EventUnit()) == "Scourge") || (UnitGetType(EventUnit()) == "HHReaper") || (UnitGetType(EventUnit()) == "HHReaperFlying") || (UnitGetType(EventUnit()) == "HHHellion") || (UnitGetType(EventUnit()) == "HHHellionTank") || (UnitGetType(EventUnit()) == "HHWidowMine") || (UnitGetType(EventUnit()) == "HHWidowMineBurrowed") || (UnitGetType(EventUnit()) == "Supplicant")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dyingUnitPlayer = UnitGetOwner(EventUnit());
    if ((lv_dyingUnitPlayer == c_playerAny)) {
        return true;
    }

    if ((PlayerCommander(lv_dyingUnitPlayer) == "Horner")) {
        lv_scrapPlayerDivisor = 5;
    }

    lv_dyingUnitMineralCost = (FixedToInt(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "CostResource[" + IntToString(0) + "]", EventPlayer()))) / lv_scrapPlayerDivisor);
    lv_dyingUnitVespeneCost = (FixedToInt(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "CostResource[" + IntToString(1) + "]", EventPlayer()))) / lv_scrapPlayerDivisor);
    if ((lv_dyingUnitMineralCost > 0)) {
        if ((RandomInt(1, 100) <= FixedToInt(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryHornerDoubleSalvageChanceDisplayDummy", "Amount", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")))))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHScrapPickup", 0, lv_dyingUnitPlayer, PointWithOffset(UnitGetPosition(EventUnit()), -0.25, 0.0));
            libCOMI_gf_CM_Horner_ScrapResourceSetStack(UnitLastCreated(), lv_dyingUnitMineralCost, lv_dyingUnitVespeneCost);
            if ((lv_dyingUnitVespeneCost == 0)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap HHScrapMineral");
            }

            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHScrapPickup", 0, lv_dyingUnitPlayer, PointWithOffset(UnitGetPosition(EventUnit()), 0.25, 0.0));
            libCOMI_gf_CM_Horner_ScrapResourceSetStack(UnitLastCreated(), lv_dyingUnitMineralCost, lv_dyingUnitVespeneCost);
            if ((lv_dyingUnitVespeneCost == 0)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap HHScrapMineral");
            }

        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHScrapPickup", 0, lv_dyingUnitPlayer, UnitGetPosition(EventUnit()));
            libCOMI_gf_CM_Horner_ScrapResourceSetStack(UnitLastCreated(), lv_dyingUnitMineralCost, lv_dyingUnitVespeneCost);
            if ((lv_dyingUnitVespeneCost == 0)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap HHScrapMineral");
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_BanelingScourgeDeathrattleScrapDeaths_Init () {
    libCOMI_gt_BanelingScourgeDeathrattleScrapDeaths = TriggerCreate("libCOMI_gt_BanelingScourgeDeathrattleScrapDeaths_Func");
    TriggerEnable(libCOMI_gt_BanelingScourgeDeathrattleScrapDeaths, false);
    TriggerAddEventUnitDied(libCOMI_gt_BanelingScourgeDeathrattleScrapDeaths, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Scourge Econ Drop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_BanelingScourgeEconDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_position;
    string lv_resource;
    int lv_itPlayer;
    int lv_kerriganCommander;

    // Automatic Variable Declarations
    playergroup autoC5AE4C2E_g;

    // Variable Initialization
    lv_kerriganCommander = libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ZergKerrigan", libCOOC_gf_CommanderPlayers());

    // Conditions
    if (testConds) {
        if (!((lv_kerriganCommander != c_playerAny))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "KerriganVoidCoopEconDrop") == true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Baneling") || (UnitGetType(EventUnit()) == "BanelingBurrowed") || (UnitGetType(EventUnit()) == "Scourge")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_position = UnitGetPosition(EventUnit());
    lv_resource = "KerriganVoidCoopEconDropLT1";
    autoC5AE4C2E_g = libCOOC_gf_CommanderPlayers();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoC5AE4C2E_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_resource, 0, lv_itPlayer, lv_position);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_BanelingScourgeEconDrop_Init () {
    libCOMI_gt_BanelingScourgeEconDrop = TriggerCreate("libCOMI_gt_BanelingScourgeEconDrop_Func");
    TriggerEnable(libCOMI_gt_BanelingScourgeEconDrop, false);
    TriggerAddEventUnitDied(libCOMI_gt_BanelingScourgeEconDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Scourge Locusts
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_BanelingScourgeLocusts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_locustUnitType;
    int lv_rand;
    fixed lv_foodCompare;
    int lv_abathurCommander;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_locustUnitType = "Locust";
    lv_rand = RandomInt(1, 100);
    lv_foodCompare = (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0)) * -16.0);
    lv_abathurCommander = libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ZergAbathur", libCOOC_gf_CommanderPlayers());

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0)) == false))) {
            return false;
        }

        if (!((lv_abathurCommander != c_playerAny))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(lv_abathurCommander, UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(lv_abathurCommander, "AbathurEnemyDeathCreateLocusts", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Baneling") || (UnitGetType(EventUnit()) == "BanelingBurrowed") || (UnitGetType(EventUnit()) == "Scourge")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetHeight(EventUnit()) >= 1)) {
        lv_locustUnitType = "LocustFlying";
    }

    if ((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true)) {
        lv_foodCompare = 8;
    }

    if (((FixedToInt(lv_foodCompare) + libCOMI_gv_cM_Abathur_Enemy_Death_Create_Locusts_Random_Modifier) >= lv_rand)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_locustUnitType, c_unitCreateIgnorePlacement, lv_abathurCommander, UnitGetPosition(EventUnit()));
        PlayerCreateEffectUnit(lv_abathurCommander, "AbathurLocustTimedLife", UnitLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_BanelingScourgeLocusts_Init () {
    libCOMI_gt_BanelingScourgeLocusts = TriggerCreate("libCOMI_gt_BanelingScourgeLocusts_Func");
    TriggerEnable(libCOMI_gt_BanelingScourgeLocusts, false);
    TriggerAddEventUnitDied(libCOMI_gt_BanelingScourgeLocusts, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Scourge Essence Drop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_BanelingScourgeEssenceDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_essenceUnitCount;
    int lv_essenceBaseAmount;
    int lv_essenceCasualMultiplier;
    int lv_essenceNormalMultiplier;
    fixed lv_essenceHardMultiplier;
    int lv_essenceBrutalMultiplier;
    int lv_dehakaPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_essenceCasualMultiplier = 2;
    lv_essenceNormalMultiplier = 2;
    lv_essenceHardMultiplier = 1.5;
    lv_essenceBrutalMultiplier = 1;
    lv_dehakaPlayer = libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ZergDehaka", libCOOC_gf_CommanderPlayers());

    // Conditions
    if (testConds) {
        if (!((lv_dehakaPlayer != c_playerAny))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(lv_dehakaPlayer, UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMU_gf_CT_UnitSpawnedByMutator(EventUnit()) == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Baneling") || (UnitGetType(EventUnit()) == "BanelingBurrowed") || (UnitGetType(EventUnit()) == "Scourge")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_dehakaPlayer == c_playerAny)) {
        return true;
    }

    lv_essenceBaseAmount = 1;
    lv_essenceUnitCount = libNtve_gf_DifficultyValueInt((lv_essenceBaseAmount * lv_essenceCasualMultiplier), (lv_essenceBaseAmount * lv_essenceNormalMultiplier), FixedToInt(Ceiling((lv_essenceBaseAmount * lv_essenceHardMultiplier))), (lv_essenceBaseAmount * lv_essenceBrutalMultiplier));
    if ((lv_essenceUnitCount > 0)) {
        libCOMI_gv_cM_DebugDehakaEssenceDroppedNormal += lv_essenceUnitCount;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "EssencePickup", c_unitCreateIgnorePlacement, lv_dehakaPlayer, UnitGetPosition(EventUnit()));
        libCOMI_gf_CM_Dehaka_EssenceSetStack(UnitLastCreated(), lv_essenceUnitCount);
        UnitBehaviorRemove(UnitLastCreated(), "EssenceCreated", 1);
        libCOMI_gf_CM_Dehaka_EssenceScale(UnitLastCreated(), true);
        libCOMI_gf_CM_Dehaka_EssenceMerge(UnitLastCreated(), lv_essenceUnitCount);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_BanelingScourgeEssenceDrop_Init () {
    libCOMI_gt_BanelingScourgeEssenceDrop = TriggerCreate("libCOMI_gt_BanelingScourgeEssenceDrop_Func");
    TriggerEnable(libCOMI_gt_BanelingScourgeEssenceDrop, false);
    TriggerAddEventUnitDied(libCOMI_gt_BanelingScourgeEssenceDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling Scourge Biomass Drop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_BanelingScourgeBiomassDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_biomassUnitCount;
    int lv_indexPlayer;
    int lv_biomassBaseAmount;
    int lv_biomassCasualMultiplier;
    int lv_biomassNormalMultiplier;
    fixed lv_biomassHardMultiplier;
    int lv_biomassBrutalMultiplier;
    int lv_biomassToxicNestMultiplier;
    int lv_dyingUnitSupply;
    int lv_abathurPlayer;
    fixed lv_doubleBiomassChance;

    // Automatic Variable Declarations
    playergroup auto847A2454_g;

    // Variable Initialization
    lv_biomassCasualMultiplier = 2;
    lv_biomassNormalMultiplier = 2;
    lv_biomassHardMultiplier = 1.5;
    lv_biomassBrutalMultiplier = 1;
    lv_biomassToxicNestMultiplier = 2;
    lv_abathurPlayer = libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ZergAbathur", libCOOC_gf_CommanderPlayers());

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != c_playerAny))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(lv_abathurPlayer, UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((lv_abathurPlayer != c_playerAny))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMU_gf_CT_UnitSpawnedByMutator(EventUnit()) == false))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Baneling") || (UnitGetType(EventUnit()) == "BanelingBurrowed") || (UnitGetType(EventUnit()) == "Scourge")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto847A2454_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto847A2454_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer) == "ZergAbathur") && (libNtve_gf_PlayerIsEnemy(lv_indexPlayer, UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_AllyMutual) == false)) {
            lv_dyingUnitSupply = FixedToInt(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0)));
            lv_doubleBiomassChance = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MasteryAbathurDoubleBiomassDisplayDummy", "Amount", lv_indexPlayer);
            if (((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true) || (UnitHasBehavior2(EventUnit(), "CritterExplode") == true))) {
                lv_biomassBaseAmount = 1;
            }
            if ((((TechTreeUpgradeCount(lv_indexPlayer, "AbathurToxicNestIcreasedBiomass", c_techCountCompleteOnly) == 1) && (UnitHasBehavior2(EventUnit(), "ToxicNestVirulentNest") == true)) || ((TechTreeUpgradeCount(lv_indexPlayer, "MasteryAbathurDoubleBiomass", c_techCountCompleteOnly) > 0) && (RandomFixed(0.0, 100.0) <= lv_doubleBiomassChance)))) {
                lv_biomassUnitCount = (libNtve_gf_DifficultyValueInt((lv_biomassBaseAmount * lv_biomassCasualMultiplier), (lv_biomassBaseAmount * lv_biomassNormalMultiplier), FixedToInt(Ceiling((lv_biomassBaseAmount * lv_biomassHardMultiplier))), (lv_biomassBaseAmount * lv_biomassBrutalMultiplier)) * lv_biomassToxicNestMultiplier);
            }
            else {
                lv_biomassUnitCount = libNtve_gf_DifficultyValueInt((lv_biomassBaseAmount * lv_biomassCasualMultiplier), (lv_biomassBaseAmount * lv_biomassNormalMultiplier), FixedToInt(Ceiling((lv_biomassBaseAmount * lv_biomassHardMultiplier))), (lv_biomassBaseAmount * lv_biomassBrutalMultiplier));
            }
            if ((lv_biomassUnitCount > 0)) {
                libCOMI_gv_cM_DebugAbathurBiomassDroppedNormal += lv_biomassUnitCount;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "BiomassPickup", c_unitCreateIgnorePlacement, lv_abathurPlayer, UnitGetPosition(EventUnit()));
                libCOMI_gf_CM_Abathur_BiomassSetStack(UnitLastCreated(), lv_biomassUnitCount);
                UnitBehaviorRemove(UnitLastCreated(), "BiomassCreated", 1);
                libCOMI_gf_CM_Abathur_BiomassScale(UnitLastCreated(), true);
                libCOMI_gf_CM_Abathur_BiomassMerge(UnitLastCreated(), lv_biomassUnitCount);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_BanelingScourgeBiomassDrop_Init () {
    libCOMI_gt_BanelingScourgeBiomassDrop = TriggerCreate("libCOMI_gt_BanelingScourgeBiomassDrop_Func");
    TriggerEnable(libCOMI_gt_BanelingScourgeBiomassDrop, false);
    TriggerAddEventUnitDied(libCOMI_gt_BanelingScourgeBiomassDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShieldColorUnitCreate
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ShieldColorUnitCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnitCreatedUnit()) == libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ProtossAlarak", libCOOC_gf_CC_PlayersOfCommander("ProtossAlarak")))) {
        libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "AliasAdd _ShieldRed");
    }

    if ((UnitGetOwner(EventUnitCreatedUnit()) == libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ProtossFenix", libCOOC_gf_CC_PlayersOfCommander("ProtossFenix")))) {
        libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "AliasAdd _ShieldYellow");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ShieldColorUnitCreate_Init () {
    libCOMI_gt_ShieldColorUnitCreate = TriggerCreate("libCOMI_gt_ShieldColorUnitCreate_Func");
    TriggerAddEventUnitCreated(libCOMI_gt_ShieldColorUnitCreate, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShieldColorUnitMorph
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ShieldColorUnitMorph_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayer() == libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ProtossAlarak", libCOOC_gf_CC_PlayersOfCommander("ProtossAlarak")))) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "AliasAdd _ShieldRed");
    }

    if ((EventPlayer() == libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ProtossFenix", libCOOC_gf_CC_PlayersOfCommander("ProtossFenix")))) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "AliasAdd _ShieldYellow");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ShieldColorUnitMorph_Init () {
    libCOMI_gt_ShieldColorUnitMorph = TriggerCreate("libCOMI_gt_ShieldColorUnitMorph_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_ShieldColorUnitMorph, null, null, c_abilMorphStageActorEnd, false);
    TriggerAddEventUnitAbility(libCOMI_gt_ShieldColorUnitMorph, null, null, c_abilBuildStageFinish, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_ShieldColorUnitMorph, null, "PowerUserWarpable", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Prevent Grant Kill Credit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DeathPreventGrantKillCredit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_creditedunit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_creditedunit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_creditedunit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(lv_creditedunit, c_unitPropKills, (UnitGetPropertyFixed(lv_creditedunit, c_unitPropKills, c_unitPropCurrent) + 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DeathPreventGrantKillCredit_Init () {
    libCOMI_gt_DeathPreventGrantKillCredit = TriggerCreate("libCOMI_gt_DeathPreventGrantKillCredit_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_DeathPreventGrantKillCredit, c_playerAny, "GrantKillCreditDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Fast Buff Hack
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AttackFastBuffHack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_unit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityExists(lv_unit, "BroodLordHangar") == true)) {
        libCOMI_gf_SetUnitBuffMultiplier(lv_unit, (1.0 / UnitWeaponSpeedMultiplier(lv_unit, 1)), "TriggerQueueableRate", 1.01, libCOMI_ge_UnitBuffMultiplierMethod_Exponential);
    }

    UnitCreateEffectUnit(lv_unit, "TriggerInheritRateIterateMagazine", lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AttackFastBuffHack_Init () {
    libCOMI_gt_AttackFastBuffHack = TriggerCreate("libCOMI_gt_AttackFastBuffHack_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libCOMI_gt_AttackFastBuffHack, null, c_unitBehaviorFlagFast, c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChangeFromCategory(libCOMI_gt_AttackFastBuffHack, null, c_unitBehaviorFlagFast, c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dmg and Attack Speed Inherit New
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DmgandAttackSpeedInheritNew_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_child;
    unit lv_parent;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_child = EventUnitCreatedUnit();
    lv_parent = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_child, "TriggerInheritsParentBuffs") == true))) {
            return false;
        }

        if (!((UnitIsValid(lv_parent) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_InheritDmgandAttackSpeedFromParenttoChild(lv_parent, lv_child);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DmgandAttackSpeedInheritNew_Init () {
    libCOMI_gt_DmgandAttackSpeedInheritNew = TriggerCreate("libCOMI_gt_DmgandAttackSpeedInheritNew_Func");
    TriggerAddEventUnitCreated(libCOMI_gt_DmgandAttackSpeedInheritNew, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dmg and Attack Speed Inherit Existing
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DmgandAttackSpeedInheritExisting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_child;
    unit lv_parent;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_child = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_parent = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_child, "TriggerInheritsParentBuffs") == true))) {
            return false;
        }

        if (!((UnitIsValid(lv_parent) == true))) {
            return false;
        }

        if (!((lv_child != lv_parent))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_InheritDmgandAttackSpeedFromParenttoChild(lv_parent, lv_child);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DmgandAttackSpeedInheritExisting_Init () {
    libCOMI_gt_DmgandAttackSpeedInheritExisting = TriggerCreate("libCOMI_gt_DmgandAttackSpeedInheritExisting_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_DmgandAttackSpeedInheritExisting, c_playerAny, "TriggerInheritRateDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Conjoined Vital Regen On/Off
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ConjoinedVitalRegenOnOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_behavior;
    unit lv_itUnit;
    unitgroup lv_group;
    unitgroup lv_groupA;
    unitgroup lv_groupB;
    unitgroup lv_groupC;
    int lv_stack;
    unit lv_caster;

    // Automatic Variable Declarations
    unitgroup auto2A64ECBF_g;
    int auto2A64ECBF_u;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_behavior = EventUnitBehavior();
    lv_group = UnitGroupEmpty();
    lv_groupA = UnitConjoinedGroup(lv_unit, "GreaterNydusWormConjoined");
    lv_groupB = UnitConjoinedGroup(lv_unit, "NydusNetworkConjoined");
    lv_groupC = UnitConjoinedGroup(lv_unit, "NydusWormConjoined");
    lv_stack = UnitBehaviorCount(lv_unit, lv_behavior);
    lv_caster = UnitBehaviorEffectUnit(lv_unit, lv_behavior, c_effectUnitCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(lv_group, lv_groupA);
    UnitGroupAddUnitGroup(lv_group, lv_groupB);
    UnitGroupAddUnitGroup(lv_group, lv_groupC);
    UnitGroupRemove(lv_group, lv_unit);
    auto2A64ECBF_g = lv_group;
    auto2A64ECBF_u = UnitGroupCount(auto2A64ECBF_g, c_unitCountAll);
    for (;; auto2A64ECBF_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto2A64ECBF_g, auto2A64ECBF_u);
        if (lv_itUnit == null) { break; }
        libNtve_gf_SetBehaviorCount(lv_itUnit, lv_behavior, lv_caster, lv_stack);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ConjoinedVitalRegenOnOff_Init () {
    libCOMI_gt_ConjoinedVitalRegenOnOff = TriggerCreate("libCOMI_gt_ConjoinedVitalRegenOnOff_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libCOMI_gt_ConjoinedVitalRegenOnOff, null, c_unitBehaviorFlagUser13, c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChangeFromCategory(libCOMI_gt_ConjoinedVitalRegenOnOff, null, c_unitBehaviorFlagUser13, c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TargetLockOrder
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TargetLockOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((UnitGetCooldown(lv_caster, "Abil/ObserverTargetLock") == 0.0))) {
            return false;
        }

        if (!((libNtve_gf_UnitCanCreateEffectOnUnit(lv_caster, "ObserverTargetLockCPOrderValidate", lv_target) == true))) {
            return false;
        }

        if (!((UnitOrderIsValid(lv_caster, OrderSetAutoCast(AbilityCommand("ObserverTargetLock", 0), true)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitCanCreateEffectOnUnit(lv_caster, "ObserverTargetLockCP", lv_target) == false)) {
        UnitCreateEffectUnit(lv_caster, "ObserverTargetLockDP", lv_caster);
    }

    UnitIssueOrder(lv_caster, OrderTargetingUnit(AbilityCommand("ObserverTargetLock", 0), lv_target), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TargetLockOrder_Init () {
    libCOMI_gt_CM_TargetLockOrder = TriggerCreate("libCOMI_gt_CM_TargetLockOrder_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_TargetLockOrder, c_playerAny, "MonitorFakeWeapon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TargetLockOrderRaven
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TargetLockOrderRaven_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((UnitGetCooldown(lv_caster, "Abil/ObserverTargetLock") == 0.0))) {
            return false;
        }

        if (!((libNtve_gf_UnitCanCreateEffectOnUnit(lv_caster, "RavenTargetLockCPOrderValidate", lv_target) == true))) {
            return false;
        }

        if (!((UnitOrderIsValid(lv_caster, OrderSetAutoCast(AbilityCommand("RavenTargetLock", 0), true)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitCanCreateEffectOnUnit(lv_caster, "RavenAnalyzeCP", lv_target) == false)) {
        UnitCreateEffectUnit(lv_caster, "RavenAnalyzeDP", lv_caster);
    }

    UnitIssueOrder(lv_caster, OrderTargetingUnit(AbilityCommand("RavenTargetLock", 0), lv_target), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TargetLockOrderRaven_Init () {
    libCOMI_gt_CM_TargetLockOrderRaven = TriggerCreate("libCOMI_gt_CM_TargetLockOrderRaven_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_TargetLockOrderRaven, c_playerAny, "HHRavenFakeWeapon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chrono Anim Speed On
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ChronoAnimSpeedOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_buff;
    unit lv_unit;
    fixed lv_scale;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_buff = EventUnitBehavior();
    lv_unit = EventUnit();
    lv_scale = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, lv_buff, "Modification.RateMultiplierArray[" + IntToString(0) + "]", UnitBehaviorEffectPlayer(lv_unit, lv_buff, c_effectPlayerCaster, 0)));

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_unit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(lv_unit, (("AnimSetTimeScaleGlobal " + FixedToString(lv_scale, c_fixedPrecisionAny) + " " + (lv_buff))));
    libNtve_gf_SendActorMessageToUnit(lv_unit, (("AnimSetTimeScaleGlobal " + FixedToString(lv_scale, c_fixedPrecisionAny) + " " + (lv_buff))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ChronoAnimSpeedOn_Init () {
    libCOMI_gt_ChronoAnimSpeedOn = TriggerCreate("libCOMI_gt_ChronoAnimSpeedOn_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_ChronoAnimSpeedOn, null, "SOAMapWideChronoPassiveTarget", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_ChronoAnimSpeedOn, null, "SOAMapWideChrono", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_ChronoAnimSpeedOn, null, "TimeWarpProduction", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chrono Anim Speed Off
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ChronoAnimSpeedOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_buff;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_buff = EventUnitBehavior();
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_unit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(lv_unit, (("AnimClearTimeScaleGlobal " + (lv_buff))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ChronoAnimSpeedOff_Init () {
    libCOMI_gt_ChronoAnimSpeedOff = TriggerCreate("libCOMI_gt_ChronoAnimSpeedOff_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_ChronoAnimSpeedOff, null, "SOAMapWideChronoPassiveTarget", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_ChronoAnimSpeedOff, null, "SOAMapWideChrono", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_ChronoAnimSpeedOff, null, "TimeWarpProduction", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Same Place Revive
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SamePlaceRevive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_beacon;
    point lv_beaconPoint;
    unit lv_hero;
    fixed lv_facing;
    point lv_rally;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_beacon = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_beaconPoint = EventPlayerEffectUsedPoint(c_effectLocationCasterUnit);
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_facing = UnitGetFacing(lv_beacon);
    lv_rally = UnitRallyPointTargetPoint(lv_beacon, 1, 1);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(lv_hero, lv_beaconPoint, false);
    UnitSetFacing(lv_hero, lv_facing, 0.0);
    Wait(0.125, c_timeGame);
    UnitSetPosition(lv_hero, lv_beaconPoint, false);
    UnitSetFacing(lv_hero, lv_facing, 0.0);
    if ((lv_rally != null)) {
        UnitIssueOrder(lv_hero, OrderTargetingPoint(AbilityCommand("attack", 0), lv_rally), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SamePlaceRevive_Init () {
    libCOMI_gt_SamePlaceRevive = TriggerCreate("libCOMI_gt_SamePlaceRevive_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_SamePlaceRevive, c_playerAny, "PortToMyCenter");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MU_CandyBowlMassBuy
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_MU_CandyBowlMassBuy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_order;
    int lv_p;
    unit lv_u;
    int lv_i;
    fixed lv_charge;

    // Automatic Variable Declarations
    const int autoD4B71CE1_ae = 9;
    const int autoD4B71CE1_ai = 1;

    // Variable Initialization
    lv_order = EventUnitOrder();
    lv_p = OrderGetPlayer(lv_order);
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((OrderGetFlag(lv_order, c_cmdQueued) == true)) {
        lv_order = Order(OrderGetAbilityCommand(lv_order));
        OrderSetPlayer(lv_order,lv_p);
        TriggerEnable(TriggerGetCurrent(), false);
        lv_i = 1;
        for ( ; ( (autoD4B71CE1_ai >= 0 && lv_i <= autoD4B71CE1_ae) || (autoD4B71CE1_ai < 0 && lv_i >= autoD4B71CE1_ae) ) ; lv_i += autoD4B71CE1_ai ) {
            if ((UnitOrderIsValid(lv_u, lv_order) == true)) {
                UnitIssueOrder(lv_u, lv_order, c_orderQueueAddToEnd);
            }
            else {
                break;
            }
        }
        ActorCreate(ActorScopeFromUnit(lv_u), "CandyBowlCandyX", null, null, null);
        ActorSend(libNtve_gf_ActorLastCreated(), (("SetText " + ("+" + IntToString(lv_i)))));
        TriggerEnable(TriggerGetCurrent(), true);
        Wait(0.0, c_timeGame);
        ActorScopeSend(ActorScopeFromUnit(EventUnit()), "Signal CandyCountHide");
    }

    Wait(0.0625, c_timeGame);
    lv_charge = UnitAbilityChargeInfo(lv_u, libCOMI_gv_candyChargeCmd, c_unitAbilChargeCountLeft);
    if ((lv_charge == 0.0)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupRemoveAll");
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupApply A");
    }
    else if ((lv_charge < 25.0)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupRemoveAll");
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupApply B");
    }
    else if ((lv_charge < 50.0)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupRemoveAll");
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupApply C");
    }
    else if ((lv_charge == 50.0)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupRemoveAll");
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupApply D");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_MU_CandyBowlMassBuy_Init () {
    libCOMI_gt_MU_CandyBowlMassBuy = TriggerCreate("libCOMI_gt_MU_CandyBowlMassBuy_Func");
    TriggerAddEventUnitOrder(libCOMI_gt_MU_CandyBowlMassBuy, null, libCOMI_gv_candyChargeCmd);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_InstantRevive
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_InstantRevive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayerRemoveCooldown(lv_p, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lv_p)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_InstantRevive_Init () {
    libCOMI_gt_CM_InstantRevive = TriggerCreate("libCOMI_gt_CM_InstantRevive_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_InstantRevive, c_playerAny, "HeroInstantRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Warp Train
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SupplicantWarpTrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_actualCreator;
    unit lv_warpGate;
    point lv_p;
    order lv_order1;
    order lv_order2;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnitCreatedUnit();
    lv_warpGate = EventUnit();
    lv_p = UnitGetPosition(lv_u);
    lv_order1 = OrderTargetingPoint(libCOMI_gv_supplicantWarpTrainActualCommand, PointWithOffset(lv_p, -0.5, 0.0));
    lv_order2 = OrderTargetingPoint(libCOMI_gv_supplicantWarpTrainActualCommand, PointWithOffset(lv_p, 0.5, 0.0));
    lv_player = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_u) == libCOMI_gv_supplicantWarpTrainDummyUnitLink))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, libCOMI_gv_supplicantWarpTrainCreatorUnitLink, c_unitCreateIgnorePlacement, lv_player, lv_p, 270.0);
    lv_actualCreator = UnitLastCreated();
    if ((UnitOrderIsValid(lv_actualCreator, lv_order1) == false) && (UnitOrderIsValid(lv_actualCreator, lv_order2) == false)) {
        UnitAbilityAddChargeUsed(lv_warpGate, libCOMI_gv_warpGateTrainAbility, "WarpGateTrain", -1.0);
        UnitRemove(lv_actualCreator);
        return true;
    }

    UnitIssueOrder(lv_actualCreator, lv_order1, c_orderQueueAddToFront);
    UnitIssueOrder(lv_actualCreator, lv_order2, c_orderQueueAddToFront);
    UnitBehaviorAdd(lv_actualCreator, libCOMI_gv_supplicantWarpTrainCreatorWarpGateFinderBehaviorLink, lv_warpGate, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SupplicantWarpTrain_Init () {
    libCOMI_gt_SupplicantWarpTrain = TriggerCreate("libCOMI_gt_SupplicantWarpTrain_Func");
    TriggerAddEventUnitCreated(libCOMI_gt_SupplicantWarpTrain, null, libCOMI_gv_warpGateTrainAbility, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Actual Train
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SupplicantActualTrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_warpSource;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnitCreatedUnit();
    lv_warpSource = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_u, libCOMI_gv_supplicantWarpTrainWarpPowerCheckBehaviorLink, lv_warpSource, 1);
    UnitBehaviorAdd(lv_u, libCOMI_gv_supplicantWarpTrainCreatorFinderBehaviorLink, lv_warpSource, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SupplicantActualTrain_Init () {
    libCOMI_gt_SupplicantActualTrain = TriggerCreate("libCOMI_gt_SupplicantActualTrain_Func");
    TriggerAddEventUnitCreated(libCOMI_gt_SupplicantActualTrain, null, libCOMI_gv_supplicantWarpTrainActualAbility, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Warp Finish
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SupplicantWarpFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_supplicant;
    unit lv_creator;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_supplicant = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_supplicant, libCOMI_gv_supplicantWarpTrainCreatorFinderBehaviorLink) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_creator = UnitBehaviorEffectUnit(lv_supplicant, libCOMI_gv_supplicantWarpTrainCreatorFinderBehaviorLink, c_effectUnitCaster, 0);
    UnitBehaviorRemove(lv_supplicant, libCOMI_gv_supplicantWarpTrainCreatorFinderBehaviorLink, 1);
    UnitRemove(lv_creator);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SupplicantWarpFinish_Init () {
    libCOMI_gt_SupplicantWarpFinish = TriggerCreate("libCOMI_gt_SupplicantWarpFinish_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_SupplicantWarpFinish, c_playerAny, libCOMI_gv_supplicantWarpTrainActualUnitBirthEventLink);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supplicant Warp Cancel
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SupplicantWarpCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_supplicant;
    unit lv_creator;
    unit lv_warpGate;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_supplicant = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_creator = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(lv_creator, libCOMI_gv_supplicantWarpTrainWarpRefundBehaviorLink) > 0)) {
        lv_warpGate = UnitBehaviorEffectUnit(lv_creator, libCOMI_gv_supplicantWarpTrainCreatorWarpGateFinderBehaviorLink, c_effectUnitCaster, 0);
        UnitAbilityAddChargeUsed(lv_warpGate, libCOMI_gv_warpGateTrainAbility, "WarpGateTrain", -1.0);
        UnitRemove(lv_creator);
    }
    else {
        UnitBehaviorAdd(lv_creator, libCOMI_gv_supplicantWarpTrainWarpRefundBehaviorLink, lv_supplicant, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SupplicantWarpCancel_Init () {
    libCOMI_gt_SupplicantWarpCancel = TriggerCreate("libCOMI_gt_SupplicantWarpCancel_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_SupplicantWarpCancel, c_playerAny, libCOMI_gv_supplicantWarpTrainActualUnitCancelEventLink);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stukov - Snare Behavior Off
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_StukovSnareBehaviorOn2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    fixed lv_defaultHeight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_defaultHeight = UnitTypeGetProperty(UnitGetType(lv_unit), c_unitPropHeight);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(lv_unit, lv_defaultHeight, libCOMI_gv_StukovInfestedWraithSnareBehavior3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_StukovSnareBehaviorOn2_Init () {
    libCOMI_gt_StukovSnareBehaviorOn2 = TriggerCreate("libCOMI_gt_StukovSnareBehaviorOn2_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_StukovSnareBehaviorOn2, null, libCOMI_gv_StukovInfestedWraithSnareBehavior, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CargoDeath
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CargoDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cargoUnit;
    unit lv_transportUnit;
    point lv_landingPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cargoUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_transportUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_cargoUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(lv_cargoUnit, false);
    lv_landingPoint = UnitTypePlacementTestsFromPoint(UnitGetType(lv_cargoUnit), EventPlayer(), UnitGetPosition(lv_transportUnit), 3.0, c_placementTestCliffMask);
    if (((lv_landingPoint == null) || (PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), EventPlayer()) != true))) {
        UnitSetPropertyFixed(lv_cargoUnit, c_unitPropShields, 0.0);
        UnitCreateEffectUnit(lv_cargoUnit, libCOMI_gv_cM_CargoDeathKillEffect, lv_cargoUnit);
    }
    else {
        libNtve_gf_ShowHideUnit(lv_cargoUnit, true);
        UnitSetPosition(lv_transportUnit, lv_landingPoint, false);
    }
    if ((UnitIsValid(lv_cargoUnit) == true)) {
        libNtve_gf_ShowHideUnit(lv_cargoUnit, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CargoDeath_Init () {
    libCOMI_gt_CM_CargoDeath = TriggerCreate("libCOMI_gt_CM_CargoDeath_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_CargoDeath, c_playerAny, libCOMI_gv_cM_CargoDeathNotifyEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MasteryVorazunDarkPylonRadius
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MasteryVorazunDarkPylonRadius_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    int lv_level;
    fixed lv_scale;
    unit lv_u;
    string lv_link;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();
    lv_level = TechTreeUpgradeCount(lv_p, libCOMI_gv_cM_MasteryVorazunDarkPylonRadiusUpgradeLink, c_techCountCompleteOnly);
    lv_scale = ((lv_level * 0.02) + 1.0);
    lv_u = EventUnit();
    lv_link = (libCOMI_gv_cM_MasteryVorazunDarkPylonRadiusPowerSourceBaseString + IntToString(lv_level));

    // Conditions
    if (testConds) {
        if (!((lv_level > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSendTo(libNtve_gf_MainActorofUnit(lv_u), libCOMI_gv_cM_MasteryVorazunDarkPylonRadiusActorLink, ("SetScale 0.45"));
    ActorSendTo(libNtve_gf_MainActorofUnit(lv_u), libCOMI_gv_cM_MasteryVorazunDarkPylonRadiusActorLink, (("SetScale " + FixedToString(lv_scale, 2) + " 1")));
    UnitBehaviorRemove(lv_u, libCOMI_gv_cM_MasteryVorazunDarkPylonRadiusPowerSourceNoMasteryLink, c_unitBehaviorCountAll);
    UnitBehaviorAdd(lv_u, (lv_link), lv_u, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MasteryVorazunDarkPylonRadius_Init () {
    libCOMI_gt_CM_MasteryVorazunDarkPylonRadius = TriggerCreate("libCOMI_gt_CM_MasteryVorazunDarkPylonRadius_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_MasteryVorazunDarkPylonRadius, null, "DarkPylonCloakAura", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AchievementRaynorBansheesUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AchievementRaynorBansheesUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOOC_gv_cC_InContestMap == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantitySet(EventPlayer(), "CommanderRaynorTheThunderCombine", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AchievementRaynorBansheesUsed_Init () {
    libCOMI_gt_CM_AchievementRaynorBansheesUsed = TriggerCreate("libCOMI_gt_CM_AchievementRaynorBansheesUsed_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AchievementRaynorBansheesUsed, null, AbilityCommand("BansheeAirstrike", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AchievementSwannCombatDropUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AchievementSwannCombatDropUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOOC_gv_cC_InContestMap == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantitySet(EventPlayer(), "CommanderSwannCombatReady", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AchievementSwannCombatDropUsed_Init () {
    libCOMI_gt_CM_AchievementSwannCombatDropUsed = TriggerCreate("libCOMI_gt_CM_AchievementSwannCombatDropUsed_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AchievementSwannCombatDropUsed, null, AbilityCommand("SpecialDelivery", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AchievementVorazunBlackHoleUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AchievementVorazunBlackHoleUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOOC_gv_cC_InContestMap == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantitySet(EventPlayer(), "CommanderVorazun1Shot15Kills", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AchievementVorazunBlackHoleUsed_Init () {
    libCOMI_gt_CM_AchievementVorazunBlackHoleUsed = TriggerCreate("libCOMI_gt_CM_AchievementVorazunBlackHoleUsed_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AchievementVorazunBlackHoleUsed, null, AbilityCommand("VoidSentryBlackHole", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AchievementArtanisSolarBombardmentUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AchievementArtanisSolarBombardmentUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOOC_gv_cC_InContestMap == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantitySet(EventPlayer(), "CommanderArtanisArtanisWMD", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AchievementArtanisSolarBombardmentUsed_Init () {
    libCOMI_gt_CM_AchievementArtanisSolarBombardmentUsed = TriggerCreate("libCOMI_gt_CM_AchievementArtanisSolarBombardmentUsed_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AchievementArtanisSolarBombardmentUsed, null, AbilityCommand("SOAStrafeAttack", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AchievementKaraxSolarLanceUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AchievementKaraxSolarLanceUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOOC_gv_cC_InContestMap == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantitySet(EventPlayer(), "CommanderKaraxPurifierBeam", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AchievementKaraxSolarLanceUsed_Init () {
    libCOMI_gt_CM_AchievementKaraxSolarLanceUsed = TriggerCreate("libCOMI_gt_CM_AchievementKaraxSolarLanceUsed_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AchievementKaraxSolarLanceUsed, null, AbilityCommand("SOAPurifierBeam", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AchievementFenixChampionAllExist
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AchievementFenixChampionAllExist_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoE1C4C2D7_ae = libCOMI_gv_cMC_Fenix_ChampionCount;
    const int autoE1C4C2D7_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOOC_gv_cC_InContestMap == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    lv_i = 1;
    for ( ; ( (autoE1C4C2D7_ai >= 0 && lv_i <= autoE1C4C2D7_ae) || (autoE1C4C2D7_ai < 0 && lv_i >= autoE1C4C2D7_ae) ) ; lv_i += autoE1C4C2D7_ai ) {
        if ((UnitIsAlive(libCOMI_gv_cM_Fenix_ChampionUnit[lv_i][EventPlayer()]) == false)) {
            return true;
        }

    }
    AchievementAward(EventPlayer(), "CommanderFenixAllChampions");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AchievementFenixChampionAllExist_Init () {
    libCOMI_gt_CM_AchievementFenixChampionAllExist = TriggerCreate("libCOMI_gt_CM_AchievementFenixChampionAllExist_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_AchievementFenixChampionAllExist, c_playerAny, "FenixChampionSwapImpactUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Tumor Build
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CreepTumorBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "CreepTumorExhausted", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CreepTumorBuild_Init () {
    libCOMI_gt_CreepTumorBuild = TriggerCreate("libCOMI_gt_CreepTumorBuild_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CreepTumorBuild, null, AbilityCommand("CreepTumorBuild", 0), c_abilBuildStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugVictoryS
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DebugVictoryS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    trigger lv_cineTrigger;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClearAll();
    libCOMI_gf_HideCampaignTransmissionPortrait();
    libCOMI_gv_cM_MissionVictoryActionQueyeEmpty = false;
    TriggerExecute(libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute, true, false);
    while (!((libCOMI_gv_cM_MissionVictoryActionQueyeEmpty == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueClear(c_triggerQueueKill);
    lv_cineTrigger = TriggerCreate("gt_VictorySequence_Func");
    TriggerExecute(lv_cineTrigger, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DebugVictoryS_Init () {
    libCOMI_gt_CM_DebugVictoryS = TriggerCreate("libCOMI_gt_CM_DebugVictoryS_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_DebugVictoryS, c_playerAny, "VICTORYS", true);
    TriggerAddEventChatMessage(libCOMI_gt_CM_DebugVictoryS, c_playerAny, "VICTORYSEQUENCE", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugGiveOfflineControl
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DebugGiveOfflineControl_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayerOuter;
    int lv_indexPlayerInner;

    // Automatic Variable Declarations
    playergroup auto253A2D71_g;
    playergroup autoA54BC7AF_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto253A2D71_g = PlayerGroupAll();
    lv_indexPlayerOuter = -1;
    while (true) {
        lv_indexPlayerOuter = PlayerGroupNextPlayer(auto253A2D71_g, lv_indexPlayerOuter);
        if (lv_indexPlayerOuter < 0) { break; }
        if ((PlayerType(lv_indexPlayerOuter) == c_playerTypeUser)) {
            autoA54BC7AF_g = PlayerGroupAll();
            lv_indexPlayerInner = -1;
            while (true) {
                lv_indexPlayerInner = PlayerGroupNextPlayer(autoA54BC7AF_g, lv_indexPlayerInner);
                if (lv_indexPlayerInner < 0) { break; }
                if ((PlayerType(lv_indexPlayerInner) == c_playerTypeNone) && (libNtve_gf_PlayerIsEnemy(lv_indexPlayerInner, lv_indexPlayerOuter, libNtve_ge_PlayerRelation_Ally) == true)) {
                    libNtve_gf_SetAlliance(lv_indexPlayerOuter, lv_indexPlayerInner, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DebugGiveOfflineControl_Init () {
    libCOMI_gt_CM_DebugGiveOfflineControl = TriggerCreate("libCOMI_gt_CM_DebugGiveOfflineControl_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MindControlSupplyOn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_MindControlSupplyOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_supply;
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_supply = 6.0;
    lv_u = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }

        if (!((UnitIsAlive(lv_u) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_u, "HybridUnitDummy") == true)) {
        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed, c_playerPropOperAdd, lv_supply);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_MindControlSupplyOn_Init () {
    libCOMI_gt_MindControlSupplyOn = TriggerCreate("libCOMI_gt_MindControlSupplyOn_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_MindControlSupplyOn, null, "DarkArchonMindControl", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MindControlSupplyOff
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_MindControlSupplyOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_supply;
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_supply = 6.0;
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_u, "HybridUnitDummy") == true)) {
        PlayerModifyPropertyFixed(EventPlayer(), c_playerPropSuppliesUsed, c_playerPropOperSubtract, lv_supply);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_MindControlSupplyOff_Init () {
    libCOMI_gt_MindControlSupplyOff = TriggerCreate("libCOMI_gt_MindControlSupplyOff_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_MindControlSupplyOff, null, "DarkArchonMindControl", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Permanently Changes Owner
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_BehaviorPermanentlyChangesOwner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventUnit(), UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0), true);
    if ((EventUnitBehavior() != "DarkArchonMindControl")) {
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_BehaviorPermanentlyChangesOwner_Init () {
    libCOMI_gt_BehaviorPermanentlyChangesOwner = TriggerCreate("libCOMI_gt_BehaviorPermanentlyChangesOwner_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libCOMI_gt_BehaviorPermanentlyChangesOwner, null, c_unitBehaviorFlagUser8, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libCOMI_gt_BehaviorPermanentlyChangesOwner, null, c_unitBehaviorFlagUser8, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_TriggersInit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_TriggersInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto55ADB699_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassDrop, true);
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassRefund, true);
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassScaler, true);
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassTrain, true);
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassPickup, true);
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassManualUpdate, true);
    TriggerEnable(libCOMI_gt_CM_DebugAbathurBiomassLost, true);
    TriggerEnable(libCOMI_gt_CM_Abathur_MeleeBonusUpgrade, true);
    TriggerEnable(libCOMI_gt_CM_Abathur_ToxicNest, true);
    TriggerEnable(libCOMI_gt_CM_Abathur_SwarmHostLocustLaunchCast, true);
    TriggerEnable(libCOMI_gt_CM_Abathur_RavagerSpellCooldown, true);
    TriggerEnable(libCOMI_gt_CM_Abathur_ToxicNestDeathFailsafe, true);
    TriggerEnable(libCOMI_gt_BanelingScourgeLocusts, true);
    TriggerEnable(libCOMI_gt_BanelingScourgeBiomassDrop, true);
    auto55ADB699_g = libCOOC_gf_CC_PlayersOfCommander("ZergAbathur");
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto55ADB699_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((TechTreeUpgradeCount(lv_itPlayer, "AbathurEnemyDeathCreateLocusts", c_techCountQueuedOrBetter) > 0)) {
            TriggerEnable(libCOMI_gt_CM_Abathur_Enemy_Death_Create_Locusts, true);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_TriggersInit_Init () {
    libCOMI_gt_CM_Abathur_TriggersInit = TriggerCreate("libCOMI_gt_CM_Abathur_TriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_ToxicNestDeathFailsafe
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_ToxicNestDeathFailsafe_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_ToxicNestDeathFailsafe_Init () {
    libCOMI_gt_CM_Abathur_ToxicNestDeathFailsafe = TriggerCreate("libCOMI_gt_CM_Abathur_ToxicNestDeathFailsafe_Func");
    TriggerEnable(libCOMI_gt_CM_Abathur_ToxicNestDeathFailsafe, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Abathur_ToxicNestDeathFailsafe, c_playerAny, "KillCaster");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_MeleeBonusUpgrade
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_MeleeBonusUpgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerCommander(UnitGetOwner(EventUnit())) == "Abathur"))) {
            return false;
        }

        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel1") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel2") || (libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel3")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueModify(c_gameCatalogEffect, "BrutalizeDamage", "Amount", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ZergAbathur", libCOOC_gf_CC_PlayersOfCommander("ZergAbathur")), "3", c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogWeapon, "Brutalize", "Level", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ZergAbathur", libCOOC_gf_CC_PlayersOfCommander("ZergAbathur")), "1", c_upgradeOperationAdd);
    if ((libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel1")) {
        CatalogFieldValueSet(c_gameCatalogWeapon, "Brutalize", "Icon", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ZergAbathur", libCOOC_gf_CC_PlayersOfCommander("ZergAbathur")), "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level1.dds");
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel2")) {
        CatalogFieldValueSet(c_gameCatalogWeapon, "Brutalize", "Icon", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ZergAbathur", libCOOC_gf_CC_PlayersOfCommander("ZergAbathur")), "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level2.dds");
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "ZergMissileWeaponsLevel3")) {
        CatalogFieldValueSet(c_gameCatalogWeapon, "Brutalize", "Icon", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ZergAbathur", libCOOC_gf_CC_PlayersOfCommander("ZergAbathur")), "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level3.dds");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_MeleeBonusUpgrade_Init () {
    libCOMI_gt_CM_Abathur_MeleeBonusUpgrade = TriggerCreate("libCOMI_gt_CM_Abathur_MeleeBonusUpgrade_Func");
    TriggerEnable(libCOMI_gt_CM_Abathur_MeleeBonusUpgrade, false);
    TriggerAddEventUnitResearchProgress(libCOMI_gt_CM_Abathur_MeleeBonusUpgrade, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_BiomassDrop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_BiomassDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_biomassUnitCount;
    int lv_indexPlayer;
    fixed lv_biomassBaseAmount;
    fixed lv_biomassCasualMultiplier;
    fixed lv_biomassNormalMultiplier;
    fixed lv_biomassHardMultiplier;
    fixed lv_biomassBrutalMultiplier;
    fixed lv_biomassToxicNestMultiplier;
    fixed lv_dyingUnitSupply;
    int lv_abathurAllyOfKillingPlayer;
    fixed lv_doubleBiomassChance;
    fixed lv_expectedDrop;
    fixed lv_fractionChance;

    // Automatic Variable Declarations
    playergroup auto2D811EA1_g;

    // Variable Initialization
    lv_biomassCasualMultiplier = 2.5;
    lv_biomassNormalMultiplier = 2.5;
    lv_biomassHardMultiplier = 2.0;
    lv_biomassBrutalMultiplier = 1.25;
    lv_biomassToxicNestMultiplier = 1.0;
    lv_abathurAllyOfKillingPlayer = libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ZergAbathur", libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(libNtve_gf_KillingPlayer()));

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(libNtve_gf_KillingPlayer(), UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_AllyMutual) == false))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != c_playerAny))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "NoBiomassDrop") == false))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMU_gf_CT_UnitSpawnedByMutator(EventUnit()) == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }

        if (!((lv_abathurAllyOfKillingPlayer != c_playerAny))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2D811EA1_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto2D811EA1_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer) == "ZergAbathur") && (libNtve_gf_PlayerIsEnemy(lv_indexPlayer, UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_AllyMutual) == false)) {
            lv_dyingUnitSupply = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0));
            lv_doubleBiomassChance = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, "MasteryAbathurDoubleBiomassDisplayDummy", "Amount", lv_indexPlayer);
            if ((UnitHasBehavior2(EventUnit(), "CritterExplode") == true)) {
                lv_biomassBaseAmount = 1;
            }
            else if ((UnitHasBehavior2(EventUnit(), "HybridUnitDummy") == true)) {
                lv_biomassBaseAmount = 12;
            }
            else if ((lv_dyingUnitSupply < -4)) {
                lv_biomassBaseAmount = 12;
            }
            else if (true) {
                lv_biomassBaseAmount = (-2*lv_dyingUnitSupply);
            }
            if ((TechTreeUpgradeCount(lv_indexPlayer, "AbathurToxicNestIcreasedBiomass", c_techCountCompleteOnly) == 1) && (UnitHasBehavior2(EventUnit(), "ToxicNestVirulentNest") == true)) {
                lv_biomassToxicNestMultiplier = 1.5;
            }

            if ((TechTreeUpgradeCount(lv_indexPlayer, "MasteryAbathurDoubleBiomass", c_techCountCompleteOnly) > 0) && (RandomFixed(0.0, 100.0) <= lv_doubleBiomassChance)) {
                lv_biomassToxicNestMultiplier = 2.0;
            }

            lv_expectedDrop = (libNtve_gf_DifficultyValueFixed(lv_biomassCasualMultiplier, lv_biomassNormalMultiplier, lv_biomassHardMultiplier, lv_biomassBrutalMultiplier) * lv_biomassBaseAmount * lv_biomassToxicNestMultiplier);
            lv_biomassUnitCount = CeilingI(lv_expectedDrop);
            lv_fractionChance = (lv_expectedDrop - lv_biomassUnitCount);
            if ((RandomFixed(0.0, 1.0) <= lv_fractionChance)) {
                lv_biomassUnitCount += 1;
            }

            if ((lv_biomassUnitCount > 0)) {
                libCOMI_gv_cM_DebugAbathurBiomassDroppedNormal += lv_biomassUnitCount;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "BiomassPickup", c_unitCreateIgnorePlacement, lv_abathurAllyOfKillingPlayer, UnitGetPosition(EventUnit()));
                libCOMI_gf_CM_Abathur_BiomassSetStack(UnitLastCreated(), lv_biomassUnitCount);
                UnitBehaviorRemove(UnitLastCreated(), "BiomassCreated", 1);
                libCOMI_gf_CM_Abathur_BiomassScale(UnitLastCreated(), true);
                libCOMI_gf_CM_Abathur_BiomassMerge(UnitLastCreated(), lv_biomassUnitCount);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_BiomassDrop_Init () {
    libCOMI_gt_CM_Abathur_BiomassDrop = TriggerCreate("libCOMI_gt_CM_Abathur_BiomassDrop_Func");
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassDrop, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_Abathur_BiomassDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_BiomassPickup
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_BiomassPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_biomassCountTargetTotal;
    int lv_biomassCountStored;
    int lv_biomassCountStoredTemp;
    int lv_biomass100Stacks;
    int lv_biomass10Stacks;
    int lv_biomass1Stacks;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_biomassCountStored = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 63));
    lv_biomassCountStoredTemp = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 63));

    // Actions
    if (!runActions) {
        return true;
    }

    lv_biomassCountTargetTotal = (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff100") * 100);
    lv_biomassCountTargetTotal += (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff10") * 10);
    lv_biomassCountTargetTotal += UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff1");
    lv_biomass100Stacks = TruncI((lv_biomassCountStoredTemp / 100));
    lv_biomassCountStoredTemp -= (lv_biomass100Stacks * 100);
    lv_biomass10Stacks = TruncI((lv_biomassCountStoredTemp / 10));
    lv_biomassCountStoredTemp -= (lv_biomass10Stacks * 10);
    lv_biomass1Stacks = lv_biomassCountStoredTemp;
    if (((lv_biomassCountStored + lv_biomassCountTargetTotal) > 100)) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "BiomassPickupLM", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        lv_biomassCountStoredTemp = (100 - lv_biomassCountTargetTotal);
        libCOMI_gf_CM_Abathur_BiomassSetStack(EventPlayerEffectUsedUnit(c_effectUnitCaster), FixedToInt((UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 63) - lv_biomassCountStoredTemp)));
        libCOMI_gf_CM_Abathur_BiomassScale(EventPlayerEffectUsedUnit(c_effectUnitCaster), false);
        libCOMI_gv_cM_DebugAbathurBiomassCollected += lv_biomassCountStoredTemp;
        lv_biomass100Stacks = TruncI((lv_biomassCountStoredTemp / 100));
        lv_biomassCountStoredTemp -= (lv_biomass100Stacks * 100);
        lv_biomass10Stacks = TruncI((lv_biomassCountStoredTemp / 10));
        lv_biomassCountStoredTemp -= (lv_biomass10Stacks * 10);
        lv_biomass1Stacks = lv_biomassCountStoredTemp;
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff100PlusLife", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass100Stacks);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff10PlusLife", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass10Stacks);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff1", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass1Stacks);
    }
    else {
        libCOMI_gv_cM_DebugAbathurBiomassCollected += lv_biomassCountStored;
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "BiomassTravelling", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "BiomassPickupFullLM", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff100PlusLife", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass100Stacks);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff10PlusLife", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass10Stacks);
        UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "BiomassBuff1", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_biomass1Stacks);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_BiomassPickup_Init () {
    libCOMI_gt_CM_Abathur_BiomassPickup = TriggerCreate("libCOMI_gt_CM_Abathur_BiomassPickup_Func");
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassPickup, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Abathur_BiomassPickup, c_playerAny, "BiomassPickupDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_BiomassRefund
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_BiomassRefund_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_indexPlayer;
    point lv_position;
    int lv_biomassCountTotal;
    fixed lv_biomassRefundChance;
    fixed lv_biomassRefundChanceMastery;
    int lv_biomassRefundScaling;
    int lv_biomassRefundAmount;
    int lv_biomassDropCountLarge;
    int lv_biomassDropCountSmall;
    int lv_killedPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_biomassRefundChance = 0.5;
    lv_biomassRefundScaling = 1;
    lv_killedPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) != "Locust") && (PlayerCommander(lv_killedPlayer) == "Abathur") && ((UnitHasBehavior2(EventUnit(), "BiomassBuff1") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff10") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff100") == true)) && (UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), 0)) == true) && ((libNtve_gf_UnitIsHidden(EventUnit()) == false) || (EventUnitDamageEffect() == libCOMI_gv_cM_CargoDeathKillEffect)) && (TechTreeUpgradeCount(lv_killedPlayer, "AbathurBiomassRefund", c_techCountCompleteOnly) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_biomassRefundChanceMastery = ((UserDataGetFixed("MasteryUpgrades", "AbathurMastery4", "PointIncrement", 1) / 100.0) * TechTreeUpgradeCount(EventPlayer(), "MasteryAbathurBiomassRefund", c_techCountCompleteOnly));
    lv_biomassRefundChance += lv_biomassRefundChanceMastery;
    if ((lv_biomassRefundChance >= RandomFixed(0.0, 1.0))) {
        lv_biomassCountTotal = (UnitBehaviorCount(EventUnit(), "BiomassBuff100") * 100);
        lv_biomassCountTotal += (UnitBehaviorCount(EventUnit(), "BiomassBuff10") * 10);
        lv_biomassCountTotal += UnitBehaviorCount(EventUnit(), "BiomassBuff1");
        lv_biomassRefundAmount = FixedToInt((lv_biomassCountTotal / lv_biomassRefundScaling));
        libCOMI_gv_cM_DebugAbathurBiomassDroppedRefund += lv_biomassRefundAmount;
        libCOMI_gv_cM_DebugAbathurBiomassLost -= lv_biomassRefundAmount;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BiomassPickup", c_unitCreateIgnorePlacement, lv_killedPlayer, UnitGetPosition(EventUnit()));
        libCOMI_gf_CM_Abathur_BiomassSetStack(UnitLastCreated(), lv_biomassRefundAmount);
        UnitBehaviorRemove(UnitLastCreated(), "BiomassCreated", 1);
        libCOMI_gf_CM_Abathur_BiomassScale(UnitLastCreated(), true);
        libCOMI_gf_CM_Abathur_BiomassMerge(UnitLastCreated(), lv_biomassRefundAmount);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_BiomassRefund_Init () {
    libCOMI_gt_CM_Abathur_BiomassRefund = TriggerCreate("libCOMI_gt_CM_Abathur_BiomassRefund_Func");
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassRefund, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_Abathur_BiomassRefund, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugAbathurBiomassLost
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DebugAbathurBiomassLost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) != "Locust") && (PlayerCommander(UnitGetOwner(EventUnit())) == "Abathur") && (UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior2(EventUnit(), "BiomassBuff1") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff10") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff100") == true))) {
        TextExpressionSetToken("Param/Expression/lib_COMI_C5670D9B", "A", UnitGetName(EventUnit()));
        TextExpressionSetToken("Param/Expression/lib_COMI_C5670D9B", "B", IntToText((UnitBehaviorCount(EventUnit(), "BiomassBuff100") * 100)));
        TextExpressionSetToken("Param/Expression/lib_COMI_C5670D9B", "C", IntToText((UnitBehaviorCount(EventUnit(), "BiomassBuff10") * 10)));
        TextExpressionSetToken("Param/Expression/lib_COMI_C5670D9B", "D", IntToText(UnitBehaviorCount(EventUnit(), "BiomassBuff1")));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_C5670D9B"), false);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COMI_564A19C7", "A", UnitGetName(EventUnit()));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_564A19C7"), false);
        return true;
    }
    libCOMI_gv_cM_DebugAbathurBiomassLost += (UnitBehaviorCount(EventUnit(), "BiomassBuff100") * 100);
    libCOMI_gv_cM_DebugAbathurBiomassLost += (UnitBehaviorCount(EventUnit(), "BiomassBuff10") * 10);
    libCOMI_gv_cM_DebugAbathurBiomassLost += UnitBehaviorCount(EventUnit(), "BiomassBuff1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DebugAbathurBiomassLost_Init () {
    libCOMI_gt_CM_DebugAbathurBiomassLost = TriggerCreate("libCOMI_gt_CM_DebugAbathurBiomassLost_Func");
    TriggerEnable(libCOMI_gt_CM_DebugAbathurBiomassLost, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_DebugAbathurBiomassLost, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_BiomassTrain
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_BiomassTrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    unit lv_trainUnit;
    int lv_biomassBuff100Count;
    int lv_biomassBuff10Count;
    int lv_biomassBuff1Count;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerCommander(UnitGetOwner(EventUnit())) == "Abathur") && ((UnitHasBehavior2(EventUnit(), "BiomassBuff1") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff10") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff100") == true)) && ((libNtve_gf_TriggeringProgressUnitType() == "RavagerAbathur") || (libNtve_gf_TriggeringProgressUnitType() == "GuardianMP") || (libNtve_gf_TriggeringProgressUnitType() == "Devourer"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_indexPlayer = UnitGetOwner(EventUnit());
    lv_trainUnit = EventUnitProgressUnit();
    lv_biomassBuff100Count = UnitBehaviorCount(EventUnit(), "BiomassBuff100");
    lv_biomassBuff10Count = UnitBehaviorCount(EventUnit(), "BiomassBuff10");
    lv_biomassBuff1Count = UnitBehaviorCount(EventUnit(), "BiomassBuff1");
    libCOMI_gf_CM_Abathur_BiomassTransfer(lv_indexPlayer, lv_trainUnit, lv_biomassBuff100Count, lv_biomassBuff10Count, lv_biomassBuff1Count);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_BiomassTrain_Init () {
    libCOMI_gt_CM_Abathur_BiomassTrain = TriggerCreate("libCOMI_gt_CM_Abathur_BiomassTrain_Func");
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassTrain, false);
    TriggerAddEventUnitTrainProgress(libCOMI_gt_CM_Abathur_BiomassTrain, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_BiomassManualUpdate
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_BiomassManualUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_Abathur_BiomassSetStack(EventPlayerEffectUsedUnit(c_effectUnitCaster), 25);
    libCOMI_gf_CM_Abathur_BiomassScale(EventPlayerEffectUsedUnit(c_effectUnitCaster), true);
    libCOMI_gf_CM_Abathur_BiomassMerge(EventPlayerEffectUsedUnit(c_effectUnitCaster), 25);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_BiomassManualUpdate_Init () {
    libCOMI_gt_CM_Abathur_BiomassManualUpdate = TriggerCreate("libCOMI_gt_CM_Abathur_BiomassManualUpdate_Func");
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassManualUpdate, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Abathur_BiomassManualUpdate, c_playerAny, "BiomassCreatedDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_BiomassScaler
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_BiomassScaler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_biomassCountTotal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(EventUnit()) == true) && (PlayerCommander(UnitGetOwner(EventUnit())) == "Abathur") && ((UnitHasBehavior2(EventUnit(), "BiomassBuff1") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff10") == true) || (UnitHasBehavior2(EventUnit(), "BiomassBuff100") == true))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_biomassCountTotal = (UnitBehaviorCount(EventUnit(), "BiomassBuff100") * 100);
    lv_biomassCountTotal += (UnitBehaviorCount(EventUnit(), "BiomassBuff10") * 10);
    lv_biomassCountTotal += UnitBehaviorCount(EventUnit(), "BiomassBuff1");
    if ((lv_biomassCountTotal > 100)) {
        lv_biomassCountTotal = 100;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), (("SetScale " + FixedToString(((0.0025 * lv_biomassCountTotal) + 1.25), 3))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_BiomassScaler_Init () {
    libCOMI_gt_CM_Abathur_BiomassScaler = TriggerCreate("libCOMI_gt_CM_Abathur_BiomassScaler_Func");
    TriggerEnable(libCOMI_gt_CM_Abathur_BiomassScaler, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Abathur_BiomassScaler, null, "BiomassBuff1", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Abathur_BiomassScaler, null, "BiomassBuff10", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Abathur_BiomassScaler, null, "BiomassBuff100", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_Enemy_Death_Create_Locusts
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_Enemy_Death_Create_Locusts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_locustUnitType;
    int lv_rand;
    fixed lv_foodCompare;
    int lv_abathurAllyOfKillingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_locustUnitType = "Locust";
    lv_rand = RandomInt(1, 100);
    lv_foodCompare = (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0)) * -16.0);
    lv_abathurAllyOfKillingPlayer = libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ZergAbathur", libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(libNtve_gf_KillingPlayer()));

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0)) == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "NoBiomassDrop") == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }

        if (!((lv_abathurAllyOfKillingPlayer != c_playerAny))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(lv_abathurAllyOfKillingPlayer, UnitGetOwner(EventUnit()), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetHeight(EventUnit()) >= 1)) {
        lv_locustUnitType = "LocustFlying";
    }

    if ((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true)) {
        lv_foodCompare = 8;
    }

    if ((UnitHasBehavior2(EventUnit(), "HybridUnitDummy") == true)) {
        lv_foodCompare = 96;
    }

    if (((FixedToInt(lv_foodCompare) + libCOMI_gv_cM_Abathur_Enemy_Death_Create_Locusts_Random_Modifier) >= lv_rand)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_locustUnitType, c_unitCreateIgnorePlacement, lv_abathurAllyOfKillingPlayer, UnitGetPosition(EventUnit()));
        PlayerCreateEffectUnit(lv_abathurAllyOfKillingPlayer, "AbathurLocustTimedLife", UnitLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_Enemy_Death_Create_Locusts_Init () {
    libCOMI_gt_CM_Abathur_Enemy_Death_Create_Locusts = TriggerCreate("libCOMI_gt_CM_Abathur_Enemy_Death_Create_Locusts_Func");
    TriggerEnable(libCOMI_gt_CM_Abathur_Enemy_Death_Create_Locusts, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_Abathur_Enemy_Death_Create_Locusts, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_ToxicNest
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_ToxicNest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "AbathurCommander", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    if ((UnitAbilityChargeInfo(EventUnit(), AbilityCommand("SpawnToxicNest", 0), c_unitAbilChargeCountLeft) > 0.0)) {
        UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCOMI_gv_cM_GlobalCasterUnitGroup[lv_casterPlayer], OrderTargetingPoint(AbilityCommand("SpawnToxicNest", 0), UnitGetPosition(libCOMI_gv_cM_GlobalCasterUnit[lv_casterPlayer])), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_ToxicNest_Init () {
    libCOMI_gt_CM_Abathur_ToxicNest = TriggerCreate("libCOMI_gt_CM_Abathur_ToxicNest_Func");
    TriggerEnable(libCOMI_gt_CM_Abathur_ToxicNest, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Abathur_ToxicNest, null, AbilityCommand("SpawnToxicNest", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_SwarmHostLocustLaunchCast
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_SwarmHostLocustLaunchCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cooldown;
    fixed lv_multiplier;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "AbathurCommander", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cooldown = UnitWeaponPeriod(EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    lv_multiplier = UnitWeaponSpeedMultiplier(EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    UnitAbilityReset(EventPlayerEffectUsedUnit(c_effectUnitCaster), AbilityCommand("LocustLaunch", 0), c_spendLocationUnit);
    UnitModifyCooldown(EventPlayerEffectUsedUnit(c_effectUnitCaster), "Abil/LocustLaunch", ((lv_cooldown * lv_multiplier) / 16.0), c_cooldownOperationSet);
    UnitBehaviorSetDurationRemaining(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SwarmHostEggAnimation", ((lv_cooldown * lv_multiplier) / 16.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_SwarmHostLocustLaunchCast_Init () {
    libCOMI_gt_CM_Abathur_SwarmHostLocustLaunchCast = TriggerCreate("libCOMI_gt_CM_Abathur_SwarmHostLocustLaunchCast_Func");
    TriggerEnable(libCOMI_gt_CM_Abathur_SwarmHostLocustLaunchCast, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Abathur_SwarmHostLocustLaunchCast, c_playerAny, "LocustCreateSet");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Abathur_SwarmHostLocustLaunchCast, c_playerAny, "LocustWeaponCreateSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abathur_RavagerSpellCooldown
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Abathur_RavagerSpellCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cooldown;
    fixed lv_multiplier;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "AbathurCommander", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cooldown = UnitAbilityGetCooldown(lv_unit, "RavagerAbathurCorrosiveBile", "Abil/RavagerAbathurCorrosiveBile");
    lv_multiplier = UnitWeaponSpeedMultiplier(lv_unit, 1);
    UnitAbilityReset(lv_unit, AbilityCommand("RavagerAbathurCorrosiveBile", 0), c_spendLocationAll);
    UnitAbilityAddCooldown(lv_unit, "RavagerAbathurCorrosiveBile", "Abil/RavagerAbathurCorrosiveBile", (lv_cooldown*lv_multiplier));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Abathur_RavagerSpellCooldown_Init () {
    libCOMI_gt_CM_Abathur_RavagerSpellCooldown = TriggerCreate("libCOMI_gt_CM_Abathur_RavagerSpellCooldown_Func");
    TriggerEnable(libCOMI_gt_CM_Abathur_RavagerSpellCooldown, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Abathur_RavagerSpellCooldown, c_playerAny, "RavagerCorrosiveBileAoeLaunchSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_Upgrade
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Alarak_Upgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_upgrade;
    int lv_player;
    int lv_level;

    // Automatic Variable Declarations
    string autoBEF1021D_val;

    // Variable Initialization
    lv_upgrade = EventUpgradeName();
    lv_player = EventPlayer();
    lv_level = TechTreeUpgradeCount(lv_player, lv_upgrade, c_techCountCompleteOnly);

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(lv_player) == "Alarak"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBEF1021D_val = lv_upgrade;
    if (autoBEF1021D_val == "ProtossGroundArmorsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirArmorsLevel1", lv_level);
    }
    else if (autoBEF1021D_val == "ProtossGroundArmorsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirArmorsLevel2", lv_level);
    }
    else if (autoBEF1021D_val == "ProtossGroundArmorsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirArmorsLevel3", lv_level);
    }
    else if (autoBEF1021D_val == "ProtossGroundWeaponsLevel1") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirWeaponsLevel1", lv_level);
    }
    else if (autoBEF1021D_val == "ProtossGroundWeaponsLevel2") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirWeaponsLevel2", lv_level);
    }
    else if (autoBEF1021D_val == "ProtossGroundWeaponsLevel3") {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "ProtossAirWeaponsLevel3", lv_level);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Alarak_Upgrade_Init () {
    libCOMI_gt_CM_Alarak_Upgrade = TriggerCreate("libCOMI_gt_CM_Alarak_Upgrade_Func");
    TriggerEnable(libCOMI_gt_CM_Alarak_Upgrade, false);
    TriggerAddEventUpgradeLevelChanged(libCOMI_gt_CM_Alarak_Upgrade, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_Sacrific_Scale
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Alarak_Sacrific_Scale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sacrificCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitIsAlive(EventUnit()) == true) && (PlayerCommander(UnitGetOwner(EventUnit())) == "Alarak") && (UnitHasBehavior2(EventUnit(), "AscendantSacrificeSelfBuff") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_sacrificCount = UnitBehaviorCount(EventUnit(), "AscendantSacrificeSelfBuff");
    if ((lv_sacrificCount > 10)) {
        lv_sacrificCount = 10;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), (("SetScale " + FixedToString(((0.05 * lv_sacrificCount) + 1.0), 3))));
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), libNtve_gf_Signal(IntToString(lv_sacrificCount)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Alarak_Sacrific_Scale_Init () {
    libCOMI_gt_CM_Alarak_Sacrific_Scale = TriggerCreate("libCOMI_gt_CM_Alarak_Sacrific_Scale_Func");
    TriggerEnable(libCOMI_gt_CM_Alarak_Sacrific_Scale, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Alarak_Sacrific_Scale, null, "AscendantSacrificeSelfBuff", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AlarakLightningStrikes_FlashOn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AlarakLightningStrikes_FlashOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupSingle(lv_p), AbilityCommand("AlarakACDeadlyCharge", 0), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AlarakLightningStrikes_FlashOn_Init () {
    libCOMI_gt_CM_AlarakLightningStrikes_FlashOn = TriggerCreate("libCOMI_gt_CM_AlarakLightningStrikes_FlashOn_Func");
    TriggerEnable(libCOMI_gt_CM_AlarakLightningStrikes_FlashOn, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_AlarakLightningStrikes_FlashOn, null, "AlarakLightningStrikes", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AlarakLightningStrikes_FlashOff
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AlarakLightningStrikes_FlashOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UISetButtonHighlighted(PlayerGroupSingle(lv_p), AbilityCommand("AlarakACDeadlyCharge", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AlarakLightningStrikes_FlashOff_Init () {
    libCOMI_gt_CM_AlarakLightningStrikes_FlashOff = TriggerCreate("libCOMI_gt_CM_AlarakLightningStrikes_FlashOff_Func");
    TriggerEnable(libCOMI_gt_CM_AlarakLightningStrikes_FlashOff, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_AlarakLightningStrikes_FlashOff, null, "AlarakLightningStrikes", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AlarakLightningStrikes_Sacriface
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AlarakLightningStrikes_Sacriface_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_alarak;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitGetOwner(EventUnit());
    lv_alarak = libCOMI_gv_cM_HeroUnit[lv_p];

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_alarak) == true))) {
            return false;
        }

        if (!((UnitGetType(lv_alarak) == "AlarakCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_alarak, libCOMI_gv_cM_AlarakLightningStrikes_Behavior, lv_alarak, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AlarakLightningStrikes_Sacriface_Init () {
    libCOMI_gt_CM_AlarakLightningStrikes_Sacriface = TriggerCreate("libCOMI_gt_CM_AlarakLightningStrikes_Sacriface_Func");
    TriggerEnable(libCOMI_gt_CM_AlarakLightningStrikes_Sacriface, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AlarakLightningStrikes_Sacriface, null, libCOMI_gv_cM_AlarakLightningStrikes_SacrificeCmd, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_SoulAbsorption_Impact
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Alarak_SoulAbsorption_Impact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_missile;
    unit lv_alarak;
    fixed lv_amout;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_missile = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_alarak = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_amout = UnitGetCustomValue(lv_missile, 63);
    lv_p = UnitGetOwner(lv_alarak);

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogReferenceSet("Effect,SoulAbsorptionMU,VitalArray[Life].Change", lv_p, FixedToString(lv_amout, c_fixedPrecisionAny));
    CatalogReferenceSet("Effect,SoulAbsorptionMU,VitalArray[Shields].Change", lv_p, FixedToString(lv_amout, c_fixedPrecisionAny));
    UnitCreateEffectUnit(lv_alarak, libCOMI_gv_cM_Alarak_SoulAbsorption_ScoreTrackerEffect, lv_alarak);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Alarak_SoulAbsorption_Impact_Init () {
    libCOMI_gt_CM_Alarak_SoulAbsorption_Impact = TriggerCreate("libCOMI_gt_CM_Alarak_SoulAbsorption_Impact_Func");
    TriggerEnable(libCOMI_gt_CM_Alarak_SoulAbsorption_Impact, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Alarak_SoulAbsorption_Impact, c_playerAny, libCOMI_gv_cM_Alarak_SoulAbsorption_ImpactEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_SoulAbsorption_Launch
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Alarak_SoulAbsorption_Launch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_victimType;
    unit lv_missile;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_victimType = EventPlayerEffectUsedUnitType(c_effectUnitTarget);
    lv_missile = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(lv_missile, 63, (UnitTypeGetProperty(lv_victimType, c_unitPropSuppliesUsed) * libCOMI_gv_cM_Alarak_SoulAbsorption_FoodFactor));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Alarak_SoulAbsorption_Launch_Init () {
    libCOMI_gt_CM_Alarak_SoulAbsorption_Launch = TriggerCreate("libCOMI_gt_CM_Alarak_SoulAbsorption_Launch_Func");
    TriggerEnable(libCOMI_gt_CM_Alarak_SoulAbsorption_Launch, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Alarak_SoulAbsorption_Launch, c_playerAny, libCOMI_gv_cM_Alarak_SoulAbsorption_LaunchEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_EmpowerAdd
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Alarak_EmpowerAdd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((libCOOC_gf_PlayerIsCommander(lv_p) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMI_gv_cM_Alarak_EmpowerSlaves[lv_p], lv_u);
    if ((TriggerIsEnabled(libCOMI_gt_CM_Alarak_EmpowerUpdate) == true)) {
        TriggerExecute(libCOMI_gt_CM_Alarak_EmpowerUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Alarak_EmpowerAdd_Init () {
    libCOMI_gt_CM_Alarak_EmpowerAdd = TriggerCreate("libCOMI_gt_CM_Alarak_EmpowerAdd_Func");
    TriggerEnable(libCOMI_gt_CM_Alarak_EmpowerAdd, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Alarak_EmpowerAdd, c_playerAny, libCOMI_gv_cM_Alarak_EmpowerAuraTargetPlayerStartEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_EmpowerRemove
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Alarak_EmpowerRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((libCOOC_gf_PlayerIsCommander(lv_p) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(libCOMI_gv_cM_Alarak_EmpowerSlaves[lv_p], lv_u);
    ActorScopeSend(ActorScopeFromUnit(lv_u), (("Signal " + "Destroy" + IntToString(lv_p))));
    if ((TriggerIsEnabled(libCOMI_gt_CM_Alarak_EmpowerUpdate) == true)) {
        TriggerExecute(libCOMI_gt_CM_Alarak_EmpowerUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Alarak_EmpowerRemove_Init () {
    libCOMI_gt_CM_Alarak_EmpowerRemove = TriggerCreate("libCOMI_gt_CM_Alarak_EmpowerRemove_Func");
    TriggerEnable(libCOMI_gt_CM_Alarak_EmpowerRemove, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Alarak_EmpowerRemove, c_playerAny, libCOMI_gv_cM_Alarak_EmpowerAuraTargetPlayerFinalEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_EmpowerWorshiperAdd
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Alarak_EmpowerWorshiperAdd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((libCOOC_gf_PlayerIsCommander(lv_p) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMI_gv_cM_Alarak_EmpowerWorshipers[lv_p], lv_u);
    if ((TriggerIsEnabled(libCOMI_gt_CM_Alarak_EmpowerUpdate) == true)) {
        TriggerExecute(libCOMI_gt_CM_Alarak_EmpowerUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Alarak_EmpowerWorshiperAdd_Init () {
    libCOMI_gt_CM_Alarak_EmpowerWorshiperAdd = TriggerCreate("libCOMI_gt_CM_Alarak_EmpowerWorshiperAdd_Func");
    TriggerEnable(libCOMI_gt_CM_Alarak_EmpowerWorshiperAdd, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Alarak_EmpowerWorshiperAdd, null, "WorshipAlarak", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_EmpowerWorshiperRemove
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Alarak_EmpowerWorshiperRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto367D63A9_g;

    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    auto367D63A9_g = libCOOC_gf_CommanderPlayers();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto367D63A9_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        UnitGroupRemove(libCOMI_gv_cM_Alarak_EmpowerWorshipers[lv_itPlayer], lv_u);
    }
    if ((TriggerIsEnabled(libCOMI_gt_CM_Alarak_EmpowerUpdate) == true)) {
        TriggerExecute(libCOMI_gt_CM_Alarak_EmpowerUpdate, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Alarak_EmpowerWorshiperRemove_Init () {
    libCOMI_gt_CM_Alarak_EmpowerWorshiperRemove = TriggerCreate("libCOMI_gt_CM_Alarak_EmpowerWorshiperRemove_Func");
    TriggerEnable(libCOMI_gt_CM_Alarak_EmpowerWorshiperRemove, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Alarak_EmpowerWorshiperRemove, null, "WorshipAlarak", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Alarak_EmpowerUpdate
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Alarak_EmpowerUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_slave;
    fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_totalSupply;
    int lv_player;
    fixed lv_abilityPower;
    fixed lv_attackDamage;

    // Automatic Variable Declarations
    const int auto52747C9D_ae = 2;
    const int auto52747C9D_ai = 1;
    unitgroup autoB921BE57_g;
    int autoB921BE57_u;
    unitgroup auto84427305_g;
    int auto84427305_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.0625, c_timeGame);
    lv_player = 1;
    for ( ; ( (auto52747C9D_ai >= 0 && lv_player <= auto52747C9D_ae) || (auto52747C9D_ai < 0 && lv_player >= auto52747C9D_ae) ) ; lv_player += auto52747C9D_ai ) {
        autoB921BE57_g = libCOMI_gv_cM_Alarak_EmpowerSlaves[lv_player];
        autoB921BE57_u = UnitGroupCount(autoB921BE57_g, c_unitCountAll);
        for (;; autoB921BE57_u -= 1) {
            lv_slave = UnitGroupUnitFromEnd(autoB921BE57_g, autoB921BE57_u);
            if (lv_slave == null) { break; }
            if ((UnitHasBehavior2(lv_slave, libCOMI_gv_cM_Alarak_EmpowerAuraTarget) == true)) {
                if (true) {
                }

                if ((((UnitTypeGetProperty(UnitGetType(lv_slave), c_unitPropSuppliesUsed) == 0.0) && (UnitTypeTestAttribute(UnitGetType(lv_slave), c_unitAttributeHeroic) == true)) || (UnitHasBehavior2(lv_slave, "HHMercStarportCargoInstalled") == true))) {
                    lv_totalSupply[lv_player] += 3.0;
                }
                else if ((UnitFilterMatch(lv_slave, lv_player, UnitFilter((1 << c_targetFilterMechanical), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0)) == true)) {
                    lv_totalSupply[lv_player] += (UnitTypeGetProperty(UnitGetType(lv_slave), c_unitPropSuppliesUsed) * 2.0);
                }
                else if (true) {
                    lv_totalSupply[lv_player] += UnitTypeGetProperty(UnitGetType(lv_slave), c_unitPropSuppliesUsed);
                }
            }
            else {
                UnitGroupRemove(libCOMI_gv_cM_Alarak_EmpowerSlaves[lv_player], lv_slave);
            }
        }
        auto84427305_g = libCOMI_gv_cM_Alarak_EmpowerWorshipers[lv_player];
        auto84427305_u = UnitGroupCount(auto84427305_g, c_unitCountAll);
        for (;; auto84427305_u -= 1) {
            lv_slave = UnitGroupUnitFromEnd(auto84427305_g, auto84427305_u);
            if (lv_slave == null) { break; }
            if ((UnitHasBehavior2(lv_slave, libCOMI_gv_cM_Alarak_EmpowerWorshiperTarget) == true)) {
                lv_totalSupply[lv_player] += UnitTypeGetProperty(UnitGetType(lv_slave), c_unitPropSuppliesUsed);
            }
            else {
                UnitGroupRemove(libCOMI_gv_cM_Alarak_EmpowerSlaves[lv_player], lv_slave);
            }
        }
        if ((lv_totalSupply[lv_player] <= 100.0)) {
            lv_attackDamage = (libCOMI_gv_cM_Alarak_EmpowerBaseDmgInc * lv_totalSupply[lv_player]);
            lv_abilityPower = (libCOMI_gv_cM_Alarak_EmpowerBaseSpellDmgeIncPercent * lv_totalSupply[lv_player]);
        }
        else {
            lv_attackDamage = (libCOMI_gv_cM_Alarak_EmpowerBaseDmgInc * lv_totalSupply[lv_player]);
            lv_abilityPower = (((libCOMI_gv_cM_Alarak_EmpowerBaseSpellDmgeIncPercent * libCOMI_gv_cM_Alarak_EmpowerDiminishingReturnsMultiplier) * (lv_totalSupply[lv_player] - libCOMI_gv_cM_Alarak_EmpowerDiminishingReturnsSupplyThreshold)) + (libCOMI_gv_cM_Alarak_EmpowerBaseSpellDmgeIncPercent * libCOMI_gv_cM_Alarak_EmpowerDiminishingReturnsSupplyThreshold));
        }
        CatalogFieldValueSet(c_gameCatalogBehavior, libCOMI_gv_cM_Alarak_EmpowerBehaviorCaster, "Modification.DamageDealtFraction[Spell]", lv_player, FixedToString(lv_abilityPower, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, libCOMI_gv_cM_Alarak_EmpowerBehaviorCaster, "Modification.DamageDealtUnscaled[Melee]", lv_player, FixedToString(lv_attackDamage, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, libCOMI_gv_cM_Alarak_EmpowerBehaviorCaster, "Modification.DamageDealtUnscaled[Ranged]", lv_player, FixedToString(lv_attackDamage, c_fixedPrecisionAny));
        if ((lv_totalSupply[lv_player] > 0.0)) {
            TechTreeBehaviorAllow(lv_player, libCOMI_gv_cM_Alarak_EmpowerBehaviorCaster, true);
        }
        else {
            TechTreeBehaviorAllow(lv_player, libCOMI_gv_cM_Alarak_EmpowerBehaviorCaster, false);
        }
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Alarak_EmpowerUpdate_Init () {
    libCOMI_gt_CM_Alarak_EmpowerUpdate = TriggerCreate("libCOMI_gt_CM_Alarak_EmpowerUpdate_Func");
    TriggerEnable(libCOMI_gt_CM_Alarak_EmpowerUpdate, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaGeneThornsOn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaGeneThornsOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_u, EventUnitBehavior(), lv_u, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaGeneThornsOn_Init () {
    libCOMI_gt_CM_DehakaGeneThornsOn = TriggerCreate("libCOMI_gt_CM_DehakaGeneThornsOn_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaGeneThornsOn, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_DehakaGeneThornsOn, null, "DehakaGeneThorns", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaDenReviveFootprintOn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaDenReviveFootprintOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    point lv_point;
    int lv_x;
    int lv_y;
    point lv_pointInteger;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);
    lv_point = UnitGetPosition(lv_u);
    lv_x = FixedToInt(PointGetX(lv_point));
    lv_y = FixedToInt(PointGetY(lv_point));
    lv_pointInteger = Point(lv_x, lv_y);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_point != lv_pointInteger)) {
        UnitSetPosition(lv_u, lv_pointInteger, false);
    }

    UnitCreate(1, "DehakaCoopReviveCocoonFootPrint", c_unitCreateIgnorePlacement, lv_p, lv_pointInteger, 270.0);
    libCOMI_gv_cM_DehakaReviveFootprint[lv_p] = UnitLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaDenReviveFootprintOn_Init () {
    libCOMI_gt_CM_DehakaDenReviveFootprintOn = TriggerCreate("libCOMI_gt_CM_DehakaDenReviveFootprintOn_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaDenReviveFootprintOn, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_DehakaDenReviveFootprintOn, null, "DehakaFirstReviveTimer", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_DehakaDenReviveFootprintOn, null, "DehakaNormalReviveTimer", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaDenReviveFootprintOff
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaDenReviveFootprintOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(libCOMI_gv_cM_DehakaReviveFootprint[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaDenReviveFootprintOff_Init () {
    libCOMI_gt_CM_DehakaDenReviveFootprintOff = TriggerCreate("libCOMI_gt_CM_DehakaDenReviveFootprintOff_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaDenReviveFootprintOff, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_DehakaDenReviveFootprintOff, null, "DehakaFirstReviveTimer", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_DehakaDenReviveFootprintOff, null, "DehakaNormalReviveTimer", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaDenReviveEatTextTagDead
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaDenReviveEatTextTagDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);
    lv_point = UnitGetPosition(lv_u);

    // Conditions
    if (testConds) {
        if (!((libCOMI_gv_cM_DehakaReviveEatTextTag[lv_p] == c_textTagNone))) {
            return false;
        }

        if (!((libCOMI_gv_cM_DehakaReviveEatUsed[lv_p] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/lib_COMI_EDEF6975"), 18, lv_point, 1.0, true, false, PlayerGroupSingle(lv_p));
    TextTagAttachToUnit(TextTagLastCreated(), lv_u, 2.5);
    libCOMI_gv_cM_DehakaReviveEatTextTag[lv_p] = TextTagLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaDenReviveEatTextTagDead_Init () {
    libCOMI_gt_CM_DehakaDenReviveEatTextTagDead = TriggerCreate("libCOMI_gt_CM_DehakaDenReviveEatTextTagDead_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaDenReviveEatTextTagDead, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_DehakaDenReviveEatTextTagDead, null, "DehakaNormalReviveTimer", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaDenReviveEatTextTagRevived
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaDenReviveEatTextTagRevived_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((libCOMI_gv_cM_DehakaReviveEatTextTag[lv_p] != c_textTagNone))) {
            return false;
        }

        if (!((libCOMI_gv_cM_DehakaReviveEatUsed[lv_p] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(libCOMI_gv_cM_DehakaReviveEatTextTag[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaDenReviveEatTextTagRevived_Init () {
    libCOMI_gt_CM_DehakaDenReviveEatTextTagRevived = TriggerCreate("libCOMI_gt_CM_DehakaDenReviveEatTextTagRevived_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaDenReviveEatTextTagRevived, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_DehakaDenReviveEatTextTagRevived, null, "DehakaNormalReviveTimer", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaDenReviveEatUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaDenReviveEatUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((libCOMI_gv_cM_DehakaReviveEatTextTag[lv_p] != c_textTagNone))) {
            return false;
        }

        if (!((libCOMI_gv_cM_DehakaReviveEatUsed[lv_p] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(libCOMI_gv_cM_DehakaReviveEatTextTag[lv_p]);
    libCOMI_gv_cM_DehakaReviveEatUsed[lv_p] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaDenReviveEatUsed_Init () {
    libCOMI_gt_CM_DehakaDenReviveEatUsed = TriggerCreate("libCOMI_gt_CM_DehakaDenReviveEatUsed_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaDenReviveEatUsed, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_DehakaDenReviveEatUsed, null, AbilityCommand("DehakaConcoonEatSearch", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaBossFacingSetting
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaBossFacingSetting_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetFacing(EventUnit(), 315.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaBossFacingSetting_Init () {
    libCOMI_gt_CM_DehakaBossFacingSetting = TriggerCreate("libCOMI_gt_CM_DehakaBossFacingSetting_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaBossFacingSetting, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_DehakaBossFacingSetting, null, "DehakaBossesSummonDelay", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaMutaliskReviveCooldownOn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaMutaliskReviveCooldownOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    string lv_behavior;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_behavior = EventUnitBehavior();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddCooldown(lv_u, libCOMI_gv_cM_DehakaMutaliskReviveCooldownIndicator, "Behavior/PrimalReconstitutionCooldownIndicator", UnitBehaviorDurationTotal(lv_u, lv_behavior));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaMutaliskReviveCooldownOn_Init () {
    libCOMI_gt_CM_DehakaMutaliskReviveCooldownOn = TriggerCreate("libCOMI_gt_CM_DehakaMutaliskReviveCooldownOn_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaMutaliskReviveCooldownOn, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_DehakaMutaliskReviveCooldownOn, null, libCOMI_gv_cM_DehakaMutaliskReviveCooldownBehavior, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaMammoth Breath Look At Start
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaMammothBreathLookAtStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dehaka;
    unit lv_missile;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dehaka = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_missile = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Actions
    if (!runActions) {
        return true;
    }

    ActorLookAtTypeStart(libNtve_gf_MainActorofUnit(lv_dehaka), "InstantHeadOnly", libNtve_gf_MainActorofUnit(lv_missile));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaMammothBreathLookAtStart_Init () {
    libCOMI_gt_CM_DehakaMammothBreathLookAtStart = TriggerCreate("libCOMI_gt_CM_DehakaMammothBreathLookAtStart_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaMammothBreathLookAtStart, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_DehakaMammothBreathLookAtStart, c_playerAny, "MammothBreathCreatePersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaMammoth Breath Look At Stop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaMammothBreathLookAtStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dehaka;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dehaka = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    ActorLookAtTypeStop(libNtve_gf_MainActorofUnit(lv_dehaka), "SlowHeadOnly");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaMammothBreathLookAtStop_Init () {
    libCOMI_gt_CM_DehakaMammothBreathLookAtStop = TriggerCreate("libCOMI_gt_CM_DehakaMammothBreathLookAtStop_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaMammothBreathLookAtStop, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_DehakaMammothBreathLookAtStop, c_playerAny, "MammothBreathSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaConsumeTimeStopHackOn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaConsumeTimeStopHackOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_unit, "TimeStopImmune") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_unit, "TimeStopImmune", lv_unit, 1);
    UnitBehaviorSetDurationRemaining(lv_unit, "TimeStopImmune", 5.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaConsumeTimeStopHackOn_Init () {
    libCOMI_gt_CM_DehakaConsumeTimeStopHackOn = TriggerCreate("libCOMI_gt_CM_DehakaConsumeTimeStopHackOn_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaConsumeTimeStopHackOn, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_DehakaConsumeTimeStopHackOn, null, "DehakaConsume", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaConsumeExecuted
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaConsumeExecuted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dehakaUnit;
    unit lv_targetUnit;
    fixed lv_targetLife;
    int lv_dehakaPlayer;
    point lv_casterPoint;
    string lv_userInstance;
    int lv_i;
    int lv_c;
    string lv_effect;
    unitfilter lv_effectFilter;
    string lv_effectFilterString;
    text lv_text;
    text lv_textNew;
    fixed lv_cooldownModifier;

    // Automatic Variable Declarations
    int auto21E115F7_ae;
    const int auto21E115F7_ai = 1;

    // Variable Initialization
    lv_dehakaUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_targetLife = UnitGetPropertyFixed(lv_targetUnit, c_unitPropVitality, c_unitPropCurrent);
    lv_dehakaPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_casterPoint = EventPlayerEffectUsedPoint(c_effectLocationCasterPoint);
    lv_c = UserDataInstanceCount(libCOMI_gv_c_DehakaConsumeEffectUserType);
    lv_effectFilter = UnitFilter(0, 0, 0, 0);
    lv_effectFilterString = "";
    lv_cooldownModifier = 1.0;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_dehakaUnit, libCOMI_gv_c_DehakaConsumeBehaviorDisable, c_unitBehaviorCountAll);
    if ((UnitHasBehavior2(lv_targetUnit, "ImpalerDehakaTenderize") == true)) {
        lv_cooldownModifier = 0.5;
    }

    if ((((TechTreeUpgradeCount(lv_dehakaPlayer, "MutatorIsPlayer1", c_techCountCompleteOnly) >= 1) && (UnitHasBehavior2(lv_targetUnit, "MutatorImmunetoPlayer1") == true)) || ((TechTreeUpgradeCount(lv_dehakaPlayer, "MutatorIsPlayer2", c_techCountCompleteOnly) >= 1) && (UnitHasBehavior2(lv_targetUnit, "MutatorImmunetoPlayer2") == true)))) {
        UnitAbilityAddCooldown(lv_dehakaUnit, libCOMI_gv_c_DehakaConsumeAbil, libCOMI_gv_c_DehakaConsumeCooldownLink, 3.0);
    }
    else {
        if ((UnitFilterMatch(lv_targetUnit, lv_dehakaPlayer, libCOMI_gv_c_DehakaConsumeCooldownFilter) == true)) {
            if ((lv_targetLife >= 600.0)) {
                UnitAbilityAddCooldown(lv_dehakaUnit, libCOMI_gv_c_DehakaConsumeAbil, libCOMI_gv_c_DehakaConsumeCooldownLink, ((600.0 * lv_cooldownModifier) * libCOMI_gv_c_DehakaConsumeLifeCooldownFactor));
            }
            else {
                UnitAbilityAddCooldown(lv_dehakaUnit, libCOMI_gv_c_DehakaConsumeAbil, libCOMI_gv_c_DehakaConsumeCooldownLink, ((lv_targetLife * lv_cooldownModifier) * libCOMI_gv_c_DehakaConsumeLifeCooldownFactor));
            }
        }

        auto21E115F7_ae = lv_c;
        lv_i = 1;
        for ( ; ( (auto21E115F7_ai >= 0 && lv_i <= auto21E115F7_ae) || (auto21E115F7_ai < 0 && lv_i >= auto21E115F7_ae) ) ; lv_i += auto21E115F7_ai ) {
            lv_userInstance = UserDataInstance(libCOMI_gv_c_DehakaConsumeEffectUserType, lv_i);
            lv_effectFilterString = UserDataGetString(libCOMI_gv_c_DehakaConsumeEffectUserType, lv_userInstance, "Filter", 1);
            lv_effectFilter = libNtve_gf_ConvertTargetFilterStringToUnitFilter(lv_effectFilterString);
            if ((UnitFilterMatch(lv_targetUnit, lv_dehakaPlayer, lv_effectFilter) == true)) {
                lv_effect = UserDataGetGameLink(libCOMI_gv_c_DehakaConsumeEffectUserType, lv_userInstance, "Effect", 1);
                lv_textNew = UserDataGetText(libCOMI_gv_c_DehakaConsumeEffectUserType, lv_userInstance, "Text", 1);
                UnitCreateEffectUnit(lv_dehakaUnit, lv_effect, lv_dehakaUnit);
                TextExpressionSetToken("Param/Expression/lib_COMI_C0055D03", "A", lv_text);
                TextExpressionSetToken("Param/Expression/lib_COMI_C0055D03", "B", lv_textNew);
                lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_C0055D03");
            }

        }
        UnitCreateEffectUnit(lv_dehakaUnit, libCOMI_gv_c_DehakaConsumeEffectTriggerEffect, lv_targetUnit);
        if ((UnitGetType(lv_targetUnit) == "MutatorAmonDehaka")) {
            SoundPlayOnUnitForPlayer(SoundLink("DehakaEatDehaka", -1), c_maxPlayers, PlayerGroupAll(), lv_dehakaUnit, 1.0, 100.0, 0.0);
        }

        if ((UnitFilterMatch(lv_targetUnit, lv_dehakaPlayer, UnitFilter((1 << c_targetFilterBiological), 0, 0, 0)) == true)) {
            UnitCreateEffectUnit(lv_dehakaUnit, "DehakaConsumeEffectHealBiological", lv_dehakaUnit);
        }
        else {
            UnitCreateEffectUnit(lv_dehakaUnit, "DehakaConsumeEffectHealOther", lv_dehakaUnit);
        }
        if ((UnitHasBehavior2(lv_targetUnit, "SupplyLT1") == true)) {
            AchievementTermQuantityAdd(lv_dehakaPlayer, "CommanderDehakaSupply", 1);
        }
        else {
            AchievementTermQuantityAdd(lv_dehakaPlayer, "CommanderDehakaSupply", (CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(lv_targetUnit), "Food", EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)) * -1));
        }
        AchievementTermQuantityAdd(lv_dehakaPlayer, "CommanderDehakaDamage", FixedToInt(lv_targetLife));
        if (((UnitHasBehavior2(lv_targetUnit, "MutatorMasterController") == false) && (UnitHasBehavior2(lv_targetUnit, "MutatorJustDie") == false))) {
            UnitSetPropertyFixed(lv_targetUnit, c_unitPropLife, 1.0);
        }

    }
    ActorSend(libNtve_gf_MainActorofUnit(lv_targetUnit), "HostSiteOpsSet ::Host");
    UnitSetHeight(lv_targetUnit, UnitGetPropertyFixed(lv_targetUnit, c_unitPropHeight, c_unitPropNormal), 1.0);
    UnitBehaviorRemove(lv_targetUnit, "ForceLowDeath", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaConsumeExecuted_Init () {
    libCOMI_gt_CM_DehakaConsumeExecuted = TriggerCreate("libCOMI_gt_CM_DehakaConsumeExecuted_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaConsumeExecuted, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_DehakaConsumeExecuted, c_playerAny, libCOMI_gv_c_DehakaConsumeEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaConsumeDetachFailSafe
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaConsumeDetachFailSafe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(lv_targetUnit), "HostSiteOpsSet ::Host");
    UnitSetHeight(lv_targetUnit, UnitGetPropertyFixed(lv_targetUnit, c_unitPropHeight, c_unitPropNormal), 1.0);
    UnitBehaviorRemove(lv_targetUnit, "ForceLowDeath", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaConsumeDetachFailSafe_Init () {
    libCOMI_gt_CM_DehakaConsumeDetachFailSafe = TriggerCreate("libCOMI_gt_CM_DehakaConsumeDetachFailSafe_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaConsumeDetachFailSafe, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_DehakaConsumeDetachFailSafe, c_playerAny, "DehakaConsumeLaunchTargetVisualImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaConsumeLaunchFailSafe
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaConsumeLaunchFailSafe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    if ((libNtve_gf_PlayerCanCreateEffectOnUnit(1, "TargetIsBeingDraggedByDehaka", lv_targetUnit) == false)) {
        ActorSend(libNtve_gf_MainActorofUnit(lv_targetUnit), "HostSiteOpsSet ::Host");
        ActorSend(libNtve_gf_MainActorofUnit(lv_targetUnit), "RefClear ::Host");
        UnitSetHeight(lv_targetUnit, UnitGetPropertyFixed(lv_targetUnit, c_unitPropHeight, c_unitPropNormal), 1.0);
        UnitBehaviorRemove(lv_targetUnit, "ForceLowDeath", 1);
        UnitBehaviorRemove(lv_targetUnit, "DehakaConsumeStunned", 1);
        UnitBehaviorRemove(lv_targetUnit, "DehakaConsume", 1);
        UnitBehaviorRemove(lv_targetUnit, "DehakaConsumeTentacle", 1);
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "DehakaConsumeDisableCommandCard", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaConsumeLaunchFailSafe_Init () {
    libCOMI_gt_CM_DehakaConsumeLaunchFailSafe = TriggerCreate("libCOMI_gt_CM_DehakaConsumeLaunchFailSafe_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaConsumeLaunchFailSafe, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_DehakaConsumeLaunchFailSafe, c_playerAny, "DehakaConsumeLaunchTargetVisual");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaConsumeEffectHeroic
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaConsumeEffectHeroic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    int lv_amount;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_point = EventPlayerEffectUsedPoint(c_effectLocationCasterUnit);
    lv_amount = libCOMI_gv_c_DehakaConsumeEffectHeroicEssenceAmount;
    lv_p = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "EssencePickup", c_unitCreateIgnorePlacement, lv_p, lv_point);
    libCOMI_gf_CM_Dehaka_EssenceSetStack(UnitLastCreated(), lv_amount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaConsumeEffectHeroic_Init () {
    libCOMI_gt_CM_DehakaConsumeEffectHeroic = TriggerCreate("libCOMI_gt_CM_DehakaConsumeEffectHeroic_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaConsumeEffectHeroic, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_DehakaConsumeEffectHeroic, c_playerAny, libCOMI_gv_c_DehakaConsumeEffectHeroicLink);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaConsumeLearnLevel2
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaConsumeLearnLevel2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_durationModifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_durationModifier = 1.667;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DehakaCoop"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressAbility() == "DehakaConsume"))) {
            return false;
        }

        if (!((UnitAbilityGetLevel(EventUnit(), libNtve_gf_TriggeringProgressAbility()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectAir", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectArmored", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectDetector", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectHeroic", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectLight", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectMassive", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectMechanical", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    CatalogFieldValueModify(c_gameCatalogBehavior, "DehakaConsumeEffectPsionic", "Duration", EventPlayer(), FixedToString(lv_durationModifier, 2), c_upgradeOperationMultiply);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaConsumeLearnLevel2_Init () {
    libCOMI_gt_CM_DehakaConsumeLearnLevel2 = TriggerCreate("libCOMI_gt_CM_DehakaConsumeLearnLevel2_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaConsumeLearnLevel2, false);
    TriggerAddEventUnitLearnProgress(libCOMI_gt_CM_DehakaConsumeLearnLevel2, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaConsumeLearnLevel3
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaConsumeLearnLevel3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_lifeCooldownFactorReductionPercent;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_lifeCooldownFactorReductionPercent = 0.2;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DehakaCoop"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressAbility() == "DehakaConsume"))) {
            return false;
        }

        if (!((UnitAbilityGetLevel(EventUnit(), "DehakaConsume") == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_c_DehakaConsumeLifeCooldownFactor *= (1.0 - lv_lifeCooldownFactorReductionPercent);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaConsumeLearnLevel3_Init () {
    libCOMI_gt_CM_DehakaConsumeLearnLevel3 = TriggerCreate("libCOMI_gt_CM_DehakaConsumeLearnLevel3_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaConsumeLearnLevel3, false);
    TriggerAddEventUnitLearnProgress(libCOMI_gt_CM_DehakaConsumeLearnLevel3, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka Learn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaLearn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_ug;
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ug = UnitGroupEmpty();
    lv_u = EventUnit();
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_HeroCanSpendSkillPoint(lv_u, AbilityCommandGetAbility(EventUnitAbility())) == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(lv_u), "HaloStart");
        UISetButtonFaceHighlighted(PlayerGroupSingle(UnitGetOwner(lv_u)), "DehakaLearnAbilities", true);
    }
    else {
        lv_ug = UnitGroupSelected(lv_p);
        UnitClearSelection(lv_p);
        UnitSelect(lv_u, lv_p, true);
        UnitGroupSelect(lv_ug, lv_p, true);
        ActorSend(libNtve_gf_MainActorofUnit(lv_u), "HaloStop");
        UISetButtonFaceHighlighted(PlayerGroupSingle(UnitGetOwner(lv_u)), "DehakaLearnAbilities", false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaLearn_Init () {
    libCOMI_gt_CM_DehakaLearn = TriggerCreate("libCOMI_gt_CM_DehakaLearn_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaLearn, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_DehakaLearn, null, libCOMI_gv_dataDehakaLearnAbilCmdLink, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaPackLeaderGlevigBuilt
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaPackLeaderGlevigBuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_building;
    int lv_player;
    fixed lv_dehakaNydusDestroyerTopBarCooldown;
    fixed lv_dehakaNydusDestroyerTopBarCharges;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_building = EventUnitProgressUnit();
    lv_player = UnitGetOwner(lv_building);

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "DehakaGlevigStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cM_DehakaBossBuildingBuilt_Glevig[lv_player] == false)) {
        libCOMI_gv_cM_DehakaBossBuildingBuilt_Glevig[lv_player] = true;
        PlayerAddCooldown(lv_player, "Abil/DehakaGlevigTopBar", 120.0);
        lv_dehakaNydusDestroyerTopBarCooldown = PlayerGetChargeRegen(lv_player, "Abil/DehakaNydusDestroyerTopBar");
        lv_dehakaNydusDestroyerTopBarCharges = PlayerGetChargeUsed(lv_player, "Abil/DehakaNydusDestroyerTopBar");
        PlayerAddChargeUsed(lv_player, "Abil/DehakaNydusDestroyerTopBar", (3.0 - lv_dehakaNydusDestroyerTopBarCharges));
        PlayerAddChargeRegenRemaining(lv_player, "Abil/DehakaNydusDestroyerTopBar", (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "DehakaNydusDestroyerTopBar", "InfoArray[" + IntToString(0) + "].Charge.TimeStart", lv_player) - lv_dehakaNydusDestroyerTopBarCooldown));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaPackLeaderGlevigBuilt_Init () {
    libCOMI_gt_CM_DehakaPackLeaderGlevigBuilt = TriggerCreate("libCOMI_gt_CM_DehakaPackLeaderGlevigBuilt_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaPackLeaderGlevigBuilt, false);
    TriggerAddEventUnitConstructProgress(libCOMI_gt_CM_DehakaPackLeaderGlevigBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaPackLeaderMurvarBuilt
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaPackLeaderMurvarBuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_building;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_building = EventUnitProgressUnit();
    lv_player = UnitGetOwner(lv_building);

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "DehakaMurvarStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cM_DehakaBossBuildingBuilt_Murvar[lv_player] == false)) {
        libCOMI_gv_cM_DehakaBossBuildingBuilt_Murvar[lv_player] = true;
        PlayerAddCooldown(lv_player, "Abil/DehakaMurvarTopBar", 60.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaPackLeaderMurvarBuilt_Init () {
    libCOMI_gt_CM_DehakaPackLeaderMurvarBuilt = TriggerCreate("libCOMI_gt_CM_DehakaPackLeaderMurvarBuilt_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaPackLeaderMurvarBuilt, false);
    TriggerAddEventUnitConstructProgress(libCOMI_gt_CM_DehakaPackLeaderMurvarBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaPackLeaderDakrunBuilt
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaPackLeaderDakrunBuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_building;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_building = EventUnitProgressUnit();
    lv_player = UnitGetOwner(lv_building);

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUnitType() == "DehakaDakrunStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cM_DehakaBossBuildingBuilt_Dakrun[lv_player] == false)) {
        libCOMI_gv_cM_DehakaBossBuildingBuilt_Dakrun[lv_player] = true;
        PlayerAddCooldown(lv_player, "Abil/DehakaDakrunTopBar", 60.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaPackLeaderDakrunBuilt_Init () {
    libCOMI_gt_CM_DehakaPackLeaderDakrunBuilt = TriggerCreate("libCOMI_gt_CM_DehakaPackLeaderDakrunBuilt_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaPackLeaderDakrunBuilt, false);
    TriggerAddEventUnitConstructProgress(libCOMI_gt_CM_DehakaPackLeaderDakrunBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaReviveGas Worker Behavior Add
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaReviveGasWorkerBehaviorAdd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_drone;
    unit lv_gasStation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_drone = EventUnit();
    lv_gasStation = OrderGetTargetUnit(EventUnitOrder());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_drone) == "DehakaDrone"))) {
            return false;
        }

        if (!((UnitGetType(lv_gasStation) == "Extractor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_drone, "GasWorker", lv_drone, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaReviveGasWorkerBehaviorAdd_Init () {
    libCOMI_gt_CM_DehakaReviveGasWorkerBehaviorAdd = TriggerCreate("libCOMI_gt_CM_DehakaReviveGasWorkerBehaviorAdd_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaReviveGasWorkerBehaviorAdd, false);
    TriggerAddEventUnitOrder(libCOMI_gt_CM_DehakaReviveGasWorkerBehaviorAdd, null, AbilityCommand("DroneHarvest", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaReviveGas Worker Behavior Remove
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaReviveGasWorkerBehaviorRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_drone;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_drone = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_drone) == "DehakaDrone"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_drone, "GasWorker", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaReviveGasWorkerBehaviorRemove_Init () {
    libCOMI_gt_CM_DehakaReviveGasWorkerBehaviorRemove = TriggerCreate("libCOMI_gt_CM_DehakaReviveGasWorkerBehaviorRemove_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaReviveGasWorkerBehaviorRemove, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_DehakaReviveGasWorkerBehaviorRemove, null, AbilityCommand("DroneHarvest", 255), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_DehakaReviveGasWorkerBehaviorRemove, null, AbilityCommand("DroneHarvest", 255), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaRevive Eat Button Clicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaReviveEatButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_reviveTimer;
    int lv_needs;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reviveTimer = UnitBehaviorDuration(libCOMI_gv_cM_HeroReviver[EventPlayer()], "DehakaNormalReviveTimer");
    lv_needs = RoundI((lv_reviveTimer/(-libCOMI_gv_cM_DehakaEatReviveTimerAdjustment)));

    // Conditions
    if (testConds) {
        if (!((lv_reviveTimer > 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_needs > 0)) {
        CatalogReferenceModify("Abil,DehakaCoopReviveEat,MaxCargoCount", EventPlayer(), IntToString(lv_needs), c_upgradeOperationSet);
        CatalogReferenceModify("Abil,DehakaCoopReviveEat,TotalCargoSpace", EventPlayer(), IntToString(lv_needs), c_upgradeOperationSet);
        UnitAbilityEnable(libCOMI_gv_cM_HeroReviver[EventPlayer()], "DehakaConcoonEatSearch", true);
    }
    else {
        UnitAbilityEnable(libCOMI_gv_cM_HeroReviver[EventPlayer()], "DehakaConcoonEatSearch", false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaReviveEatButtonClicked_Init () {
    libCOMI_gt_CM_DehakaReviveEatButtonClicked = TriggerCreate("libCOMI_gt_CM_DehakaReviveEatButtonClicked_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaReviveEatButtonClicked, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_DehakaReviveEatButtonClicked, null, AbilityCommand("DehakaConcoonEatSearch", 0), c_unitAbilStageExecute, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_DehakaReviveEatButtonClicked, c_playerAny, "DehakaCoopReviveEatKillSet");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_DehakaReviveEatButtonClicked, null, "DehakaNormalReviveTimer", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaRevive Timer Adjustments
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaReviveTimerAdjustments_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_reviveTimer;
    fixed lv_reviveTimerAdjustment;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reviveTimerAdjustment = libCOMI_gv_cM_DehakaEatReviveTimerAdjustment;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_reviveTimer = UnitBehaviorDuration(libCOMI_gv_cM_HeroReviver[EventPlayer()], "DehakaNormalReviveTimer");
    lv_reviveTimer += lv_reviveTimerAdjustment;
    UnitBehaviorSetDurationRemaining(libCOMI_gv_cM_HeroReviver[EventPlayer()], "DehakaNormalReviveTimer", lv_reviveTimer);
    PlayerAddCooldown(EventPlayer(), libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer())), lv_reviveTimerAdjustment);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaReviveTimerAdjustments_Init () {
    libCOMI_gt_CM_DehakaReviveTimerAdjustments = TriggerCreate("libCOMI_gt_CM_DehakaReviveTimerAdjustments_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaReviveTimerAdjustments, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_DehakaReviveTimerAdjustments, c_playerAny, "DehakaCoopReviveEatKillSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaLeapRadiusReference_DataInit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaLeapRadiusReference_DataInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;
    string lv_effect;

    // Automatic Variable Declarations
    int autoB633EDFD_ae;
    const int autoB633EDFD_ai = 1;
    int autoB0AAA62E_ae;
    const int autoB0AAA62E_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB633EDFD_ae = (CatalogFieldValueCount(c_gameCatalogEffect, "DehakaLeapStompDamageSwitch", "CaseArray", c_playerAny) - 1);
    lv_i = 0;
    for ( ; ( (autoB633EDFD_ai >= 0 && lv_i <= autoB633EDFD_ae) || (autoB633EDFD_ai < 0 && lv_i >= autoB633EDFD_ae) ) ; lv_i += autoB633EDFD_ai ) {
        lv_effect = (CatalogFieldValueGet(c_gameCatalogEffect, "DehakaLeapStompSearchSwitch", "CaseArray[" + IntToString(lv_i) + "].Effect", c_playerAny));
        libCOMI_gv_cM_DehakaSearchEffectLink[lv_i] = lv_effect;
        libCOMI_gv_cM_DehakaLeapSearchRadiusReference[lv_i] = ((("Effect," + (lv_effect) + ",AreaArray[0].Radius")));
        lv_effect = (CatalogFieldValueGet(c_gameCatalogEffect, "DehakaLeapStompDamageSwitch", "CaseArray[" + IntToString(lv_i) + "].Effect", c_playerAny));
        libCOMI_gv_cM_DehakaDamageEffectLink[lv_i] = lv_effect;
        autoB0AAA62E_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lv_effect, "AreaArray", c_playerAny) - 1);
        lv_j = 0;
        for ( ; ( (autoB0AAA62E_ai >= 0 && lv_j <= autoB0AAA62E_ae) || (autoB0AAA62E_ai < 0 && lv_j >= autoB0AAA62E_ae) ) ; lv_j += autoB0AAA62E_ai ) {
            libCOMI_gv_cM_DehakaLeapDamageRadiusReference[lv_i][lv_j] = ((("Effect," + (lv_effect) + ",AreaArray[" + IntToString(lv_j) + "].Radius")));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaLeapRadiusReference_DataInit_Init () {
    libCOMI_gt_CM_DehakaLeapRadiusReference_DataInit = TriggerCreate("libCOMI_gt_CM_DehakaLeapRadiusReference_DataInit_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaLeapRadiusReference_DataInit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka Glevig Timer Adjustments
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaGlevigTimerAdjustments_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_researchElapsed;
    fixed lv_researchTotal;
    fixed lv_researchTimerAdjustment;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_researchTimerAdjustment = 31.0;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DehakaGlevigStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_researchElapsed = UnitQueueItemTime(EventUnit(), c_unitQueueTimeElapsed, 1);
    lv_researchElapsed += lv_researchTimerAdjustment;
    lv_researchTotal = UnitQueueItemTime(EventUnit(), c_unitQueueTimeTotal, 1);
    if ((lv_researchTotal != 0.0)) {
        UnitSetProgressComplete(EventUnit(), 1, FixedToInt(((lv_researchElapsed / lv_researchTotal) * 100)));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaGlevigTimerAdjustments_Init () {
    libCOMI_gt_CM_DehakaGlevigTimerAdjustments = TriggerCreate("libCOMI_gt_CM_DehakaGlevigTimerAdjustments_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaGlevigTimerAdjustments, false);
    TriggerAddEventUnitCargo(libCOMI_gt_CM_DehakaGlevigTimerAdjustments, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaAutocastSettingsOn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaAutocastSettingsOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    abilcmd autoE74B4F8A_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoE74B4F8A_val = EventUnitAbility();
    if (autoE74B4F8A_val == AbilityCommand("DehakaGlevigFirebreath", 0)) {
        libCOMI_gv_dehakaGlevigFirebreathAutocast[EventPlayer()] = true;
    }
    else if (autoE74B4F8A_val == AbilityCommand("MurvarCoopPuke", 0)) {
        libCOMI_gv_dehakaMurvarPukeAutocast[EventPlayer()] = true;
    }
    else if (autoE74B4F8A_val == AbilityCommand("CoopMurvarSpawnCreepers", 0)) {
        libCOMI_gv_dehakaMurvarSpawnCreepersAutocast[EventPlayer()] = true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaAutocastSettingsOn_Init () {
    libCOMI_gt_CM_DehakaAutocastSettingsOn = TriggerCreate("libCOMI_gt_CM_DehakaAutocastSettingsOn_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaAutocastSettingsOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCOMI_gt_CM_DehakaAutocastSettingsOn, null, AbilityCommand("DehakaGlevigFirebreath", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCOMI_gt_CM_DehakaAutocastSettingsOn, null, AbilityCommand("MurvarCoopPuke", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCOMI_gt_CM_DehakaAutocastSettingsOn, null, AbilityCommand("CoopMurvarSpawnCreepers", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaAutocastSettingsOff
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaAutocastSettingsOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    abilcmd auto80035AF7_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto80035AF7_val = EventUnitAbility();
    if (auto80035AF7_val == AbilityCommand("DehakaGlevigFirebreath", 0)) {
        libCOMI_gv_dehakaGlevigFirebreathAutocast[EventPlayer()] = false;
    }
    else if (auto80035AF7_val == AbilityCommand("MurvarCoopPuke", 0)) {
        libCOMI_gv_dehakaMurvarPukeAutocast[EventPlayer()] = false;
    }
    else if (auto80035AF7_val == AbilityCommand("CoopMurvarSpawnCreepers", 0)) {
        libCOMI_gv_dehakaMurvarSpawnCreepersAutocast[EventPlayer()] = false;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaAutocastSettingsOff_Init () {
    libCOMI_gt_CM_DehakaAutocastSettingsOff = TriggerCreate("libCOMI_gt_CM_DehakaAutocastSettingsOff_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaAutocastSettingsOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCOMI_gt_CM_DehakaAutocastSettingsOff, null, AbilityCommand("DehakaGlevigFirebreath", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCOMI_gt_CM_DehakaAutocastSettingsOff, null, AbilityCommand("MurvarCoopPuke", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCOMI_gt_CM_DehakaAutocastSettingsOff, null, AbilityCommand("CoopMurvarSpawnCreepers", 0), c_unitAbilAutoCastChangeOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DehakaAutocastBossSummonStateAdjust
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DehakaAutocastBossSummonStateAdjust_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoFA46D703_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoFA46D703_val = UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    if (autoFA46D703_val == "DehakaGlevig") {
        if ((libCOMI_gv_dehakaGlevigFirebreathAutocast[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] == true)) {
            Wait(0.0625, c_timeGame);
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DehakaGlevigFirebreathSetAutocast", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        }

    }
    else if (autoFA46D703_val == "DehakaMurvar") {
        if ((libCOMI_gv_dehakaMurvarPukeAutocast[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] == true)) {
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DehakaMurvarAcidPukeSetAutocast", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        }

        if ((libCOMI_gv_dehakaMurvarSpawnCreepersAutocast[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] == true)) {
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "DehakaMurvarSpawnCreepersSetAutocast", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DehakaAutocastBossSummonStateAdjust_Init () {
    libCOMI_gt_CM_DehakaAutocastBossSummonStateAdjust = TriggerCreate("libCOMI_gt_CM_DehakaAutocastBossSummonStateAdjust_Func");
    TriggerEnable(libCOMI_gt_CM_DehakaAutocastBossSummonStateAdjust, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_DehakaAutocastBossSummonStateAdjust, c_playerAny, "DehakaTopBarSummonTimedLifeAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka_TriggersInit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Dehaka_TriggersInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCOMI_gt_CM_DehakaLeapRadiusReference_DataInit, true, false);
    TriggerEnable(libCOMI_gt_CM_Dehaka_EssenceDrop, true);
    TriggerEnable(libCOMI_gt_CM_Dehaka_EssencePickup, true);
    TriggerEnable(libCOMI_gt_CM_Dehaka_EssenceManualUpdate, true);
    TriggerEnable(libCOMI_gt_CM_DehakaAutocastSettingsOn, true);
    TriggerEnable(libCOMI_gt_CM_DehakaAutocastSettingsOff, true);
    TriggerEnable(libCOMI_gt_CM_DehakaAutocastBossSummonStateAdjust, true);
    TriggerEnable(libCOMI_gt_CM_Dehaka_LevelUp_Stage2_ColossusLegs, true);
    TriggerEnable(libCOMI_gt_CM_Dehaka_LevelUp_Stage3, true);
    TriggerEnable(libCOMI_gt_CM_Dehaka_LevelUp_Stun_Off, true);
    TriggerEnable(libCOMI_gt_CM_Dehaka_UnitCostRefund, true);
    TriggerEnable(libCOMI_gt_CM_DehakaDenReviveFootprintOn, true);
    TriggerEnable(libCOMI_gt_CM_DehakaDenReviveFootprintOff, true);
    TriggerEnable(libCOMI_gt_CM_DehakaDenReviveEatTextTagDead, true);
    TriggerEnable(libCOMI_gt_CM_DehakaDenReviveEatTextTagRevived, true);
    TriggerEnable(libCOMI_gt_CM_DehakaDenReviveEatUsed, true);
    TriggerEnable(libCOMI_gt_CM_DehakaBossFacingSetting, true);
    TriggerEnable(libCOMI_gt_CM_DehakaMutaliskReviveCooldownOn, true);
    TriggerEnable(libCOMI_gt_CM_DehakaMammothBreathLookAtStart, true);
    TriggerEnable(libCOMI_gt_CM_DehakaMammothBreathLookAtStop, true);
    TriggerEnable(libCOMI_gt_CM_DehakaConsumeExecuted, true);
    TriggerEnable(libCOMI_gt_CM_DehakaConsumeDetachFailSafe, true);
    TriggerEnable(libCOMI_gt_CM_DehakaConsumeLaunchFailSafe, true);
    TriggerEnable(libCOMI_gt_CM_DehakaConsumeEffectHeroic, true);
    TriggerEnable(libCOMI_gt_CM_DehakaConsumeLearnLevel2, true);
    TriggerEnable(libCOMI_gt_CM_DehakaConsumeLearnLevel3, true);
    TriggerEnable(libCOMI_gt_CM_DehakaLearn, true);
    TriggerEnable(libCOMI_gt_CM_DehakaPackLeaderGlevigBuilt, true);
    TriggerEnable(libCOMI_gt_CM_DehakaPackLeaderMurvarBuilt, true);
    TriggerEnable(libCOMI_gt_CM_DehakaPackLeaderDakrunBuilt, true);
    TriggerEnable(libCOMI_gt_CM_DehakaReviveGasWorkerBehaviorAdd, true);
    TriggerEnable(libCOMI_gt_CM_DehakaReviveGasWorkerBehaviorRemove, true);
    TriggerEnable(libCOMI_gt_CM_DehakaReviveEatButtonClicked, true);
    TriggerEnable(libCOMI_gt_CM_DehakaReviveTimerAdjustments, true);
    TriggerEnable(libCOMI_gt_CM_DehakaLeapRadiusReference_DataInit, true);
    TriggerEnable(libCOMI_gt_CM_DehakaGlevigTimerAdjustments, true);
    TriggerEnable(libCOMI_gt_CM_DehakaConsumeTimeStopHackOn, true);
    TriggerEnable(libCOMI_gt_CM_DehakaGeneThornsOn, true);
    TriggerEnable(libCOMI_gt_BanelingScourgeEssenceDrop, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Dehaka_TriggersInit_Init () {
    libCOMI_gt_CM_Dehaka_TriggersInit = TriggerCreate("libCOMI_gt_CM_Dehaka_TriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka_EssenceDrop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Dehaka_EssenceDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_essenceUnitCount;
    int lv_essenceBaseAmount;
    int lv_essenceCasualMultiplier;
    int lv_essenceNormalMultiplier;
    fixed lv_essenceHardMultiplier;
    int lv_essenceBrutalMultiplier;
    int lv_dyingUnitSupply;
    int lv_dehakaPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_essenceCasualMultiplier = 2;
    lv_essenceNormalMultiplier = 2;
    lv_essenceHardMultiplier = 1.5;
    lv_essenceBrutalMultiplier = 1;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(libNtve_gf_KillingPlayer()), EventPlayer()) == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "NoBiomassDrop") == false))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMU_gf_CT_UnitSpawnedByMutator(EventUnit()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dehakaPlayer = libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ZergDehaka", libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(libNtve_gf_KillingPlayer()));
    if ((lv_dehakaPlayer == c_playerAny)) {
        return true;
    }

    lv_dyingUnitSupply = FixedToInt(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0)));
    if (((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true) || (UnitHasBehavior2(EventUnit(), "CritterExplode") == true))) {
        lv_essenceBaseAmount = 1;
    }
    else if ((UnitHasBehavior2(EventUnit(), "HybridUnitDummy") == true)) {
        lv_essenceBaseAmount = 12;
    }
    else if ((lv_dyingUnitSupply == -1)) {
        lv_essenceBaseAmount = 2;
    }
    else if ((lv_dyingUnitSupply == -2)) {
        lv_essenceBaseAmount = 4;
    }
    else if ((lv_dyingUnitSupply == -3)) {
        lv_essenceBaseAmount = 6;
    }
    else if ((lv_dyingUnitSupply == -4)) {
        lv_essenceBaseAmount = 8;
    }
    else if ((lv_dyingUnitSupply < -4)) {
        lv_essenceBaseAmount = 12;
    }
    lv_essenceUnitCount = libNtve_gf_DifficultyValueInt((lv_essenceBaseAmount * lv_essenceCasualMultiplier), (lv_essenceBaseAmount * lv_essenceNormalMultiplier), FixedToInt(Ceiling((lv_essenceBaseAmount * lv_essenceHardMultiplier))), (lv_essenceBaseAmount * lv_essenceBrutalMultiplier));
    if ((lv_essenceUnitCount > 0)) {
        libCOMI_gv_cM_DebugDehakaEssenceDroppedNormal += lv_essenceUnitCount;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "EssencePickup", c_unitCreateIgnorePlacement, lv_dehakaPlayer, UnitGetPosition(EventUnit()));
        libCOMI_gf_CM_Dehaka_EssenceSetStack(UnitLastCreated(), lv_essenceUnitCount);
        UnitBehaviorRemove(UnitLastCreated(), "EssenceCreated", 1);
        libCOMI_gf_CM_Dehaka_EssenceScale(UnitLastCreated(), true);
        libCOMI_gf_CM_Dehaka_EssenceMerge(UnitLastCreated(), lv_essenceUnitCount);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Dehaka_EssenceDrop_Init () {
    libCOMI_gt_CM_Dehaka_EssenceDrop = TriggerCreate("libCOMI_gt_CM_Dehaka_EssenceDrop_Func");
    TriggerEnable(libCOMI_gt_CM_Dehaka_EssenceDrop, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_Dehaka_EssenceDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka_EssencePickup
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Dehaka_EssencePickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_val;
    fixed lv_period;
    fixed lv_addition;
    int lv_essenceCountStored;
    int lv_player;
    fixed lv_heal;
    fixed lv_extraLife;
    unit lv_dehaka;
    int lv_doublehealmastery;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_essenceCountStored = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 63));
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    lv_heal = (lv_essenceCountStored*libNtve_gf_CatalogReferenceGetAsReal("Effect,DehakaHealAmountPerEssenceDummy,Amount", lv_player));
    lv_extraLife = (lv_essenceCountStored*libNtve_gf_CatalogReferenceGetAsReal("Effect,DehakaMaxLifeAmountPerEssenceDummy,Amount", lv_player));
    lv_dehaka = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_doublehealmastery = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryDehakaDoubleHealEssenceDisplayDummy", "Amount", lv_player);

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_Dehaka_TotalEssence[lv_player] += lv_essenceCountStored;
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "EssenceTravelling", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "EssencePickupFullLM", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    CatalogFieldValueSet(c_gameCatalogEffect, "EssenceDehakaDummyStacks", "Amount", EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), FixedToString(libCOMI_gv_cM_Dehaka_TotalEssence[lv_player], c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DehakaAttEssenceUpdater", "Modification.AttributeChangeArray[" + IntToString(0) + "].Points", lv_player, FixedToString(libCOMI_gv_cM_Dehaka_TotalEssence[lv_player], c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DehakaAttEssenceUpdater", "Modification.AttributeChangeArray[" + IntToString(1) + "].Points", lv_player, FixedToString(libCOMI_gv_cM_Dehaka_TotalEssence[lv_player], c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "DehakaCoop", "LifeStart", EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), FixedToString(((libCOMI_gv_cM_Dehaka_TotalEssence[lv_player] * 0.75) + CatalogFieldValueGetAsInt(c_gameCatalogUnit, "DehakaCoop", "LifeMax", 0)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "DehakaCoop", "LifeMax", EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), FixedToString(((libCOMI_gv_cM_Dehaka_TotalEssence[lv_player] * 0.75) + CatalogFieldValueGetAsInt(c_gameCatalogUnit, "DehakaCoop", "LifeMax", 0)), c_fixedPrecisionAny));
    UnitXPAddXP(libCOMI_gv_cM_HeroUnit[lv_player], libCOMI_gv_cM_DehakaVeterencyBehavior[lv_player], lv_essenceCountStored);
    libCOMI_gf_CM_Dehaka_LevelUp(lv_player, lv_dehaka);
    if ((RandomInt(1, 100) <= lv_doublehealmastery)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(""));
        UnitSetPropertyFixed(libCOMI_gv_cM_HeroUnit[lv_player], c_unitPropLife, (UnitGetPropertyFixed(libCOMI_gv_cM_HeroUnit[lv_player], c_unitPropLife, c_unitPropCurrent) + (lv_heal + lv_heal)));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(""));
        UnitSetPropertyFixed(libCOMI_gv_cM_HeroUnit[lv_player], c_unitPropLife, (UnitGetPropertyFixed(libCOMI_gv_cM_HeroUnit[lv_player], c_unitPropLife, c_unitPropCurrent) + lv_heal));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Dehaka_EssencePickup_Init () {
    libCOMI_gt_CM_Dehaka_EssencePickup = TriggerCreate("libCOMI_gt_CM_Dehaka_EssencePickup_Func");
    TriggerEnable(libCOMI_gt_CM_Dehaka_EssencePickup, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Dehaka_EssencePickup, c_playerAny, "EssencePickupDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka_EssenceManualUpdate
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Dehaka_EssenceManualUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_Dehaka_EssenceSetStack(EventPlayerEffectUsedUnit(c_effectUnitCaster), 25);
    libCOMI_gf_CM_Dehaka_EssenceScale(EventPlayerEffectUsedUnit(c_effectUnitCaster), true);
    libCOMI_gf_CM_Dehaka_EssenceMerge(EventPlayerEffectUsedUnit(c_effectUnitCaster), 25);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Dehaka_EssenceManualUpdate_Init () {
    libCOMI_gt_CM_Dehaka_EssenceManualUpdate = TriggerCreate("libCOMI_gt_CM_Dehaka_EssenceManualUpdate_Func");
    TriggerEnable(libCOMI_gt_CM_Dehaka_EssenceManualUpdate, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Dehaka_EssenceManualUpdate, c_playerAny, "EssenceCreatedDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka_LevelUp_Stage2_ColossusLegs
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Dehaka_LevelUp_Stage2_ColossusLegs_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DehakaCoop"))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(EventUnit(), null) >= 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "DehakaCoopStage2", 1);
    UnitBehaviorAdd(EventUnit(), "DehakaModelSwapStun", EventUnit(), 1);
    UnitBehaviorAdd(EventUnit(), "DehakaMassive", EventUnit(), 1);
    TechTreeUpgradeAddLevel(EventPlayer(), "DehakaColossusLegs", 1);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Dehaka_LevelUp_Stage2_ColossusLegs_Init () {
    libCOMI_gt_CM_Dehaka_LevelUp_Stage2_ColossusLegs = TriggerCreate("libCOMI_gt_CM_Dehaka_LevelUp_Stage2_ColossusLegs_Func");
    TriggerEnable(libCOMI_gt_CM_Dehaka_LevelUp_Stage2_ColossusLegs, false);
    TriggerAddEventUnitGainLevel(libCOMI_gt_CM_Dehaka_LevelUp_Stage2_ColossusLegs, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka_LevelUp_Stage3
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Dehaka_LevelUp_Stage3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DehakaCoop"))) {
            return false;
        }

        if (!((UnitXPGetCurrentLevel(EventUnit(), null) >= 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "DehakaCoopStage3", 1);
    UnitBehaviorAdd(EventUnit(), "DehakaCoopAirTargetable", EventUnit(), 1);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Dehaka_LevelUp_Stage3_Init () {
    libCOMI_gt_CM_Dehaka_LevelUp_Stage3 = TriggerCreate("libCOMI_gt_CM_Dehaka_LevelUp_Stage3_Func");
    TriggerEnable(libCOMI_gt_CM_Dehaka_LevelUp_Stage3, false);
    TriggerAddEventUnitGainLevel(libCOMI_gt_CM_Dehaka_LevelUp_Stage3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka_LevelUp_Stun_Off
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Dehaka_LevelUp_Stun_Off_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_HeroCanSpendSkillPoint(lv_u, "DehakaLearn") == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(lv_u), "HaloStart");
    }
    else {
        ActorSend(libNtve_gf_MainActorofUnit(lv_u), "HaloStop");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Dehaka_LevelUp_Stun_Off_Init () {
    libCOMI_gt_CM_Dehaka_LevelUp_Stun_Off = TriggerCreate("libCOMI_gt_CM_Dehaka_LevelUp_Stun_Off_Func");
    TriggerEnable(libCOMI_gt_CM_Dehaka_LevelUp_Stun_Off, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Dehaka_LevelUp_Stun_Off, null, "DehakaModelSwapStun", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Dehaka_UnitCostRefund
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Dehaka_UnitCostRefund_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropMinerals, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "CostResource[" + IntToString(0) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropVespene, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "CostResource[" + IntToString(1) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Dehaka_UnitCostRefund_Init () {
    libCOMI_gt_CM_Dehaka_UnitCostRefund = TriggerCreate("libCOMI_gt_CM_Dehaka_UnitCostRefund_Func");
    TriggerEnable(libCOMI_gt_CM_Dehaka_UnitCostRefund, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Dehaka_UnitCostRefund, c_playerAny, "DehakaTrainLM");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_AchievementCarrierAmount
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_AchievementCarrierAmount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Carrier"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_fenixAchievementCarrierAmount[lv_player] += 1;
    if ((libCOMI_gv_fenixAchievementCarrierAmount[lv_player] == 4) && (libCOMI_gv_fenixAchievementCarrierResearched[lv_player] == true) && (GameGetMissionTime() <= 600.0)) {
        AchievementAward(lv_player, "CommanderFenixCarrier");
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_AchievementCarrierAmount_Init () {
    libCOMI_gt_CM_Fenix_AchievementCarrierAmount = TriggerCreate("libCOMI_gt_CM_Fenix_AchievementCarrierAmount_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_AchievementCarrierAmount, false);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Fenix_AchievementCarrierAmount, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_AchievementCarrierResearched
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_AchievementCarrierResearched_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUpgrade() == "FenixChampionClolarionCarrier"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_fenixAchievementCarrierResearched[EventPlayer()] = true;
    if ((libCOMI_gv_fenixAchievementCarrierAmount[EventPlayer()] == 4) && (libCOMI_gv_fenixAchievementCarrierResearched[EventPlayer()] == true) && (GameGetMissionTime() <= 600.0)) {
        AchievementAward(EventPlayer(), "CommanderFenixCarrier");
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_AchievementCarrierResearched_Init () {
    libCOMI_gt_CM_Fenix_AchievementCarrierResearched = TriggerCreate("libCOMI_gt_CM_Fenix_AchievementCarrierResearched_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_AchievementCarrierResearched, false);
    TriggerAddEventUnitResearchProgress(libCOMI_gt_CM_Fenix_AchievementCarrierResearched, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_SentryNullShield
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_SentryNullShield_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0), "FenixSentryNullShieldReflect", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) - (EventUnitDamageAbsorbed() / 2.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_SentryNullShield_Init () {
    libCOMI_gt_CM_Fenix_SentryNullShield = TriggerCreate("libCOMI_gt_CM_Fenix_SentryNullShield_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_SentryNullShield, false);
    TriggerAddEventUnitDamageAbsorbed(libCOMI_gt_CM_Fenix_SentryNullShield, null, "SentryFenixNullShield");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_TaldarinDetonationStore
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_TaldarinDetonationStore_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageDone;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventUnitDamageSourcePlayer(), "FenixImmortalDetonationShot", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), EventUnitDamageSourcePlayer(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damageDone = EventUnitDamageAttempted();
    UnitSetCustomValue(EventUnit(), 62, (UnitGetCustomValue(EventUnit(), 62) + lv_damageDone));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_TaldarinDetonationStore_Init () {
    libCOMI_gt_CM_Fenix_TaldarinDetonationStore = TriggerCreate("libCOMI_gt_CM_Fenix_TaldarinDetonationStore_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_TaldarinDetonationStore, false);
    TriggerAddEventUnitDamaged(libCOMI_gt_CM_Fenix_TaldarinDetonationStore, null, c_unitDamageTypeAny, c_unitDamageEither, "FenixTaldarinImmortalPhaseDisruptors");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_TaldarinDetonationRelease
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_TaldarinDetonationRelease_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_amount;
    fixed lv_fraction;
    int lv_fenixPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "FenixImmortalDetonation") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_fenixPlayer = UnitBehaviorEffectPlayer(EventUnit(), "FenixImmortalDetonation", c_effectPlayerCaster, 0);
    lv_fraction = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "FenixTaldarinImmortalDetonationDummyFraction", "Amount", lv_fenixPlayer));
    lv_amount = (UnitGetCustomValue(EventUnit(), 62) * lv_fraction);
    CatalogFieldValueSet(c_gameCatalogEffect, "FenixImmortalDetonationDamage", "Amount", lv_fenixPlayer, FixedToString(lv_amount, c_fixedPrecisionAny));
    if ((UnitIsAlive(libCOMI_gv_cM_Fenix_ChampionUnit[4][lv_fenixPlayer]) == true)) {
        UnitCreateEffectPoint(libCOMI_gv_cM_Fenix_ChampionUnit[4][lv_fenixPlayer], "FenixImmortalDetonationSearchArea", UnitGetPosition(EventUnit()));
    }
    else {
        PlayerCreateEffectPoint(lv_fenixPlayer, "FenixImmortalDetonationSearchArea", UnitGetPosition(EventUnit()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_TaldarinDetonationRelease_Init () {
    libCOMI_gt_CM_Fenix_TaldarinDetonationRelease = TriggerCreate("libCOMI_gt_CM_Fenix_TaldarinDetonationRelease_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_TaldarinDetonationRelease, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_Fenix_TaldarinDetonationRelease, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_InitialDummySpawn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_InitialDummySpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto6C9E4F0A_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto6C9E4F0A_g = libCOOC_gf_CC_PlayersOfCommander("ProtossFenix");
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto6C9E4F0A_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FenixManaDummy1", c_unitCreateIgnorePlacement, lv_itPlayer, Point(0.0, 0.0));
        UnitGroupAdd(libCOMI_gv_cM_Fenix_DummyGroup[lv_itPlayer], UnitLastCreated());
        libCOMI_gv_cM_Fenix_Suits[1][lv_itPlayer] = UnitLastCreated();
        libCOUI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMI_gv_cM_Fenix_Suits[1][lv_itPlayer], lv_itPlayer, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FenixManaDummy2", c_unitCreateIgnorePlacement, lv_itPlayer, Point(0.0, 0.0));
        UnitGroupAdd(libCOMI_gv_cM_Fenix_DummyGroup[lv_itPlayer], UnitLastCreated());
        libCOMI_gv_cM_Fenix_Suits[2][lv_itPlayer] = UnitLastCreated();
        libCOUI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMI_gv_cM_Fenix_Suits[2][lv_itPlayer], lv_itPlayer, 2);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "FenixManaDummy3", c_unitCreateIgnorePlacement, lv_itPlayer, Point(0.0, 0.0));
        UnitGroupAdd(libCOMI_gv_cM_Fenix_DummyGroup[lv_itPlayer], UnitLastCreated());
        libCOMI_gv_cM_Fenix_Suits[3][lv_itPlayer] = UnitLastCreated();
        libCOUI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMI_gv_cM_Fenix_Suits[3][lv_itPlayer], lv_itPlayer, 3);
        libCOMI_gv_cM_Fenix_AbilCmdArray[1] = "SOASummonFenix";
        libCOMI_gv_cM_Fenix_AbilCmdArray[2] = "SOASummonFenixDragoon";
        libCOMI_gv_cM_Fenix_AbilCmdArray[3] = "SOASummonFenixArbiter";
        if ((TechTreeUpgradeCount(lv_itPlayer, "FenixOfflineSuitRegen", c_techCountCompleteOnly) == 1)) {
            libCOMI_gv_cM_Fenix_OfflineHealthRegen[lv_itPlayer] *= libCOMI_gv_cM_Fenix_OfflineVitalRegenMultiplier;
            libCOMI_gv_cM_Fenix_OfflineShieldRegen[lv_itPlayer] *= libCOMI_gv_cM_Fenix_OfflineVitalRegenMultiplier;
        }

        libCOMI_gv_cM_Fenix_OfflineEnergyRegen[lv_itPlayer] *= ((TechTreeUpgradeCount(lv_itPlayer, "MasteryFenixSuitEnergyRegen", c_techCountCompleteOnly) / 100.0) + 1.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_InitialDummySpawn_Init () {
    libCOMI_gt_CM_Fenix_InitialDummySpawn = TriggerCreate("libCOMI_gt_CM_Fenix_InitialDummySpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_HeroSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_HeroSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_kills;
    unit lv_fenixUnitNew;
    int lv_fenixPlayer;
    unit lv_fenixUnitOld;
    bool lv_selected;
    bool lv_activedSubGroupSelected;
    unitgroup lv_fenixPlayerSelectionGroup;
    unitgroup lv_fenixPlayerActivedSubGroup;

    // Automatic Variable Declarations
    unitgroup auto0DA865BB_g;
    int auto0DA865BB_u;
    unit auto0DA865BB_var;
    string auto057CC64D_val;
    const int auto97938278_ae = 3;
    const int auto97938278_ai = 1;
    const int autoCED00EAD_ae = 3;
    const int autoCED00EAD_ai = 1;
    const int autoCD058B6B_ae = 3;
    const int autoCD058B6B_ai = 1;

    // Variable Initialization
    lv_fenixUnitNew = EventUnitCreatedUnit();
    lv_fenixPlayer = UnitGetOwner(lv_fenixUnitNew);
    lv_fenixUnitOld = libCOMI_gv_cM_Fenix_ActiveHero[lv_fenixPlayer];
    lv_fenixPlayerSelectionGroup = UnitGroupSelected(lv_fenixPlayer);
    lv_fenixPlayerActivedSubGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMI_gv_cM_Fenix_HeroGroup[lv_fenixPlayer], EventUnitCreatedUnit());
    if ((libCOMI_gv_cM_Fenix_KilledSelf[UnitGetOwner(EventUnit())] == false)) {
        UnitBehaviorAdd(lv_fenixUnitNew, "FenixExplode", lv_fenixUnitNew, 1);
    }

    libCOMI_gv_cM_Fenix_ActiveHero[lv_fenixPlayer] = lv_fenixUnitNew;
    UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropEnergyRegen, 0.0);
    libCOMI_gv_cM_Fenix_ActiveHero_Abil[lv_fenixPlayer] = EventUnitCreatedAbil();
    auto0DA865BB_g = libCOMI_gv_cM_Fenix_HeroGroup[lv_fenixPlayer];
    auto0DA865BB_u = UnitGroupCount(auto0DA865BB_g, c_unitCountAll);
    for (;; auto0DA865BB_u -= 1) {
        auto0DA865BB_var = UnitGroupUnitFromEnd(auto0DA865BB_g, auto0DA865BB_u);
        if (auto0DA865BB_var == null) { break; }
        if ((UnitIsAlive(auto0DA865BB_var) == true)) {
            lv_kills += libNtve_gf_UnitGetPropertyKills(auto0DA865BB_var, c_unitPropCurrent);
        }

    }
    if ((lv_kills > 0)) {
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropKills, lv_kills);
        libCOMI_gv_cM_Fenix_KillCount[UnitGetOwner(EventUnit())] = lv_kills;
    }
    else {
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropKills, libCOMI_gv_cM_Fenix_KillCount[UnitGetOwner(EventUnit())]);
    }
    DialogControlSetVisible(libCOUI_gv_cU_GPCmdButtonActiveImage[1][UnitGetOwner(lv_fenixUnitNew)], PlayerGroupSingle(UnitGetOwner(lv_fenixUnitNew)), false);
    DialogControlSetVisible(libCOUI_gv_cU_GPCmdButtonActiveImage[2][UnitGetOwner(lv_fenixUnitNew)], PlayerGroupSingle(UnitGetOwner(lv_fenixUnitNew)), false);
    DialogControlSetVisible(libCOUI_gv_cU_GPCmdButtonActiveImage[3][UnitGetOwner(lv_fenixUnitNew)], PlayerGroupSingle(UnitGetOwner(lv_fenixUnitNew)), false);
    auto057CC64D_val = UnitGetType(EventUnitCreatedUnit());
    if (auto057CC64D_val == "FenixCoop") {
        libCOMI_gv_cM_Fenix_ActiveHero_Slot[lv_fenixPlayer] = 1;
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropLife, UnitGetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[1][lv_fenixPlayer], c_unitPropLife, c_unitPropCurrent));
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropShields, UnitGetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[1][lv_fenixPlayer], c_unitPropShields, c_unitPropCurrent));
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropEnergy, UnitGetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[1][lv_fenixPlayer], c_unitPropEnergy, c_unitPropCurrent));
        libCOUI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMI_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], UnitGetOwner(EventUnitCreatedUnit()), 1);
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOUI_gv_cU_GPCutscene[lv_fenixPlayer]), "WorkStart");
        lv_i = 1;
        for ( ; ( (auto97938278_ai >= 0 && lv_i <= auto97938278_ae) || (auto97938278_ai < 0 && lv_i >= auto97938278_ae) ) ; lv_i += auto97938278_ai ) {
            if (((PlayerGetCooldown(lv_fenixPlayer, (libCOMI_gv_cM_Fenix_AbilCmdArray[lv_i])) <= 0.0) && ((libCOMI_gv_cM_Fenix_AbilCmdArray[lv_i]) != (libCOMI_gv_cM_Fenix_ActiveHero_Abil[lv_fenixPlayer])))) {
                PlayerAddCooldown(lv_fenixPlayer, (libCOMI_gv_cM_Fenix_AbilCmdArray[lv_i]), libCOMI_gv_cM_Fenix_SuitSwapCooldown);
            }

        }
    }
    else if (auto057CC64D_val == "FenixDragoon") {
        libCOMI_gv_cM_Fenix_ActiveHero_Slot[lv_fenixPlayer] = 2;
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropLife, UnitGetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[2][lv_fenixPlayer], c_unitPropLife, c_unitPropCurrent));
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropShields, UnitGetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[2][lv_fenixPlayer], c_unitPropShields, c_unitPropCurrent));
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropEnergy, UnitGetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[2][lv_fenixPlayer], c_unitPropEnergy, c_unitPropCurrent));
        libCOUI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMI_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], UnitGetOwner(lv_fenixUnitNew), 2);
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOUI_gv_cU_GPCutscene[UnitGetOwner(lv_fenixUnitNew)]), "WorkStart");
        lv_i = 1;
        for ( ; ( (autoCED00EAD_ai >= 0 && lv_i <= autoCED00EAD_ae) || (autoCED00EAD_ai < 0 && lv_i >= autoCED00EAD_ae) ) ; lv_i += autoCED00EAD_ai ) {
            if (((PlayerGetCooldown(lv_fenixPlayer, (libCOMI_gv_cM_Fenix_AbilCmdArray[lv_i])) <= 0.0) && ((libCOMI_gv_cM_Fenix_AbilCmdArray[lv_i]) != (libCOMI_gv_cM_Fenix_ActiveHero_Abil[lv_fenixPlayer])))) {
                PlayerAddCooldown(lv_fenixPlayer, (libCOMI_gv_cM_Fenix_AbilCmdArray[lv_i]), libCOMI_gv_cM_Fenix_SuitSwapCooldown);
            }

        }
    }
    else if (auto057CC64D_val == "FenixArbiter") {
        libCOMI_gv_cM_Fenix_ActiveHero_Slot[lv_fenixPlayer] = 3;
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropLife, UnitGetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[3][lv_fenixPlayer], c_unitPropLife, c_unitPropCurrent));
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropShields, UnitGetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[3][lv_fenixPlayer], c_unitPropShields, c_unitPropCurrent));
        UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], c_unitPropEnergy, UnitGetPropertyFixed(libCOMI_gv_cM_Fenix_Suits[3][lv_fenixPlayer], c_unitPropEnergy, c_unitPropCurrent));
        libCOUI_gf_LinkUnitEnergyToGlobalCasterButton(libCOMI_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], UnitGetOwner(lv_fenixUnitNew), 3);
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOUI_gv_cU_GPCutscene[lv_fenixPlayer]), "WorkStart");
        lv_i = 1;
        for ( ; ( (autoCD058B6B_ai >= 0 && lv_i <= autoCD058B6B_ae) || (autoCD058B6B_ai < 0 && lv_i >= autoCD058B6B_ae) ) ; lv_i += autoCD058B6B_ai ) {
            if (((PlayerGetCooldown(lv_fenixPlayer, (libCOMI_gv_cM_Fenix_AbilCmdArray[lv_i])) <= 0.0) && ((libCOMI_gv_cM_Fenix_AbilCmdArray[lv_i]) != (libCOMI_gv_cM_Fenix_ActiveHero_Abil[lv_fenixPlayer])))) {
                PlayerAddCooldown(lv_fenixPlayer, (libCOMI_gv_cM_Fenix_AbilCmdArray[lv_i]), libCOMI_gv_cM_Fenix_SuitSwapCooldown);
            }

        }
    }
    else {
    }
    libCOMI_gf_CM_Fenix_SetActiveHeroUIState(EventUnitCreatedUnit(), true);
    libCOUI_gf_SetHeroPanelUnit(libCOMI_gv_cMC_Fenix_HeroIndex, EventUnitCreatedUnit(), UnitGetOwner(EventUnitCreatedUnit()));
    libCOMI_gf_CM_Fenix_SetActiveHeroRally(EventUnitCreatedUnit());
    libCOMI_gf_TransferGuardianShell(lv_fenixUnitOld, lv_fenixUnitNew);
    UnitCreateEffectUnit(lv_fenixUnitNew, "CopyTargetSelectionAndControlGroups", lv_fenixUnitOld);
    if ((UnitGroupCount(lv_fenixPlayerSelectionGroup, c_unitCountAlive) > 0)) {
        lv_fenixPlayerActivedSubGroup = UnitSubgroupSelected(lv_fenixPlayer);
        lv_selected = UnitIsSelected(lv_fenixUnitOld, lv_fenixPlayer);
        lv_activedSubGroupSelected = UnitGroupHasUnit(lv_fenixPlayerActivedSubGroup, lv_fenixUnitOld);
    }

    UnitSelect(libCOMI_gv_cM_Fenix_ActiveHero[lv_fenixPlayer], lv_fenixPlayer, false);
    if ((lv_selected == true)) {
        UnitGroupRemove(lv_fenixPlayerSelectionGroup, lv_fenixUnitOld);
        UnitGroupRemove(lv_fenixPlayerActivedSubGroup, lv_fenixUnitOld);
        UnitGroupAdd(lv_fenixPlayerSelectionGroup, lv_fenixUnitNew);
        if ((lv_activedSubGroupSelected == true)) {
            UnitGroupAdd(lv_fenixPlayerActivedSubGroup, lv_fenixUnitNew);
        }

        UnitClearSelection(lv_fenixPlayer);
        Wait(0.0625, c_timeGame);
        UnitGroupSelect(lv_fenixPlayerActivedSubGroup, lv_fenixPlayer, true);
        UnitGroupSelect(lv_fenixPlayerSelectionGroup, lv_fenixPlayer, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_HeroSpawn_Init () {
    libCOMI_gt_CM_Fenix_HeroSpawn = TriggerCreate("libCOMI_gt_CM_Fenix_HeroSpawn_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_HeroSpawn, false);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Fenix_HeroSpawn, null, "SOASummonFenix", null);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Fenix_HeroSpawn, null, "SOASummonFenixArbiter", null);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Fenix_HeroSpawn, null, "SOASummonFenixDragoon", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_HeroSpawnCleanup
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_HeroSpawnCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    unitgroup auto61952558_g;
    int auto61952558_u;
    unit auto61952558_var;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    auto61952558_g = libCOMI_gv_cM_Fenix_HeroGroup[lv_player];
    auto61952558_u = UnitGroupCount(auto61952558_g, c_unitCountAll);
    for (;; auto61952558_u -= 1) {
        auto61952558_var = UnitGroupUnitFromEnd(auto61952558_g, auto61952558_u);
        if (auto61952558_var == null) { break; }
        if (((auto61952558_var != libCOMI_gv_cM_Fenix_ActiveHero[lv_player]))) {
            libCOMI_gf_CM_Fenix_VitalMatch(auto61952558_var);
            UnitBehaviorAddPlayer(auto61952558_var, "SOASummonFenixWarpOutAnimation", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), 1);
            Wait(0.67, c_timeGame);
            UnitRemove(auto61952558_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_HeroSpawnCleanup_Init () {
    libCOMI_gt_CM_Fenix_HeroSpawnCleanup = TriggerCreate("libCOMI_gt_CM_Fenix_HeroSpawnCleanup_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_HeroSpawnCleanup, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Fenix_HeroSpawnCleanup, c_playerAny, "SOASummonFenixHeroSummonCleanupDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_HeroKilled
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_HeroKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_unitType;

    // Automatic Variable Declarations
    string auto735B6DBB_val;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());
    lv_unitType = UnitGetType(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libCOMI_gv_cM_Fenix_HeroGroup[lv_player], EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "FenixCoop")) {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(lv_player), libCOMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_COMI_FEB870A6"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        DialogControlSetVisible(libCOUI_gv_cU_GPCmdButtonActiveImage[1][lv_player], PlayerGroupSingle(lv_player), false);
    }

    if ((UnitGetType(EventUnit()) == "FenixDragoon")) {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(lv_player), libCOMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_COMI_7E24D489"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        DialogControlSetVisible(libCOUI_gv_cU_GPCmdButtonActiveImage[2][lv_player], PlayerGroupSingle(lv_player), false);
    }

    if ((UnitGetType(EventUnit()) == "FenixArbiter")) {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(lv_player), libCOMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_COMI_ACE8A237"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        DialogControlSetVisible(libCOUI_gv_cU_GPCmdButtonActiveImage[3][lv_player], PlayerGroupSingle(lv_player), false);
    }

    libCOMI_gf_CM_Fenix_VitalMatch(EventUnit());
    libCOMI_gv_cM_Fenix_KillCount[UnitGetOwner(EventUnit())] = libNtve_gf_UnitGetPropertyKills(EventUnit(), c_unitPropCurrent);
    UnitCreateEffectUnit(libCOMI_gv_cM_SoACasterUnit[EventPlayer()], "SOASummonFenixHeroSummonCasterBehaviorCleanup", libCOMI_gv_cM_SoACasterUnit[EventPlayer()]);
    libCOUI_gv_cU_HeroExists[UnitGetOwner(EventUnit())][libCOMI_gv_cMC_Fenix_HeroIndex] = false;
    if ((libNtve_gf_KillingUnit() == EventUnit()) && (libCOMI_gv_cM_Fenix_KilledSelf[lv_player] == false)) {
        libCOMI_gv_cM_Fenix_KilledSelf[lv_player] = true;
        libCOMI_gv_cM_Fenix_KillCount[lv_player] += 1;
        TechTreeBehaviorAllow(lv_player, "FenixExplode", false);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "AStrongHeart", 1);
        SoundChannelStop(PlayerGroupSingle(lv_player), c_soundCategoryVoice);
        auto735B6DBB_val = lv_unitType;
        if (auto735B6DBB_val == "FenixArbiter") {
            libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread(lv_player, AbilityCommand("SOASummonFenixArbiter", 0), EventUnitDamageSourcePoint());
        }
        else if (auto735B6DBB_val == "FenixCoop") {
            libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread(lv_player, AbilityCommand("SOASummonFenix", 0), EventUnitDamageSourcePoint());
        }
        else if (auto735B6DBB_val == "FenixDragoon") {
            libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread(lv_player, AbilityCommand("SOASummonFenixDragoon", 0), EventUnitDamageSourcePoint());
        }
        else {
            libCOMI_gf_CM_Fenix_SuicideRecallTalandarThread(lv_player, AbilityCommand("SOASummonFenix", 0), EventUnitDamageSourcePoint());
        }
    }
    else {
        PlayerAddCooldown(lv_player, (libCOMI_gv_cM_Fenix_ActiveHero_Abil[lv_player]), 180.0);
    }
    libCOMI_gv_cM_Fenix_ActiveHero_Abil[lv_player] = "";
    libCOMI_gf_CM_Fenix_SetActiveHeroUIState(EventUnit(), false);
    libCOUI_gf_CU_ShowHideHeroPanel(false, libCOMI_gv_cMC_Fenix_HeroIndex);
    CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOUI_gv_cU_GPCutscene[lv_player]), "WorkEnd");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_HeroKilled_Init () {
    libCOMI_gt_CM_Fenix_HeroKilled = TriggerCreate("libCOMI_gt_CM_Fenix_HeroKilled_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_HeroKilled, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_Fenix_HeroKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_SuicideUpdateVital
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_SuicideUpdateVital_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_Fenix_SuicideLife[EventPlayer()] = EventPlayerEffectUsedAmountFixed(c_effectAmountShieldsChanged, true);
    libCOMI_gv_cM_Fenix_SuicideShield[EventPlayer()] = EventPlayerEffectUsedAmountFixed(c_effectAmountLifeChanged, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_SuicideUpdateVital_Init () {
    libCOMI_gt_CM_Fenix_SuicideUpdateVital = TriggerCreate("libCOMI_gt_CM_Fenix_SuicideUpdateVital_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_SuicideUpdateVital, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Fenix_SuicideUpdateVital, c_playerAny, "FenixSuicide");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ResearchRemoveSuicide
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ResearchRemoveSuicide_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_Fenix_KilledSelf[lv_player] = true;
    UnitBehaviorRemove(libCOMI_gv_cM_Fenix_ActiveHero[lv_player], "FenixExplode", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ResearchRemoveSuicide_Init () {
    libCOMI_gt_CM_Fenix_ResearchRemoveSuicide = TriggerCreate("libCOMI_gt_CM_Fenix_ResearchRemoveSuicide_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ResearchRemoveSuicide, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Fenix_ResearchRemoveSuicide, null, AbilityCommand("ForgeResearch", 16), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_RallySetToFenix
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_RallySetToFenix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventUnitTargetUnit()) == true) && (EventUnitTargetUnit() == libCOMI_gv_cM_Fenix_ActiveHero[libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ProtossFenix", libCOOC_gf_CommanderPlayers())])) {
        UnitGroupAdd(libCOMI_gv_cM_Fenix_RalliedGroup, EventUnit());
    }
    else {
        UnitGroupRemove(libCOMI_gv_cM_Fenix_RalliedGroup, EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_RallySetToFenix_Init () {
    libCOMI_gt_CM_Fenix_RallySetToFenix = TriggerCreate("libCOMI_gt_CM_Fenix_RallySetToFenix_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_RallySetToFenix, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Fenix_RallySetToFenix, null, AbilityCommand("Rally", 0), c_abilRallyStagePlace, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ChampionInitialSetup
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ChampionInitialSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_Fenix_ChampionUnitType[1] = "FenixKaldalisZealot";
    libCOMI_gv_cM_Fenix_ChampionUnitType[2] = "FenixTalisAdept";
    libCOMI_gv_cM_Fenix_ChampionUnitType[3] = "FenixMojoScout";
    libCOMI_gv_cM_Fenix_ChampionUnitType[4] = "FenixTaldarinImmortal";
    libCOMI_gv_cM_Fenix_ChampionUnitType[5] = "FenixWarbringerColossus";
    libCOMI_gv_cM_Fenix_ChampionUnitType[6] = "FenixClolarionCarrier";
    libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[1] = "ZealotPurifier";
    libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[2] = "AdeptFenix";
    libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[3] = "Scout";
    libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[4] = "Immortal";
    libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[5] = "ColossusPurifier";
    libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[6] = "Carrier";
    libCOMI_gv_cM_Fenix_ChampionMorphAbil[1] = AbilityCommand("FenixKaldalisZealotMorph", 0);
    libCOMI_gv_cM_Fenix_ChampionMorphAbil[2] = AbilityCommand("FenixTalisAdeptMorph", 0);
    libCOMI_gv_cM_Fenix_ChampionMorphAbil[3] = AbilityCommand("FenixMojoScoutMorph", 0);
    libCOMI_gv_cM_Fenix_ChampionMorphAbil[4] = AbilityCommand("FenixTaldarinImmortalMorph", 0);
    libCOMI_gv_cM_Fenix_ChampionMorphAbil[5] = AbilityCommand("FenixWarbringerColossusMorph", 0);
    libCOMI_gv_cM_Fenix_ChampionMorphAbil[6] = AbilityCommand("FenixClolarionCarrierMorph", 0);
    libCOMI_gv_cM_Fenix_ChampionNetworkUpgrades[1] = "FenixNetworkedSuperiorityZealot";
    libCOMI_gv_cM_Fenix_ChampionNetworkUpgrades[2] = "FenixNetworkedSuperiorityAdept";
    libCOMI_gv_cM_Fenix_ChampionNetworkUpgrades[3] = "FenixNetworkedSuperiorityScout";
    libCOMI_gv_cM_Fenix_ChampionNetworkUpgrades[4] = "FenixNetworkedSuperiorityImmortal";
    libCOMI_gv_cM_Fenix_ChampionNetworkUpgrades[5] = "FenixNetworkedSuperiorityColossus";
    libCOMI_gv_cM_Fenix_ChampionNetworkUpgrades[6] = "FenixNetworkedSuperiorityCarrier";
    libCOMI_gv_cM_Fenix_ChampionShellCountEffects[1] = "FenixChampionShellCountZealot";
    libCOMI_gv_cM_Fenix_ChampionShellCountEffects[2] = "FenixChampionShellCountAdept";
    libCOMI_gv_cM_Fenix_ChampionShellCountEffects[3] = "FenixChampionShellCountScout";
    libCOMI_gv_cM_Fenix_ChampionShellCountEffects[4] = "FenixChampionShellCountImmortal";
    libCOMI_gv_cM_Fenix_ChampionShellCountEffects[5] = "FenixChampionShellCountColossus";
    libCOMI_gv_cM_Fenix_ChampionShellCountEffects[6] = "FenixChampionShellCountCarrier";
    libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBehaviors[1] = "FenixChampionSwapBoostZealot";
    libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBehaviors[2] = "FenixChampionSwapBoostAdept";
    libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBehaviors[3] = "FenixChampionSwapBoostScout";
    libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBehaviors[4] = "FenixChampionSwapBoostImmortal";
    libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBehaviors[5] = "FenixChampionSwapBoostColossus";
    libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBehaviors[6] = "FenixChampionSwapBoostCarrier";
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionBuildingReBuilt, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionUpgradeResearched, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionMorphed, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionDies, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_NetworkedUnitDies, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_ProbiusSwap, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_AvengingProtocol_BuffExpires, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ChampionInitialSetup_Init () {
    libCOMI_gt_CM_Fenix_ChampionInitialSetup = TriggerCreate("libCOMI_gt_CM_Fenix_ChampionInitialSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_Champion Potential Voluteer Trained
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_player;

    // Automatic Variable Declarations
    const int autoF8A13B7A_ae = libCOMI_gv_cMC_Fenix_ChampionCount;
    const int autoF8A13B7A_ai = 1;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(lv_player, "FenixCommander", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitCreatedUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[1]) || (UnitGetType(EventUnitCreatedUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[2]) || (UnitGetType(EventUnitCreatedUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[3]) || (UnitGetType(EventUnitCreatedUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[4]) || (UnitGetType(EventUnitCreatedUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[5]) || (UnitGetType(EventUnitCreatedUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventUnitCreatedAbil() == "WarpGateTrain") || (EventUnitCreatedAbil() == "StargateTrain"))) {
        Wait(5.0, c_timeGame);
    }

    if ((UnitIsAlive(EventUnitCreatedUnit()) == true)) {
        lv_i = 1;
        for ( ; ( (autoF8A13B7A_ai >= 0 && lv_i <= autoF8A13B7A_ae) || (autoF8A13B7A_ai < 0 && lv_i >= autoF8A13B7A_ae) ) ; lv_i += autoF8A13B7A_ai ) {
            if ((UnitGetType(EventUnitCreatedUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[lv_i])) {
                UnitGroupAdd(libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[lv_i][lv_player], EventUnitCreatedUnit());
                libCOMI_gf_CM_Fenix_UpdateNetworkValues(lv_i, UnitGetOwner(EventUnitCreatedUnit()));
                libCOMI_gf_CM_Fenix_UpdateFenixChampionShellCountValues(lv_i, UnitGetOwner(EventUnitCreatedUnit()));
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained_Init () {
    libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained = TriggerCreate("libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained, false);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained, null, "GatewayTrain", null);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained, null, "WarpGateTrain", null);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained, null, "StargateTrain", null);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained, null, "RoboticsFacilityTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_Champion Building ReBuilt
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ChampionBuildingReBuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "FenixAltarOfPsiStorms"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_Fenix_ChampionStructure[UnitGetOwner(EventUnitCreatedUnit())] = EventUnitCreatedUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ChampionBuildingReBuilt_Init () {
    libCOMI_gt_CM_Fenix_ChampionBuildingReBuilt = TriggerCreate("libCOMI_gt_CM_Fenix_ChampionBuildingReBuilt_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionBuildingReBuilt, false);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Fenix_ChampionBuildingReBuilt, null, "ProtossBuild", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_Champion Upgrade Researched
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ChampionUpgradeResearched_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    string auto012E2DC1_val;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    auto012E2DC1_val = libNtve_gf_TriggeringProgressUpgrade();
    if (auto012E2DC1_val == "FenixChampionKaldalisZealot") {
        libCOMI_gv_cM_Fenix_ChampionAvailable[1][lv_player] = true;
        TriggerEnable(libCOMI_gt_CM_Fenix_ChampionTimers, true);
        TriggerEnable(libCOMI_gt_CM_Fenix_NetworkedUnitDies, true);
    }
    else if (auto012E2DC1_val == "FenixChampionTalisAdept") {
        libCOMI_gv_cM_Fenix_ChampionAvailable[2][lv_player] = true;
        TriggerEnable(libCOMI_gt_CM_Fenix_ChampionTimers, true);
        TriggerEnable(libCOMI_gt_CM_Fenix_NetworkedUnitDies, true);
    }
    else if (auto012E2DC1_val == "FenixChampionMojoScout") {
        libCOMI_gv_cM_Fenix_ChampionAvailable[3][lv_player] = true;
        TriggerEnable(libCOMI_gt_CM_Fenix_ChampionTimers, true);
        TriggerEnable(libCOMI_gt_CM_Fenix_NetworkedUnitDies, true);
    }
    else if (auto012E2DC1_val == "FenixChampionTaldarinImmortal") {
        libCOMI_gv_cM_Fenix_ChampionAvailable[4][lv_player] = true;
        TriggerEnable(libCOMI_gt_CM_Fenix_ChampionTimers, true);
        TriggerEnable(libCOMI_gt_CM_Fenix_NetworkedUnitDies, true);
    }
    else if (auto012E2DC1_val == "FenixChampionWarbringerColossus") {
        libCOMI_gv_cM_Fenix_ChampionAvailable[5][lv_player] = true;
        TriggerEnable(libCOMI_gt_CM_Fenix_ChampionTimers, true);
        TriggerEnable(libCOMI_gt_CM_Fenix_NetworkedUnitDies, true);
    }
    else if (auto012E2DC1_val == "FenixChampionClolarionCarrier") {
        libCOMI_gv_cM_Fenix_ChampionAvailable[6][lv_player] = true;
        TriggerEnable(libCOMI_gt_CM_Fenix_ChampionTimers, true);
        TriggerEnable(libCOMI_gt_CM_Fenix_NetworkedUnitDies, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ChampionUpgradeResearched_Init () {
    libCOMI_gt_CM_Fenix_ChampionUpgradeResearched = TriggerCreate("libCOMI_gt_CM_Fenix_ChampionUpgradeResearched_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionUpgradeResearched, false);
    TriggerAddEventUnitResearchProgress(libCOMI_gt_CM_Fenix_ChampionUpgradeResearched, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_Champion Timers
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ChampionTimers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_volunteer;
    int lv_i;
    fixed lv_foundUnitRange;
    unit lv_foundUnit;
    int lv_itPlayerFenix;

    // Automatic Variable Declarations
    playergroup auto4D45DA5F_g;
    const int auto795BEB7B_ae = libCOMI_gv_cMC_Fenix_ChampionCount;
    const int auto795BEB7B_ai = 1;
    const int auto21F69CB8_ae = libCOMI_gv_cMC_Fenix_ChampionCount;
    const int auto21F69CB8_ai = 1;
    unitgroup autoC93D1DB5_g;
    int autoC93D1DB5_u;
    unit autoC93D1DB5_var;

    // Variable Initialization
    lv_foundUnitRange = 500.0;

    // Actions
    if (!runActions) {
        return true;
    }

    auto4D45DA5F_g = libCOOC_gf_CC_PlayersOfCommander("ProtossFenix");
    lv_itPlayerFenix = -1;
    while (true) {
        lv_itPlayerFenix = PlayerGroupNextPlayer(auto4D45DA5F_g, lv_itPlayerFenix);
        if (lv_itPlayerFenix < 0) { break; }
        lv_i = 1;
        for ( ; ( (auto795BEB7B_ai >= 0 && lv_i <= auto795BEB7B_ae) || (auto795BEB7B_ai < 0 && lv_i >= auto795BEB7B_ae) ) ; lv_i += auto795BEB7B_ai ) {
            libCOMI_gv_cM_Fenix_ChampionRespawnTimer[lv_i][lv_itPlayerFenix] -= 1.0;
        }
        if (((UnitIsAlive(libCOMI_gv_cM_Fenix_ChampionStructure[lv_itPlayerFenix]) == true) && (UnitGetType(libCOMI_gv_cM_Fenix_ChampionStructure[lv_itPlayerFenix]) == "FenixAltarOfPsiStorms"))) {
            lv_i = 1;
            for ( ; ( (auto21F69CB8_ai >= 0 && lv_i <= auto21F69CB8_ae) || (auto21F69CB8_ai < 0 && lv_i >= auto21F69CB8_ae) ) ; lv_i += auto21F69CB8_ai ) {
                if (((libCOMI_gv_cM_Fenix_ChampionAvailable[lv_i][lv_itPlayerFenix] == true) && (UnitIsAlive(libCOMI_gv_cM_Fenix_ChampionUnit[lv_i][lv_itPlayerFenix]) == false) && (libCOMI_gv_cM_Fenix_ChampionRespawnTimer[lv_i][lv_itPlayerFenix] <= 0.0))) {
                    lv_volunteer = null;
                    autoC93D1DB5_g = libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[lv_i][lv_itPlayerFenix];
                    autoC93D1DB5_u = UnitGroupCount(autoC93D1DB5_g, c_unitCountAll);
                    for (;; autoC93D1DB5_u -= 1) {
                        autoC93D1DB5_var = UnitGroupUnitFromEnd(autoC93D1DB5_g, autoC93D1DB5_u);
                        if (autoC93D1DB5_var == null) { break; }
                        if ((UnitIsAlive(autoC93D1DB5_var) == true) && (DistanceBetweenPoints(UnitGetPosition(autoC93D1DB5_var), libCOMI_gv_cM_Fenix_ChampionDeathPosition[lv_i][lv_itPlayerFenix]) < lv_foundUnitRange)) {
                            lv_volunteer = autoC93D1DB5_var;
                            lv_foundUnitRange = DistanceBetweenPoints(UnitGetPosition(autoC93D1DB5_var), libCOMI_gv_cM_Fenix_ChampionDeathPosition[lv_i][lv_itPlayerFenix]);
                        }

                    }
                    if ((lv_volunteer != null)) {
                        UnitIssueOrder(lv_volunteer, Order(libCOMI_gv_cM_Fenix_ChampionMorphAbil[lv_i]), c_orderQueueAddToFront);
                    }

                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ChampionTimers_Init () {
    libCOMI_gt_CM_Fenix_ChampionTimers = TriggerCreate("libCOMI_gt_CM_Fenix_ChampionTimers_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionTimers, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_CM_Fenix_ChampionTimers, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ChampionMorphed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ChampionMorphed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_player;
    unit lv_newChampion;

    // Automatic Variable Declarations
    const int autoCA982A4A_ae = libCOMI_gv_cMC_Fenix_ChampionCount;
    const int autoCA982A4A_ai = 1;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_newChampion = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoCA982A4A_ai >= 0 && lv_i <= autoCA982A4A_ae) || (autoCA982A4A_ai < 0 && lv_i >= autoCA982A4A_ae) ) ; lv_i += autoCA982A4A_ai ) {
        if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == libCOMI_gv_cM_Fenix_ChampionUnitType[lv_i])) {
            PlayerCreateEffectPoint(UnitGetOwner(libCOMI_gv_cM_Fenix_ChampionStructure[lv_player]), "FenixChampionSwapLaunch", UnitGetPosition(libCOMI_gv_cM_Fenix_ChampionStructure[lv_player]));
            UnitCreateEffectUnit(lv_newChampion, "CopyTargetSelectionAndControlGroups", libCOMI_gv_cM_Fenix_ChampionUnit[lv_i][lv_player]);
            if ((UnitIsAlive(libCOMI_gv_cM_Fenix_ChampionUnit[lv_i][lv_player]) == false)) {
                UnitRemove(libCOMI_gv_cM_Fenix_ChampionUnit[lv_i][lv_player]);
            }

            libCOMI_gv_cM_Fenix_ChampionUnit[lv_i][lv_player] = lv_newChampion;
            UnitSetPropertyFixed(libCOMI_gv_cM_Fenix_ChampionUnit[lv_i][lv_player], c_unitPropKills, libCOMI_gv_cM_Fenix_ChampionKills[lv_i][lv_player]);
            libCOMI_gf_CM_Fenix_AvengingProtocol(lv_i, lv_player, 5);
            UnitGroupRemove(libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[lv_i][lv_player], lv_newChampion);
            libCOMI_gf_CM_Fenix_UpdateNetworkValues(lv_i, UnitGetOwner(lv_newChampion));
            libCOMI_gf_CM_Fenix_UpdateFenixChampionShellCountValues(lv_i, UnitGetOwner(lv_newChampion));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ChampionMorphed_Init () {
    libCOMI_gt_CM_Fenix_ChampionMorphed = TriggerCreate("libCOMI_gt_CM_Fenix_ChampionMorphed_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionMorphed, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Fenix_ChampionMorphed, c_playerAny, "FenixChampionSwapImpactUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ChampionDies
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ChampionDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadChampion;
    int lv_player;

    // Automatic Variable Declarations
    string auto391C7C17_val;

    // Variable Initialization
    lv_deadChampion = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_deadChampion);

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerCreateEffectPoint(UnitGetOwner(lv_deadChampion), "FenixChampionSwapLaunch", UnitGetPosition(lv_deadChampion));
    auto391C7C17_val = UnitGetType(lv_deadChampion);
    if (auto391C7C17_val == libCOMI_gv_cM_Fenix_ChampionUnitType[1]) {
        libCOMI_gv_cM_Fenix_ChampionRespawnTimer[1][lv_player] = 1.0;
        libCOMI_gv_cM_Fenix_ChampionKills[1][lv_player] = libNtve_gf_UnitGetPropertyKills(lv_deadChampion, c_unitPropCurrent);
        libCOMI_gv_cM_Fenix_ChampionDeathPosition[1][lv_player] = UnitGetPosition(lv_deadChampion);
    }
    else if (auto391C7C17_val == libCOMI_gv_cM_Fenix_ChampionUnitType[2]) {
        libCOMI_gv_cM_Fenix_ChampionRespawnTimer[2][lv_player] = 1.0;
        libCOMI_gv_cM_Fenix_ChampionKills[2][lv_player] = libNtve_gf_UnitGetPropertyKills(lv_deadChampion, c_unitPropCurrent);
        libCOMI_gv_cM_Fenix_ChampionDeathPosition[2][lv_player] = UnitGetPosition(lv_deadChampion);
    }
    else if (auto391C7C17_val == libCOMI_gv_cM_Fenix_ChampionUnitType[3]) {
        libCOMI_gv_cM_Fenix_ChampionRespawnTimer[3][lv_player] = 1.0;
        libCOMI_gv_cM_Fenix_ChampionKills[3][lv_player] = libNtve_gf_UnitGetPropertyKills(lv_deadChampion, c_unitPropCurrent);
        libCOMI_gv_cM_Fenix_ChampionDeathPosition[3][lv_player] = UnitGetPosition(lv_deadChampion);
    }
    else if (auto391C7C17_val == libCOMI_gv_cM_Fenix_ChampionUnitType[4]) {
        libCOMI_gv_cM_Fenix_ChampionRespawnTimer[4][lv_player] = 1.0;
        libCOMI_gv_cM_Fenix_ChampionKills[4][lv_player] = libNtve_gf_UnitGetPropertyKills(lv_deadChampion, c_unitPropCurrent);
        libCOMI_gv_cM_Fenix_ChampionDeathPosition[4][lv_player] = UnitGetPosition(lv_deadChampion);
    }
    else if (auto391C7C17_val == libCOMI_gv_cM_Fenix_ChampionUnitType[5]) {
        libCOMI_gv_cM_Fenix_ChampionRespawnTimer[5][lv_player] = 1.0;
        libCOMI_gv_cM_Fenix_ChampionKills[5][lv_player] = libNtve_gf_UnitGetPropertyKills(lv_deadChampion, c_unitPropCurrent);
        libCOMI_gv_cM_Fenix_ChampionDeathPosition[5][lv_player] = UnitGetPosition(lv_deadChampion);
    }
    else if (auto391C7C17_val == libCOMI_gv_cM_Fenix_ChampionUnitType[6]) {
        libCOMI_gv_cM_Fenix_ChampionRespawnTimer[6][lv_player] = 1.0;
        libCOMI_gv_cM_Fenix_ChampionKills[6][lv_player] = libNtve_gf_UnitGetPropertyKills(lv_deadChampion, c_unitPropCurrent);
        libCOMI_gv_cM_Fenix_ChampionDeathPosition[6][lv_player] = UnitGetPosition(lv_deadChampion);
    }
    else {
    }
    if ((UnitIsAlive(libCOMI_gv_cM_Fenix_ChampionStructure[lv_player]) == true)) {
        PlayerCreateEffectPoint(UnitGetOwner(libCOMI_gv_cM_Fenix_ChampionStructure[lv_player]), "FenixChampionSwapImpact", UnitGetPosition(libCOMI_gv_cM_Fenix_ChampionStructure[lv_player]));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ChampionDies_Init () {
    libCOMI_gt_CM_Fenix_ChampionDies = TriggerCreate("libCOMI_gt_CM_Fenix_ChampionDies_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionDies, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Fenix_ChampionDies, c_playerAny, "FenixAIChampionDeathEvent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_NetworkedUnitDies
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_NetworkedUnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_avengingprotocolindex;
    int lv_avengingprotocolstacks;

    // Automatic Variable Declarations
    string auto0E65C66C_val;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!(((PlayerCommander(lv_player) == "Fenix") && ((UnitGetType(EventUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[1]) || (UnitGetType(EventUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[2]) || (UnitGetType(EventUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[3]) || (UnitGetType(EventUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[4]) || (UnitGetType(EventUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[5]) || (UnitGetType(EventUnit()) == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[6]))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0E65C66C_val = UnitGetType(EventUnit());
    if (auto0E65C66C_val == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[1]) {
        UnitGroupRemove(libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[1][lv_player], EventUnit());
        libCOMI_gf_CM_Fenix_UpdateNetworkValues(1, lv_player);
        libCOMI_gf_CM_Fenix_UpdateFenixChampionShellCountValues(1, lv_player);
        lv_avengingprotocolindex = 1;
        lv_avengingprotocolstacks = 3;
    }
    else if (auto0E65C66C_val == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[2]) {
        UnitGroupRemove(libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[2][lv_player], EventUnit());
        libCOMI_gf_CM_Fenix_UpdateNetworkValues(2, lv_player);
        libCOMI_gf_CM_Fenix_UpdateFenixChampionShellCountValues(2, lv_player);
        lv_avengingprotocolindex = 2;
        lv_avengingprotocolstacks = 2;
    }
    else if (auto0E65C66C_val == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[3]) {
        UnitGroupRemove(libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[3][lv_player], EventUnit());
        libCOMI_gf_CM_Fenix_UpdateNetworkValues(3, lv_player);
        libCOMI_gf_CM_Fenix_UpdateFenixChampionShellCountValues(3, lv_player);
        lv_avengingprotocolindex = 3;
        lv_avengingprotocolstacks = 3;
    }
    else if (auto0E65C66C_val == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[4]) {
        UnitGroupRemove(libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[4][lv_player], EventUnit());
        libCOMI_gf_CM_Fenix_UpdateNetworkValues(4, lv_player);
        libCOMI_gf_CM_Fenix_UpdateFenixChampionShellCountValues(4, lv_player);
        lv_avengingprotocolindex = 4;
        lv_avengingprotocolstacks = 4;
    }
    else if (auto0E65C66C_val == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[5]) {
        UnitGroupRemove(libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[5][lv_player], EventUnit());
        libCOMI_gf_CM_Fenix_UpdateNetworkValues(5, lv_player);
        libCOMI_gf_CM_Fenix_UpdateFenixChampionShellCountValues(5, lv_player);
        lv_avengingprotocolindex = 5;
        lv_avengingprotocolstacks = 6;
    }
    else if (auto0E65C66C_val == libCOMI_gv_cM_Fenix_ChampionUnitReplaceType[6]) {
        UnitGroupRemove(libCOMI_gv_cM_Fenix_ChampionVolunteerUnitGroup[6][lv_player], EventUnit());
        libCOMI_gf_CM_Fenix_UpdateNetworkValues(6, lv_player);
        libCOMI_gf_CM_Fenix_UpdateFenixChampionShellCountValues(6, lv_player);
        lv_avengingprotocolindex = 6;
        lv_avengingprotocolstacks = 6;
    }
    else {
    }
    if ((lv_avengingprotocolindex > 0) && (lv_avengingprotocolstacks > 0) && (UnitHasBehavior2(EventUnit(), "FenixSuppressAvengingProtocol") == false)) {
        libCOMI_gf_CM_Fenix_AvengingProtocol(lv_avengingprotocolindex, lv_player, lv_avengingprotocolstacks);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_NetworkedUnitDies_Init () {
    libCOMI_gt_CM_Fenix_NetworkedUnitDies = TriggerCreate("libCOMI_gt_CM_Fenix_NetworkedUnitDies_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_NetworkedUnitDies, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_Fenix_NetworkedUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ProbiusSwap
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ProbiusSwap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Probe"))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionKaldalisZealot", c_techCountCompleteOnly) >= 1))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionClolarionCarrier", c_techCountCompleteOnly) >= 1))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionMojoScout", c_techCountCompleteOnly) >= 1))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionTalisAdept", c_techCountCompleteOnly) >= 1))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionTaldarinImmortal", c_techCountCompleteOnly) >= 1))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionWarbringerColossus", c_techCountCompleteOnly) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerCreateEffectPoint(UnitGetOwner(libCOMI_gv_cM_Fenix_ChampionStructure[lv_player]), "FenixChampionSwapLaunch", UnitGetPosition(libCOMI_gv_cM_Fenix_ChampionStructure[UnitGetOwner(EventUnitCreatedUnit())]));
    PlayerCreateEffectPoint(UnitGetOwner(EventUnitCreatedUnit()), "FenixChampionSwapImpactSet", UnitGetPosition(EventUnitCreatedUnit()));
    UnitBehaviorAdd(EventUnitCreatedUnit(), "FenixProbiusProbe", EventUnitCreatedUnit(), 1);
    UnitBehaviorAdd(EventUnitCreatedUnit(), "FenixChampionMorphStun", EventUnitCreatedUnit(), 1);
    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), "Create FenixProbiusProbe");
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ProbiusSwap_Init () {
    libCOMI_gt_CM_Fenix_ProbiusSwap = TriggerCreate("libCOMI_gt_CM_Fenix_ProbiusSwap_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ProbiusSwap, false);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Fenix_ProbiusSwap, null, "NexusTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_AvengingProtocol_BuffExpires
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_AvengingProtocol_BuffExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    string auto3E050160_val;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((PlayerCommander(lv_player) == "Fenix")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3E050160_val = UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    if (auto3E050160_val == libCOMI_gv_cM_Fenix_ChampionUnitType[1]) {
        libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[1] = 0;
    }
    else if (auto3E050160_val == libCOMI_gv_cM_Fenix_ChampionUnitType[2]) {
        libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[2] = 0;
    }
    else if (auto3E050160_val == libCOMI_gv_cM_Fenix_ChampionUnitType[3]) {
        libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[3] = 0;
    }
    else if (auto3E050160_val == libCOMI_gv_cM_Fenix_ChampionUnitType[4]) {
        libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[4] = 0;
    }
    else if (auto3E050160_val == libCOMI_gv_cM_Fenix_ChampionUnitType[5]) {
        libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[5] = 0;
    }
    else if (auto3E050160_val == libCOMI_gv_cM_Fenix_ChampionUnitType[6]) {
        libCOMI_gv_cM_Fenix_ChampionAvengingProtocolBuffStacks[6] = 0;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_AvengingProtocol_BuffExpires_Init () {
    libCOMI_gt_CM_Fenix_AvengingProtocol_BuffExpires = TriggerCreate("libCOMI_gt_CM_Fenix_AvengingProtocol_BuffExpires_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_AvengingProtocol_BuffExpires, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Fenix_AvengingProtocol_BuffExpires, c_playerAny, "FenixChampionAvengingProtocolExpireDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ConclaiveTrainStart
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ConclaiveTrainStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "FenixAltarOfPsiStorms"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_COMI_48E58677", "UpgradeName", StringExternal((libNtve_gf_TriggeringProgressUpgrade())));
    ActorSendAsText(libNtve_gf_MainActorofUnit(EventUnit()), TextExpressionAssemble("Param/Expression/lib_COMI_48E58677"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ConclaiveTrainStart_Init () {
    libCOMI_gt_CM_Fenix_ConclaiveTrainStart = TriggerCreate("libCOMI_gt_CM_Fenix_ConclaiveTrainStart_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ConclaiveTrainStart, false);
    TriggerAddEventUnitResearchProgress(libCOMI_gt_CM_Fenix_ConclaiveTrainStart, null, c_unitProgressStageStart);
    TriggerAddEventUnitResearchProgress(libCOMI_gt_CM_Fenix_ConclaiveTrainStart, null, c_unitProgressStageResume);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ConclaiveTrainStop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ConclaiveTrainStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "FenixAltarOfPsiStorms"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_COMI_4E78EA33", "UpgradeName", StringExternal((libNtve_gf_TriggeringProgressUpgrade())));
    ActorSendAsText(libNtve_gf_MainActorofUnit(EventUnit()), TextExpressionAssemble("Param/Expression/lib_COMI_4E78EA33"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ConclaiveTrainStop_Init () {
    libCOMI_gt_CM_Fenix_ConclaiveTrainStop = TriggerCreate("libCOMI_gt_CM_Fenix_ConclaiveTrainStop_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ConclaiveTrainStop, false);
    TriggerAddEventUnitResearchProgress(libCOMI_gt_CM_Fenix_ConclaiveTrainStop, null, c_unitProgressStagePause);
    TriggerAddEventUnitResearchProgress(libCOMI_gt_CM_Fenix_ConclaiveTrainStop, null, c_unitProgressStageCancel);
    TriggerAddEventUnitResearchProgress(libCOMI_gt_CM_Fenix_ConclaiveTrainStop, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_ChampionAugmentAbilitySoundTrigger
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(EventUnitTargetUnit())) > 8.0)) {
        libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_Fenix_ChampionUnit[3][EventPlayer()], "Signal TargetLongRange");
    }
    else {
        libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_Fenix_ChampionUnit[3][EventPlayer()], "Signal TargetShortRange");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger_Init () {
    libCOMI_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger = TriggerCreate("libCOMI_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger, null, AbilityCommand("FenixMojoMissiles", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_Charged Buster On Cost
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ChargedBusterOnCost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogAbil, "ChargedBuster", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), "0");
    CatalogFieldValueSet(c_gameCatalogAbil, "FenixDragoonAirBomb", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), "0");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ChargedBusterOnCost_Init () {
    libCOMI_gt_CM_Fenix_ChargedBusterOnCost = TriggerCreate("libCOMI_gt_CM_Fenix_ChargedBusterOnCost_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ChargedBusterOnCost, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Fenix_ChargedBusterOnCost, null, "ChargeBuster", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_Charged Buster Off Cost
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_ChargedBusterOffCost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogAbil, "ChargedBuster", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), 1.0, c_upgradeOperationMultiply);
    libNtve_gf_CatalogFieldValueModifyBasedOnDefaultValue(c_gameCatalogAbil, "FenixDragoonAirBomb", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), 1.0, c_upgradeOperationMultiply);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_ChargedBusterOffCost_Init () {
    libCOMI_gt_CM_Fenix_ChargedBusterOffCost = TriggerCreate("libCOMI_gt_CM_Fenix_ChargedBusterOffCost_Func");
    TriggerEnable(libCOMI_gt_CM_Fenix_ChargedBusterOffCost, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Fenix_ChargedBusterOffCost, null, "ChargeBuster", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_FenixAutocastSettingsOn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_FenixAutocastSettingsOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    abilcmd auto1242C3A3_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto1242C3A3_val = EventUnitAbility();
    if (auto1242C3A3_val == AbilityCommand("FenixSoAWhirlwind", 0)) {
        libCOMI_gv_fenixWhirlwindAutocast[EventPlayer()] = true;
    }
    else if (auto1242C3A3_val == AbilityCommand("VoidShieldCapacitor", 0)) {
        libCOMI_gv_fenixShieldCapacitorAutocast[EventPlayer()] = true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_FenixAutocastSettingsOn_Init () {
    libCOMI_gt_CM_FenixAutocastSettingsOn = TriggerCreate("libCOMI_gt_CM_FenixAutocastSettingsOn_Func");
    TriggerEnable(libCOMI_gt_CM_FenixAutocastSettingsOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCOMI_gt_CM_FenixAutocastSettingsOn, null, AbilityCommand("FenixSoAWhirlwind", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCOMI_gt_CM_FenixAutocastSettingsOn, null, AbilityCommand("VoidShieldCapacitor", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_FenixAutocastSettingsOff
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_FenixAutocastSettingsOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    abilcmd auto603B686C_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto603B686C_val = EventUnitAbility();
    if (auto603B686C_val == AbilityCommand("FenixSoAWhirlwind", 0)) {
        libCOMI_gv_fenixWhirlwindAutocast[EventPlayer()] = false;
    }
    else if (auto603B686C_val == AbilityCommand("VoidShieldCapacitor", 0)) {
        libCOMI_gv_fenixShieldCapacitorAutocast[EventPlayer()] = false;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_FenixAutocastSettingsOff_Init () {
    libCOMI_gt_CM_FenixAutocastSettingsOff = TriggerCreate("libCOMI_gt_CM_FenixAutocastSettingsOff_Func");
    TriggerEnable(libCOMI_gt_CM_FenixAutocastSettingsOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCOMI_gt_CM_FenixAutocastSettingsOff, null, AbilityCommand("FenixSoAWhirlwind", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(libCOMI_gt_CM_FenixAutocastSettingsOff, null, AbilityCommand("VoidShieldCapacitor", 0), c_unitAbilAutoCastChangeOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_FenixAutocastSuitSummonStateAdjust
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_FenixAutocastSuitSummonStateAdjust_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoAA713098_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoAA713098_val = UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    if (autoAA713098_val == "FenixCoop") {
        if ((libCOMI_gv_fenixWhirlwindAutocast[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] == true)) {
            Wait(0.0625, c_timeGame);
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "FenixSoAWhirlwindSetAutocast", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        }

        if ((libCOMI_gv_fenixShieldCapacitorAutocast[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)] == true)) {
            Wait(0.0625, c_timeGame);
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "FenixVoidShieldCapacitorSetAutocast", EventPlayerEffectUsedUnit(c_effectUnitTarget));
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_FenixAutocastSuitSummonStateAdjust_Init () {
    libCOMI_gt_CM_FenixAutocastSuitSummonStateAdjust = TriggerCreate("libCOMI_gt_CM_FenixAutocastSuitSummonStateAdjust_Func");
    TriggerEnable(libCOMI_gt_CM_FenixAutocastSuitSummonStateAdjust, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_FenixAutocastSuitSummonStateAdjust, c_playerAny, "SOASummonFenixWarpInOutAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Fenix_TriggersInit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Fenix_TriggersInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCOMI_gt_CM_Fenix_InitialDummySpawn, true, false);
    TriggerExecute(libCOMI_gt_CM_Fenix_ChampionInitialSetup, true, false);
    TriggerEnable(libCOMI_gt_CM_Fenix_SentryNullShield, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_TaldarinDetonationStore, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_TaldarinDetonationRelease, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_AchievementCarrierResearched, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_AchievementCarrierAmount, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_ConclaiveTrainStart, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_ConclaiveTrainStop, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger, true);
    TriggerEnable(libCOMI_gt_CM_FenixAutocastSettingsOn, true);
    TriggerEnable(libCOMI_gt_CM_FenixAutocastSettingsOff, true);
    TriggerEnable(libCOMI_gt_CM_FenixAutocastSuitSummonStateAdjust, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_ChargedBusterOnCost, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_ChargedBusterOffCost, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_HeroSpawn, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_HeroSpawnCleanup, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_HeroKilled, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_SuicideUpdateVital, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_ResearchRemoveSuicide, true);
    TriggerEnable(libCOMI_gt_CM_Fenix_RallySetToFenix, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Fenix_TriggersInit_Init () {
    libCOMI_gt_CM_Fenix_TriggersInit = TriggerCreate("libCOMI_gt_CM_Fenix_TriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_AirFleet_Activated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_AirFleet_Activated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    libNtve_gf_StoreUnitSelection(lv_casterPlayer, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCOMI_gv_cM_SoATargetingActivateAbility[lv_casterPlayer] = "HornerAirFleetActivate";
    libCOMI_gv_cM_SoATargetingExecuteCommand[lv_casterPlayer] = AbilityCommand("HornerAirFleetExecute", 0);
    libCOMI_gv_cM_SoATargetingCooldown[lv_casterPlayer] = "Abil/HornerAirFleetActivate";
    libCOMI_gv_cM_SoATargetingBehavior[lv_casterPlayer] = "HornerAirFleetActivate";
    libCOMI_gv_cM_SoATargetingModel[lv_casterPlayer] = "HornerAirFleetTargetingModel";
    libCOMI_gv_cM_SoATargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("HornerAirFleetTargetingDummy", 0), UnitGetPosition(libCOMI_gv_cM_SoACasterUnit[lv_casterPlayer]));
    libCOMI_gv_cM_SoATargetingUnitType[lv_casterPlayer] = "HornerAirFleetTargeter";
    libCOMI_gv_cM_SoATargetingChargesTotal[lv_casterPlayer] = 1;
    libCOMI_gv_cM_SoATargetingInstructionsPrimary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMI_BE46DBD9");
    libCOMI_gv_cM_SoATargetingInstructionsSecondary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMI_A3DA54C0");
    libCOMI_gv_cM_HornerAirFleet_Cost[lv_casterPlayer] = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, "HornerAirFleetActivate", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", lv_casterPlayer));
    libCOMI_gf_CM_SoATargetingModeEnter(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_AirFleet_Activated_Init () {
    libCOMI_gt_CM_Horner_AirFleet_Activated = TriggerCreate("libCOMI_gt_CM_Horner_AirFleet_Activated_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_AirFleet_Activated, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Horner_AirFleet_Activated, null, "HornerAirFleetActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_DeathRattleHellionFearApply
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_DeathRattleHellionFearApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scaredUnit;
    point lv_attackLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scaredUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackLocation = PointWithOffsetPolar(UnitGetPosition(lv_scaredUnit), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(lv_scaredUnit, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_scaredUnit), -5.0, lv_attackLocation)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(lv_scaredUnit, "HHHellionTankFear") == true) && (UnitIsAlive(lv_scaredUnit) == true)) {
        UnitIssueOrder(lv_scaredUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_scaredUnit), 3.0))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(lv_scaredUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_DeathRattleHellionFearApply_Init () {
    libCOMI_gt_CM_Horner_DeathRattleHellionFearApply = TriggerCreate("libCOMI_gt_CM_Horner_DeathRattleHellionFearApply_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_DeathRattleHellionFearApply, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Horner_DeathRattleHellionFearApply, null, "HHHellionTankFear", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Horner_DeathRattleHellionFearApply, null, "HHHellionTankFear", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_DeathRattle_Reaper
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_DeathRattle_Reaper_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_maxRange;
    unit lv_reaper;
    unit lv_target;
    fixed lv_distance;
    fixed lv_range;
    point lv_targetpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_maxRange = 6.5;
    lv_reaper = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_distance = DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    lv_range = MinF(lv_distance, lv_maxRange);
    lv_targetpoint = libNtve_gf_PointOffsetTowardsPoint(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), lv_range, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(lv_reaper) == "HHReaper") || (UnitGetType(lv_reaper) == "HHReaperFlying")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "MasteryHornerBetterDeathRattle", c_techCountQueuedOrBetter) >= 1) && (RandomInt(1, 100) <= FixedToInt(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryHornerBetterDeathRattleDisplayDummy", "Amount", EventPlayer())))) {
        UnitCreateEffectPoint(lv_reaper, "HHD8ClusterDeathSetUpgrade", lv_targetpoint);
    }
    else {
        UnitCreateEffectPoint(lv_reaper, "HHD8ClusterDeathSet", lv_targetpoint);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_DeathRattle_Reaper_Init () {
    libCOMI_gt_CM_Horner_DeathRattle_Reaper = TriggerCreate("libCOMI_gt_CM_Horner_DeathRattle_Reaper_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_DeathRattle_Reaper, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Horner_DeathRattle_Reaper, c_playerAny, "HHD8ClusterDeathSetTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_DeathRattle_WidowMine
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_DeathRattle_WidowMine_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) == "HHWidowMine") || (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) == "HHWidowMineBurrowed")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")), "MasteryHornerBetterDeathRattle", c_techCountQueuedOrBetter) >= 1) && (RandomInt(1, 100) <= FixedToInt(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryHornerBetterDeathRattleDisplayDummy", "Amount", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")))))) {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitSource), "HHWidowMineBlossomIssueOrderSetUpgrade", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    }
    else {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitSource), "HHWidowMineBlossomIssueOrderSet", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_DeathRattle_WidowMine_Init () {
    libCOMI_gt_CM_Horner_DeathRattle_WidowMine = TriggerCreate("libCOMI_gt_CM_Horner_DeathRattle_WidowMine_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_DeathRattle_WidowMine, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Horner_DeathRattle_WidowMine, libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")), "HHWidowMineBlossomIssueOrderSetTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_DeathRattle_Hellion
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_DeathRattle_Hellion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) == "HHHellion")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")), "MasteryHornerBetterDeathRattle", c_techCountQueuedOrBetter) >= 1) && (RandomInt(1, 100) <= FixedToInt(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryHornerBetterDeathRattleDisplayDummy", "Amount", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")))))) {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitSource), "HHHellionStimDeathSetUpgrade", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    }
    else {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitSource), "HHHellionStimDeathSet", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_DeathRattle_Hellion_Init () {
    libCOMI_gt_CM_Horner_DeathRattle_Hellion = TriggerCreate("libCOMI_gt_CM_Horner_DeathRattle_Hellion_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_DeathRattle_Hellion, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Horner_DeathRattle_Hellion, libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")), "HHHellionStimDeathSetTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_DeathRattle_Hellbat
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_DeathRattle_Hellbat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)) == "HHHellionTank")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")), "MasteryHornerBetterDeathRattle", c_techCountQueuedOrBetter) >= 1) && (RandomInt(1, 100) <= FixedToInt(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryHornerBetterDeathRattleDisplayDummy", "Amount", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")))))) {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitSource), "HHHellionTankDeathFearSetUpgrade", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    }
    else {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitSource), "HHHellionTankDeathFearSet", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_DeathRattle_Hellbat_Init () {
    libCOMI_gt_CM_Horner_DeathRattle_Hellbat = TriggerCreate("libCOMI_gt_CM_Horner_DeathRattle_Hellbat_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_DeathRattle_Hellbat, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Horner_DeathRattle_Hellbat, libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")), "HHHellionTankDeathFearSetTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_DoubleSupplyStun
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_DoubleSupplyStun_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_sCV;
    unit lv_supplyDepot;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sCV = EventUnit();
    lv_supplyDepot = EventUnitProgressUnit();
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(UnitGetOwner(EventUnitProgressUnit())) == "Horner"))) {
            return false;
        }

        if (!((UnitGetType(lv_supplyDepot) == "SupplyDepot"))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(EventPlayer(), "HHDoubleSupply", c_techCountCompleteOnly) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_supplyDepot, "HHSupplyDepotInitialStun", lv_supplyDepot, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_DoubleSupplyStun_Init () {
    libCOMI_gt_CM_Horner_DoubleSupplyStun = TriggerCreate("libCOMI_gt_CM_Horner_DoubleSupplyStun_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_DoubleSupplyStun, false);
    TriggerAddEventUnitConstructProgress(libCOMI_gt_CM_Horner_DoubleSupplyStun, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_MTO_Upgrade
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_MTO_Upgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_upgrade;
    int lv_delta;
    string lv_inInstance;
    string lv_unitType;
    string lv_skin;

    // Automatic Variable Declarations
    string auto4A6C653B_userType;
    int auto4A6C653B_i;
    string auto9B486C0C_userType;
    string auto9B486C0C_instance;
    string auto9B486C0C_field;
    int auto9B486C0C_i;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_upgrade = EventUpgradeName();
    lv_delta = EventUpgradeLevelDelta();

    // Conditions
    if (testConds) {
        if (!((lv_delta > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4A6C653B_userType = "TheHornersMiraTakeOver";
    auto4A6C653B_i = 1;
    for ( ; auto4A6C653B_i <= UserDataInstanceCount(auto4A6C653B_userType) ; auto4A6C653B_i += 1 ) {
        lv_inInstance = UserDataInstance(auto4A6C653B_userType, auto4A6C653B_i);
        if ((lv_upgrade == UserDataGetGameLink("TheHornersMiraTakeOver", lv_inInstance, "Upgrade", 1))) {
            lv_skin = UserDataGetGameLink("TheHornersMiraTakeOver", lv_inInstance, "Skin", 1);
            if ((DataTableGetBool(true, ("CM_MTO_SkinApplied_" + (lv_skin) + "_" + IntToString(lv_player))) == false)) {
                libCOMI_gf_PlayerApplySkinSignal(lv_player, lv_skin, true, "Signal Mira");
                auto9B486C0C_userType = "TheHornersMiraTakeOver";
                auto9B486C0C_instance = lv_inInstance;
                auto9B486C0C_field = "Affected Units";
                auto9B486C0C_i = 1;
                for ( ; auto9B486C0C_i <= UserDataFieldValueCount(auto9B486C0C_userType,auto9B486C0C_field) ; auto9B486C0C_i += 1 ) {
                    lv_unitType = UserDataGetGameLink(auto9B486C0C_userType,auto9B486C0C_instance,auto9B486C0C_field, auto9B486C0C_i);
                    if ((CatalogEntryIsValid(c_gameCatalogUnit, lv_unitType) == true)) {
                        CatalogFieldValueSet(c_gameCatalogUnit, lv_unitType, "TacticalAIChannel", lv_player, "MiraTakeOver");
                    }

                }
                DataTableSetBool(true, ("CM_MTO_SkinApplied_" + (lv_skin) + "_" + IntToString(lv_player)), true);
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_MTO_Upgrade_Init () {
    libCOMI_gt_CM_Horner_MTO_Upgrade = TriggerCreate("libCOMI_gt_CM_Horner_MTO_Upgrade_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_MTO_Upgrade, false);
    TriggerAddEventUpgradeLevelChanged(libCOMI_gt_CM_Horner_MTO_Upgrade, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_AssaultGalleonHangerFinish
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_HangerFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unit lv_progressUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_progressUnit = EventUnitProgressUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_TriggeringProgressUnitType() == "HHMercStarportCargo")) {
        UnitMagazineArm(lv_unit, AbilityCommand("HHMercStarportHangar", 0), 6);
        UnitBehaviorAdd(lv_unit, "HHMercStarportCargoInstalled", lv_unit, 1);
        Wait(0.0625, c_timeGame);
        UnitKill(lv_progressUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_HangerFinish_Init () {
    libCOMI_gt_CM_Horner_HangerFinish = TriggerCreate("libCOMI_gt_CM_Horner_HangerFinish_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_HangerFinish, false);
    TriggerAddEventUnitArmMagazineProgress(libCOMI_gt_CM_Horner_HangerFinish, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_ScrapDrop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_ScrapDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dyingUnitMineralCost;
    int lv_dyingUnitVespeneCost;
    int lv_dyingUnitPlayer;
    int lv_scrapPlayerDivisor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scrapPlayerDivisor = 10;

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((libCOOC_gf_PlayerIsCommander(UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeTimeout) == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "NoScrapDrop") != true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0)) != true))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dyingUnitPlayer = UnitGetOwner(EventUnit());
    if ((lv_dyingUnitPlayer == c_playerAny)) {
        return true;
    }

    if ((PlayerCommander(lv_dyingUnitPlayer) == "Horner")) {
        lv_scrapPlayerDivisor = 5;
    }

    lv_dyingUnitMineralCost = (FixedToInt(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "CostResource[" + IntToString(0) + "]", EventPlayer()))) / lv_scrapPlayerDivisor);
    lv_dyingUnitVespeneCost = (FixedToInt(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(EventUnit()), "CostResource[" + IntToString(1) + "]", EventPlayer()))) / lv_scrapPlayerDivisor);
    if ((UnitHasBehavior2(EventUnit(), "TychusHeroCount") == true)) {
        lv_dyingUnitMineralCost = (250 / lv_scrapPlayerDivisor);
        lv_dyingUnitVespeneCost = 0;
    }

    if ((lv_dyingUnitMineralCost > 0)) {
        if ((RandomInt(1, 100) <= FixedToInt(CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MasteryHornerDoubleSalvageChanceDisplayDummy", "Amount", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")))))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHScrapPickup", 0, lv_dyingUnitPlayer, PointWithOffset(UnitGetPosition(EventUnit()), -0.25, 0.0));
            libCOMI_gf_CM_Horner_ScrapResourceSetStack(UnitLastCreated(), lv_dyingUnitMineralCost, lv_dyingUnitVespeneCost);
            if ((lv_dyingUnitVespeneCost == 0)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap HHScrapMineral");
            }

            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHScrapPickup", 0, lv_dyingUnitPlayer, PointWithOffset(UnitGetPosition(EventUnit()), 0.25, 0.0));
            libCOMI_gf_CM_Horner_ScrapResourceSetStack(UnitLastCreated(), lv_dyingUnitMineralCost, lv_dyingUnitVespeneCost);
            if ((lv_dyingUnitVespeneCost == 0)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap HHScrapMineral");
            }

        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHScrapPickup", 0, lv_dyingUnitPlayer, UnitGetPosition(EventUnit()));
            libCOMI_gf_CM_Horner_ScrapResourceSetStack(UnitLastCreated(), lv_dyingUnitMineralCost, lv_dyingUnitVespeneCost);
            if ((lv_dyingUnitVespeneCost == 0)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "ModelSwap HHScrapMineral");
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_ScrapDrop_Init () {
    libCOMI_gt_CM_Horner_ScrapDrop = TriggerCreate("libCOMI_gt_CM_Horner_ScrapDrop_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_ScrapDrop, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_Horner_ScrapDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_ScrapDropForSwannWreckage
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_ScrapDropForSwannWreckage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dyingUnitMineralCost;
    int lv_dyingUnitVespeneCost;
    int lv_dyingUnitPlayer;
    int lv_scrapPlayerDivisor;
    int lv_hornerCommander;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scrapPlayerDivisor = 10;
    lv_hornerCommander = libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CommanderPlayers());

    // Conditions
    if (testConds) {
        if (!((lv_hornerCommander != c_playerAny))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dyingUnitPlayer = UnitGetOwner(EventUnit());
    if ((lv_dyingUnitPlayer == c_playerAny)) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "SiegeTankWreckage")) {
        lv_dyingUnitMineralCost = (UnitTypeGetCost("SiegeTank", c_unitCostMinerals) / lv_scrapPlayerDivisor);
        lv_dyingUnitVespeneCost = (UnitTypeGetCost("SiegeTank", c_unitCostVespene) / lv_scrapPlayerDivisor);
    }

    if ((UnitGetType(EventUnit()) == "ThorWreckageSwann")) {
        lv_dyingUnitMineralCost = (UnitTypeGetCost("Thor", c_unitCostMinerals) / lv_scrapPlayerDivisor);
        lv_dyingUnitVespeneCost = (UnitTypeGetCost("Thor", c_unitCostVespene) / lv_scrapPlayerDivisor);
    }

    if ((lv_dyingUnitMineralCost > 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHScrapPickup", 0, lv_dyingUnitPlayer, UnitGetPosition(EventUnit()));
        libCOMI_gf_CM_Horner_ScrapResourceSetStack(UnitLastCreated(), lv_dyingUnitMineralCost, lv_dyingUnitVespeneCost);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_ScrapDropForSwannWreckage_Init () {
    libCOMI_gt_CM_Horner_ScrapDropForSwannWreckage = TriggerCreate("libCOMI_gt_CM_Horner_ScrapDropForSwannWreckage_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_ScrapDropForSwannWreckage, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Horner_ScrapDropForSwannWreckage, null, AbilityCommand("SiegeTankWreckage", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Horner_ScrapDropForSwannWreckage, null, AbilityCommand("ThorWreckageSwann", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_ScrapPickup
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_ScrapPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minerals;
    int lv_vespene;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_minerals = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 62));
    lv_vespene = FixedToInt(UnitGetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitCaster), 63));
    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), c_playerPropMinerals, c_playerPropOperAdd, lv_minerals);
    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), c_playerPropVespene, c_playerPropOperAdd, lv_vespene);
    if ((lv_minerals > 0) && (lv_vespene > 0)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_9BC1452F", "Minerals", IntToText(lv_minerals));
        TextExpressionSetToken("Param/Expression/lib_COMI_9BC1452F", "Vespene", IntToText(lv_vespene));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COMI_9BC1452F"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 3.0, true, false, PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)));
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COMI_B5A3FEB8", "Minerals", IntToText(lv_minerals));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COMI_B5A3FEB8"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 3.0, true, false, PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)));
        TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
    }
    Wait(1.5, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_ScrapPickup_Init () {
    libCOMI_gt_CM_Horner_ScrapPickup = TriggerCreate("libCOMI_gt_CM_Horner_ScrapPickup_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_ScrapPickup, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Horner_ScrapPickup, c_playerAny, "HHScrapPickupDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_SupplyAchievement
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_SupplyAchievement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(lv_player) == "Horner"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_HornerStatUpdate(lv_player);
    if (((libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player) == 4)) && ((libCOMI_gv_miraFactionSupply[lv_player] >= 80.0) && (libCOMI_gv_mattFactionSupply[lv_player] >= 40.0))) {
        AchievementAward(lv_player, "CommanderHornerSupply");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_SupplyAchievement_Init () {
    libCOMI_gt_CM_Horner_SupplyAchievement = TriggerCreate("libCOMI_gt_CM_Horner_SupplyAchievement_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_SupplyAchievement, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Horner_SupplyAchievement, c_playerAny, "TheHornersStatUpdate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_StarportCreateTechLabOrder
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_StarportCreateTechLabOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_starport;
    int lv_player;
    point lv_point;
    int lv_x;
    int lv_y;
    point lv_pointGrid;
    fixed lv_hHStarportTrainRavenCooldown;
    fixed lv_hHStarportTrainWraithCooldown;
    fixed lv_hHStarportTrainVikingCooldown;
    fixed lv_hHStarportTrainBattlecruiserCooldown;
    fixed lv_hHStarportTrainRavenCharges;
    fixed lv_hHStarportTrainWraithCharges;
    fixed lv_hHStarportTrainVikingCharges;
    fixed lv_hHStarportTrainBattlecruiserCharges;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_starport = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = EventPlayer();
    lv_point = UnitGetPosition(lv_starport);
    lv_x = FixedToInt(PointGetX(lv_point));
    lv_y = FixedToInt(PointGetY(lv_point));
    lv_pointGrid = Point((lv_x + 0.5), (lv_y + 0.5));

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(lv_starport, "Signal Entry");
    CatalogReferenceModify("Actor,StarportTechLab,HighlightTooltip", lv_player, "Unit/Name/TechLabMira", c_upgradeOperationSet);
    UnitBehaviorAddPlayer(lv_starport, "PermanentlyUncommandable", lv_player, 1);
    UnitBehaviorAddPlayer(lv_starport, "PermanentlyInvulnerable", lv_player, 1);
    libNtve_gf_PlayerRemoveChargeUsed(lv_player, "HHStarportTrainWraith");
    lv_hHStarportTrainWraithCharges = PlayerGetChargeUsed(lv_player, "HHStarportTrainWraith");
    PlayerAddChargeUsed(lv_player, "HHStarportTrainWraith", (5.0 - lv_hHStarportTrainWraithCharges));
    lv_hHStarportTrainWraithCooldown = PlayerGetChargeRegen(lv_player, "HHStarportTrainWraith");
    PlayerAddChargeRegenRemaining(lv_player, "HHStarportTrainWraith", (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "HHStarportTrainHorner", "InfoArray[" + IntToString(0) + "].Charge.TimeStart", lv_player) - lv_hHStarportTrainWraithCooldown));
    libNtve_gf_PlayerRemoveChargeUsed(lv_player, "HHStarportTrainViking");
    lv_hHStarportTrainVikingCharges = PlayerGetChargeUsed(lv_player, "HHStarportTrainViking");
    PlayerAddChargeUsed(lv_player, "HHStarportTrainViking", (5.0 - lv_hHStarportTrainVikingCharges));
    lv_hHStarportTrainVikingCooldown = PlayerGetChargeRegen(lv_player, "HHStarportTrainViking");
    PlayerAddChargeRegenRemaining(lv_player, "HHStarportTrainViking", (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "HHStarportTrainHorner", "InfoArray[" + IntToString(1) + "].Charge.TimeStart", lv_player) - lv_hHStarportTrainVikingCooldown));
    libNtve_gf_PlayerRemoveChargeUsed(lv_player, "HHStarportTrainBattlecruiser");
    lv_hHStarportTrainBattlecruiserCharges = PlayerGetChargeUsed(lv_player, "HHStarportTrainBattlecruiser");
    PlayerAddChargeUsed(lv_player, "HHStarportTrainBattlecruiser", (5.0 - lv_hHStarportTrainBattlecruiserCharges));
    lv_hHStarportTrainBattlecruiserCooldown = PlayerGetChargeRegen(lv_player, "HHStarportTrainBattlecruiser");
    PlayerAddChargeRegenRemaining(lv_player, "HHStarportTrainBattlecruiser", (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "HHStarportTrainHorner", "InfoArray[" + IntToString(2) + "].Charge.TimeStart", lv_player) - lv_hHStarportTrainBattlecruiserCooldown));
    libNtve_gf_PlayerRemoveChargeUsed(lv_player, "HHStarportTrainRaven");
    lv_hHStarportTrainRavenCharges = PlayerGetChargeUsed(lv_player, "HHStarportTrainRaven");
    PlayerAddChargeUsed(lv_player, "HHStarportTrainRaven", (5.0 - lv_hHStarportTrainRavenCharges));
    lv_hHStarportTrainRavenCooldown = PlayerGetChargeRegen(lv_player, "HHStarportTrainRaven");
    PlayerAddChargeRegenRemaining(lv_player, "HHStarportTrainRaven", (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, "HHStarportTrainHorner", "InfoArray[" + IntToString(3) + "].Charge.TimeStart", lv_player) - lv_hHStarportTrainRavenCooldown));
    Wait(5.4, c_timeGame);
    UnitBehaviorRemove(lv_starport, "PermanentlyUncommandable", 1);
    UnitIssueOrder(lv_starport, OrderTargetingPoint(AbilityCommand("HHStarportAddOns", 0), UnitGetPosition(lv_starport)), c_orderQueueReplace);
    UnitBehaviorAddPlayer(lv_starport, "PermanentlyUncommandable", lv_player, 1);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_StarportCreateTechLabOrder_Init () {
    libCOMI_gt_CM_Horner_StarportCreateTechLabOrder = TriggerCreate("libCOMI_gt_CM_Horner_StarportCreateTechLabOrder_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_StarportCreateTechLabOrder, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Horner_StarportCreateTechLabOrder, c_playerAny, "HHStarportBirthDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_StarportCreateTechLabStart
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_StarportCreateTechLabStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_starport;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_starport = EventUnit();
    lv_player = UnitGetOwner(lv_starport);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_starport) == "HHStarport"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_Horner_TechLab = EventUnitCreatedUnit();
    UnitBehaviorAddPlayer(libCOMI_gv_cM_Horner_TechLab, "PermanentlyUncommandable", lv_player, 1);
    libNtve_gf_MakeUnitInvulnerable(libCOMI_gv_cM_Horner_TechLab, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_StarportCreateTechLabStart_Init () {
    libCOMI_gt_CM_Horner_StarportCreateTechLabStart = TriggerCreate("libCOMI_gt_CM_Horner_StarportCreateTechLabStart_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_StarportCreateTechLabStart, false);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Horner_StarportCreateTechLabStart, null, "HHStarportAddOns", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_StarportCreateTechLabFinish
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_StarportCreateTechLabFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_starport;
    unit lv_addon;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_starport = EventUnit();
    lv_addon = EventUnitProgressUnit();
    lv_player = UnitGetOwner(lv_starport);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_starport, "PermanentlyUncommandable", 1);
    UnitBehaviorRemove(lv_addon, "PermanentlyUncommandable", 1);
    UnitBehaviorRemove(lv_starport, "PermanentlyInvulnerable", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_StarportCreateTechLabFinish_Init () {
    libCOMI_gt_CM_Horner_StarportCreateTechLabFinish = TriggerCreate("libCOMI_gt_CM_Horner_StarportCreateTechLabFinish_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_StarportCreateTechLabFinish, false);
    TriggerAddEventUnitConstructProgress(libCOMI_gt_CM_Horner_StarportCreateTechLabFinish, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_StarportRecreateTechLabOrder
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_StarportRecreateTechLabOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_starport;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_starport = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_starport) == "HHStarport"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_starport, OrderTargetingPoint(AbilityCommand("HHStarportAddOns", 0), UnitGetPosition(lv_starport)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_StarportRecreateTechLabOrder_Init () {
    libCOMI_gt_CM_Horner_StarportRecreateTechLabOrder = TriggerCreate("libCOMI_gt_CM_Horner_StarportRecreateTechLabOrder_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_StarportRecreateTechLabOrder, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Horner_StarportRecreateTechLabOrder, null, "StarportTechLab", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_StarportRecreate
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_StarportRecreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_starport;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_starport = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_starport) == "HHStarport"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HHStarport", c_unitCreateConstruct | c_unitCreateIgnorePlacement, EventPlayer(), UnitGetPosition(lv_starport));
    UnitKill(libCOMI_gv_cM_Horner_TechLab);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_StarportRecreate_Init () {
    libCOMI_gt_CM_Horner_StarportRecreate = TriggerCreate("libCOMI_gt_CM_Horner_StarportRecreate_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_StarportRecreate, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Horner_StarportRecreate, c_playerAny, "HHStarportDeathDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_StarportFinishCreateTechLabOrder
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_StarportFinishCreateTechLabOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_starport;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_starport = EventUnitProgressUnit();
    lv_player = UnitGetOwner(lv_starport);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_starport) == "HHStarport"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_starport, OrderTargetingPoint(AbilityCommand("HHStarportAddOns", 0), UnitGetPosition(lv_starport)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(lv_starport, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_StarportFinishCreateTechLabOrder_Init () {
    libCOMI_gt_CM_Horner_StarportFinishCreateTechLabOrder = TriggerCreate("libCOMI_gt_CM_Horner_StarportFinishCreateTechLabOrder_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_StarportFinishCreateTechLabOrder, false);
    TriggerAddEventUnitConstructProgress(libCOMI_gt_CM_Horner_StarportFinishCreateTechLabOrder, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_BomberPlatform_PlatformCreated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_BomberPlatform_PlatformCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMI_gv_cM_Horner_BomberPlatforms[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))], EventPlayerEffectUsedUnit(c_effectUnitCaster));
    libCOMI_gv_cM_Horner_BomberPlatforms_TotalCount[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))] = UnitGroupCount(libCOMI_gv_cM_Horner_BomberPlatforms[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))], c_unitCountAlive);
    Wait(0.01, c_timeGame);
    libCOMI_gf_CM_Horner_BomberStatusCheck(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    PlayerAddChargeUsed(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "Abil/HHBomberPlatformAreaBombTopBarOrder", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_BomberPlatform_PlatformCreated_Init () {
    libCOMI_gt_CM_Horner_BomberPlatform_PlatformCreated = TriggerCreate("libCOMI_gt_CM_Horner_BomberPlatform_PlatformCreated_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_BomberPlatform_PlatformCreated, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Horner_BomberPlatform_PlatformCreated, c_playerAny, "HHBomberPlatformCreateDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_BomberPlatform_PlatformDies
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_BomberPlatform_PlatformDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HHBomberPlatform"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(libCOMI_gv_cM_Horner_BomberPlatforms_Ready[EventPlayer()], EventUnit()) == true)) {
        PlayerAddChargeUsed(EventPlayer(), "Abil/HHBomberPlatformAreaBombTopBarOrder", 1.0);
    }

    libCOMI_gf_CM_Horner_BomberStatusCheck(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_BomberPlatform_PlatformDies_Init () {
    libCOMI_gt_CM_Horner_BomberPlatform_PlatformDies = TriggerCreate("libCOMI_gt_CM_Horner_BomberPlatform_PlatformDies_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_BomberPlatform_PlatformDies, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_Horner_BomberPlatform_PlatformDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_BomberPlatform_BomberLaunched
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_BomberPlatform_BomberLaunched_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_Horner_BomberStatusCheck(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_BomberPlatform_BomberLaunched_Init () {
    libCOMI_gt_CM_Horner_BomberPlatform_BomberLaunched = TriggerCreate("libCOMI_gt_CM_Horner_BomberPlatform_BomberLaunched_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_BomberPlatform_BomberLaunched, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Horner_BomberPlatform_BomberLaunched, c_playerAny, "HHBomberPlatformAreaBombLaunchSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_BomberPlatform_BomberReturned
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_BomberPlatform_BomberReturned_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.01, c_timeGame);
    libCOMI_gf_CM_Horner_BomberStatusCheck(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin));
    PlayerAddChargeUsed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "Abil/HHBomberPlatformAreaBombTopBarOrder", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_BomberPlatform_BomberReturned_Init () {
    libCOMI_gt_CM_Horner_BomberPlatform_BomberReturned = TriggerCreate("libCOMI_gt_CM_Horner_BomberPlatform_BomberReturned_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_BomberPlatform_BomberReturned, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Horner_BomberPlatform_BomberReturned, c_playerAny, "HHBomberDockCooldownDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_BomberPlatform_BomberRebuilt
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_BomberPlatform_BomberRebuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_Horner_BomberStatusCheck(UnitGetOwner(EventUnit()));
    PlayerAddChargeUsed(UnitGetOwner(EventUnit()), "Abil/HHBomberPlatformAreaBombTopBarOrder", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_BomberPlatform_BomberRebuilt_Init () {
    libCOMI_gt_CM_Horner_BomberPlatform_BomberRebuilt = TriggerCreate("libCOMI_gt_CM_Horner_BomberPlatform_BomberRebuilt_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_BomberPlatform_BomberRebuilt, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Horner_BomberPlatform_BomberRebuilt, null, AbilityCommand("HHBomberPlatformHangar", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_BomberPlatform_TopBar_TargetSelected
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_BomberPlatform_TopBar_TargetSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickedUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gv_cM_Horner_BomberPlatforms_ReadyCount[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)] >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pickedUnit = UnitGroupRandomUnit(libCOMI_gv_cM_Horner_BomberPlatforms_Ready[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)], c_unitCountAlive);
    if ((EventPlayerEffectUsedUnit(c_effectUnitTarget) != null)) {
        UnitIssueOrder(lv_pickedUnit, OrderTargetingUnit(AbilityCommand("HHBomberPlatformAreaBombOrder", 0), EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(lv_pickedUnit, OrderTargetingPoint(AbilityCommand("HHBomberPlatformAreaBombOrder", 0), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueReplace);
    }
    if ((UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)], AbilityCommand("HHBomberPlatformAreaBombTopBarOrder", 0), c_unitAbilChargeCountLeft) > 0.0)) {
        UISetTargetingOrder(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)), libCOMI_gv_cM_GlobalCasterUnitGroup[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)], OrderTargetingPoint(AbilityCommand("HHBomberPlatformAreaBombTopBarOrder", 0), UnitGetPosition(libCOMI_gv_cM_GlobalCasterUnit[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)])), false);
    }

    PlayerAddChargeUsed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "Abil/HHBomberPlatformAreaBombTopBarOrder", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_BomberPlatform_TopBar_TargetSelected_Init () {
    libCOMI_gt_CM_Horner_BomberPlatform_TopBar_TargetSelected = TriggerCreate("libCOMI_gt_CM_Horner_BomberPlatform_TopBar_TargetSelected_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_BomberPlatform_TopBar_TargetSelected, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Horner_BomberPlatform_TopBar_TargetSelected, c_playerAny, "HHBomberPlatformAreaBombTopBarOrderDummyCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_BomberPlatform_Individual_TargetSelected
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_BomberPlatform_Individual_TargetSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bomberPlayer;
    unit lv_bomberPlatform;
    unit lv_bomber;
    unit lv_bomberTargetUnit;
    point lv_bomberTargetPoint;
    bool lv_bomberTargetIsUnit;
    int lv_bomberState;
    actor lv_bomberTargetActor;
    bool lv_bomberDiveSoundPlayed;

    // Automatic Variable Declarations
    int auto1BC20819_val;

    // Variable Initialization
    lv_bomberPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerAddChargeUsed(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "Abil/HHBomberPlatformAreaBombTopBarOrder", 1.0);
    lv_bomberPlatform = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    UnitCreate(1, "HHBomber", c_unitCreateIgnorePlacement, lv_bomberPlayer, Point((PointGetX(UnitGetPosition(lv_bomberPlatform)) + 0.26), (PointGetY(UnitGetPosition(lv_bomberPlatform)) - 0.26)), 225.0);
    lv_bomber = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(lv_bomber, "Signal LiftOff");
    UnitSetHeight(lv_bomber, 1.7, 0.0);
    lv_bomberState = 1;
    UnitBehaviorAdd(lv_bomberPlatform, "HHBomberPlatformAreaBombDisabler", lv_bomberPlatform, 1);
    libCOMI_gf_CM_Horner_BomberStatusCheck(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin));
    if ((EventPlayerEffectUsedUnit(c_effectUnitTarget) != null)) {
        lv_bomberTargetIsUnit = true;
        lv_bomberTargetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
        lv_bomberTargetPoint = UnitGetPosition(lv_bomberTargetUnit);
        ActorCreate(ActorScopeFromUnit(lv_bomberTargetUnit), "HHBomberAreaBombWarning", null, null, null);
        lv_bomberTargetActor = libNtve_gf_ActorLastCreated();
        if ((TechTreeUpgradeCount(lv_bomberPlayer, "HHBomberNapalm", c_techCountCompleteOnly) > 0)) {
            ActorSend(lv_bomberTargetActor, "ModelSwap MiraHorner_Bomber_Coop_Cursor_Persist 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
        }

        ActorSend(lv_bomberTargetActor, "Signal OnUnit");
    }
    else {
        lv_bomberTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
        libNtve_gf_CreateActorAtPoint("HHBomberAreaBombWarning", lv_bomberTargetPoint);
        lv_bomberTargetActor = libNtve_gf_ActorLastCreated();
        if ((TechTreeUpgradeCount(lv_bomberPlayer, "HHBomberNapalm", c_techCountCompleteOnly) > 0)) {
            ActorSend(lv_bomberTargetActor, "ModelSwap MiraHorner_Bomber_Coop_Cursor_Persist 255 PredecessorDestroyImmediate,PreventAllDynamicTextureTransfers");
        }

    }
    UnitSetHeight(lv_bomber, 3.75, 0.5);
    ActorSend(lv_bomberTargetActor, (("SetScale " + CatalogFieldValueGet(c_gameCatalogActor, "HHBomberAreaBombWarning", "Scale", lv_bomberPlayer))));
    libNtve_gf_MakeUnitFacePoint(lv_bomber, lv_bomberTargetPoint, 0.5);
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(lv_bomber, "Signal FlyOut");
    UnitIssueOrder(lv_bomber, OrderTargetingPoint(AbilityCommand("move", 0), lv_bomberTargetPoint), c_orderQueueReplace);
    while ((lv_bomberState > 0)) {
        auto1BC20819_val = lv_bomberState;
        if (auto1BC20819_val == 1) {
            if (((lv_bomberTargetIsUnit == true) && (UnitIsAlive(lv_bomberTargetUnit) == true))) {
                lv_bomberTargetPoint = UnitGetPosition(lv_bomberTargetUnit);
                UnitIssueOrder(lv_bomber, OrderTargetingPoint(AbilityCommand("move", 0), lv_bomberTargetPoint), c_orderQueueReplace);
            }

            if (((lv_bomberTargetIsUnit == false))) {
                UnitIssueOrder(lv_bomber, OrderTargetingPoint(AbilityCommand("move", 0), lv_bomberTargetPoint), c_orderQueueReplace);
            }

            if (((DistanceBetweenPoints(UnitGetPosition(lv_bomber), lv_bomberTargetPoint) < 20.0) && (lv_bomberDiveSoundPlayed == false))) {
                libNtve_gf_SendActorMessageToUnit(lv_bomber, "Signal DiveSoundStart");
                lv_bomberDiveSoundPlayed = true;
            }

            if ((DistanceBetweenPoints(UnitGetPosition(lv_bomber), lv_bomberTargetPoint) < 6.0)) {
                UnitCreateEffectPoint(lv_bomber, "HHBomberAreaBombInitialSet", lv_bomberTargetPoint);
                Wait(0.0625, c_timeGame);
                lv_bomberState = 2;
                ActorSend(lv_bomberTargetActor, "Destroy");
            }

        }
        else if (auto1BC20819_val == 2) {
            UnitIssueOrder(lv_bomber, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_bomberPlatform)), c_orderQueueReplace);
            if (((DistanceBetweenPoints(UnitGetPosition(lv_bomber), UnitGetPosition(lv_bomberPlatform)) < 1.0) && (UnitHasBehavior2(lv_bomber, "HHBomberFiredReturnDelay") == false))) {
                UnitCreateEffectUnit(lv_bomberPlatform, "HHBomberPlatformAreaBombReturnSet", lv_bomber);
                UnitRemove(lv_bomber);
                libCOMI_gf_CM_Horner_BomberStatusCheck(lv_bomberPlayer);
                lv_bomberState = 0;
            }

        }
        else {
        }
        if (((UnitIsAlive(lv_bomber) == false) && (lv_bomberState > 0))) {
            lv_bomberState = 0;
            UnitCreateEffectUnit(lv_bomberPlatform, "KillMagazine", lv_bomberPlatform);
            ActorSend(lv_bomberTargetActor, "Destroy");
        }

        if ((UnitIsAlive(lv_bomberPlatform) == false)) {
            UnitKill(lv_bomber);
            libCOMI_gf_CM_Horner_BomberStatusCheck(lv_bomberPlayer);
            lv_bomberState = 0;
            ActorSend(lv_bomberTargetActor, "Destroy");
        }

        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_BomberPlatform_Individual_TargetSelected_Init () {
    libCOMI_gt_CM_Horner_BomberPlatform_Individual_TargetSelected = TriggerCreate("libCOMI_gt_CM_Horner_BomberPlatform_Individual_TargetSelected_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_BomberPlatform_Individual_TargetSelected, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Horner_BomberPlatform_Individual_TargetSelected, c_playerAny, "HHBomberPlatformAreaBombOrderTargetDummyCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_VikingTacticalJumpMorph
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_VikingTacticalJumpMorph_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_unit, Order(AbilityCommand("HHFighterMode", 0)), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_VikingTacticalJumpMorph_Init () {
    libCOMI_gt_CM_Horner_VikingTacticalJumpMorph = TriggerCreate("libCOMI_gt_CM_Horner_VikingTacticalJumpMorph_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_VikingTacticalJumpMorph, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Horner_VikingTacticalJumpMorph, null, AbilityCommand("FleetwideJump", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_MagMines
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_MagMines_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "HornerCommander", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    if ((UnitAbilityChargeInfo(EventUnit(), AbilityCommand("HHTrainTopBar", 0), c_unitAbilChargeCountLeft) > 0.0)) {
        UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCOMI_gv_cM_GlobalCasterUnitGroup[lv_casterPlayer], OrderTargetingPoint(AbilityCommand("HHTrainTopBar", 0), UnitGetPosition(libCOMI_gv_cM_GlobalCasterUnit[lv_casterPlayer])), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_MagMines_Init () {
    libCOMI_gt_CM_Horner_MagMines = TriggerCreate("libCOMI_gt_CM_Horner_MagMines_Func");
    TriggerEnable(libCOMI_gt_CM_Horner_MagMines, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Horner_MagMines, null, AbilityCommand("HHTrainTopBar", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Horner_TriggersInit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Horner_TriggersInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMI_gt_CM_Horner_BomberPlatform_PlatformCreated, true);
    TriggerEnable(libCOMI_gt_CM_Horner_BomberPlatform_PlatformDies, true);
    TriggerEnable(libCOMI_gt_CM_Horner_BomberPlatform_BomberLaunched, true);
    TriggerEnable(libCOMI_gt_CM_Horner_BomberPlatform_BomberReturned, true);
    TriggerEnable(libCOMI_gt_CM_Horner_BomberPlatform_BomberRebuilt, true);
    TriggerEnable(libCOMI_gt_CM_Horner_BomberPlatform_TopBar_TargetSelected, true);
    TriggerEnable(libCOMI_gt_CM_Horner_BomberPlatform_Individual_TargetSelected, true);
    TriggerEnable(libCOMI_gt_CM_Horner_SupplyAchievement, true);
    if ((TechTreeUpgradeCount(libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranHorner", libCOOC_gf_CC_PlayersOfCommander("TerranHorner")), "HHScrapPickup", c_techCountQueuedOrBetter) == 1)) {
        TriggerEnable(libCOMI_gt_CM_Horner_ScrapDrop, true);
        TriggerEnable(libCOMI_gt_CM_Horner_ScrapPickup, true);
        TriggerEnable(libCOMI_gt_CM_Horner_ScrapDropForSwannWreckage, true);
        TriggerEnable(libCOMI_gt_BanelingScourgeDeathrattleScrapDeaths, true);
    }

    TriggerEnable(libCOMI_gt_CM_Horner_StarportCreateTechLabOrder, true);
    TriggerEnable(libCOMI_gt_CM_Horner_StarportCreateTechLabStart, true);
    TriggerEnable(libCOMI_gt_CM_Horner_StarportCreateTechLabFinish, true);
    TriggerEnable(libCOMI_gt_CM_Horner_AirFleet_Activated, true);
    TriggerEnable(libCOMI_gt_CM_Horner_DeathRattleHellionFearApply, true);
    TriggerExecute(libCOMI_gt_NovaUnitNames_GenerateNameList, false, false);
    TriggerEnable(libCOMI_gt_NovaUnitNames_Assign, true);
    TriggerEnable(libCOMI_gt_NovaUnitNames_KillCountUpdate, true);
    TriggerEnable(libCOMI_gt_CM_Horner_DeathRattle_Reaper, true);
    TriggerEnable(libCOMI_gt_CM_Horner_DeathRattle_WidowMine, true);
    TriggerEnable(libCOMI_gt_CM_Horner_DeathRattle_Hellion, true);
    TriggerEnable(libCOMI_gt_CM_Horner_DeathRattle_Hellbat, true);
    TriggerEnable(libCOMI_gt_CM_Horner_MTO_Upgrade, true);
    TriggerEnable(libCOMI_gt_CM_Horner_DoubleSupplyStun, true);
    TriggerEnable(libCOMI_gt_CM_Horner_StarportRecreateTechLabOrder, true);
    TriggerEnable(libCOMI_gt_CM_Horner_StarportRecreate, true);
    TriggerEnable(libCOMI_gt_CM_Horner_StarportFinishCreateTechLabOrder, true);
    TriggerEnable(libCOMI_gt_CM_Horner_HangerFinish, true);
    TriggerEnable(libCOMI_gt_CM_Horner_VikingTacticalJumpMorph, true);
    TriggerEnable(libCOMI_gt_CM_Horner_MagMines, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Horner_TriggersInit_Init () {
    libCOMI_gt_CM_Horner_TriggersInit = TriggerCreate("libCOMI_gt_CM_Horner_TriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_KaraxUnitReviveBarrier
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_KaraxUnitReviveBarrier_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_alliedKaraxPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());
    lv_alliedKaraxPlayer = libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ProtossKarax", libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_player));

    // Conditions
    if (testConds) {
        if (!((libCOOC_gf_PlayerIsCommander(lv_player) == true))) {
            return false;
        }

        if (!((lv_alliedKaraxPlayer != c_playerAny))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(lv_alliedKaraxPlayer, "KaraxUnitSpawnBarrier", c_techCountCompleteOnly) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "KaraxUnitSpawnBarrier", libCOMI_gv_cM_GlobalCasterUnit[lv_alliedKaraxPlayer], 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_KaraxUnitReviveBarrier_Init () {
    libCOMI_gt_CM_KaraxUnitReviveBarrier = TriggerCreate("libCOMI_gt_CM_KaraxUnitReviveBarrier_Func");
    TriggerEnable(libCOMI_gt_CM_KaraxUnitReviveBarrier, false);
    TriggerAddEventUnitRevive(libCOMI_gt_CM_KaraxUnitReviveBarrier, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_KaraxSolarForgeSOAEnergy
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_KaraxSolarForgeSOAEnergy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "KaraxCommander", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "SolarEfficiencyLevel3", c_techCountCompleteOnly) == 1)) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SolarForgeSolarEfficiency3MU", libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()]);
        libCOUI_gf_CU_GPSoAUpdateVitals(EventPlayer());
    }
    else if ((TechTreeUpgradeCount(EventPlayer(), "SolarEfficiencyLevel2", c_techCountCompleteOnly) == 1)) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SolarForgeSolarEfficiency2MU", libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()]);
        libCOUI_gf_CU_GPSoAUpdateVitals(EventPlayer());
    }
    else if ((TechTreeUpgradeCount(EventPlayer(), "SolarEfficiencyLevel1", c_techCountCompleteOnly) == 1)) {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SolarForgeSolarEfficiency1MU", libCOMI_gv_cM_GlobalCasterUnit[EventPlayer()]);
        libCOUI_gf_CU_GPSoAUpdateVitals(EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_KaraxSolarForgeSOAEnergy_Init () {
    libCOMI_gt_CM_KaraxSolarForgeSOAEnergy = TriggerCreate("libCOMI_gt_CM_KaraxSolarForgeSOAEnergy_Func");
    TriggerEnable(libCOMI_gt_CM_KaraxSolarForgeSOAEnergy, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_KaraxSolarForgeSOAEnergy, c_playerAny, "SolarForgeBeamImpactDummyMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MasteryKerriganInstantReviveCooldown
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MasteryKerriganInstantReviveCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(libCOMI_gv_cM_HeroUnit[lv_p], "KerriganInstantReviveCooldown", libCOMI_gv_cM_HeroUnit[lv_p], 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MasteryKerriganInstantReviveCooldown_Init () {
    libCOMI_gt_CM_MasteryKerriganInstantReviveCooldown = TriggerCreate("libCOMI_gt_CM_MasteryKerriganInstantReviveCooldown_Func");
    TriggerEnable(libCOMI_gt_CM_MasteryKerriganInstantReviveCooldown, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_MasteryKerriganInstantReviveCooldown, c_playerAny, "MasteryKerriganInstantReviveChanced");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Psi Strike
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_KerriganPsiStrike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_k;
    point lv_t;
    point lv_finalT;
    fixed lv_facing;
    fixed lv_distance;
    bool lv_goodPositionFound;
    int lv_i;
    int lv_player;

    // Automatic Variable Declarations
    const int autoABE5947F_ae = 14;
    const int autoABE5947F_ai = 1;

    // Variable Initialization
    lv_k = UnitGetPosition(EventUnit());
    lv_t = EventUnitTargetPoint();
    lv_facing = AngleBetweenPoints(UnitGetPosition(EventUnit()), EventUnitTargetPoint());
    lv_distance = 8.0;
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, 8.0, lv_t);
    lv_finalT = lv_t;
    while ((lv_distance >= 0.6) && (lv_goodPositionFound == false)) {
        lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, lv_distance, lv_t);
        if ((PointPathingCost(lv_k, lv_t) <= FixedToInt((lv_distance * 1.5))) && (WorldHeight(c_heightMapGround, lv_k) < (WorldHeight(c_heightMapGround, lv_t) + 1.0)) && (WorldHeight(c_heightMapGround, lv_k) > (WorldHeight(c_heightMapGround, lv_t) - 1.0))) {
            lv_goodPositionFound = true;
        }

        lv_distance -= 0.5;
    }
    Wait(0.0625, c_timeGame);
    if ((lv_goodPositionFound == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_t), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueReplace);
    }
    Wait(0.1875, c_timeGame);
    lv_i = 1;
    for ( ; ( (autoABE5947F_ai >= 0 && lv_i <= autoABE5947F_ae) || (autoABE5947F_ai < 0 && lv_i >= autoABE5947F_ae) ) ; lv_i += autoABE5947F_ai ) {
        libCOMI_gv_kerriganPsiStrikeFacing[lv_player] = UnitGetFacing(EventUnit());
        if ((lv_facing > 90.0)) {
            if (((libCOMI_gv_kerriganPsiStrikeFacing[lv_player] < (lv_facing - 90.0)) && (libCOMI_gv_kerriganPsiStrikeFacing[lv_player] > (lv_facing - 270.0)))) {
                UnitBehaviorRemove(EventUnit(), "PsiStrikeWalkSpeed", 1);
                break;
            }

        }
        else {
            if ((lv_facing < -90.0)) {
                if (((libCOMI_gv_kerriganPsiStrikeFacing[lv_player] > (lv_facing + 90.0)) && (libCOMI_gv_kerriganPsiStrikeFacing[lv_player] < (lv_facing + 270.0)))) {
                    UnitBehaviorRemove(EventUnit(), "PsiStrikeWalkSpeed", 1);
                    break;
                }

            }
            else {
                if (((libCOMI_gv_kerriganPsiStrikeFacing[lv_player] > (lv_facing + 90.0)) || (libCOMI_gv_kerriganPsiStrikeFacing[lv_player] < (lv_facing - 90.0)))) {
                    UnitBehaviorRemove(EventUnit(), "PsiStrikeWalkSpeed", 1);
                    break;
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_KerriganPsiStrike_Init () {
    libCOMI_gt_KerriganPsiStrike = TriggerCreate("libCOMI_gt_KerriganPsiStrike_Func");
    TriggerEnable(libCOMI_gt_KerriganPsiStrike, false);
    TriggerAddEventUnitAbility(libCOMI_gt_KerriganPsiStrike, null, AbilityCommand("PsiStrikeWalk", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kerrigan Econ Drop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_KerriganEconDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_position;
    string lv_resource;
    int lv_killer;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto9E470CFD_g;

    // Variable Initialization
    lv_killer = libNtve_gf_KillingPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "KerriganVoidCoopEconDrop") == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_position = UnitGetPosition(EventUnit());
    if ((UnitHasBehavior2(EventUnit(), "SupplyLT1") == true)) {
        lv_resource = "KerriganVoidCoopEconDropLT1";
    }
    else if ((UnitHasBehavior2(EventUnit(), "HybridUnitDummy") == true)) {
        lv_resource = "KerriganVoidCoopEconDrop4";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) == -1)) {
        lv_resource = "KerriganVoidCoopEconDrop1";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) == -2)) {
        lv_resource = "KerriganVoidCoopEconDrop2";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) == -3)) {
        lv_resource = "KerriganVoidCoopEconDrop3";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) == -4)) {
        lv_resource = "KerriganVoidCoopEconDrop4";
    }
    else if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventUnit()), "Food", 0) < -4)) {
        lv_resource = "KerriganVoidCoopEconDrop5";
    }
    if ((lv_resource == null)) {
        return true;
    }

    auto9E470CFD_g = libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_killer);
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto9E470CFD_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_resource, 0, lv_itPlayer, lv_position);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_KerriganEconDrop_Init () {
    libCOMI_gt_KerriganEconDrop = TriggerCreate("libCOMI_gt_KerriganEconDrop_Func");
    TriggerEnable(libCOMI_gt_KerriganEconDrop, false);
    TriggerAddEventUnitDied(libCOMI_gt_KerriganEconDrop, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Kerrigan_WeaponSwap
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Kerrigan_WeaponSwap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "MutaliskBroodlord")) {
        UnitWeaponRemove(EventUnit(), "GlaiveWurm");
        UnitWeaponAdd(EventUnit(), "CoopGlaiveWurm", null);
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Kerrigan_WeaponSwap_Init () {
    libCOMI_gt_CM_Kerrigan_WeaponSwap = TriggerCreate("libCOMI_gt_CM_Kerrigan_WeaponSwap_Func");
    TriggerEnable(libCOMI_gt_CM_Kerrigan_WeaponSwap, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Kerrigan_WeaponSwap, null, "KerriganOwned", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_LaserDrillBFGActivate
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_LaserDrillBFGActivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_laserDrillUnit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libCOMI_gv_cM_LaserDrillUnit[lv_player])), libCOMI_gv_cM_LaserDrillUnitGroup[lv_player], OrderTargetingPoint(AbilityCommand("DrakkenLaserDrillBFG", 0), UnitGetPosition(libCOMI_gv_cM_LaserDrillUnit[lv_player])), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_LaserDrillBFGActivate_Init () {
    libCOMI_gt_CM_LaserDrillBFGActivate = TriggerCreate("libCOMI_gt_CM_LaserDrillBFGActivate_Func");
    TriggerEnable(libCOMI_gt_CM_LaserDrillBFGActivate, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_LaserDrillBFGActivate, null, AbilityCommand("DrakkenLaserDrillConcentratedBeamIssueOrder", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_LaserDrillNukeActivate
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_LaserDrillNukeActivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libCOMI_gv_cM_LaserDrillUnit[lv_player])), libCOMI_gv_cM_LaserDrillUnitGroup[lv_player], OrderTargetingPoint(AbilityCommand("DrakkenLaserDrillNuke", 0), UnitGetPosition(libCOMI_gv_cM_LaserDrillUnit[lv_player])), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_LaserDrillNukeActivate_Init () {
    libCOMI_gt_CM_LaserDrillNukeActivate = TriggerCreate("libCOMI_gt_CM_LaserDrillNukeActivate_Func");
    TriggerEnable(libCOMI_gt_CM_LaserDrillNukeActivate, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_LaserDrillNukeActivate, null, AbilityCommand("DrakkenLaserDrillPulseCannonIssueOrder", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_LaserDrillBFG
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_LaserDrillBFG_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_casterPoint;
    point lv_targetPoint;
    point lv_abilityTargetPoint;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_casterPoint = UnitGetPosition(EventUnit());
    lv_targetPoint = EventUnitTargetPoint();
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    lv_abilityTargetPoint = libCOMI_gf_CM_LaserDrillTargetPoint(lv_targetPoint, lv_casterPoint, RegionPlayableMap(), lv_player);
    if ((lv_abilityTargetPoint != null)) {
        CatalogFieldValueModify(c_gameCatalogEffect, "DrakkenLaserDrillBFGDummyCP", "PeriodicOffsetArray[" + IntToString(0) + "]", EventPlayer(), ("0, -" + IntToString((libCOMI_gv_cM_LaserDrillDistance[lv_player] / 2)) + ", 0"), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogEffect, "DrakkenLaserDrillBFGCP", "PeriodicOffsetArray[" + IntToString(0) + "]", EventPlayer(), ("0, -" + IntToString((libCOMI_gv_cM_LaserDrillDistance[lv_player] / 2)) + ", 0"), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogEffect, "DrakkenLaserDrillBFGSearch", "AreaArray[" + IntToString(0) + "].RectangleHeight", EventPlayer(), IntToString(libCOMI_gv_cM_LaserDrillDistance[lv_player]), c_upgradeOperationSet);
        UnitCreateEffectPoint(EventUnit(), "DrakkenLaserDrillBFGSet", lv_abilityTargetPoint);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_LaserDrillBFG_Init () {
    libCOMI_gt_CM_LaserDrillBFG = TriggerCreate("libCOMI_gt_CM_LaserDrillBFG_Func");
    TriggerEnable(libCOMI_gt_CM_LaserDrillBFG, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_LaserDrillBFG, null, AbilityCommand("DrakkenLaserDrillBFG", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser Drill Beam Sound Region Clear
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_LaserDrillBeamSoundRegionClear_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_laserDrillSoundRegionCreated[lv_player] == true)) {
        ActorScopeSend(ActorScopeFromActor(libCOMI_gv_laserDrillSoundRegionActor[lv_player]), "Signal StopSound");
        libCOMI_gv_laserDrillSoundRegion[lv_player] = RegionEmpty();
        libCOMI_gv_laserDrillSoundRegionCreated[lv_player] = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_LaserDrillBeamSoundRegionClear_Init () {
    libCOMI_gt_LaserDrillBeamSoundRegionClear = TriggerCreate("libCOMI_gt_LaserDrillBeamSoundRegionClear_Func");
    TriggerEnable(libCOMI_gt_LaserDrillBeamSoundRegionClear, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_LaserDrillBeamSoundRegionClear, c_playerAny, "LaserDrillTripodCoopFinalPersistentEnd");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser Drill Beam Sound Firing
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_LaserDrillBeamSoundFiring_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_a;
    point lv_b;
    fixed lv_d;
    int lv_di;
    fixed lv_facing;
    int lv_i;
    fixed lv_x;
    fixed lv_y;
    int lv_player;

    // Automatic Variable Declarations
    int auto4F31BA37_ae;
    const int auto4F31BA37_ai = 1;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_laserDrillSoundRegionCreated[lv_player] == true)) {
        ActorScopeSend(ActorScopeFromActor(libCOMI_gv_laserDrillSoundRegionActor[lv_player]), "Signal StopSound");
        libCOMI_gv_laserDrillSoundRegion[lv_player] = RegionEmpty();
        libCOMI_gv_laserDrillSoundRegionCreated[lv_player] = false;
    }

    lv_a = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_b = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    lv_facing = AngleBetweenPoints(lv_a, lv_b);
    lv_d = DistanceBetweenPoints(lv_a, lv_b);
    lv_di = FixedToInt((lv_d / 5.0));
    lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * 5.0));
    lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * 5.0));
    libCOMI_gv_laserDrillSoundRegion[lv_player] = RegionCircle(Point(lv_x, lv_y), 1.0);
    auto4F31BA37_ae = lv_di;
    lv_i = 1;
    for ( ; ( (auto4F31BA37_ai >= 0 && lv_i <= auto4F31BA37_ae) || (auto4F31BA37_ai < 0 && lv_i >= auto4F31BA37_ae) ) ; lv_i += auto4F31BA37_ai ) {
        lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        RegionAddCircle(libCOMI_gv_laserDrillSoundRegion[lv_player], true, Point(lv_x, lv_y), 3.0);
    }
    ActorRegionCreate(null, "LaserDrillCoopBeamRegion", libCOMI_gv_laserDrillSoundRegion[lv_player]);
    libCOMI_gv_laserDrillSoundRegionActor[lv_player] = libNtve_gf_ActorLastCreated();
    libCOMI_gv_laserDrillSoundRegionCreated[lv_player] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_LaserDrillBeamSoundFiring_Init () {
    libCOMI_gt_LaserDrillBeamSoundFiring = TriggerCreate("libCOMI_gt_LaserDrillBeamSoundFiring_Func");
    TriggerEnable(libCOMI_gt_LaserDrillBeamSoundFiring, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_LaserDrillBeamSoundFiring, c_playerAny, "LaserDrillTripodCoopFinalPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LaserDrillBFG Beam Sound Firing
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_LaserDrillBFGBeamSoundFiring_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_a;
    point lv_b;
    fixed lv_d;
    int lv_di;
    fixed lv_facing;
    int lv_i;
    fixed lv_x;
    fixed lv_y;
    int lv_player;

    // Automatic Variable Declarations
    int autoCBCE54E5_ae;
    const int autoCBCE54E5_ai = 1;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_laserDrillBFGSoundRegionCreated[lv_player] == true)) {
        ActorScopeSend(ActorScopeFromActor(libCOMI_gv_laserDrillBFGSoundRegionActor[lv_player]), "Signal StopSound");
        libCOMI_gv_laserDrillBFGSoundRegion[lv_player] = RegionEmpty();
        libCOMI_gv_laserDrillBFGSoundRegionCreated[lv_player] = false;
    }

    lv_a = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_b = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_facing = AngleBetweenPoints(lv_a, lv_b);
    lv_d = DistanceBetweenPoints(lv_a, lv_b);
    lv_di = FixedToInt((lv_d / 5.0));
    lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * 5.0));
    lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * 5.0));
    libCOMI_gv_laserDrillBFGSoundRegion[lv_player] = RegionCircle(Point(lv_x, lv_y), 1.0);
    autoCBCE54E5_ae = lv_di;
    lv_i = 1;
    for ( ; ( (autoCBCE54E5_ai >= 0 && lv_i <= autoCBCE54E5_ae) || (autoCBCE54E5_ai < 0 && lv_i >= autoCBCE54E5_ae) ) ; lv_i += autoCBCE54E5_ai ) {
        lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        RegionAddCircle(libCOMI_gv_laserDrillBFGSoundRegion[lv_player], true, Point(lv_x, lv_y), 3.0);
    }
    ActorRegionCreate(null, "LaserDrillCoopConcentratedBeamRegion", libCOMI_gv_laserDrillBFGSoundRegion[lv_player]);
    libCOMI_gv_laserDrillBFGSoundRegionActor[lv_player] = libNtve_gf_ActorLastCreated();
    libCOMI_gv_laserDrillBFGSoundRegionCreated[lv_player] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_LaserDrillBFGBeamSoundFiring_Init () {
    libCOMI_gt_LaserDrillBFGBeamSoundFiring = TriggerCreate("libCOMI_gt_LaserDrillBFGBeamSoundFiring_Func");
    TriggerEnable(libCOMI_gt_LaserDrillBFGBeamSoundFiring, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_LaserDrillBFGBeamSoundFiring, c_playerAny, "DrakkenLaserDrillBFGCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LaserDrillNuke Beam Sound Firing
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_LaserDrillNukeBeamSoundFiring_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_a;
    point lv_b;
    fixed lv_d;
    int lv_di;
    fixed lv_facing;
    int lv_i;
    fixed lv_x;
    fixed lv_y;
    int lv_player;

    // Automatic Variable Declarations
    int auto19534EEF_ae;
    const int auto19534EEF_ai = 1;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_laserDrillNukeSoundRegionCreated[lv_player] == true)) {
        ActorScopeSend(ActorScopeFromActor(libCOMI_gv_laserDrillNukeSoundRegionActor[lv_player]), "Signal StopSound");
        libCOMI_gv_laserDrillNukeSoundRegion[lv_player] = RegionEmpty();
        libCOMI_gv_laserDrillNukeSoundRegionCreated[lv_player] = false;
    }

    lv_a = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_b = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_facing = AngleBetweenPoints(lv_a, lv_b);
    lv_d = DistanceBetweenPoints(lv_a, lv_b);
    lv_di = FixedToInt((lv_d / 5.0));
    lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * 5.0));
    lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * 5.0));
    libCOMI_gv_laserDrillNukeSoundRegion[lv_player] = RegionCircle(Point(lv_x, lv_y), 1.0);
    auto19534EEF_ae = lv_di;
    lv_i = 1;
    for ( ; ( (auto19534EEF_ai >= 0 && lv_i <= auto19534EEF_ae) || (auto19534EEF_ai < 0 && lv_i >= auto19534EEF_ae) ) ; lv_i += auto19534EEF_ai ) {
        lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        RegionAddCircle(libCOMI_gv_laserDrillNukeSoundRegion[lv_player], true, Point(lv_x, lv_y), 3.0);
    }
    ActorRegionCreate(null, "PulseCannonBeamRegion", libCOMI_gv_laserDrillNukeSoundRegion[lv_player]);
    libCOMI_gv_laserDrillNukeSoundRegionActor[lv_player] = libNtve_gf_ActorLastCreated();
    libCOMI_gv_laserDrillNukeSoundRegionCreated[lv_player] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_LaserDrillNukeBeamSoundFiring_Init () {
    libCOMI_gt_LaserDrillNukeBeamSoundFiring = TriggerCreate("libCOMI_gt_LaserDrillNukeBeamSoundFiring_Func");
    TriggerEnable(libCOMI_gt_LaserDrillNukeBeamSoundFiring, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_LaserDrillNukeBeamSoundFiring, c_playerAny, "DrakkenLaserDrillNukeDelayCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser DrillNuke Beam Sound Region Clear
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_LaserDrillNukeBeamSoundRegionClear_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_laserDrillNukeSoundRegionCreated[lv_player] == true)) {
        ActorScopeSend(ActorScopeFromActor(libCOMI_gv_laserDrillNukeSoundRegionActor[lv_player]), "Signal StopSound");
        libCOMI_gv_laserDrillNukeSoundRegion[lv_player] = RegionEmpty();
        libCOMI_gv_laserDrillNukeSoundRegionCreated[lv_player] = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_LaserDrillNukeBeamSoundRegionClear_Init () {
    libCOMI_gt_LaserDrillNukeBeamSoundRegionClear = TriggerCreate("libCOMI_gt_LaserDrillNukeBeamSoundRegionClear_Func");
    TriggerEnable(libCOMI_gt_LaserDrillNukeBeamSoundRegionClear, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_LaserDrillNukeBeamSoundRegionClear, c_playerAny, "DrakkenLaserDrillNukeSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_LaserDrillTopbarOrder
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_LaserDrillTopbarOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_order;
    bool lv_queue;
    unit lv_laserDrill;
    order lv_orderAttack;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_order = EventUnitOrder();
    lv_queue = OrderGetFlag(lv_order, c_cmdQueued);
    lv_laserDrill = libCOMI_gv_cM_LaserDrillUnit[OrderGetPlayer(lv_order)];
    lv_orderAttack = OrderTargetingUnit(AbilityCommand("attack", 0), OrderGetTargetUnit(lv_order));

    // Actions
    if (!runActions) {
        return true;
    }

    OrderSetFlag(lv_orderAttack, c_cmdQueued, lv_queue);
    UnitIssueOrder(lv_laserDrill, lv_orderAttack, c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_LaserDrillTopbarOrder_Init () {
    libCOMI_gt_CM_LaserDrillTopbarOrder = TriggerCreate("libCOMI_gt_CM_LaserDrillTopbarOrder_Func");
    TriggerAddEventUnitOrder(libCOMI_gt_CM_LaserDrillTopbarOrder, null, AbilityCommand("DrakkenLaserDrillAttackIssueOrder", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: NovaUnitNames_GenerateNameList
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_NovaUnitNames_GenerateNameList_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoD93B8E07_ae = libCOMI_gv_cMC_NovaUnitName_CountMax;
    const int autoD93B8E07_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoD93B8E07_ai >= 0 && lv_i <= autoD93B8E07_ae) || (autoD93B8E07_ai < 0 && lv_i >= autoD93B8E07_ae) ) ; lv_i += autoD93B8E07_ai ) {
        TextExpressionSetToken("Param/Expression/lib_COMI_474CC3E3", "Name", libCOMI_gf_CC_StoryArmyUnitUnitType(lv_i));
        libCOMI_gv_cM_NovaUnitName_Text[lv_i] = TextExpressionAssemble("Param/Expression/lib_COMI_474CC3E3");
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_NovaUnitNames_GenerateNameList_Init () {
    libCOMI_gt_NovaUnitNames_GenerateNameList = TriggerCreate("libCOMI_gt_NovaUnitNames_GenerateNameList_Func");
    TriggerEnable(libCOMI_gt_NovaUnitNames_GenerateNameList, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NovaUnitNames_Assign
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_NovaUnitNames_Assign_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_novaUnitName_Player;
    unit lv_novaUnitName_Unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_novaUnitName_Player = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    lv_novaUnitName_Unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_HumanPlayers(), lv_novaUnitName_Player) == true))) {
            return false;
        }

        if (!(((libCOOC_gf_ActiveCommanderForPlayer(lv_novaUnitName_Player) == "TerranNova") || (libCOOC_gf_ActiveCommanderForPlayer(lv_novaUnitName_Player) == "TerranHorner")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(EventPlayerEffectUsedUnit(c_effectUnitTarget), 61, IntToFixed(libCOMI_gv_cM_NovaUnitName_CountCurrentPosition));
    libCOMI_gf_NovaUnitNames_KillUpdateText(lv_novaUnitName_Unit, libCOMI_gv_cM_NovaUnitName_CountCurrentPosition);
    libCOMI_gv_cM_NovaUnitName_CountCurrentPosition += libCOMI_gv_cM_NovaUnitName_CountStep;
    if ((libCOMI_gv_cM_NovaUnitName_CountCurrentPosition > libCOMI_gv_cMC_NovaUnitName_CountMax)) {
        libCOMI_gv_cM_NovaUnitName_CountCurrentPosition -= libCOMI_gv_cMC_NovaUnitName_CountMax;
    }

    if ((libCOMI_gv_cM_NovaUnitName_CountCurrentPosition < 1)) {
        libCOMI_gv_cM_NovaUnitName_CountCurrentPosition += libCOMI_gv_cMC_NovaUnitName_CountMax;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_NovaUnitNames_Assign_Init () {
    libCOMI_gt_NovaUnitNames_Assign = TriggerCreate("libCOMI_gt_NovaUnitNames_Assign_Func");
    TriggerEnable(libCOMI_gt_NovaUnitNames_Assign, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_NovaUnitNames_Assign, c_playerAny, "BarracksOrbitalStrikeAssignRally");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_NovaUnitNames_Assign, c_playerAny, "MercAirDropApplyBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NovaUnitNames_KillCountUpdate
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_NovaUnitNames_KillCountUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_customValue61;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_customValue61 = FixedToInt(UnitGetCustomValue(libNtve_gf_KillingUnit(), 61));

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!(((PlayerCommander(libNtve_gf_KillingPlayer()) == "Nova") || (PlayerCommander(libNtve_gf_KillingPlayer()) == "Horner")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_customValue61 != 0)) {
        libCOMI_gf_NovaUnitNames_KillUpdateText(libNtve_gf_KillingUnit(), lv_customValue61);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_NovaUnitNames_KillCountUpdate_Init () {
    libCOMI_gt_NovaUnitNames_KillCountUpdate = TriggerCreate("libCOMI_gt_NovaUnitNames_KillCountUpdate_Func");
    TriggerEnable(libCOMI_gt_NovaUnitNames_KillCountUpdate, false);
    TriggerAddEventUnitDied(libCOMI_gt_NovaUnitNames_KillCountUpdate, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NovaUnitNames_KillCountUpdateLaserTurret
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_NovaUnitNames_KillCountUpdateLaserTurret_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_customValue61;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((PlayerCommander(libNtve_gf_KillingPlayer()) == "Nova"))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "NovaACLaserTurret"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_customValue61 = FixedToInt(UnitGetCustomValue(UnitBehaviorEffectUnit(libNtve_gf_KillingUnit(), "AutoTurret_BlackOpsTimedLife", c_effectUnitCaster, 0), 61));
    libCOMI_gf_NovaUnitNames_KillUpdateText(UnitBehaviorEffectUnit(libNtve_gf_KillingUnit(), "AutoTurret_BlackOpsTimedLife", c_effectUnitCaster, 0), lv_customValue61);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_NovaUnitNames_KillCountUpdateLaserTurret_Init () {
    libCOMI_gt_NovaUnitNames_KillCountUpdateLaserTurret = TriggerCreate("libCOMI_gt_NovaUnitNames_KillCountUpdateLaserTurret_Func");
    TriggerEnable(libCOMI_gt_NovaUnitNames_KillCountUpdateLaserTurret, false);
    TriggerAddEventUnitDied(libCOMI_gt_NovaUnitNames_KillCountUpdateLaserTurret, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinTransportActived
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaGriffinTransportActived_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0);
    lv_pg = PlayerGroupSingle(lv_p);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    libCOMI_gv_cM_NovaGriffinTransportUnit[lv_p] = EventUnit();
    libCOMI_gv_cM_NovaGriffinTransportUnitGroup[lv_p] = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
    libCOMI_gv_cM_NovaGriffinTranportLoadPoint[lv_p] = UnitGetPosition(libCOMI_gv_cM_NovaGriffinTransportUnit[lv_p]);
    UnitSetState(libCOMI_gv_cM_GlobalCasterUnit[lv_p], c_unitStateSilenced, true);
    UISetCursorVisible(lv_pg, false);
    Wait(0.5, c_timeGame);
    UISetCursorVisible(lv_pg, true);
    UISetTargetingOrder(lv_pg, libCOMI_gv_cM_NovaGriffinTransportUnitGroup[lv_p], OrderTargetingPoint(AbilityCommand("NovaGriffinTransportUnloadUnits", 0), UnitGetPosition(libCOMI_gv_cM_NovaGriffinTransportUnit[lv_p])), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaGriffinTransportActived_Init () {
    libCOMI_gt_CM_NovaGriffinTransportActived = TriggerCreate("libCOMI_gt_CM_NovaGriffinTransportActived_Func");
    TriggerEnable(libCOMI_gt_CM_NovaGriffinTransportActived, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_NovaGriffinTransportActived, null, "NovaGriffinTransportActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinTransportStop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaGriffinTransportStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(libCOMI_gv_cM_GlobalCasterUnit[lv_p], c_unitStateSilenced, false);
    Wait(0.0625, c_timeGame);
    if ((UnitHasBehavior2(libCOMI_gv_cM_NovaGriffinTransportUnit[lv_p], "NovaGriffinTransportUnloadUnitsDespawnDelay") == false)) {
        UnitCreateEffectUnit(libCOMI_gv_cM_NovaGriffinTransportUnit[lv_p], "NovaGriffinTransportCancelUnloadSet", libCOMI_gv_cM_NovaGriffinTransportUnit[lv_p]);
    }

    UnitCreateEffectUnit(libCOMI_gv_cM_GlobalCasterUnit[lv_p], "NovaGriffinGCD", libCOMI_gv_cM_GlobalCasterUnit[lv_p]);
    UnitGroupClear(libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupAir[lv_p]);
    UnitGroupClear(libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupGround[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaGriffinTransportStop_Init () {
    libCOMI_gt_CM_NovaGriffinTransportStop = TriggerCreate("libCOMI_gt_CM_NovaGriffinTransportStop_Func");
    TriggerEnable(libCOMI_gt_CM_NovaGriffinTransportStop, false);
    TriggerAddEventTargetModeUpdate(libCOMI_gt_CM_NovaGriffinTransportStop, c_playerAny, AbilityCommand("NovaGriffinTransportUnloadUnits", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinTransportTimeOut
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaGriffinTransportTimeOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libCOMI_gv_cM_GlobalCasterUnit[lv_p], "NovaGriffinGCD", libCOMI_gv_cM_GlobalCasterUnit[lv_p]);
    UnitSetState(libCOMI_gv_cM_GlobalCasterUnit[lv_p], c_unitStateSilenced, false);
    UnitGroupClear(libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupAir[lv_p]);
    UnitGroupClear(libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupGround[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaGriffinTransportTimeOut_Init () {
    libCOMI_gt_CM_NovaGriffinTransportTimeOut = TriggerCreate("libCOMI_gt_CM_NovaGriffinTransportTimeOut_Func");
    TriggerEnable(libCOMI_gt_CM_NovaGriffinTransportTimeOut, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_NovaGriffinTransportTimeOut, c_playerAny, "NovaGriffinTransportUnloadUnitsDespawnDelayTimeOut");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinTransportAirBehaviorApplied
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaGriffinTransportAirBehaviorApplied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupAir[lv_p], EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaGriffinTransportAirBehaviorApplied_Init () {
    libCOMI_gt_CM_NovaGriffinTransportAirBehaviorApplied = TriggerCreate("libCOMI_gt_CM_NovaGriffinTransportAirBehaviorApplied_Func");
    TriggerEnable(libCOMI_gt_CM_NovaGriffinTransportAirBehaviorApplied, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_NovaGriffinTransportAirBehaviorApplied, null, "NovaGriffinTransportAirUnits", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinTransportGroundBehaviorApplied
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaGriffinTransportGroundBehaviorApplied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupGround[lv_p], EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaGriffinTransportGroundBehaviorApplied_Init () {
    libCOMI_gt_CM_NovaGriffinTransportGroundBehaviorApplied = TriggerCreate("libCOMI_gt_CM_NovaGriffinTransportGroundBehaviorApplied_Func");
    TriggerEnable(libCOMI_gt_CM_NovaGriffinTransportGroundBehaviorApplied, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_NovaGriffinTransportGroundBehaviorApplied, null, "NovaGriffinTransportGroundUnits", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinTransportTeleportUnload
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaGriffinTransportTeleportUnload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_unloadPoint;
    fixed lv_angle;
    fixed lv_distance;
    int lv_p;

    // Automatic Variable Declarations
    unitgroup auto5C6CB81D_g;
    int auto5C6CB81D_u;
    unit auto5C6CB81D_var;
    unitgroup auto33602D3D_g;
    int auto33602D3D_u;
    unit auto33602D3D_var;

    // Variable Initialization
    lv_unloadPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetUnit);
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = AngleBetweenPoints(libCOMI_gv_cM_NovaGriffinTranportLoadPoint[lv_p], lv_unloadPoint);
    lv_distance = DistanceBetweenPoints(libCOMI_gv_cM_NovaGriffinTranportLoadPoint[lv_p], lv_unloadPoint);
    auto5C6CB81D_g = libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupAir[lv_p];
    auto5C6CB81D_u = UnitGroupCount(auto5C6CB81D_g, c_unitCountAll);
    for (;; auto5C6CB81D_u -= 1) {
        auto5C6CB81D_var = UnitGroupUnitFromEnd(auto5C6CB81D_g, auto5C6CB81D_u);
        if (auto5C6CB81D_var == null) { break; }
        UnitSetPosition(auto5C6CB81D_var, PointWithOffsetPolar(UnitGetPosition(auto5C6CB81D_var), lv_distance, lv_angle), false);
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "NovaGriffinTransportAirUnitsRB", auto5C6CB81D_var);
    }
    auto33602D3D_g = libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupGround[lv_p];
    auto33602D3D_u = UnitGroupCount(auto33602D3D_g, c_unitCountAll);
    for (;; auto33602D3D_u -= 1) {
        auto33602D3D_var = UnitGroupUnitFromEnd(auto33602D3D_g, auto33602D3D_u);
        if (auto33602D3D_var == null) { break; }
        if ((PointPathingPassable(PointWithOffsetPolar(UnitGetPosition(auto33602D3D_var), lv_distance, lv_angle)) == true)) {
            UnitSetPosition(auto33602D3D_var, PointWithOffsetPolar(UnitGetPosition(auto33602D3D_var), lv_distance, lv_angle), false);
        }
        else {
            UnitSetPosition(auto33602D3D_var, UnitTypePlacementFromPoint(UnitGetType(auto33602D3D_var), UnitGetOwner(auto33602D3D_var), lv_unloadPoint, 5.0), false);
        }
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "NovaGriffinTransportUnhideUnitsSet", auto33602D3D_var);
    }
    UnitGroupClear(libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupAir[lv_p]);
    UnitGroupClear(libCOMI_gv_cM_NovaGriffinGroundUnitsTransportGroupGround[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaGriffinTransportTeleportUnload_Init () {
    libCOMI_gt_CM_NovaGriffinTransportTeleportUnload = TriggerCreate("libCOMI_gt_CM_NovaGriffinTransportTeleportUnload_Func");
    TriggerEnable(libCOMI_gt_CM_NovaGriffinTransportTeleportUnload, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_NovaGriffinTransportTeleportUnload, c_playerAny, "NovaGriffinTransportUnloadUnitsCompletionSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinBombingRunActivated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaGriffinBombingRunActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    libNtve_gf_StoreUnitSelection(lv_casterPlayer, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCOMI_gv_cM_SoATargetingActivateAbility[lv_casterPlayer] = "NovaGriffinBombingRunActivate";
    libCOMI_gv_cM_SoATargetingExecuteCommand[lv_casterPlayer] = AbilityCommand("NovaGriffinBombingRunExecute", 0);
    libCOMI_gv_cM_SoATargetingCooldown[lv_casterPlayer] = "Abil/NovaGriffinBombingRunActivate";
    libCOMI_gv_cM_SoATargetingBehavior[lv_casterPlayer] = "NovaGriffinBombingRunActivate";
    libCOMI_gv_cM_SoATargetingModel[lv_casterPlayer] = "NovaGriffinBombingRunTargetingModel";
    libCOMI_gv_cM_SoATargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("NovaGriffinBombingRunTargetingDummy", 0), UnitGetPosition(libCOMI_gv_cM_SoACasterUnit[lv_casterPlayer]));
    libCOMI_gv_cM_SoATargetingUnitType[lv_casterPlayer] = "NovaGriffinBombingRunTargeter";
    libCOMI_gv_cM_SoATargetingChargesTotal[lv_casterPlayer] = 1;
    libCOMI_gv_cM_SoATargetingInstructionsPrimary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMI_87E8D5EE");
    libCOMI_gv_cM_SoATargetingInstructionsSecondary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMI_A2913642");
    libCOMI_gv_cM_NovaGriffinBombingRunCost[lv_casterPlayer] = StringToInt(CatalogFieldValueGet(c_gameCatalogAbil, "NovaGriffinBombingRunActivate", "Cost[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", lv_casterPlayer));
    libCOMI_gf_CM_SoATargetingModeEnter(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaGriffinBombingRunActivated_Init () {
    libCOMI_gt_CM_NovaGriffinBombingRunActivated = TriggerCreate("libCOMI_gt_CM_NovaGriffinBombingRunActivated_Func");
    TriggerEnable(libCOMI_gt_CM_NovaGriffinBombingRunActivated, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_NovaGriffinBombingRunActivated, null, "NovaGriffinBombingRunActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaGriffinBombingRunFinish
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaGriffinBombingRunFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityGetCooldown(libCOMI_gv_cM_GlobalCasterUnit[lv_p], "NovaGriffinBombingRunActivate", "Abil/NovaGriffinBombingRunActivate") > 1.0)) {
        UnitCreateEffectUnit(libCOMI_gv_cM_GlobalCasterUnit[lv_p], "NovaGriffinGCD", libCOMI_gv_cM_GlobalCasterUnit[lv_p]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaGriffinBombingRunFinish_Init () {
    libCOMI_gt_CM_NovaGriffinBombingRunFinish = TriggerCreate("libCOMI_gt_CM_NovaGriffinBombingRunFinish_Func");
    TriggerEnable(libCOMI_gt_CM_NovaGriffinBombingRunFinish, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_NovaGriffinBombingRunFinish, null, "NovaGriffinBombingRunActivate", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Nova_TriggersInit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Nova_TriggersInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCOMI_gt_NovaUnitNames_GenerateNameList, false, false);
    TriggerEnable(libCOMI_gt_NovaUnitNames_Assign, true);
    TriggerEnable(libCOMI_gt_NovaUnitNames_KillCountUpdate, true);
    TriggerEnable(libCOMI_gt_NovaUnitNames_KillCountUpdateLaserTurret, true);
    TriggerEnable(libCOMI_gt_CM_NovaGriffinTransportActived, true);
    TriggerEnable(libCOMI_gt_CM_NovaGriffinTransportStop, true);
    TriggerEnable(libCOMI_gt_CM_NovaGriffinTransportTimeOut, true);
    TriggerEnable(libCOMI_gt_CM_NovaGriffinTransportAirBehaviorApplied, true);
    TriggerEnable(libCOMI_gt_CM_NovaGriffinTransportGroundBehaviorApplied, true);
    TriggerEnable(libCOMI_gt_CM_NovaGriffinTransportTeleportUnload, true);
    TriggerEnable(libCOMI_gt_CM_NovaGriffinBombingRunActivated, true);
    TriggerEnable(libCOMI_gt_CM_NovaGriffinBombingRunFinish, true);
    TriggerEnable(libCOMI_gt_CM_NovaSiegeModeProgressiveRangeIncreaseApply, true);
    TriggerEnable(libCOMI_gt_CM_NovaPsiStrike, true);
    TriggerEnable(libCOMI_gt_CM_Nova_BuildingCompletedTrigger, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Nova_TriggersInit_Init () {
    libCOMI_gt_CM_Nova_TriggersInit = TriggerCreate("libCOMI_gt_CM_Nova_TriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Nova Siege Mode Progressive Range Increase Apply
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaSiegeModeProgressiveRangeIncreaseApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_siegeTankUnitGroup;

    // Automatic Variable Declarations
    unitgroup autoB26D9C6B_g;
    int autoB26D9C6B_u;
    unit autoB26D9C6B_var;

    // Variable Initialization
    lv_siegeTankUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_siegeTankUnitGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("SiegeTankSieged_BlackOps", "", "", UnitGetOwner(EventUnit()), -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB26D9C6B_g = lv_siegeTankUnitGroup;
    autoB26D9C6B_u = UnitGroupCount(autoB26D9C6B_g, c_unitCountAll);
    for (;; autoB26D9C6B_u -= 1) {
        autoB26D9C6B_var = UnitGroupUnitFromEnd(autoB26D9C6B_g, autoB26D9C6B_u);
        if (autoB26D9C6B_var == null) { break; }
        UnitBehaviorAdd(autoB26D9C6B_var, "SiegeTankSiegeModeProgressiveRangeIncease", EventUnit(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaSiegeModeProgressiveRangeIncreaseApply_Init () {
    libCOMI_gt_CM_NovaSiegeModeProgressiveRangeIncreaseApply = TriggerCreate("libCOMI_gt_CM_NovaSiegeModeProgressiveRangeIncreaseApply_Func");
    TriggerEnable(libCOMI_gt_CM_NovaSiegeModeProgressiveRangeIncreaseApply, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_NovaSiegeModeProgressiveRangeIncreaseApply, null, AbilityCommand("FactoryTechLabResearch", 18), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Nova Psi Strike
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaPsiStrike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_k;
    point lv_t;
    point lv_finalT;
    fixed lv_facing;
    fixed lv_distance;
    bool lv_goodPositionFound;
    int lv_i;
    int lv_player;

    // Automatic Variable Declarations
    const int autoDB53ABA4_ae = 14;
    const int autoDB53ABA4_ai = 1;

    // Variable Initialization
    lv_k = UnitGetPosition(EventUnit());
    lv_t = EventUnitTargetPoint();
    lv_facing = AngleBetweenPoints(UnitGetPosition(EventUnit()), EventUnitTargetPoint());
    lv_distance = 8.0;
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, 8.0, lv_t);
    lv_finalT = lv_t;
    while ((lv_distance >= 0.6) && (lv_goodPositionFound == false)) {
        lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, lv_distance, lv_t);
        if ((PointPathingCost(lv_k, lv_t) <= FixedToInt((lv_distance * 1.5))) && (WorldHeight(c_heightMapGround, lv_k) < (WorldHeight(c_heightMapGround, lv_t) + 1.0)) && (WorldHeight(c_heightMapGround, lv_k) > (WorldHeight(c_heightMapGround, lv_t) - 1.0))) {
            lv_goodPositionFound = true;
        }

        lv_distance -= 0.5;
    }
    Wait(0.0625, c_timeGame);
    if ((lv_goodPositionFound == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_t), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueAddToEnd);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_finalT), c_orderQueueReplace);
    }
    Wait(0.1875, c_timeGame);
    lv_i = 1;
    for ( ; ( (autoDB53ABA4_ai >= 0 && lv_i <= autoDB53ABA4_ae) || (autoDB53ABA4_ai < 0 && lv_i >= autoDB53ABA4_ae) ) ; lv_i += autoDB53ABA4_ai ) {
        libCOMI_gv_NovaPsiStrikeFacing[lv_player] = UnitGetFacing(EventUnit());
        if ((lv_facing > 90.0)) {
            if (((libCOMI_gv_NovaPsiStrikeFacing[lv_player] < (lv_facing - 90.0)) && (libCOMI_gv_NovaPsiStrikeFacing[lv_player] > (lv_facing - 270.0)))) {
                UnitBehaviorRemove(EventUnit(), "NovaPsiStrikeWalkSpeed", 1);
                break;
            }

        }
        else {
            if ((lv_facing < -90.0)) {
                if (((libCOMI_gv_NovaPsiStrikeFacing[lv_player] > (lv_facing + 90.0)) && (libCOMI_gv_NovaPsiStrikeFacing[lv_player] < (lv_facing + 270.0)))) {
                    UnitBehaviorRemove(EventUnit(), "NovaPsiStrikeWalkSpeed", 1);
                    break;
                }

            }
            else {
                if (((libCOMI_gv_NovaPsiStrikeFacing[lv_player] > (lv_facing + 90.0)) || (libCOMI_gv_NovaPsiStrikeFacing[lv_player] < (lv_facing - 90.0)))) {
                    UnitBehaviorRemove(EventUnit(), "NovaPsiStrikeWalkSpeed", 1);
                    break;
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaPsiStrike_Init () {
    libCOMI_gt_CM_NovaPsiStrike = TriggerCreate("libCOMI_gt_CM_NovaPsiStrike_Func");
    TriggerEnable(libCOMI_gt_CM_NovaPsiStrike, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_NovaPsiStrike, null, AbilityCommand("NovaPsiStrike", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Nova_Building Completed Trigger
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Nova_BuildingCompletedTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitProgressUnit());

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(lv_player, "NovaCommander", c_techCountCompleteOnly) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnitProgressUnit()) == "Barracks") && (libCOMI_gv_novaBarrackBuilt[lv_player] == 0))) {
        libCOMI_gf_CM_ModifyCooldown("BarracksTrainNovaMarine", UnitGetOwner(EventUnitProgressUnit()));
        libCOMI_gf_CM_ModifyCooldown("BarracksTrainMarauderNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMI_gf_CM_ModifyCooldown("BarracksTrainGhostNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMI_gv_novaBarrackBuilt[lv_player] = 1;
    }

    if (((UnitGetType(EventUnitProgressUnit()) == "Factory") && (libCOMI_gv_novaFactoryBuilt[lv_player] == 0))) {
        libCOMI_gf_CM_ModifyCooldown("FactoryTrainGoliathNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMI_gf_CM_ModifyCooldown("FactoryTrainSiegeTankNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMI_gf_CM_ModifyCooldown("FactoryTrainHellbatNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMI_gv_novaFactoryBuilt[lv_player] = 1;
    }

    if (((UnitGetType(EventUnitProgressUnit()) == "Starport") && (libCOMI_gv_novaStarportBuilt[lv_player] == 0))) {
        libCOMI_gf_CM_ModifyCooldown("StarportTrainBansheeNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMI_gf_CM_ModifyCooldown("StarportTrainRavenNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMI_gf_CM_ModifyCooldown("StarportTrainLiberatorNova", UnitGetOwner(EventUnitProgressUnit()));
        libCOMI_gv_novaStarportBuilt[lv_player] = 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Nova_BuildingCompletedTrigger_Init () {
    libCOMI_gt_CM_Nova_BuildingCompletedTrigger = TriggerCreate("libCOMI_gt_CM_Nova_BuildingCompletedTrigger_Func");
    TriggerEnable(libCOMI_gt_CM_Nova_BuildingCompletedTrigger, false);
    TriggerAddEventUnitConstructProgress(libCOMI_gt_CM_Nova_BuildingCompletedTrigger, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_HyperionMinimapIconDynamicFacingDisplay
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_HyperionMinimapIconDynamicFacingDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawnedHyperion;
    int lv_hyperionPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hyperionPing = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnedHyperion = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingHyperion_AC", UnitGetPosition(lv_spawnedHyperion), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_spawnedHyperion);
    PingSetScale(PingLastCreated(), 0.6);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_COMI_C1673EE3"));
    lv_hyperionPing = PingLastCreated();
    while ((UnitIsAlive(lv_spawnedHyperion) == true)) {
        PingSetRotation(lv_hyperionPing, UnitGetFacing(lv_spawnedHyperion));
        Wait(0.125, c_timeGame);
    }
    PingDestroy(lv_hyperionPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_HyperionMinimapIconDynamicFacingDisplay_Init () {
    libCOMI_gt_CM_HyperionMinimapIconDynamicFacingDisplay = TriggerCreate("libCOMI_gt_CM_HyperionMinimapIconDynamicFacingDisplay_Func");
    TriggerEnable(libCOMI_gt_CM_HyperionMinimapIconDynamicFacingDisplay, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_HyperionMinimapIconDynamicFacingDisplay, c_playerAny, "HyperionVoidCoopSpawnAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Advanced Construction Auto - User
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AdvancedConstructionAutoUser_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_orderDummy;
    unit lv_sCV;
    unit lv_target;
    bool lv_isUserOrder;
    bool lv_isSetAutoCastStateOrder;
    bool lv_isQueuedOrder;
    string lv_ut;
    abilcmd lv_cmd;
    order lv_order;
    int lv_c;
    int lv_i;

    // Automatic Variable Declarations
    int auto160BF7D1_ae;
    const int auto160BF7D1_ai = 1;

    // Variable Initialization
    lv_orderDummy = EventUnitOrder();
    lv_sCV = EventUnit();
    lv_target = OrderGetTargetUnit(lv_orderDummy);
    lv_isUserOrder = OrderGetFlag(lv_orderDummy, c_cmdUser);
    lv_isSetAutoCastStateOrder = OrderGetFlag(lv_orderDummy, c_cmdSetAutoCast);
    lv_isQueuedOrder = OrderGetFlag(lv_orderDummy, c_cmdQueued);
    lv_ut = UnitGetType(lv_target);
    lv_c = TechTreeUnitProducedAbilCmdCount(lv_ut);

    // Conditions
    if (testConds) {
        if (!((lv_isUserOrder == true))) {
            return false;
        }

        if (!((lv_isSetAutoCastStateOrder == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_sCV, "CancelOrderAdvancedConstructionAuto", lv_sCV);
    auto160BF7D1_ae = (lv_c - 1);
    lv_i = 0;
    for ( ; ( (auto160BF7D1_ai >= 0 && lv_i <= auto160BF7D1_ae) || (auto160BF7D1_ai < 0 && lv_i >= auto160BF7D1_ae) ) ; lv_i += auto160BF7D1_ai ) {
        lv_cmd = TechTreeUnitProducedAbilCmd(lv_ut, lv_i);
        lv_order = Order(lv_cmd);
        if ((UnitOrderIsValid(lv_sCV, lv_order) == false)) {
            break;
        }

        lv_order = OrderTargetingUnit(lv_cmd, lv_target);
        OrderSetFlag(lv_order, c_cmdSmartClick, true);
        OrderSetFlag(lv_order, c_cmdQueued, lv_isQueuedOrder);
        if ((UnitOrderIsValid(lv_sCV, lv_order) == true)) {
            UnitIssueOrder(lv_sCV, lv_order, c_orderQueueReplace);
            return true;
        }

    }
    libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Error/CannotAdvancedConstruction"), SoundLink("UI_GenericError", -1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AdvancedConstructionAutoUser_Init () {
    libCOMI_gt_AdvancedConstructionAutoUser = TriggerCreate("libCOMI_gt_AdvancedConstructionAutoUser_Func");
    TriggerEnable(libCOMI_gt_AdvancedConstructionAutoUser, false);
    TriggerAddEventUnitOrder(libCOMI_gt_AdvancedConstructionAutoUser, null, AbilityCommand("AdvancedConstructionAuto", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Advanced Construction Auto - Auto Cast
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AdvancedConstructionAutoAutoCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_orderDummy;
    unit lv_sCV;
    unit lv_target;
    bool lv_isUserOrder;
    bool lv_isQueuedOrder;
    string lv_ut;
    abilcmd lv_cmd;
    order lv_order;
    int lv_c;
    int lv_i;

    // Automatic Variable Declarations
    int auto3A2F8F84_ae;
    const int auto3A2F8F84_ai = 1;

    // Variable Initialization
    lv_orderDummy = UnitOrder(EventUnit(), 0);
    lv_sCV = EventUnit();
    lv_target = OrderGetTargetUnit(lv_orderDummy);
    lv_isUserOrder = OrderGetFlag(lv_orderDummy, c_cmdUser);
    lv_isQueuedOrder = OrderGetFlag(lv_orderDummy, c_cmdQueued);
    lv_ut = UnitGetType(lv_target);
    lv_c = TechTreeUnitProducedAbilCmdCount(lv_ut);

    // Conditions
    if (testConds) {
        if (!((lv_isUserOrder == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_sCV, "CancelOrderAdvancedConstructionAuto", lv_sCV);
    auto3A2F8F84_ae = (lv_c - 1);
    lv_i = 0;
    for ( ; ( (auto3A2F8F84_ai >= 0 && lv_i <= auto3A2F8F84_ae) || (auto3A2F8F84_ai < 0 && lv_i >= auto3A2F8F84_ae) ) ; lv_i += auto3A2F8F84_ai ) {
        lv_cmd = TechTreeUnitProducedAbilCmd(lv_ut, lv_i);
        lv_order = Order(lv_cmd);
        if ((UnitOrderIsValid(lv_sCV, lv_order) == false)) {
            return true;
        }

        lv_order = OrderTargetingUnit(lv_cmd, lv_target);
        OrderSetFlag(lv_order, c_cmdSmartClick, true);
        if ((UnitOrderIsValid(lv_sCV, lv_order) == true)) {
            UnitIssueOrder(lv_sCV, lv_order, c_orderQueueAddToFront);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AdvancedConstructionAutoAutoCast_Init () {
    libCOMI_gt_AdvancedConstructionAutoAutoCast = TriggerCreate("libCOMI_gt_AdvancedConstructionAutoAutoCast_Func");
    TriggerEnable(libCOMI_gt_AdvancedConstructionAutoAutoCast, false);
    TriggerAddEventUnitAbility(libCOMI_gt_AdvancedConstructionAutoAutoCast, null, AbilityCommand("AdvancedConstructionAuto", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swann Vespene Drone Trigger
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SwannVespeneDroneTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto437600C7_g;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto437600C7_g = libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_player);
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto437600C7_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        PlayerCreateEffectPoint(lv_itPlayer, "VespeneDroneGrantResourcesTrigger", PlayerStartLocation(lv_itPlayer));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SwannVespeneDroneTrigger_Init () {
    libCOMI_gt_SwannVespeneDroneTrigger = TriggerCreate("libCOMI_gt_SwannVespeneDroneTrigger_Func");
    TriggerEnable(libCOMI_gt_SwannVespeneDroneTrigger, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_SwannVespeneDroneTrigger, c_playerAny, "VespeneDroneImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swann Siege Tank Rebuild Controller
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SwannSiegeTankRebuildController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_morphTime;
    fixed lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_morphTime = 8.0;

    // Actions
    if (!runActions) {
        return true;
    }

    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,Start");
    lv_upgradeCount = IntToFixed(TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "MasterySwannImmortalityProtocol", c_techCountCompleteOnly));
    lv_morphTime = ((lv_morphTime-(lv_morphTime*(lv_upgradeCount/50)))-3);
    Wait(1.0, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), (("AnimPlay Morph Morph 0 -1.000000 -1.000000 " + FixedToString(lv_morphTime, 2) + " AsDuration ")));
    Wait(lv_morphTime, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SwannSiegeTankRebuildController_Init () {
    libCOMI_gt_SwannSiegeTankRebuildController = TriggerCreate("libCOMI_gt_SwannSiegeTankRebuildController_Func");
    TriggerEnable(libCOMI_gt_SwannSiegeTankRebuildController, false);
    TriggerAddEventUnitAbility(libCOMI_gt_SwannSiegeTankRebuildController, null, AbilityCommand("SiegeTankReborn", 0), c_abilMorphStageActorStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swann Thor Rebuild Controller
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SwannThorRebuildController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_morphTime;
    fixed lv_upgradeCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_morphTime = 12.0;

    // Actions
    if (!runActions) {
        return true;
    }

    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,Start");
    lv_upgradeCount = IntToFixed(TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "MasterySwannImmortalityProtocol", c_techCountCompleteOnly));
    lv_morphTime = ((lv_morphTime-(lv_morphTime*(lv_upgradeCount/50)))-3);
    Wait(1.0, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), (("AnimPlay Morph Morph 0 -1.000000 -1.000000 " + FixedToString(lv_morphTime, 2) + " AsDuration ")));
    Wait(lv_morphTime, c_timeGame);
    ActorScopeSend(ActorScopeFromUnit(EventUnit()), "AnimPlay Morph Morph,End");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SwannThorRebuildController_Init () {
    libCOMI_gt_SwannThorRebuildController = TriggerCreate("libCOMI_gt_SwannThorRebuildController_Func");
    TriggerEnable(libCOMI_gt_SwannThorRebuildController, false);
    TriggerAddEventUnitAbility(libCOMI_gt_SwannThorRebuildController, null, AbilityCommand("ThorRebornSwann", 0), c_abilMorphStageActorStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swann Laser Drill Call For Help
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SwannLaserDrillCallForHelp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_laserdrillowner;
    unit lv_laserdrilltarget;
    region lv_laserdrilltargetvicinity;
    unitgroup lv_laserdrillspotters;
    unit lv_laserdrillspotter;

    // Automatic Variable Declarations
    unitgroup autoDEBD017A_g;
    int autoDEBD017A_u;

    // Variable Initialization
    lv_laserdrillowner = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_laserdrilltarget = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_laserdrilltargetvicinity = RegionCircle(UnitGetPosition(lv_laserdrilltarget), 12.0);
    lv_laserdrillspotters = UnitGroupAlliance(lv_laserdrillowner, c_unitAllianceAlly, lv_laserdrilltargetvicinity, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);

    // Actions
    if (!runActions) {
        return true;
    }

    autoDEBD017A_g = lv_laserdrillspotters;
    autoDEBD017A_u = UnitGroupCount(autoDEBD017A_g, c_unitCountAll);
    for (;; autoDEBD017A_u -= 1) {
        lv_laserdrillspotter = UnitGroupUnitFromEnd(autoDEBD017A_g, autoDEBD017A_u);
        if (lv_laserdrillspotter == null) { break; }
        UnitCreateEffectUnit(lv_laserdrillspotter, "DrakkenLaserDrillSpotterCallForHelp", lv_laserdrilltarget);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SwannLaserDrillCallForHelp_Init () {
    libCOMI_gt_SwannLaserDrillCallForHelp = TriggerCreate("libCOMI_gt_SwannLaserDrillCallForHelp_Func");
    TriggerEnable(libCOMI_gt_SwannLaserDrillCallForHelp, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_SwannLaserDrillCallForHelp, c_playerAny, "LaserDrillTripodDamageCoop");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_FullSupplyCheat
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_FullSupplyCheat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_aleksander;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_aleksander = EventUnit();
    lv_p = UnitGetOwner(lv_aleksander);

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((UnitIsAlive(lv_aleksander) == true)) {
            PlayerSetState(EventPlayer(), c_playerStateFoodIgnored, true);
            UnitIssueOrder(lv_aleksander, Order(AbilityCommand("StukovAleksanderCrashedTrain", 0)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_aleksander, Order(AbilityCommand("StukovAleksanderCrashedTrain", 1)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_aleksander, Order(AbilityCommand("StukovAleksanderCrashedTrain", 2)), c_orderQueueAddToEnd);
            PlayerSetState(EventPlayer(), c_playerStateFoodIgnored, false);
        }
        else {
            return true;
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_FullSupplyCheat_Init () {
    libCOMI_gt_CM_Stukov_FullSupplyCheat = TriggerCreate("libCOMI_gt_CM_Stukov_FullSupplyCheat_Func");
    TriggerEnable(libCOMI_gt_CM_Stukov_FullSupplyCheat, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Stukov_FullSupplyCheat, null, "StukovSummonAleksanderCrashedTimedLife", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_AutoCreepTumor
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_AutoCreepTumor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_i;
    fixed lv_angle;
    unitgroup lv_creepTumorGroup;
    fixed lv_placementX;
    fixed lv_placementY;
    region lv_mapSize;
    fixed lv_waitTime;
    int lv_count;
    fixed lv_angleIncrement;

    // Automatic Variable Declarations
    int autoDF46F2F9_ae;
    const int autoDF46F2F9_ai = 1;
    unitgroup autoC90DB92D_g;
    int autoC90DB92D_u;
    unit autoC90DB92D_var;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_angle = libNtve_gf_RandomAngle();
    lv_creepTumorGroup = UnitGroupEmpty();
    lv_mapSize = RegionEntireMap();
    lv_waitTime = 1.0;
    lv_count = 72;
    lv_angleIncrement = 10.0;

    // Actions
    if (!runActions) {
        return true;
    }

    autoDF46F2F9_ae = lv_count;
    lv_i = 1;
    for ( ; ( (autoDF46F2F9_ai >= 0 && lv_i <= autoDF46F2F9_ae) || (autoDF46F2F9_ai < 0 && lv_i >= autoDF46F2F9_ae) ) ; lv_i += autoDF46F2F9_ai ) {
        lv_placementX = PointGetX(PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), 13.0, lv_angle));
        lv_placementY = PointGetY(PointWithOffsetPolar(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), 13.0, lv_angle));
        if (((lv_placementX > 1) && (lv_placementY > 1) && (lv_placementX < libNtve_gf_WidthOfRegion(lv_mapSize)) && (lv_placementY < libNtve_gf_HeightOfRegion(lv_mapSize)))) {
            if ((CreepIsPresent(Point(lv_placementX, lv_placementY)) == true)) {
                lv_creepTumorGroup = UnitGroupEmpty();
                autoC90DB92D_g = UnitGroup("CreepTumorStukov", c_playerAny, RegionCircle(Point(lv_placementX, lv_placementY), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoC90DB92D_u = UnitGroupCount(autoC90DB92D_g, c_unitCountAll);
                for (;; autoC90DB92D_u -= 1) {
                    autoC90DB92D_var = UnitGroupUnitFromEnd(autoC90DB92D_g, autoC90DB92D_u);
                    if (autoC90DB92D_var == null) { break; }
                    UnitGroupAdd(lv_creepTumorGroup, autoC90DB92D_var);
                }
                if ((UnitGroupCount(lv_creepTumorGroup, c_unitCountAlive) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorStukov", c_unitCreateIgnorePlacement, 0, Point(lv_placementX, lv_placementY));
                }

            }

        }

        lv_angle += lv_angleIncrement;
        Wait(lv_waitTime, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_AutoCreepTumor_Init () {
    libCOMI_gt_CM_Stukov_AutoCreepTumor = TriggerCreate("libCOMI_gt_CM_Stukov_AutoCreepTumor_Func");
    TriggerEnable(libCOMI_gt_CM_Stukov_AutoCreepTumor, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Stukov_AutoCreepTumor, c_playerAny, "CreepTumorStukovSpread");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Stukov_AutoCreepTumor, c_playerAny, "CreepTumorStukovSpreadCC");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedStructureInitialSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_InfestedStructureInitialSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_Stukov_InfestedStructure[lv_player] = EventUnit();
    UnitModifyCooldown(libCOMI_gv_cM_Stukov_InfestedStructure[lv_player], "Abil/SICivilianStructureSpawnCivilian", 180.0, c_cooldownOperationSet);
    UnitBehaviorAdd(EventUnit(), "SICivilianStructureSpawnCivilianGlobalTimerInitial", EventUnit(), 1);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_InfestedStructureInitialSpawn_Init () {
    libCOMI_gt_CM_Stukov_InfestedStructureInitialSpawn = TriggerCreate("libCOMI_gt_CM_Stukov_InfestedStructureInitialSpawn_Func");
    TriggerEnable(libCOMI_gt_CM_Stukov_InfestedStructureInitialSpawn, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Stukov_InfestedStructureInitialSpawn, null, "SICivilianStructureSpawnCivilian", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedStructureRebuilt
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_InfestedStructureRebuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitProgressUnit());

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SISCV") && (libNtve_gf_TriggeringProgressUnitType() == "SICivilianStructure")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_Stukov_InfestedStructure[lv_player] = EventUnitProgressUnit();
    UnitBehaviorAdd(EventUnitProgressUnit(), "SICivilianStructureSpawnCivilianGlobalTimerRebuild", EventUnitProgressUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_InfestedStructureRebuilt_Init () {
    libCOMI_gt_CM_Stukov_InfestedStructureRebuilt = TriggerCreate("libCOMI_gt_CM_Stukov_InfestedStructureRebuilt_Func");
    TriggerEnable(libCOMI_gt_CM_Stukov_InfestedStructureRebuilt, false);
    TriggerAddEventUnitConstructProgress(libCOMI_gt_CM_Stukov_InfestedStructureRebuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_HordeWaveSpawner
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_HordeWaveSpawner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libCOMI_gv_cM_Stukov_HordeCurrentWave[lv_player]);
    UnitCreateEffectUnit(libCOMI_gv_cM_Stukov_InfestedStructure[lv_player], "SIBarracksTrainInfestedSpawnSet", libCOMI_gv_cM_Stukov_InfestedStructure[lv_player]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_HordeWaveSpawner_Init () {
    libCOMI_gt_CM_Stukov_HordeWaveSpawner = TriggerCreate("libCOMI_gt_CM_Stukov_HordeWaveSpawner_Func");
    TriggerEnable(libCOMI_gt_CM_Stukov_HordeWaveSpawner, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Stukov_HordeWaveSpawner, c_playerAny, "SICivilianStructureSpawnCivilianGlobalTimerDummyCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_HordeWaveCreated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_HordeWaveCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMI_gv_cM_Stukov_HordeGroup[lv_player], EventUnitCreatedUnit());
    UnitGroupAdd(libCOMI_gv_cM_Stukov_HordeCurrentWave[lv_player], EventUnitCreatedUnit());
    libCOMI_gv_cM_Stukov_HordeCount[lv_player] = UnitGroupCount(libCOMI_gv_cM_Stukov_HordeGroup[lv_player], c_unitCountAlive);
    libCOMI_gf_CM_Stukov_SingleUnitGoToRally(EventUnitCreatedUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_HordeWaveCreated_Init () {
    libCOMI_gt_CM_Stukov_HordeWaveCreated = TriggerCreate("libCOMI_gt_CM_Stukov_HordeWaveCreated_Func");
    TriggerEnable(libCOMI_gt_CM_Stukov_HordeWaveCreated, false);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Stukov_HordeWaveCreated, null, "SIMorphtoInfestedCivilian", null);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Stukov_HordeWaveCreated, null, "SIMorphtoInfestedMarine", null);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Stukov_HordeWaveCreated, null, "SIMorphtoInfestedAberration", null);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Stukov_HordeWaveCreated, null, "StukovAleksanderCrashedTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_HordeWaveExploderCreated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_HordeWaveExploderCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMI_gv_cM_Stukov_HordeGroup[lv_player], lv_unit);
    UnitGroupAdd(libCOMI_gv_cM_Stukov_HordeCurrentWave[lv_player], lv_unit);
    libCOMI_gv_cM_Stukov_HordeCount[lv_player] = UnitGroupCount(libCOMI_gv_cM_Stukov_HordeGroup[lv_player], c_unitCountAlive);
    libCOMI_gf_CM_Stukov_SingleUnitGoToRally(lv_unit, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_HordeWaveExploderCreated_Init () {
    libCOMI_gt_CM_Stukov_HordeWaveExploderCreated = TriggerCreate("libCOMI_gt_CM_Stukov_HordeWaveExploderCreated_Func");
    TriggerEnable(libCOMI_gt_CM_Stukov_HordeWaveExploderCreated, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Stukov_HordeWaveExploderCreated, c_playerAny, "SIBarracksTrainTimedLifeABInfestedExploder");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_HordeWaveInteruptionReissueOrder
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_HordeWaveInteruptionReissueOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SIInfestedCivilian") || (UnitGetType(EventUnit()) == "SIInfestedMarine") || (UnitGetType(EventUnit()) == "SIInfestedTrooper") || (UnitGetType(EventUnit()) == "SIVolatileInfested")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    libCOMI_gf_CM_Stukov_SingleUnitGoToRally(lv_unit, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_HordeWaveInteruptionReissueOrder_Init () {
    libCOMI_gt_CM_Stukov_HordeWaveInteruptionReissueOrder = TriggerCreate("libCOMI_gt_CM_Stukov_HordeWaveInteruptionReissueOrder_Func");
    TriggerEnable(libCOMI_gt_CM_Stukov_HordeWaveInteruptionReissueOrder, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Stukov_HordeWaveInteruptionReissueOrder, null, "MutatorDeathPullModifySpeed", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_RallyPlaced
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_RallyPlaced_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    unitgroup auto5BF136EF_g;
    int auto5BF136EF_u;
    unit auto5BF136EF_var;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_Stukov_RallyTarget[lv_player] = null;
    libCOMI_gv_cM_Stukov_RallyPoint[lv_player] = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    auto5BF136EF_g = UnitGroup(null, c_playerAny, RegionCircle(libCOMI_gv_cM_Stukov_RallyPoint[lv_player], 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5BF136EF_u = UnitGroupCount(auto5BF136EF_g, c_unitCountAll);
    for (;; auto5BF136EF_u -= 1) {
        auto5BF136EF_var = UnitGroupUnitFromEnd(auto5BF136EF_g, auto5BF136EF_u);
        if (auto5BF136EF_var == null) { break; }
        if ((UnitHasBehavior2(auto5BF136EF_var, "ExpansionRocks") == true)) {
            libCOMI_gv_cM_Stukov_RallyTarget[lv_player] = auto5BF136EF_var;
        }

    }
    if ((libCOMI_gv_cM_Stukov_RallyBeaconUnit[lv_player] != null)) {
        UnitRemove(libCOMI_gv_cM_Stukov_RallyBeaconUnit[lv_player]);
    }

    if ((libCOMI_gv_cM_Stukov_RallyTarget[lv_player] != null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SIStukovRallyBeaconPsiEmitterPoint", c_unitCreateIgnorePlacement, 0, libCOMI_gv_cM_Stukov_RallyPoint[lv_player]);
        libCOMI_gv_cM_Stukov_RallyBeaconUnit[lv_player] = UnitLastCreated();
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SIStukovRallyBeaconPsiEmitterPoint", c_unitCreateIgnorePlacement, 0, libCOMI_gv_cM_Stukov_RallyPoint[lv_player]);
        libCOMI_gv_cM_Stukov_RallyBeaconUnit[lv_player] = UnitLastCreated();
    }
    UnitGroupIssueOrder(libCOMI_gv_cM_Stukov_BunkerGroup[lv_player], OrderTargetingPoint(AbilityCommand("SIInfestedBunkerRally", 0), libCOMI_gv_cM_Stukov_RallyPoint[lv_player]), c_orderQueueReplace);
    libCOMI_gf_CM_Stukov_HordeGoToRally(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_RallyPlaced_Init () {
    libCOMI_gt_CM_Stukov_RallyPlaced = TriggerCreate("libCOMI_gt_CM_Stukov_RallyPlaced_Func");
    TriggerEnable(libCOMI_gt_CM_Stukov_RallyPlaced, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Stukov_RallyPlaced, c_playerAny, "SIStukovPlaceHordeRallyCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_RallyToUnitDies
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_RallyToUnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libCOMI_gv_cM_Stukov_RallyTarget[lv_player] == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_Stukov_RallyTarget[lv_player] = null;
    libCOMI_gv_cM_Stukov_RallyPoint[lv_player] = UnitGetPosition(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_RallyToUnitDies_Init () {
    libCOMI_gt_CM_Stukov_RallyToUnitDies = TriggerCreate("libCOMI_gt_CM_Stukov_RallyToUnitDies_Func");
    TriggerEnable(libCOMI_gt_CM_Stukov_RallyToUnitDies, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_Stukov_RallyToUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_TriggersInit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_TriggersInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMI_gt_CM_Stukov_InfestedBunkerAutoLoad, true);
    TriggerEnable(libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, true);
    TriggerEnable(libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain, true);
    TriggerEnable(libCOMI_gt_CM_Stukov_InfestedBunkerUnloadRally, true);
    TriggerEnable(libCOMI_gt_CM_Stukov_InfestedBunkerRegister, true);
    TriggerEnable(libCOMI_gt_CM_Stukov_InfestedBunkerInitialSpawn, true);
    TriggerEnable(libCOMI_gt_CM_Stukov_UnitCostRefund, true);
    TriggerEnable(libCOMI_gt_CM_Stukov_FullSupplyCheat, true);
    TriggerEnable(libCOMI_gt_CM_Stukov_AutoCreepTumor, true);
    TriggerEnable(libCOMI_gt_CM_Stukov_InfestedStructureInitialSpawn, true);
    TriggerEnable(libCOMI_gt_CM_Stukov_InfestedStructureRebuilt, true);
    TriggerEnable(libCOMI_gt_CM_Stukov_HordeWaveSpawner, true);
    TriggerEnable(libCOMI_gt_CM_Stukov_HordeWaveCreated, true);
    TriggerEnable(libCOMI_gt_CM_Stukov_HordeWaveExploderCreated, true);
    TriggerEnable(libCOMI_gt_CM_Stukov_HordeWaveInteruptionReissueOrder, true);
    TriggerEnable(libCOMI_gt_CM_Stukov_RallyPlaced, true);
    TriggerEnable(libCOMI_gt_CM_Stukov_RallyToUnitDies, true);
    TriggerEnable(libCOMI_gt_CM_Stukov_InfestedSiegeTankDeath, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_TriggersInit_Init () {
    libCOMI_gt_CM_Stukov_TriggersInit = TriggerCreate("libCOMI_gt_CM_Stukov_TriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedBunkerAutoLoad
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_InfestedBunkerAutoLoad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bunker;
    int lv_p;
    unit lv_newUnit;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bunker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_p = EventPlayer();
    lv_point = UnitGetPosition(lv_bunker);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitCargoValue(lv_bunker, c_unitCargoSpaceFree) > 0)) {
        UnitCargoCreate(lv_bunker, "SIInfestedTrooper", 1);
        lv_newUnit = UnitCargoLastCreated();
    }
    else {
        if ((libCOMI_gv_cM_Stukov_RallyPoint[lv_p] != null)) {
            lv_point = libNtve_gf_PointOffsetTowardsPoint(lv_point, 1.0, libCOMI_gv_cM_Stukov_RallyPoint[lv_p]);
        }

        UnitCreate(1, "SIInfestedTrooper", 0, lv_p, lv_point, 270.0);
        lv_newUnit = UnitLastCreated();
        SoundPlayOnUnitForPlayer(SoundLink("Medivac_Unload", -1), EventPlayer(), PlayerGroupAll(), lv_newUnit, 0.0, 100.0, 0.0);
    }
    UnitSetState(lv_newUnit, c_unitStateUsingSupply, false);
    libCOMI_gf_CM_Stukov_NewBunkerUnitProcess(lv_newUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_InfestedBunkerAutoLoad_Init () {
    libCOMI_gt_CM_Stukov_InfestedBunkerAutoLoad = TriggerCreate("libCOMI_gt_CM_Stukov_InfestedBunkerAutoLoad_Func");
    TriggerEnable(libCOMI_gt_CM_Stukov_InfestedBunkerAutoLoad, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Stukov_InfestedBunkerAutoLoad, c_playerAny, "SIInfestedBunkerAutoSpawnerDummyMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedTimedLifeFoodHackBurrow
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnit(), c_unitStateUsingSupply, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow_Init () {
    libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow = TriggerCreate("libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow_Func");
    TriggerEnable(libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIInfestedTrooperUp", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIInfestedTrooperDown", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIInfestedCivilianUp", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIInfestedCivilianDown", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIVolatileInfestedDown", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow, null, AbilityCommand("BurrowSIVolatileInfestedUp", 0), c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedTimedLifeFoodHackTrain
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnitCreatedUnit(), c_unitStateUsingSupply, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain_Init () {
    libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain = TriggerCreate("libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain_Func");
    TriggerEnable(libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain, false);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain, null, "SIMorphtoInfestedCivilian", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedBunkerUnloadRally
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_InfestedBunkerUnloadRally_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_newUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_newUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_Stukov_NewBunkerUnitProcess(lv_newUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_InfestedBunkerUnloadRally_Init () {
    libCOMI_gt_CM_Stukov_InfestedBunkerUnloadRally = TriggerCreate("libCOMI_gt_CM_Stukov_InfestedBunkerUnloadRally_Func");
    TriggerEnable(libCOMI_gt_CM_Stukov_InfestedBunkerUnloadRally, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Stukov_InfestedBunkerUnloadRally, c_playerAny, "SIInfestedBunkerBunkerUnloadSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedBunkerRegister
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_InfestedBunkerRegister_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMI_gv_cM_Stukov_BunkerGroup[lv_player], lv_u);
    if ((libCOMI_gv_cM_Stukov_RallyPoint[lv_player] != null)) {
        UnitGroupIssueOrder(libCOMI_gv_cM_Stukov_BunkerGroup[lv_player], OrderTargetingPoint(AbilityCommand("SIInfestedBunkerRally", 0), libCOMI_gv_cM_Stukov_RallyPoint[lv_player]), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_InfestedBunkerRegister_Init () {
    libCOMI_gt_CM_Stukov_InfestedBunkerRegister = TriggerCreate("libCOMI_gt_CM_Stukov_InfestedBunkerRegister_Func");
    TriggerEnable(libCOMI_gt_CM_Stukov_InfestedBunkerRegister, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Stukov_InfestedBunkerRegister, c_playerAny, "SIInfestedBunkerCreation");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedBunkerInitialSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_InfestedBunkerInitialSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup auto592E3BD4_g;
    int auto592E3BD4_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SISCV") && (libNtve_gf_TriggeringProgressUnitType() == "SIInfestedBunker")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "SIInfestedBunkerUpgraded", c_techCountCompleteOnly) == 1)) {
        UnitCargoCreate(EventUnitProgressUnit(), "SIInfestedTrooper", 6);
    }
    else {
        UnitCargoCreate(EventUnitProgressUnit(), "SIInfestedTrooper", 4);
    }
    auto592E3BD4_g = UnitCargoLastCreatedGroup();
    auto592E3BD4_u = UnitGroupCount(auto592E3BD4_g, c_unitCountAll);
    for (;; auto592E3BD4_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto592E3BD4_g, auto592E3BD4_u);
        if (lv_u == null) { break; }
        UnitSetState(lv_u, c_unitStateUsingSupply, false);
        libCOMI_gf_CM_Stukov_NewBunkerUnitProcess(lv_u);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_InfestedBunkerInitialSpawn_Init () {
    libCOMI_gt_CM_Stukov_InfestedBunkerInitialSpawn = TriggerCreate("libCOMI_gt_CM_Stukov_InfestedBunkerInitialSpawn_Func");
    TriggerEnable(libCOMI_gt_CM_Stukov_InfestedBunkerInitialSpawn, false);
    TriggerAddEventUnitConstructProgress(libCOMI_gt_CM_Stukov_InfestedBunkerInitialSpawn, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_UnitCostRefund
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_UnitCostRefund_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropMinerals, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "CostResource[" + IntToString(0) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    PlayerModifyPropertyInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), c_playerPropVespene, c_playerPropOperAdd, CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), "CostResource[" + IntToString(1) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_UnitCostRefund_Init () {
    libCOMI_gt_CM_Stukov_UnitCostRefund = TriggerCreate("libCOMI_gt_CM_Stukov_UnitCostRefund_Func");
    TriggerEnable(libCOMI_gt_CM_Stukov_UnitCostRefund, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Stukov_UnitCostRefund, c_playerAny, "CocoonCreateLM");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Stukov_InfestedSiegeTankDeath
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Stukov_InfestedSiegeTankDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stackCount;
    int lv_player;

    // Automatic Variable Declarations
    int auto7F872E61_ae;
    const int auto7F872E61_ai = 1;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "StukovInfestedSiegeTankAmmo") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_stackCount = UnitBehaviorCount(EventUnit(), "StukovInfestedSiegeTankAmmo");
    auto7F872E61_ae = lv_stackCount;
    lv_stackCount = 1;
    for ( ; ( (auto7F872E61_ai >= 0 && lv_stackCount <= auto7F872E61_ae) || (auto7F872E61_ai < 0 && lv_stackCount >= auto7F872E61_ae) ) ; lv_stackCount += auto7F872E61_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SIVolatileInfested", 0, EventPlayer(), UnitGetPosition(EventUnit()));
        UnitBehaviorAddPlayer(UnitLastCreated(), "SIBarracksTrainTimedLife", EventPlayer(), 1);
        UnitGroupAdd(libCOMI_gv_cM_Stukov_HordeGroup[lv_player], UnitLastCreated());
        UnitGroupAdd(libCOMI_gv_cM_Stukov_HordeCurrentWave[lv_player], UnitLastCreated());
        libCOMI_gv_cM_Stukov_HordeCount[lv_player] = UnitGroupCount(libCOMI_gv_cM_Stukov_HordeGroup[lv_player], c_unitCountAlive);
        libCOMI_gf_CM_Stukov_SingleUnitGoToRally(UnitLastCreated(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Stukov_InfestedSiegeTankDeath_Init () {
    libCOMI_gt_CM_Stukov_InfestedSiegeTankDeath = TriggerCreate("libCOMI_gt_CM_Stukov_InfestedSiegeTankDeath_Func");
    TriggerEnable(libCOMI_gt_CM_Stukov_InfestedSiegeTankDeath, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_Stukov_InfestedSiegeTankDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusHERC_ShieldCooldown
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TychusHERC_ShieldCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_behavior;
    fixed lv_cooldown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_behavior = EventUnitBehavior();
    lv_cooldown = UnitBehaviorDurationTotal(lv_unit, lv_behavior);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitModifyCooldown(lv_unit, "ShieldCooldown", lv_cooldown, c_cooldownOperationSet);
    UnitModifyCooldown(lv_unit, "ShieldCooldown", lv_cooldown, c_cooldownOperationSet);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TychusHERC_ShieldCooldown_Init () {
    libCOMI_gt_CM_TychusHERC_ShieldCooldown = TriggerCreate("libCOMI_gt_CM_TychusHERC_ShieldCooldown_Func");
    TriggerEnable(libCOMI_gt_CM_TychusHERC_ShieldCooldown, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_TychusHERC_ShieldCooldown, null, "TychusHERCShieldWeakness", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusHERC_CriticalText
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TychusHERC_CriticalText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_crittexttag;
    int lv_critmultiplier;
    int lv_ragestacks;
    int lv_ragedamage;
    int lv_weapondamage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_crittexttag = c_textTagNone;
    lv_critmultiplier = CatalogReferenceGetAsInt("Behavior,TychusHercCritPassive,DamageResponse.ModifyFraction", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranTychus", libCOOC_gf_CC_PlayersOfCommander("TerranTychus")));
    lv_ragestacks = UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusHercRageDamageBuff");
    lv_ragedamage = CatalogReferenceGetAsInt("Behavior,TychusHercRageDamageBuff,Modification.DamageDealtUnscaled[Melee]", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranTychus", libCOOC_gf_CC_PlayersOfCommander("TerranTychus")));
    lv_weapondamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "TychusHERCWeaponDamage", "Amount", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranTychus", libCOOC_gf_CC_PlayersOfCommander("TerranTychus")));

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusHercRageDamageBuff") == 0)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_53BFB085", "A", FixedToText(((lv_critmultiplier * (lv_weapondamage + (lv_ragestacks * lv_ragedamage))) - (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusHercRageDamageBuff") * (lv_critmultiplier * lv_ragedamage))), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_COMI_53BFB085", "B", StringExternal("Param/Value/lib_COMI_34A9A655"));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COMI_53BFB085"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 3.0, true, false, PlayerGroupAll());
    }
    else if ((UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusHercRageDamageBuff") > 0) && (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusHercRageDamageBuff") < CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "TychusHercRageDamageBuff", "MaxStackCount", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranTychus", libCOOC_gf_CC_PlayersOfCommander("TerranTychus"))))) {
        TextExpressionSetToken("Param/Expression/lib_COMI_1E0587BE", "A", FixedToText(((lv_critmultiplier * (lv_weapondamage + (lv_ragestacks * lv_ragedamage))) - (lv_critmultiplier * lv_ragedamage)), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_COMI_1E0587BE", "B", StringExternal("Param/Value/lib_COMI_A2254E00"));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COMI_1E0587BE"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 3.0, true, false, PlayerGroupAll());
    }
    else if ((UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusHercRageDamageBuff") == CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "TychusHercRageDamageBuff", "MaxStackCount", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranTychus", libCOOC_gf_CC_PlayersOfCommander("TerranTychus"))))) {
        TextExpressionSetToken("Param/Expression/lib_COMI_6363956C", "A", FixedToText((lv_critmultiplier * (lv_weapondamage + (lv_ragestacks * lv_ragedamage))), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_COMI_6363956C", "B", StringExternal("Param/Value/lib_COMI_C70C6476"));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COMI_6363956C"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 3.0, true, false, PlayerGroupAll());
    }
    lv_crittexttag = TextTagLastCreated();
    TextTagSetColor(lv_crittexttag, c_textTagColorText, Color(100.00, 0.00, 0.00));
    TextTagSetVelocity(lv_crittexttag, 0.5, 90.0);
    Wait(2.0, c_timeGame);
    TextTagDestroy(lv_crittexttag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TychusHERC_CriticalText_Init () {
    libCOMI_gt_CM_TychusHERC_CriticalText = TriggerCreate("libCOMI_gt_CM_TychusHERC_CriticalText_Func");
    TriggerEnable(libCOMI_gt_CM_TychusHERC_CriticalText, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_TychusHERC_CriticalText, libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranTychus", libCOOC_gf_CC_PlayersOfCommander("TerranTychus")), "TychusHERCWeaponDamageCritDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: _CM_TychusEventHook
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt__CM_TychusEventHook_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    string lv_heroType;
    string lv_heroReviveType;
    string lv_heroInstance;
    string lv_itUnitType;
    string lv_event;

    // Automatic Variable Declarations
    string autoAAB5A368_userType;
    int autoAAB5A368_i;

    // Variable Initialization
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_heroType = EventPlayerEffectUsedUnitType(c_effectUnitCaster);
    lv_heroReviveType = (CatalogFieldValueGet(c_gameCatalogUnit, lv_heroType, "ReviveType", c_playerAny));
    lv_event = (EventPlayerEffectUsed());

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_hero, "TychusHeroCount") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAAB5A368_userType = libCOMI_gv_cM_Tychus_UserTypeHeroList;
    autoAAB5A368_i = 1;
    for ( ; autoAAB5A368_i <= UserDataInstanceCount(autoAAB5A368_userType) ; autoAAB5A368_i += 1 ) {
        lv_heroInstance = UserDataInstance(autoAAB5A368_userType, autoAAB5A368_i);
        lv_itUnitType = UserDataGetUnit(libCOMI_gv_cM_Tychus_UserTypeHeroList, lv_heroInstance, "Unit Type", 1);
        if ((lv_itUnitType == lv_heroType)) {
            DataTableSetUnit(false, TriggerEventParamName(lv_event, "EventHero"), lv_hero);
            DataTableSetString(false, TriggerEventParamName(lv_event, "EventHeroInstance"), (lv_heroInstance));
            TriggerSendEvent(lv_event);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt__CM_TychusEventHook_Init () {
    libCOMI_gt__CM_TychusEventHook = TriggerCreate("libCOMI_gt__CM_TychusEventHook_Func");
    TriggerEnable(libCOMI_gt__CM_TychusEventHook, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt__CM_TychusEventHook, c_playerAny, "Event_TychusHeroCreate");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt__CM_TychusEventHook, c_playerAny, "Event_TychusHeroDeath");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt__CM_TychusEventHook, c_playerAny, "Event_TychusHeroRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: _CM_TychusStructureEventHook
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt__CM_TychusStructureEventHook_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_structure;
    string lv_event;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_structure = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_event = (EventPlayerEffectUsed());

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) == "Tychus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DataTableSetUnit(false, TriggerEventParamName(lv_event, "EventStructure"), lv_structure);
    TriggerSendEvent(lv_event);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt__CM_TychusStructureEventHook_Init () {
    libCOMI_gt__CM_TychusStructureEventHook = TriggerCreate("libCOMI_gt__CM_TychusStructureEventHook_Func");
    TriggerEnable(libCOMI_gt__CM_TychusStructureEventHook, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt__CM_TychusStructureEventHook, c_playerAny, "Event_TychusHeroStructureCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_OdinSummon_Used
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Tychus_OdinSummon_Used_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayerRemoveCooldown(lv_p, libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(lv_p)));
    UnitRevive(libCOMI_gv_cM_HeroUnit[lv_p]);
    UnitSetPropertyFixed(libCOMI_gv_cM_HeroUnit[lv_p], c_unitPropLifePercent, 100.0);
    UnitCreateEffectPoint(libCOMI_gv_cM_HeroUnit[lv_p], libCOMI_gv_cM_Tychus_OdinSummonEffect_Called, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    Wait(1.0, c_timeGame);
    UnitSetPosition(libCOMI_gv_cM_HeroUnit[lv_p], RegionGetBoundsMin(RegionEntireMap()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Tychus_OdinSummon_Used_Init () {
    libCOMI_gt_CM_Tychus_OdinSummon_Used = TriggerCreate("libCOMI_gt_CM_Tychus_OdinSummon_Used_Func");
    TriggerEnable(libCOMI_gt_CM_Tychus_OdinSummon_Used, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Tychus_OdinSummon_Used, c_playerAny, libCOMI_gv_cM_Tychus_OdinSummonEffect_Caller);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_OdinSummon_CameraShake
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Tychus_OdinSummon_CameraShake_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    fixed lv_distance;
    fixed[4] lv_cameraPosition;
    fixed[4] lv_effectPosition;
    int lv_player;
    point lv_effectTargetPoint;
    point lv_cameraTargetPoint;
    unit lv_odin;

    // Automatic Variable Declarations
    playergroup auto0B345B3A_g;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_effectTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_odin = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.8, c_timeGame);
    if ((UnitIsAlive(lv_odin) == false)) {
        return true;
    }

    lv_effectPosition[0] = PointGetX(lv_effectTargetPoint);
    lv_effectPosition[1] = PointGetY(lv_effectTargetPoint);
    lv_effectPosition[2] = WorldHeight(c_heightMapGround, lv_effectTargetPoint);
    auto0B345B3A_g = PlayerGroupActive();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto0B345B3A_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_cameraTargetPoint = CameraGetTarget(lv_player);
        lv_cameraPosition[0] = PointGetX(lv_cameraTargetPoint);
        lv_cameraPosition[1] = (PointGetY(lv_cameraTargetPoint)-(Cos(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
        lv_cameraPosition[2] = (WorldHeight(c_heightMapGround, lv_cameraTargetPoint)+(Sin(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
        lv_distance = SquareRoot((Pow((lv_cameraPosition[0]-lv_effectPosition[0]), 2.0) + Pow((lv_cameraPosition[1]-lv_effectPosition[1]), 2.0) + Pow((lv_cameraPosition[2]-lv_effectPosition[2]), 2.0)));
        CameraShakeStart(lv_player, c_cameraPositionTarget, c_cameraDirectionZ, MaxF((1-(lv_distance/50)), 0.0), 5.0, 100.0, 0.5);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Tychus_OdinSummon_CameraShake_Init () {
    libCOMI_gt_CM_Tychus_OdinSummon_CameraShake = TriggerCreate("libCOMI_gt_CM_Tychus_OdinSummon_CameraShake_Func");
    TriggerEnable(libCOMI_gt_CM_Tychus_OdinSummon_CameraShake, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Tychus_OdinSummon_CameraShake, c_playerAny, libCOMI_gv_cM_Tychus_OdinSummonEffect_Created);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_Odin_Timeout
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Tychus_Odin_Timeout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_odin;
    fixed lv_facing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_odin = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_facing = (UnitGetFacing(lv_odin)-90);

    // Actions
    if (!runActions) {
        return true;
    }

    ActorCreate(ActorScopeFromUnit(lv_odin), "TychusOdinDeathTimeOut", null, null, null);
    libNtve_gf_MakeModelFaceAngle(libNtve_gf_ActorLastCreated(), lv_facing);
    UnitCreateEffectUnit(lv_odin, "TimedLifeFate", lv_odin);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Tychus_Odin_Timeout_Init () {
    libCOMI_gt_CM_Tychus_Odin_Timeout = TriggerCreate("libCOMI_gt_CM_Tychus_Odin_Timeout_Func");
    TriggerEnable(libCOMI_gt_CM_Tychus_Odin_Timeout, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Tychus_Odin_Timeout, c_playerAny, "TychusOdinTimedLifeFateDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_WarhoundFearApply
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Tychus_WarhoundFearApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_scaredUnit;
    point lv_attackLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scaredUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackLocation = PointWithOffsetPolar(UnitGetPosition(lv_scaredUnit), 1.0, libNtve_gf_RandomAngle());
    UnitIssueOrder(lv_scaredUnit, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_scaredUnit), -5.0, lv_attackLocation)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    while ((UnitHasBehavior2(lv_scaredUnit, "TychusWarhoundFear") == true) && (UnitIsAlive(lv_scaredUnit) == true)) {
        UnitIssueOrder(lv_scaredUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_scaredUnit), 3.0))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(lv_scaredUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Tychus_WarhoundFearApply_Init () {
    libCOMI_gt_CM_Tychus_WarhoundFearApply = TriggerCreate("libCOMI_gt_CM_Tychus_WarhoundFearApply_Func");
    TriggerEnable(libCOMI_gt_CM_Tychus_WarhoundFearApply, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Tychus_WarhoundFearApply, null, "TychusWarhoundFear", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Tychus_WarhoundFearApply, null, "TychusWarhoundFear", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus Specialist Training Aura On
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TychusSpecialistTrainingAuraOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    string lv_uT;
    string lv_itInstance;
    string lv_itActive;
    string lv_itUnitType;
    fixed lv_oldValue;
    fixed lv_changedValue;
    int lv_p;
    string lv_pathCooldown;
    string lv_pathCharge;

    // Automatic Variable Declarations
    string auto523EB43C_userType;
    int auto523EB43C_i;

    // Variable Initialization
    lv_u = EventUnit();
    lv_uT = UnitGetType(lv_u);
    lv_p = UnitGetOwner(lv_u);
    lv_pathCooldown = "Cost[0].Cooldown.TimeUse";
    lv_pathCharge = "Cost[0].Charge.TimeUse";

    // Actions
    if (!runActions) {
        return true;
    }

    auto523EB43C_userType = "CoopTechTychusSquad";
    auto523EB43C_i = 1;
    for ( ; auto523EB43C_i <= UserDataInstanceCount(auto523EB43C_userType) ; auto523EB43C_i += 1 ) {
        lv_itInstance = UserDataInstance(auto523EB43C_userType, auto523EB43C_i);
        lv_itUnitType = UserDataGetUnit("CoopTechTychusSquad", lv_itInstance, "Unit Type", 1);
        if ((lv_uT == lv_itUnitType)) {
            lv_itActive = UserDataGetGameLink("CoopTechTychusSquad", lv_itInstance, "Active Abil", 1);
            if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_itActive) == true)) {
                if ((CatalogEntryScope(c_gameCatalogAbil, lv_itActive) == "CAbilBuild")) {
                    lv_pathCooldown = "InfoArray[0].Cooldown.TimeUse";
                    lv_pathCharge = "InfoArray[0].Charge.TimeUse";
                }
                else {
                    lv_pathCooldown = "Cost[0].Cooldown.TimeUse";
                    lv_pathCharge = "Cost[0].Charge.TimeUse";
                }
                lv_oldValue = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lv_itActive, lv_pathCooldown, lv_p);
                lv_changedValue = (lv_oldValue*libCOMI_gv_c_TychusSpecialistTrainingAuraCooldownFactor/100);
                CatalogFieldValueModify(c_gameCatalogAbil, lv_itActive, lv_pathCooldown, lv_p, FixedToString(lv_changedValue, c_fixedPrecisionAny), c_upgradeOperationSubtract);
                DataTableSetFixed(true, ("TychusSpecialistTrainingAura_" + IntToString(UnitGetTag(lv_u)) + "_CooldownTimeChange"), lv_changedValue);
                lv_oldValue = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, lv_itActive, lv_pathCharge, lv_p);
                lv_changedValue = (lv_oldValue*libCOMI_gv_c_TychusSpecialistTrainingAuraCooldownFactor/100);
                CatalogFieldValueModify(c_gameCatalogAbil, lv_itActive, lv_pathCharge, lv_p, FixedToString(lv_changedValue, c_fixedPrecisionAny), c_upgradeOperationSubtract);
                DataTableSetFixed(true, ("TychusSpecialistTrainingAura_" + IntToString(UnitGetTag(lv_u)) + "_ChargeTimeChange"), lv_changedValue);
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TychusSpecialistTrainingAuraOn_Init () {
    libCOMI_gt_CM_TychusSpecialistTrainingAuraOn = TriggerCreate("libCOMI_gt_CM_TychusSpecialistTrainingAuraOn_Func");
    TriggerEnable(libCOMI_gt_CM_TychusSpecialistTrainingAuraOn, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_TychusSpecialistTrainingAuraOn, null, "TychusSpectreBrillianceAuraBuffLv1", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus Specialist Training Aura Off
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TychusSpecialistTrainingAuraOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    string lv_uT;
    string lv_itInstance;
    string lv_itActive;
    string lv_itUnitType;
    fixed lv_changedValueCooldown;
    fixed lv_changedValueCharge;
    int lv_p;
    string lv_pathCooldown;
    string lv_pathCharge;

    // Automatic Variable Declarations
    string autoB1BBE460_userType;
    int autoB1BBE460_i;

    // Variable Initialization
    lv_u = EventUnit();
    lv_uT = UnitGetType(lv_u);
    lv_changedValueCooldown = DataTableGetFixed(true, ("TychusSpecialistTrainingAura_" + IntToString(UnitGetTag(lv_u)) + "_CooldownTimeChange"));
    lv_changedValueCharge = DataTableGetFixed(true, ("TychusSpecialistTrainingAura_" + IntToString(UnitGetTag(lv_u)) + "_ChargeTimeChange"));
    lv_p = UnitGetOwner(lv_u);
    lv_pathCooldown = "Cost[0].Cooldown.TimeUse";
    lv_pathCharge = "Cost[0].Charge.TimeUse";

    // Actions
    if (!runActions) {
        return true;
    }

    autoB1BBE460_userType = "CoopTechTychusSquad";
    autoB1BBE460_i = 1;
    for ( ; autoB1BBE460_i <= UserDataInstanceCount(autoB1BBE460_userType) ; autoB1BBE460_i += 1 ) {
        lv_itInstance = UserDataInstance(autoB1BBE460_userType, autoB1BBE460_i);
        lv_itUnitType = UserDataGetUnit("CoopTechTychusSquad", lv_itInstance, "Unit Type", 1);
        if ((lv_uT == lv_itUnitType)) {
            lv_itActive = UserDataGetGameLink("CoopTechTychusSquad", lv_itInstance, "Active Abil", 1);
            if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_itActive) == true)) {
                if ((CatalogEntryScope(c_gameCatalogAbil, lv_itActive) == "CAbilBuild")) {
                    lv_pathCooldown = "InfoArray[0].Cooldown.TimeUse";
                    lv_pathCharge = "InfoArray[0].Charge.TimeUse";
                }
                else {
                    lv_pathCooldown = "Cost[0].Cooldown.TimeUse";
                    lv_pathCharge = "Cost[0].Charge.TimeUse";
                }
                CatalogFieldValueModify(c_gameCatalogAbil, lv_itActive, lv_pathCooldown, lv_p, FixedToString(lv_changedValueCooldown, c_fixedPrecisionAny), c_upgradeOperationAdd);
                CatalogFieldValueModify(c_gameCatalogAbil, lv_itActive, lv_pathCharge, lv_p, FixedToString(lv_changedValueCharge, c_fixedPrecisionAny), c_upgradeOperationAdd);
            }

            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TychusSpecialistTrainingAuraOff_Init () {
    libCOMI_gt_CM_TychusSpecialistTrainingAuraOff = TriggerCreate("libCOMI_gt_CM_TychusSpecialistTrainingAuraOff_Func");
    TriggerEnable(libCOMI_gt_CM_TychusSpecialistTrainingAuraOff, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_TychusSpecialistTrainingAuraOff, null, "TychusSpectreBrillianceAuraBuffLv1", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusMedicTransportActived
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TychusMedicTransportActived_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0);
    lv_pg = PlayerGroupSingle(lv_p);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    libCOMI_gv_cM_TychusMedicTransportUnit[lv_p] = EventUnit();
    libCOMI_gv_cM_TychusMedicTransportUnitGroup[lv_p] = libNtve_gf_ConvertUnitToUnitGroup(EventUnit());
    libCOMI_gv_cM_TychusMedicTranportLoadPoint[lv_p] = UnitGetPosition(libCOMI_gv_cM_TychusMedicTransportUnit[lv_p]);
    UISetCursorVisible(lv_pg, false);
    Wait(0.5, c_timeGame);
    UISetCursorVisible(lv_pg, true);
    UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libCOMI_gv_cM_TychusMedicTransportUnit[lv_p])), libCOMI_gv_cM_TychusMedicTransportUnitGroup[lv_p], OrderTargetingPoint(AbilityCommand("TychusMedicTransportUnloadUnits", 0), UnitGetPosition(libCOMI_gv_cM_TychusMedicTransportUnit[lv_p])), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TychusMedicTransportActived_Init () {
    libCOMI_gt_CM_TychusMedicTransportActived = TriggerCreate("libCOMI_gt_CM_TychusMedicTransportActived_Func");
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportActived, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_TychusMedicTransportActived, null, "TychusMedicTransportActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusMedicTopBarButton
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TychusMedicTopBarButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_TychusMedicTranportSendViaTopBar[lv_p] = true;
    Wait(0.125, c_timeGame);
    libCOMI_gv_cM_TychusMedicTranportSendViaTopBar[lv_p] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TychusMedicTopBarButton_Init () {
    libCOMI_gt_CM_TychusMedicTopBarButton = TriggerCreate("libCOMI_gt_CM_TychusMedicTopBarButton_Func");
    TriggerEnable(libCOMI_gt_CM_TychusMedicTopBarButton, false);
    TriggerAddEventButtonPressed(libCOMI_gt_CM_TychusMedicTopBarButton, c_playerAny, "TychusMedicTransportUnitsTopBar");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusMedicTransportTargetOn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TychusMedicTransportTargetOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    actor lv_a;
    int lv_p;
    unitgroup lv_ug;

    // Automatic Variable Declarations
    unitgroup autoA552F3DF_g;
    int autoA552F3DF_u;

    // Variable Initialization
    lv_p = EventPlayer();
    lv_ug = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cM_TychusMedicTranportSendViaTopBar[lv_p] == false)) {
        lv_ug = UnitSubgroupSelected(lv_p);
    }
    else {
        lv_ug = UnitGroup("TychusMedivacPlatform", lv_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    autoA552F3DF_g = lv_ug;
    autoA552F3DF_u = UnitGroupCount(autoA552F3DF_g, c_unitCountAll);
    for (;; autoA552F3DF_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(autoA552F3DF_g, autoA552F3DF_u);
        if (lv_u == null) { break; }
        ActorScopeSend(ActorScopeFromUnit(lv_u), "Signal PickUpTarget");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TychusMedicTransportTargetOn_Init () {
    libCOMI_gt_CM_TychusMedicTransportTargetOn = TriggerCreate("libCOMI_gt_CM_TychusMedicTransportTargetOn_Func");
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportTargetOn, false);
    TriggerAddEventTargetModeUpdate(libCOMI_gt_CM_TychusMedicTransportTargetOn, c_playerAny, AbilityCommand("TychusMedicTransportLoadUnits", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusMedicTransportTargetOff
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TychusMedicTransportTargetOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    actor lv_a;
    int lv_p;
    unitgroup lv_ug;

    // Automatic Variable Declarations
    unitgroup auto5E0C6223_g;
    int auto5E0C6223_u;

    // Variable Initialization
    lv_p = EventPlayer();
    lv_ug = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ug = UnitGroup("TychusMedivacPlatform", lv_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5E0C6223_g = lv_ug;
    auto5E0C6223_u = UnitGroupCount(auto5E0C6223_g, c_unitCountAll);
    for (;; auto5E0C6223_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto5E0C6223_g, auto5E0C6223_u);
        if (lv_u == null) { break; }
        ActorScopeSend(ActorScopeFromUnit(lv_u), "Signal PickUpCancel");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TychusMedicTransportTargetOff_Init () {
    libCOMI_gt_CM_TychusMedicTransportTargetOff = TriggerCreate("libCOMI_gt_CM_TychusMedicTransportTargetOff_Func");
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportTargetOff, false);
    TriggerAddEventTargetModeUpdate(libCOMI_gt_CM_TychusMedicTransportTargetOff, c_playerAny, AbilityCommand("TychusMedicTransportLoadUnits", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusMedicTransportStop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TychusMedicTransportStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    if ((UnitHasBehavior2(libCOMI_gv_cM_TychusMedicTransportUnit[lv_p], "TychusMedicTransportUnloadUnitsDespawnDelay") == false)) {
        UnitCreateEffectUnit(libCOMI_gv_cM_TychusMedicTransportUnit[lv_p], "TychusMedicTransportCancelUnloadSet", libCOMI_gv_cM_TychusMedicTransportUnit[lv_p]);
    }

    UnitGroupClear(libCOMI_gv_cM_TychusMedicGroundUnitsTransportGroupAir[lv_p]);
    UnitGroupClear(libCOMI_gv_cM_TychusMedicGroundUnitsTransportGroupGround[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TychusMedicTransportStop_Init () {
    libCOMI_gt_CM_TychusMedicTransportStop = TriggerCreate("libCOMI_gt_CM_TychusMedicTransportStop_Func");
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportStop, false);
    TriggerAddEventTargetModeUpdate(libCOMI_gt_CM_TychusMedicTransportStop, c_playerAny, AbilityCommand("TychusMedicTransportUnloadUnits", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusMedicTransportTimeOut
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TychusMedicTransportTimeOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libCOMI_gv_cM_GlobalCasterUnit[lv_p], "TychusMedicGCD", libCOMI_gv_cM_GlobalCasterUnit[lv_p]);
    UnitGroupClear(libCOMI_gv_cM_TychusMedicGroundUnitsTransportGroupAir[lv_p]);
    UnitGroupClear(libCOMI_gv_cM_TychusMedicGroundUnitsTransportGroupGround[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TychusMedicTransportTimeOut_Init () {
    libCOMI_gt_CM_TychusMedicTransportTimeOut = TriggerCreate("libCOMI_gt_CM_TychusMedicTransportTimeOut_Func");
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportTimeOut, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_TychusMedicTransportTimeOut, c_playerAny, "TychusMedicTransportUnloadUnitsDespawnDelayTimeOut");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusMedicTransportAirBehaviorApplied
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TychusMedicTransportAirBehaviorApplied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMI_gv_cM_TychusMedicGroundUnitsTransportGroupAir[lv_p], EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TychusMedicTransportAirBehaviorApplied_Init () {
    libCOMI_gt_CM_TychusMedicTransportAirBehaviorApplied = TriggerCreate("libCOMI_gt_CM_TychusMedicTransportAirBehaviorApplied_Func");
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportAirBehaviorApplied, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_TychusMedicTransportAirBehaviorApplied, null, "TychusMedicTransportAirUnits", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusMedicTransportGroundBehaviorApplied
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TychusMedicTransportGroundBehaviorApplied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitBehaviorEffectPlayer(lv_u, EventUnitBehavior(), c_effectPlayerCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMI_gv_cM_TychusMedicGroundUnitsTransportGroupGround[lv_p], EventUnit());
    if ((UnitGetType(lv_u) == "TychusOdin")) {
        UnitSetPosition(libCOUI_gv_cU_HeroUnit[0][lv_p], UnitGetPosition(lv_u), false);
        UnitBehaviorAdd(libCOUI_gv_cU_HeroUnit[0][lv_p], "TychusMedicTransportGroundUnits", libCOUI_gv_cU_HeroUnit[0][lv_p], 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TychusMedicTransportGroundBehaviorApplied_Init () {
    libCOMI_gt_CM_TychusMedicTransportGroundBehaviorApplied = TriggerCreate("libCOMI_gt_CM_TychusMedicTransportGroundBehaviorApplied_Func");
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportGroundBehaviorApplied, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_TychusMedicTransportGroundBehaviorApplied, null, "TychusMedicTransportGroundUnits", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusMedicTransportTeleportUnload
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TychusMedicTransportTeleportUnload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_unloadPoint;
    fixed lv_angle;
    fixed lv_distance;
    int lv_p;

    // Automatic Variable Declarations
    unitgroup auto3E7138D6_g;
    int auto3E7138D6_u;
    unit auto3E7138D6_var;
    unitgroup auto7BF82D02_g;
    int auto7BF82D02_u;
    unit auto7BF82D02_var;

    // Variable Initialization
    lv_unloadPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetUnit);
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = AngleBetweenPoints(libCOMI_gv_cM_TychusMedicTranportLoadPoint[lv_p], lv_unloadPoint);
    lv_distance = DistanceBetweenPoints(libCOMI_gv_cM_TychusMedicTranportLoadPoint[lv_p], lv_unloadPoint);
    auto3E7138D6_g = libCOMI_gv_cM_TychusMedicGroundUnitsTransportGroupAir[lv_p];
    auto3E7138D6_u = UnitGroupCount(auto3E7138D6_g, c_unitCountAll);
    for (;; auto3E7138D6_u -= 1) {
        auto3E7138D6_var = UnitGroupUnitFromEnd(auto3E7138D6_g, auto3E7138D6_u);
        if (auto3E7138D6_var == null) { break; }
        UnitSetPosition(auto3E7138D6_var, PointWithOffsetPolar(UnitGetPosition(auto3E7138D6_var), lv_distance, lv_angle), false);
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusMedicTransportAirUnitsRB", auto3E7138D6_var);
    }
    auto7BF82D02_g = libCOMI_gv_cM_TychusMedicGroundUnitsTransportGroupGround[lv_p];
    auto7BF82D02_u = UnitGroupCount(auto7BF82D02_g, c_unitCountAll);
    for (;; auto7BF82D02_u -= 1) {
        auto7BF82D02_var = UnitGroupUnitFromEnd(auto7BF82D02_g, auto7BF82D02_u);
        if (auto7BF82D02_var == null) { break; }
        if ((PointPathingPassable(PointWithOffsetPolar(UnitGetPosition(auto7BF82D02_var), lv_distance, lv_angle)) == true)) {
            UnitSetPosition(auto7BF82D02_var, PointWithOffsetPolar(UnitGetPosition(auto7BF82D02_var), lv_distance, lv_angle), false);
        }
        else {
            UnitSetPosition(auto7BF82D02_var, UnitTypePlacementFromPoint(UnitGetType(auto7BF82D02_var), UnitGetOwner(auto7BF82D02_var), lv_unloadPoint, 5.0), false);
        }
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusMedicTransportUnhideUnitsSet", auto7BF82D02_var);
    }
    UnitGroupClear(libCOMI_gv_cM_TychusMedicGroundUnitsTransportGroupAir[lv_p]);
    UnitGroupClear(libCOMI_gv_cM_TychusMedicGroundUnitsTransportGroupGround[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TychusMedicTransportTeleportUnload_Init () {
    libCOMI_gt_CM_TychusMedicTransportTeleportUnload = TriggerCreate("libCOMI_gt_CM_TychusMedicTransportTeleportUnload_Func");
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportTeleportUnload, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_TychusMedicTransportTeleportUnload, c_playerAny, "TychusMedicTransportUnloadUnitsCompletionSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_HeroQueue
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Tychus_HeroQueue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    string lv_uT;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();
    lv_uT = libCOMI_gf_TraingingUnitTypeInAbilCommand(EventUnitAbility(), lv_p, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_Tychus_UpdateHeroTechTree(lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Tychus_HeroQueue_Init () {
    libCOMI_gt_CM_Tychus_HeroQueue = TriggerCreate("libCOMI_gt_CM_Tychus_HeroQueue_Func");
    TriggerEnable(libCOMI_gt_CM_Tychus_HeroQueue, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Tychus_HeroQueue, null, AbilityCommand("TychusBarracksTrain", 255), c_unitAbilStageQueue, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Tychus_HeroQueue, null, AbilityCommand("TychusBarracksTrain", 255), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Tychus_HeroQueue, null, AbilityCommand("TychusFactoryTrain", 255), c_unitAbilStageQueue, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Tychus_HeroQueue, null, AbilityCommand("TychusFactoryTrain", 255), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Tychus_HeroQueue, null, AbilityCommand("TychusStarportTrain", 255), c_unitAbilStageQueue, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Tychus_HeroQueue, null, AbilityCommand("TychusStarportTrain", 255), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_HeroCancel
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Tychus_HeroCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    string lv_uT;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();
    lv_uT = libCOMI_gf_TraingingUnitTypeInAbilCommand(EventUnitAbility(), lv_p, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_Tychus_UpdateHeroTechTree(lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Tychus_HeroCancel_Init () {
    libCOMI_gt_CM_Tychus_HeroCancel = TriggerCreate("libCOMI_gt_CM_Tychus_HeroCancel_Func");
    TriggerEnable(libCOMI_gt_CM_Tychus_HeroCancel, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Tychus_HeroCancel, null, AbilityCommand("TychusBarracksTrain", 255), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Tychus_HeroCancel, null, AbilityCommand("TychusFactoryTrain", 255), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Tychus_HeroCancel, null, AbilityCommand("TychusStarportTrain", 255), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_TrainMaxChargesRemove
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Tychus_TrainMaxChargesRemove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoF1C761A8_ae = 10;
    const int autoF1C761A8_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_EventTychusHeroInstance() != "Tychus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_tychusHeroMaxCharges -= 1;
    lv_i = 0;
    for ( ; ( (autoF1C761A8_ai >= 0 && lv_i <= autoF1C761A8_ae) || (autoF1C761A8_ai < 0 && lv_i >= autoF1C761A8_ae) ) ; lv_i += autoF1C761A8_ai ) {
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusBarracksTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.CountMax", UnitGetOwner(libCOMI_gf_EventTychusHero()), libCOMI_gv_tychusHeroMaxCharges);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusFactoryTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.CountMax", UnitGetOwner(libCOMI_gf_EventTychusHero()), libCOMI_gv_tychusHeroMaxCharges);
        libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusStarportTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.CountMax", UnitGetOwner(libCOMI_gf_EventTychusHero()), libCOMI_gv_tychusHeroMaxCharges);
    }
    UnitCreateEffectUnit(libCOMI_gv_cM_GlobalCasterUnit[UnitGetOwner(libCOMI_gf_EventTychusHero())], "TychusHeroTrainChargeAdd", libCOMI_gv_cM_GlobalCasterUnit[UnitGetOwner(libCOMI_gf_EventTychusHero())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Tychus_TrainMaxChargesRemove_Init () {
    libCOMI_gt_CM_Tychus_TrainMaxChargesRemove = TriggerCreate("libCOMI_gt_CM_Tychus_TrainMaxChargesRemove_Func");
    TriggerEnable(libCOMI_gt_CM_Tychus_TrainMaxChargesRemove, false);
    libCOMI_gf_TychusHeroEvent(libCOMI_gt_CM_Tychus_TrainMaxChargesRemove, "Event_TychusHeroCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_HeroReviveUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Tychus_HeroReviveUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bar;
    abilcmd lv_abilcmd;
    int lv_index;
    int lv_p;
    string lv_unitType;
    unit lv_reviveTarget;
    order lv_orderReal;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bar = EventUnit();
    lv_abilcmd = OrderGetAbilityCommand(EventUnitOrder());
    lv_index = AbilityCommandGetCommand(lv_abilcmd);
    lv_p = UnitGetOwner(lv_bar);
    lv_unitType = (CatalogFieldValueGet(c_gameCatalogAbil, "TychusFakeReviveTrain", "InfoArray[" + IntToString(lv_index) + "].Unit[" + IntToString(0) + "]", lv_p));
    lv_reviveTarget = UnitGroupUnit(UnitGroup(lv_unitType, lv_p, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterDead - 32)), 0, 0), 1), 1);
    lv_orderReal = libNtve_gf_ReviveOrderWithNoTarget(AbilityCommand("TychusReviveHeroes", 0), lv_reviveTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    while ((TechTreeUnitCount(lv_p, lv_unitType, c_techCountQueuedOrBetter) > 0)) {
        UnitIssueOrder(lv_bar, Order(AbilityCommand("que5", 0)), c_orderQueueAddToEnd);
    }
    while ((UnitIsValid(lv_reviveTarget) == false)) {
        return true;
    }
    if ((UnitOrderIsValid(lv_bar, lv_orderReal) == true)) {
        UnitIssueOrder(lv_bar, lv_orderReal, c_orderQueueAddToEnd);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(lv_p), StringExternal("Param/Value/lib_COMI_8F36DA6F"), SoundLink("UI_GenericError", -1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Tychus_HeroReviveUsed_Init () {
    libCOMI_gt_CM_Tychus_HeroReviveUsed = TriggerCreate("libCOMI_gt_CM_Tychus_HeroReviveUsed_Func");
    TriggerEnable(libCOMI_gt_CM_Tychus_HeroReviveUsed, false);
    TriggerAddEventUnitOrder(libCOMI_gt_CM_Tychus_HeroReviveUsed, null, AbilityCommand("TychusFakeReviveTrain", 255));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_HeroReviveFailSafe
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Tychus_HeroReviveFailSafe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_fakeUnit;
    int lv_p;
    string lv_unitType;
    unitgroup lv_unitTypeGroup;
    unit lv_reviveTarget;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fakeUnit = EventUnitCreatedUnit();
    lv_p = UnitGetOwner(lv_fakeUnit);
    lv_unitType = UnitGetType(EventUnitCreatedUnit());
    lv_unitTypeGroup = UnitGroup(lv_unitType, lv_p, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_B463A428"), true);
    }

    UnitGroupRemove(lv_unitTypeGroup, lv_fakeUnit);
    lv_reviveTarget = UnitGroupUnit(lv_unitTypeGroup, 1);
    if ((UnitIsValid(lv_reviveTarget) == true)) {
        UnitSetPosition(lv_reviveTarget, UnitGetPosition(lv_fakeUnit), false);
        UnitRevive(lv_reviveTarget);
        UnitSetPropertyFixed(lv_reviveTarget, c_unitPropLifePercent, 100.0);
    }

    UnitRemove(lv_fakeUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Tychus_HeroReviveFailSafe_Init () {
    libCOMI_gt_CM_Tychus_HeroReviveFailSafe = TriggerCreate("libCOMI_gt_CM_Tychus_HeroReviveFailSafe_Func");
    TriggerEnable(libCOMI_gt_CM_Tychus_HeroReviveFailSafe, false);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Tychus_HeroReviveFailSafe, null, "TychusFakeReviveTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_OilBombFireDamageResponse
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Tychus_OilBombFireDamageResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_oilcaster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_oilcaster = libCOMI_gv_cM_Tychus_FirebatOilCaster;

    // Conditions
    if (testConds) {
        if (!((CatalogFieldValueGet(c_gameCatalogEffect, EventUnitDamageEffect(), "Death", EventUnitDamageSourcePlayer()) == "Fire"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_oilcaster == null)) {
        libCOMI_gv_cM_Tychus_FirebatOilCaster = UnitGroupUnit(UnitGroup("TychusFirebat", libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranTychus", libCOOC_gf_CommanderPlayers()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), 0), 0), 1);
        lv_oilcaster = libCOMI_gv_cM_Tychus_FirebatOilCaster;
    }

    if ((UnitIsAlive(EventUnit()) == true)) {
        UnitBehaviorAdd(EventUnit(), "TychusFirebatOilFire", lv_oilcaster, 1);
    }
    else if ((TechTreeUpgradeCount(UnitGetOwner(lv_oilcaster), "TychusFirebatIncendiaryPetroleum", c_techCountCompleteOnly) > 0)) {
        UnitCreateEffectPoint(lv_oilcaster, "TychusFirebatOilFireSearchTrigger", UnitGetPosition(EventUnit()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Tychus_OilBombFireDamageResponse_Init () {
    libCOMI_gt_CM_Tychus_OilBombFireDamageResponse = TriggerCreate("libCOMI_gt_CM_Tychus_OilBombFireDamageResponse_Func");
    TriggerEnable(libCOMI_gt_CM_Tychus_OilBombFireDamageResponse, false);
    TriggerAddEventUnitDamageAbsorbed(libCOMI_gt_CM_Tychus_OilBombFireDamageResponse, null, "TychusFirebatOilBombed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_UltimateAchievement
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Tychus_UltimateAchievement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranTychus", libCOOC_gf_CC_PlayersOfCommander("TerranTychus"));

    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "TychusACBandofBrothers") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusReaperBombCharges") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusWarhoundTurretUpgrade") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusFirebatShield") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusHercCrit") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusMarauderAttackSplash") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusGhostConcentrationHelmet") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusSpectreBrillianceAura") || (libNtve_gf_TriggeringProgressUpgrade() == "TychusMedicDefensiveMatrix")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_Tychus_UltimatesPurchased += 1;
    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusACBandofBrothers")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateTychus", 1);
        libCOMI_gf_CM_Tychus_UltimateTimeAchievement(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusReaperBombCharges")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateReaper", 1);
        libCOMI_gf_CM_Tychus_UltimateTimeAchievement(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusWarhoundTurretUpgrade")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateWarhound", 1);
        libCOMI_gf_CM_Tychus_UltimateTimeAchievement(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusFirebatShield")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateFirebat", 1);
        libCOMI_gf_CM_Tychus_UltimateTimeAchievement(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusHercCrit")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateHerc", 1);
        libCOMI_gf_CM_Tychus_UltimateTimeAchievement(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusMarauderAttackSplash")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateMarauder", 1);
        libCOMI_gf_CM_Tychus_UltimateTimeAchievement(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusGhostConcentrationHelmet")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateGhost", 1);
        libCOMI_gf_CM_Tychus_UltimateTimeAchievement(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusSpectreBrillianceAura")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateSpectre", 1);
        libCOMI_gf_CM_Tychus_UltimateTimeAchievement(lv_player);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TychusMedicDefensiveMatrix")) {
        AchievementTermQuantityAdd(lv_player, "CommanderTychusUltimateMedic", 1);
        libCOMI_gf_CM_Tychus_UltimateTimeAchievement(lv_player);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Tychus_UltimateAchievement_Init () {
    libCOMI_gt_CM_Tychus_UltimateAchievement = TriggerCreate("libCOMI_gt_CM_Tychus_UltimateAchievement_Func");
    TriggerEnable(libCOMI_gt_CM_Tychus_UltimateAchievement, false);
    TriggerAddEventUnitResearchProgress(libCOMI_gt_CM_Tychus_UltimateAchievement, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_HealAchievement
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Tychus_HealAchievement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_healingPlayer;
    int lv_healedPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_healingPlayer = EventUnitHealLaunchPlayer();
    lv_healedPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(lv_healingPlayer) == "Tychus"))) {
            return false;
        }

        if (!((EventUnitHealVital() == c_unitVitalLife))) {
            return false;
        }

        if (!((libCOOC_gf_CC_PlayerAllyNew(lv_healingPlayer) == lv_healedPlayer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantityAdd(lv_healingPlayer, "CommanderTychusHeal", CeilingI(EventUnitHealAmount()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Tychus_HealAchievement_Init () {
    libCOMI_gt_CM_Tychus_HealAchievement = TriggerCreate("libCOMI_gt_CM_Tychus_HealAchievement_Func");
    TriggerEnable(libCOMI_gt_CM_Tychus_HealAchievement, false);
    TriggerAddEventUnitHealed(libCOMI_gt_CM_Tychus_HealAchievement, null, c_unitVitalAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_SnareFailSafe
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Tychus_SnareFailSafe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.0, c_timeGame);
    UnitSetHeight(lv_u, UnitGetPropertyFixed(lv_u, c_unitPropHeight, c_unitPropNormal), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Tychus_SnareFailSafe_Init () {
    libCOMI_gt_CM_Tychus_SnareFailSafe = TriggerCreate("libCOMI_gt_CM_Tychus_SnareFailSafe_Func");
    TriggerEnable(libCOMI_gt_CM_Tychus_SnareFailSafe, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Tychus_SnareFailSafe, null, "TychusGhostPsychicSnare", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_TriggersInit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Tychus_TriggersInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto6A034BAA_g;
    const int auto2E3538DB_ae = 10;
    const int auto2E3538DB_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMI_gt__CM_TychusEventHook, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_CalldownOdinDeselect, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_HeroQueue, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_HeroCancel, true);
    TriggerEnable(libCOMI_gt_CM_TychusSpecialistTrainingAuraOn, true);
    TriggerEnable(libCOMI_gt_CM_TychusSpecialistTrainingAuraOff, true);
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportActived, true);
    TriggerEnable(libCOMI_gt_CM_TychusMedicTopBarButton, true);
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportTargetOn, true);
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportTargetOff, true);
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportStop, true);
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportTimeOut, true);
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportAirBehaviorApplied, true);
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportGroundBehaviorApplied, true);
    TriggerEnable(libCOMI_gt_CM_TychusMedicTransportTeleportUnload, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_WarhoundFearApply, true);
    TriggerEnable(libCOMI_gt_CM_TychusWarhound_Revive, true);
    TriggerEnable(libCOMI_gt_CM_TychusReaper_Revive, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_TrainMaxChargesRemove, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_CalldownOdinTychusSelect, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_CalldownOdinUpdateTarget, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_OdinSummon_Used, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_OdinSummon_CameraShake, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_Odin_Timeout, true);
    TriggerEnable(libCOMI_gt__CM_TychusEventHook, true);
    TriggerEnable(libCOMI_gt__CM_TychusStructureEventHook, true);
    TriggerEnable(libCOMI_gt_CM_TychusHERC_CriticalText, true);
    TriggerEnable(libCOMI_gt_CM_TychusHERC_ShieldCooldown, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_OilBombFireDamageResponse, true);
    TriggerEnable(libCOMI_gt_CM_TychusHeroPurchaseDummy, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_Hero_Charge_Timing, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_HeroReviveUsed, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_HeroReviveFailSafe, true);
    TriggerEnable(libCOMI_gt_CM_TychusReplaceResearchCenter, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_TriUnitSpeed_Upgrade, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_TriUnitHealth_Upgrade, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_UltimateAchievement, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_HealAchievement, true);
    TriggerEnable(libCOMI_gt_CM_Tychus_SnareFailSafe, true);
    auto6A034BAA_g = libCOOC_gf_CommanderPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto6A034BAA_g, lv_player);
        if (lv_player < 0) { break; }
        if ((PlayerCommander(lv_player) == "Tychus")) {
            lv_i = 0;
            for ( ; ( (auto2E3538DB_ai >= 0 && lv_i <= auto2E3538DB_ae) || (auto2E3538DB_ai < 0 && lv_i >= auto2E3538DB_ae) ) ; lv_i += auto2E3538DB_ai ) {
                libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusBarracksTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.CountMax", lv_player, 1.0);
                libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusFactoryTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.CountMax", lv_player, 1.0);
                libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusStarportTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.CountMax", lv_player, 1.0);
            }
            libCOMI_gf_CM_Tychus_InitHeroTechLimit(lv_player);
            libCOMI_gf_CM_Tychus_UpdateHeroTechTree(lv_player);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Tychus_TriggersInit_Init () {
    libCOMI_gt_CM_Tychus_TriggersInit = TriggerCreate("libCOMI_gt_CM_Tychus_TriggersInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_TriUnitSpeed_Upgrade
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Tychus_TriUnitSpeed_Upgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_masteryCount;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(lv_player) == "Tychus"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() == "TychusSquadAttackSpeed"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_masteryCount = TechTreeUpgradeCount(EventPlayer(), "MasteryTychusUpgradesIncrease", c_techCountCompleteOnly);
    libNtve_gf_SetUpgradeLevelForPlayer(lv_player, "TychusSquadAttackSpeedWithMastery", lv_masteryCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Tychus_TriUnitSpeed_Upgrade_Init () {
    libCOMI_gt_CM_Tychus_TriUnitSpeed_Upgrade = TriggerCreate("libCOMI_gt_CM_Tychus_TriUnitSpeed_Upgrade_Func");
    TriggerEnable(libCOMI_gt_CM_Tychus_TriUnitSpeed_Upgrade, false);
    TriggerAddEventUnitResearchProgress(libCOMI_gt_CM_Tychus_TriUnitSpeed_Upgrade, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_TriUnitHealth_Upgrade
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Tychus_TriUnitHealth_Upgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(UnitGetOwner(EventUnit())) == "Tychus"))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() == "TychusSquadHealth"))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(EventPlayer(), "MasteryTychusUpgradesIncrease", c_techCountCompleteOnly) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "TychusSquadHealthMastery", TechTreeUpgradeCount(EventPlayer(), "MasteryTychusUpgradesIncrease", c_techCountCompleteOnly));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Tychus_TriUnitHealth_Upgrade_Init () {
    libCOMI_gt_CM_Tychus_TriUnitHealth_Upgrade = TriggerCreate("libCOMI_gt_CM_Tychus_TriUnitHealth_Upgrade_Func");
    TriggerEnable(libCOMI_gt_CM_Tychus_TriUnitHealth_Upgrade, false);
    TriggerAddEventUnitResearchProgress(libCOMI_gt_CM_Tychus_TriUnitHealth_Upgrade, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusReplaceResearchCenter
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TychusReplaceResearchCenter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_p;

    // Automatic Variable Declarations
    unitgroup auto8B4AE5B8_g;
    int auto8B4AE5B8_u;
    unit auto8B4AE5B8_var;

    // Variable Initialization
    lv_unit = libCOMI_gf_EventTychusHero();
    lv_p = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libCOMI_gf_EventTychusHero()) == "TychusCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    CatalogLinkReplace(UnitGetOwner(libCOMI_gf_EventTychusHero()), c_gameCatalogUnit, "TychusResearchCenter", "TychusResearchCenterUnlocked");
    libCOMI_gv_cM_HeroUnit[lv_p] = libCOMI_gf_EventTychusHero();
    libCOUI_gv_cU_HeroUnit[0][lv_p] = lv_unit;
    auto8B4AE5B8_g = UnitGroup("TychusResearchCenter", UnitGetOwner(libCOMI_gf_EventTychusHero()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8B4AE5B8_u = UnitGroupCount(auto8B4AE5B8_g, c_unitCountAll);
    for (;; auto8B4AE5B8_u -= 1) {
        auto8B4AE5B8_var = UnitGroupUnitFromEnd(auto8B4AE5B8_g, auto8B4AE5B8_u);
        if (auto8B4AE5B8_var == null) { break; }
        libNtve_gf_ReplaceUnit(auto8B4AE5B8_var, "TychusResearchCenterUnlocked", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
        libNtve_gf_CopyUnitControlGroups(auto8B4AE5B8_var, libNtve_gf_LastReplacedUnit());
        UnitCreateEffectUnit(auto8B4AE5B8_var, "TychusResearchCenterCopyRally", libNtve_gf_LastReplacedUnit());
        libCOUI_gv_cU_TychusSquadBar = libNtve_gf_LastReplacedUnit();
        if ((UnitIsSelected(auto8B4AE5B8_var, UnitGetOwner(libCOMI_gf_EventTychusHero())) == true)) {
            UnitSelect(libNtve_gf_LastReplacedUnit(), UnitGetOwner(libCOMI_gf_EventTychusHero()), true);
        }

        libCOUI_gf_CU_TychusSetBarUnit(libNtve_gf_LastReplacedUnit());
    }
    DialogControlSetAnimationState(libCOUI_gv_cU_TychusSquadUnitFrames[0], PlayerGroupAll(), "TrainingState", "NotTraining");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TychusReplaceResearchCenter_Init () {
    libCOMI_gt_CM_TychusReplaceResearchCenter = TriggerCreate("libCOMI_gt_CM_TychusReplaceResearchCenter_Func");
    TriggerEnable(libCOMI_gt_CM_TychusReplaceResearchCenter, false);
    libCOMI_gf_TychusHeroEvent(libCOMI_gt_CM_TychusReplaceResearchCenter, "Event_TychusHeroCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_Hero_Charge_Timing
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Tychus_Hero_Charge_Timing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_player;
    fixed lv_heroCooldown;

    // Automatic Variable Declarations
    playergroup auto2F37A26F_g;
    const int auto305C41C6_ae = 10;
    const int auto305C41C6_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto2F37A26F_g = libCOOC_gf_CommanderPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto2F37A26F_g, lv_player);
        if (lv_player < 0) { break; }
        if ((PlayerCommander(lv_player) == "Tychus")) {
            lv_heroCooldown = libCOMI_gf_CalculateTychusRecruitmentChargeCooldown(lv_player);
            lv_i = 0;
            for ( ; ( (auto305C41C6_ai >= 0 && lv_i <= auto305C41C6_ae) || (auto305C41C6_ai < 0 && lv_i >= auto305C41C6_ae) ) ; lv_i += auto305C41C6_ai ) {
                libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusBarracksTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.TimeStart", lv_player, lv_heroCooldown);
                libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusBarracksTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.TimeUse", lv_player, lv_heroCooldown);
                libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusFactoryTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.TimeStart", lv_player, lv_heroCooldown);
                libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusFactoryTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.TimeUse", lv_player, lv_heroCooldown);
                libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusStarportTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.TimeStart", lv_player, lv_heroCooldown);
                libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogAbil, "TychusStarportTrain", "InfoArray[" + IntToString(lv_i) + "].Charge.TimeUse", lv_player, lv_heroCooldown);
            }
            libCOMI_gf_ApplyTychusMaxChargesPerk(lv_player);
        }

    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Tychus_Hero_Charge_Timing_Init () {
    libCOMI_gt_CM_Tychus_Hero_Charge_Timing = TriggerCreate("libCOMI_gt_CM_Tychus_Hero_Charge_Timing_Func");
    TriggerEnable(libCOMI_gt_CM_Tychus_Hero_Charge_Timing, false);
    TriggerAddEventTimeElapsed(libCOMI_gt_CM_Tychus_Hero_Charge_Timing, libCOMI_gv_cM_Tychus_InitialTrainTime, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_CalldownOdinDeselect
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Tychus_CalldownOdinDeselect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSelect(EventUnit(), UnitGetOwner(EventUnit()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Tychus_CalldownOdinDeselect_Init () {
    libCOMI_gt_CM_Tychus_CalldownOdinDeselect = TriggerCreate("libCOMI_gt_CM_Tychus_CalldownOdinDeselect_Func");
    TriggerEnable(libCOMI_gt_CM_Tychus_CalldownOdinDeselect, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Tychus_CalldownOdinDeselect, null, "TychusCalldownOdinInsideOdinStun", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_CalldownOdinUpdateTarget
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Tychus_CalldownOdinUpdateTarget_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOUI_gf_UpdateTychusSquadTargetFrame("Tychus", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Tychus_CalldownOdinUpdateTarget_Init () {
    libCOMI_gt_CM_Tychus_CalldownOdinUpdateTarget = TriggerCreate("libCOMI_gt_CM_Tychus_CalldownOdinUpdateTarget_Func");
    TriggerEnable(libCOMI_gt_CM_Tychus_CalldownOdinUpdateTarget, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Tychus_CalldownOdinUpdateTarget, c_playerAny, "TychusCalldownOdinApplyTimedLife");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Tychus_CalldownOdinTychusSelect
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Tychus_CalldownOdinTychusSelect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tychus;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tychus = libCOMI_gv_cM_HeroUnit[libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranTychus", libCOOC_gf_CC_PlayersOfCommander("TerranTychus"))];

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TychusOdin"))) {
            return false;
        }

        if (!((UnitIsAlive(lv_tychus) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSelect(lv_tychus, UnitGetOwner(EventUnit()), true);
    libCOUI_gf_UpdateTychusSquadTargetFrame("Tychus", libCOMI_gv_cM_HeroUnit[libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("TerranTychus", libCOOC_gf_CC_PlayersOfCommander("TerranTychus"))]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Tychus_CalldownOdinTychusSelect_Init () {
    libCOMI_gt_CM_Tychus_CalldownOdinTychusSelect = TriggerCreate("libCOMI_gt_CM_Tychus_CalldownOdinTychusSelect_Func");
    TriggerEnable(libCOMI_gt_CM_Tychus_CalldownOdinTychusSelect, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_Tychus_CalldownOdinTychusSelect, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusWarhound_Revive
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TychusWarhound_Revive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = libCOMI_gf_EventTychusHero();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_hero) == "TychusWarhound"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_hero, "TychusWarhoundTurretChargeAdd", lv_hero);
    UnitCreateEffectUnit(lv_hero, "TychusWarhoundTurretChargeRemove", lv_hero);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TychusWarhound_Revive_Init () {
    libCOMI_gt_CM_TychusWarhound_Revive = TriggerCreate("libCOMI_gt_CM_TychusWarhound_Revive_Func");
    TriggerEnable(libCOMI_gt_CM_TychusWarhound_Revive, false);
    libCOMI_gf_TychusHeroEvent(libCOMI_gt_CM_TychusWarhound_Revive, "Event_TychusHeroRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusHeroPurchaseDummy
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TychusHeroPurchaseDummy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    int lv_tychusplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = libCOMI_gf_EventTychusHero();
    lv_tychusplayer = UnitGetOwner(libCOMI_gf_EventTychusHero());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_hero) == "TychusFirebat")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusFirebatOwned", 1);
    }
    else if ((UnitGetType(lv_hero) == "TychusGhost")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusGhostOwned", 1);
    }
    else if ((UnitGetType(lv_hero) == "TychusMarauder")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusMarauderOwned", 1);
    }
    else if ((UnitGetType(lv_hero) == "TychusHERC")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusHERCOwned", 1);
    }
    else if ((UnitGetType(lv_hero) == "TychusWarhound")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusWarhoundOwned", 1);
    }
    else if ((UnitGetType(lv_hero) == "TychusMedic")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusMedicOwned", 1);
    }
    else if ((UnitGetType(lv_hero) == "TychusReaper")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusReaperOwned", 1);
    }
    else if ((UnitGetType(lv_hero) == "TychusSpectre")) {
        TechTreeUpgradeAddLevel(lv_tychusplayer, "TychusSpectreOwned", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TychusHeroPurchaseDummy_Init () {
    libCOMI_gt_CM_TychusHeroPurchaseDummy = TriggerCreate("libCOMI_gt_CM_TychusHeroPurchaseDummy_Func");
    TriggerEnable(libCOMI_gt_CM_TychusHeroPurchaseDummy, false);
    libCOMI_gf_TychusHeroEvent(libCOMI_gt_CM_TychusHeroPurchaseDummy, "Event_TychusHeroCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TychusReaper_Revive
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TychusReaper_Revive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hero = libCOMI_gf_EventTychusHero();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_hero) == "TychusReaper"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_hero, "TychusReaperBombChargeAdd", lv_hero);
    UnitCreateEffectUnit(lv_hero, "TychusReaperBombChargeRemove", lv_hero);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TychusReaper_Revive_Init () {
    libCOMI_gt_CM_TychusReaper_Revive = TriggerCreate("libCOMI_gt_CM_TychusReaper_Revive_Func");
    TriggerEnable(libCOMI_gt_CM_TychusReaper_Revive, false);
    libCOMI_gf_TychusHeroEvent(libCOMI_gt_CM_TychusReaper_Revive, "Event_TychusHeroRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Roach Drop Scale
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_RoachDropScale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_scaleModifier;
    fixed lv_upgradeCount;
    fixed lv_newScale;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scaleModifier = 0.02;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_upgradeCount = TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "MasteryZagaraRoachDropDamageAndHealth", c_techCountCompleteOnly);
    lv_newScale = (1+(lv_upgradeCount*lv_scaleModifier));
    TextExpressionSetToken("Param/Expression/lib_COMI_39D2BF93", "A", FixedToText(lv_newScale, c_fixedPrecisionAny));
    ActorSendAsText(libNtve_gf_MainActorofUnit(EventUnit()), TextExpressionAssemble("Param/Expression/lib_COMI_39D2BF93"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_RoachDropScale_Init () {
    libCOMI_gt_RoachDropScale = TriggerCreate("libCOMI_gt_RoachDropScale_Func");
    TriggerEnable(libCOMI_gt_RoachDropScale, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_RoachDropScale, null, "ZagaraVoidCoopInfestedPodsTimedLife", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zagara_WeaponSwap
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zagara_WeaponSwap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "HunterKiller")) {
        UnitWeaponRemove(EventUnit(), "HunterKillerMelee");
        UnitWeaponRemove(EventUnit(), "HunterKiller");
        UnitWeaponAdd(EventUnit(), "ZagaraHunterKillerMelee", null);
        UnitWeaponAdd(EventUnit(), "ZagaraHunterKiller", null);
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Roach")) {
        UnitWeaponRemove(EventUnit(), "AcidSaliva");
        UnitWeaponRemove(EventUnit(), "RoachMelee");
        UnitWeaponAdd(EventUnit(), "ZagaraAcidSaliva", null);
        UnitWeaponAdd(EventUnit(), "ZagaraRoachMelee", null);
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zagara_WeaponSwap_Init () {
    libCOMI_gt_CM_Zagara_WeaponSwap = TriggerCreate("libCOMI_gt_CM_Zagara_WeaponSwap_Func");
    TriggerEnable(libCOMI_gt_CM_Zagara_WeaponSwap, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Zagara_WeaponSwap, null, "ZagaraOwned", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_Entropic_Spawner
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_Entropic_Spawner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawner;
    fixed lv_facing;
    fixed lv_angelA;
    fixed lv_angelA2;
    fixed lv_angelB;
    fixed lv_angelB2;
    fixed lv_range;
    int lv_p;
    point lv_center;

    // Automatic Variable Declarations
    const int autoBE094967_n = 5;
    int autoBE094967_i;

    // Variable Initialization
    lv_spawner = EventUnitCreatedUnit();
    lv_facing = UnitGetFacing(EventUnit());
    lv_range = 3.0;
    lv_p = UnitGetOwner(lv_spawner);
    lv_center = UnitGetPosition(lv_spawner);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_spawner) == "ZeratulEntropicBlastCyanWeaponSpawner"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angelA = (lv_facing - 90.0);
    lv_angelB = (lv_facing + 90.0);
    for (autoBE094967_i = 1; autoBE094967_i <= autoBE094967_n; autoBE094967_i += 1) {
        UnitCreate(1, "ZeratulXelNagaChargedCrystalCyan", 0, lv_p, PointWithOffsetPolar(lv_center, lv_range, lv_angelA), lv_angelA);
        UnitCreateEffectUnit(lv_spawner, "ZeratulEntropicBlastCyanImpactSpawnSet", UnitLastCreated());
        UnitCreate(1, "ZeratulXelNagaChargedCrystalCyan", 0, lv_p, PointWithOffsetPolar(lv_center, lv_range, lv_angelB), lv_angelB);
        UnitCreateEffectUnit(lv_spawner, "ZeratulEntropicBlastCyanImpactSpawnSet", UnitLastCreated());
        lv_angelA += 36.0;
        lv_angelB += 36.0;
        Wait(0.1875, c_timeGame);
    }
    Wait(0.75, c_timeGame);
    UnitKill(lv_spawner);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_Entropic_Spawner_Init () {
    libCOMI_gt_CM_Zeratul_Entropic_Spawner = TriggerCreate("libCOMI_gt_CM_Zeratul_Entropic_Spawner_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_Entropic_Spawner, false);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Zeratul_Entropic_Spawner, null, "ZeratulEntropicBlastCyan", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_Devolve
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_Devolve_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_Zeratul_ApplyDevolve(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_Devolve_Init () {
    libCOMI_gt_CM_Zeratul_Devolve = TriggerCreate("libCOMI_gt_CM_Zeratul_Devolve_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_Devolve, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Zeratul_Devolve, c_playerAny, "ZeratulXelNagaConstructDevolveModifyUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulProphecyEventVision
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_ZeratulProphecyEventVision_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_event = "ZeratulEvent_VisionReady";

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        lv_event = "ZeratulEvent_VisionReady";
    }
    else {
        lv_event = "ZeratulEvent_VisionNotReady";
    }
    DataTableSetUnit(false, TriggerEventParamName((lv_event), "ZeratulEventUnit"), EventUnit());
    DataTableSetInt(false, TriggerEventParamName((lv_event), "ZeratulEventPlayer"), UnitGetOwner(EventUnit()));
    TriggerSendEvent((lv_event));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_ZeratulProphecyEventVision_Init () {
    libCOMI_gt_CM_ZeratulProphecyEventVision = TriggerCreate("libCOMI_gt_CM_ZeratulProphecyEventVision_Func");
    TriggerEnable(libCOMI_gt_CM_ZeratulProphecyEventVision, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_ZeratulProphecyEventVision, null, "ZeratulProphecyCooldownTracker", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_ZeratulProphecyEventVision, null, "ZeratulProphecyCooldownTracker", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulProphecyEventArtifactMissed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_ZeratulProphecyEventArtifactMissed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_event = "ZeratulEvent_ArtifactMissed";

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(EventPlayer()) == "Zeratul"))) {
            return false;
        }

        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) == libCOMI_gv_cM_HeroUnit[libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ProtossZeratul", libCOOC_gf_CommanderPlayers())]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_SendZeratulProphecyEventArtifact(lv_event, EventPlayer(), libCOMI_gv_cM_ZeratulProphecyArtifact, libCOMI_gv_cM_ZeratulProphecyArtifactNumber);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_ZeratulProphecyEventArtifactMissed_Init () {
    libCOMI_gt_CM_ZeratulProphecyEventArtifactMissed = TriggerCreate("libCOMI_gt_CM_ZeratulProphecyEventArtifactMissed_Func");
    TriggerEnable(libCOMI_gt_CM_ZeratulProphecyEventArtifactMissed, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_ZeratulProphecyEventArtifactMissed, c_playerAny, "Event_ZeratulProphecyPrepMiss");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulProphecyEventArtifactPickedUp
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_ZeratulProphecyEventArtifactPickedUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;
    int lv_zeratulplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_event = "ZeratulEvent_ArtifactPickedUp";
    lv_zeratulplayer = libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ProtossZeratul", libCOOC_gf_CommanderPlayers());

    // Conditions
    if (testConds) {
        if (!((EventUnit() == libCOMI_gv_cM_ZeratulProphecyArtifact))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_SendZeratulProphecyEventArtifact(lv_event, lv_zeratulplayer, EventUnit(), libCOMI_gv_cM_ZeratulProphecyArtifactNumber);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_ZeratulProphecyEventArtifactPickedUp_Init () {
    libCOMI_gt_CM_ZeratulProphecyEventArtifactPickedUp = TriggerCreate("libCOMI_gt_CM_ZeratulProphecyEventArtifactPickedUp_Func");
    TriggerEnable(libCOMI_gt_CM_ZeratulProphecyEventArtifactPickedUp, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_ZeratulProphecyEventArtifactPickedUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulProphecyEventArtifactRevealed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_ZeratulProphecyEventArtifactRevealed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;
    int lv_zeratulplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_event = "ZeratulEvent_ArtifactFound";
    lv_zeratulplayer = libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ProtossZeratul", libCOOC_gf_CommanderPlayers());

    // Conditions
    if (testConds) {
        if (!((EventUnit() == libCOMI_gv_cM_ZeratulProphecyArtifact))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_SendZeratulProphecyEventArtifact(lv_event, lv_zeratulplayer, EventUnit(), libCOMI_gv_cM_ZeratulProphecyArtifactNumber);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_ZeratulProphecyEventArtifactRevealed_Init () {
    libCOMI_gt_CM_ZeratulProphecyEventArtifactRevealed = TriggerCreate("libCOMI_gt_CM_ZeratulProphecyEventArtifactRevealed_Func");
    TriggerEnable(libCOMI_gt_CM_ZeratulProphecyEventArtifactRevealed, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_ZeratulProphecyEventArtifactRevealed, UnitRefFromVariable("libCOMI_gv_cM_ZeratulProphecyArtifact"), "ProphecyArtifactHide", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulProphecyEventArtifactUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_ZeratulProphecyEventArtifactUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_event = "ZeratulEvent_ArtifactUsed";

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(EventPlayer()) == "Zeratul"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventUpgradeName() == "ZeratulArtifactUpgradeTier0A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier0B") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier0C"))) {
        libCOMI_gf_CM_SendZeratulProphecyEventArtifact(lv_event, EventPlayer(), null, 0);
    }
    else if (((EventUpgradeName() == "ZeratulArtifactUpgradeTier1A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier1B") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier1C"))) {
        libCOMI_gf_CM_SendZeratulProphecyEventArtifact(lv_event, EventPlayer(), null, 1);
    }
    else if (((EventUpgradeName() == "ZeratulArtifactUpgradeTier2A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier2B") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier2C"))) {
        libCOMI_gf_CM_SendZeratulProphecyEventArtifact(lv_event, EventPlayer(), null, 2);
    }
    else if (((EventUpgradeName() == "ZeratulArtifactUpgradeTier3A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier3B") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier3C"))) {
        libCOMI_gf_CM_SendZeratulProphecyEventArtifact(lv_event, EventPlayer(), null, 3);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_ZeratulProphecyEventArtifactUsed_Init () {
    libCOMI_gt_CM_ZeratulProphecyEventArtifactUsed = TriggerCreate("libCOMI_gt_CM_ZeratulProphecyEventArtifactUsed_Func");
    TriggerEnable(libCOMI_gt_CM_ZeratulProphecyEventArtifactUsed, false);
    TriggerAddEventUpgradeLevelChanged(libCOMI_gt_CM_ZeratulProphecyEventArtifactUsed, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulProphecyEventProphecyCast
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_ZeratulProphecyEventProphecyCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_event;

    // Automatic Variable Declarations
    int auto18D116F0_val;

    // Variable Initialization
    lv_event = "ZeratulEvent_ArtifactMissed";

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(UnitGetOwner(EventUnit())) == "Zeratul"))) {
            return false;
        }

        if (!((EventUnit() == libCOMI_gv_cM_HeroUnit[UnitGetOwner(EventUnit())]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto18D116F0_val = EventUnitAbilityStage();
    if (auto18D116F0_val == c_abilEffectStageCast) {
        lv_event = "ZeratulEvent_ProphecyCastStart";
    }
    else if (auto18D116F0_val == c_unitAbilStageCancel) {
        lv_event = "ZeratulEvent_ProphecyCastStop";
    }
    else {
    }
    DataTableSetUnit(false, TriggerEventParamName((lv_event), "ZeratulEventUnit"), EventUnit());
    DataTableSetInt(false, TriggerEventParamName((lv_event), "ZeratulEventPlayer"), UnitGetOwner(EventUnit()));
    TriggerSendEvent((lv_event));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_ZeratulProphecyEventProphecyCast_Init () {
    libCOMI_gt_CM_ZeratulProphecyEventProphecyCast = TriggerCreate("libCOMI_gt_CM_ZeratulProphecyEventProphecyCast_Func");
    TriggerEnable(libCOMI_gt_CM_ZeratulProphecyEventProphecyCast, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_ZeratulProphecyEventProphecyCast, null, AbilityCommand("ProphecyVision", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_ZeratulProphecyEventProphecyCast, null, AbilityCommand("ProphecyVision", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_TransportDropOff
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_TransportDropOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_voidseeker;
    point lv_unloadpoint;
    fixed lv_facingangle;
    fixed lv_interpolationperiod;
    fixed lv_interpolationdistance;
    point lv_nextinterpolatedpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_voidseeker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_unloadpoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_facingangle = UnitGetFacing(lv_voidseeker);
    lv_interpolationperiod = 0.125;
    lv_interpolationdistance = 1.0;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_voidseeker) == "ZeratulTransportVoidSeeker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_voidseeker, OrderTargetingPoint(AbilityCommand("VoidSeekerTransport", 2), lv_unloadpoint), c_orderQueueReplace);
    lv_interpolationdistance = (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, "ZeratulTransportVoidSeeker", "Speed", UnitGetOwner(lv_voidseeker)) * lv_interpolationperiod);
    lv_nextinterpolatedpoint = PointWithOffsetPolar(UnitGetPosition(lv_voidseeker), lv_interpolationdistance, lv_facingangle);
    while ((RegionContainsPoint(RegionPlayableMap(), lv_nextinterpolatedpoint) == true)) {
        lv_nextinterpolatedpoint = PointWithOffsetPolar(lv_nextinterpolatedpoint, lv_interpolationdistance, lv_facingangle);
    }
    UnitIssueOrder(lv_voidseeker, OrderTargetingPoint(AbilityCommand("move", 0), lv_nextinterpolatedpoint), c_orderQueueAddToEnd);
    Wait(0.25, c_timeGame);
    UnitWaitUntilIdle(lv_voidseeker, true);
    UnitKill(lv_voidseeker);
    libCOMI_gv_cM_ZeratulVoidSeeker = lv_voidseeker;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_TransportDropOff_Init () {
    libCOMI_gt_CM_Zeratul_TransportDropOff = TriggerCreate("libCOMI_gt_CM_Zeratul_TransportDropOff_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_TransportDropOff, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Zeratul_TransportDropOff, c_playerAny, "ZeratulVoidSeekerTrigger");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_PurificationNova_Finale
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_PurificationNova_Finale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    point lv_targetPoint;
    point lv_spawnPoint;
    point lv_goal;
    fixed lv_mainAngel;
    unit lv_purifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_purifier = UnitBehaviorEffectUnit(lv_u, "ZeratulPurificationNovaCasterFinder", c_effectUnitCaster, 0);
    if ((UnitIsValid(lv_purifier) == true) && (TechTreeUpgradeCount(lv_p, "ZeratulArtifactTier3_RoboticsBay", c_techCountCompleteOnly) >= 1)) {
        lv_spawnPoint = UnitGetPosition(lv_u);
        lv_goal = UnitGetGoalPosition(lv_u);
        if ((lv_spawnPoint != lv_goal)) {
            lv_mainAngel = AngleBetweenPoints(lv_spawnPoint, lv_goal);
        }
        else {
            lv_mainAngel = AngleBetweenPoints(UnitGetPosition(lv_purifier), lv_spawnPoint);
        }
        lv_targetPoint = PointWithOffsetPolar(lv_spawnPoint, 15.0, lv_mainAngel);
        libCOMI_gf_CM_Zeratul_PurificationNova_SpawnSmallOrb(lv_purifier, lv_spawnPoint, lv_targetPoint);
        lv_targetPoint = PointWithOffsetPolar(lv_spawnPoint, 15.0, (lv_mainAngel + 45.0));
        libCOMI_gf_CM_Zeratul_PurificationNova_SpawnSmallOrb(lv_purifier, lv_spawnPoint, lv_targetPoint);
        lv_targetPoint = PointWithOffsetPolar(lv_spawnPoint, 15.0, (lv_mainAngel - 45.0));
        libCOMI_gf_CM_Zeratul_PurificationNova_SpawnSmallOrb(lv_purifier, lv_spawnPoint, lv_targetPoint);
    }

    UnitKill(lv_u);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_PurificationNova_Finale_Init () {
    libCOMI_gt_CM_Zeratul_PurificationNova_Finale = TriggerCreate("libCOMI_gt_CM_Zeratul_PurificationNova_Finale_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_PurificationNova_Finale, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Zeratul_PurificationNova_Finale, null, "ZeratulPurificationNovaTargettedTarget", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_PurificationNova_Create
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_PurificationNova_Create_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    unit lv_purifier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_purifier = UnitBehaviorEffectUnit(lv_u, "ZeratulPurificationNovaTargettedTarget", c_effectUnitCaster, 0);
    UnitBehaviorAdd(lv_u, "ZeratulPurificationNovaCasterFinder", lv_purifier, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_PurificationNova_Create_Init () {
    libCOMI_gt_CM_Zeratul_PurificationNova_Create = TriggerCreate("libCOMI_gt_CM_Zeratul_PurificationNova_Create_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_PurificationNova_Create, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Zeratul_PurificationNova_Create, null, "ZeratulPurificationNovaTargettedTarget", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_PurificationNova_MainImpact
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_PurificationNova_MainImpact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_target;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_p = UnitGetOwner(lv_u);

    // Conditions
    if (testConds) {
        if (!((lv_u != lv_target))) {
            return false;
        }

        if (!((UnitIsValid(lv_u) == true))) {
            return false;
        }

        if (!((UnitIsValid(lv_target) == true))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(lv_p, "ZeratulArtifactTier3_RoboticsBay", c_techCountCompleteOnly) >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_target, "ZeratulPurificationNovaTargetedMainTargetImmunity", lv_u, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_PurificationNova_MainImpact_Init () {
    libCOMI_gt_CM_Zeratul_PurificationNova_MainImpact = TriggerCreate("libCOMI_gt_CM_Zeratul_PurificationNova_MainImpact_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_PurificationNova_MainImpact, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Zeratul_PurificationNova_MainImpact, c_playerAny, "ZeratulPurificationNovaTargettedSearchSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulStasisBeamIssueOrder
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_ZeratulStasisBeamIssueOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_PlayerRemoveCooldown(lv_player, CatalogFieldValueGet(c_gameCatalogAbil, "ZeratulMapWideStasisIssueOrder", "Cost[" + IntToString(0) + "].Cooldown.Link", lv_player));
    UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(libCOMI_gv_cM_Zeratul_HeroStructure[lv_player])), libCOMI_gv_cM_Zeratul_HeroStructureUnitGroup[lv_player], OrderTargetingPoint(AbilityCommand("ZeratulMapWideStasis", 0), UnitGetPosition(libCOMI_gv_cM_Zeratul_HeroStructure[lv_player])), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_ZeratulStasisBeamIssueOrder_Init () {
    libCOMI_gt_CM_ZeratulStasisBeamIssueOrder = TriggerCreate("libCOMI_gt_CM_ZeratulStasisBeamIssueOrder_Func");
    TriggerEnable(libCOMI_gt_CM_ZeratulStasisBeamIssueOrder, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_ZeratulStasisBeamIssueOrder, null, AbilityCommand("ZeratulMapWideStasisIssueOrder", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulStasisBeam
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_ZeratulStasisBeam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_casterPoint;
    point lv_targetPoint;
    point lv_abilityTargetPoint;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_casterPoint = UnitGetPosition(EventUnit());
    lv_targetPoint = EventUnitTargetPoint();
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    lv_abilityTargetPoint = libCOMI_gf_CM_LaserDrillTargetPoint(lv_targetPoint, lv_casterPoint, RegionPlayableMap(), lv_player);
    if ((lv_abilityTargetPoint != null)) {
        CatalogFieldValueModify(c_gameCatalogEffect, "ZeratulMapWideStasisDummyCP", "PeriodicOffsetArray[" + IntToString(0) + "]", EventPlayer(), ("0, -" + IntToString((libCOMI_gv_cM_LaserDrillDistance[lv_player] / 2)) + ", 0"), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogEffect, "ZeratulMapWideStasisCP", "PeriodicOffsetArray[" + IntToString(0) + "]", EventPlayer(), ("0, -" + IntToString((libCOMI_gv_cM_LaserDrillDistance[lv_player] / 2)) + ", 0"), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogEffect, "ZeratulMapWideStasisSearch", "AreaArray[" + IntToString(0) + "].RectangleHeight", EventPlayer(), IntToString(libCOMI_gv_cM_LaserDrillDistance[lv_player]), c_upgradeOperationSet);
        UnitCreateEffectPoint(EventUnit(), "ZeratulMapWideStasisSet", lv_abilityTargetPoint);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_ZeratulStasisBeam_Init () {
    libCOMI_gt_CM_ZeratulStasisBeam = TriggerCreate("libCOMI_gt_CM_ZeratulStasisBeam_Func");
    TriggerEnable(libCOMI_gt_CM_ZeratulStasisBeam, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_ZeratulStasisBeam, null, AbilityCommand("ZeratulMapWideStasis", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_ProphecyMiss
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_ProphecyMiss_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetFacing(libCOMI_gf_CM_ZeratulProphecyEventGetUnit(libCOMI_ge_CM_ZeratulProphecyEventUnits_ZeratulUnit), 90.0, 0.0);
    if ((libCOMI_gf_CM_ZeratulProphecyEventGetArtifactNumber() < 4) && (UnitIsValid(libCOMI_gv_cM_ZeratulProphecyArtifact) == false)) {
        libCOMI_gf_CM_Zeratul_PlaceArtifact(libCOMI_gf_CM_ZeratulProphecyEventGetPlayer());
    }

    libCOMI_gf_CM_Zeratul_GiveProphecyHint(libCOMI_gf_CM_Zeratul_ProphecyHintLevel(libCOMI_gf_CM_ZeratulProphecyEventGetArtifactNumber()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_ProphecyMiss_Init () {
    libCOMI_gt_CM_Zeratul_ProphecyMiss = TriggerCreate("libCOMI_gt_CM_Zeratul_ProphecyMiss_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_ProphecyMiss, false);
    libCOMI_gf_CM_ZeratulProphecyEvent(libCOMI_gt_CM_Zeratul_ProphecyMiss, "ZeratulEvent_ArtifactMissed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_ProphecyCastStop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_ProphecyCastStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cM_ZeratulProphecyHintUnit != null)) {
        libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_ZeratulProphecyHintUnit, "Signal Clear");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_ProphecyCastStop_Init () {
    libCOMI_gt_CM_Zeratul_ProphecyCastStop = TriggerCreate("libCOMI_gt_CM_Zeratul_ProphecyCastStop_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_ProphecyCastStop, false);
    libCOMI_gf_CM_ZeratulProphecyEvent(libCOMI_gt_CM_Zeratul_ProphecyCastStop, "ZeratulEvent_ProphecyCastStop");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_ProphecyIntro Q
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_ProphecyIntroQ_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libCOMI_gf_CM_SendTransmissionCampaignInternal(true, libCOMI_gv_cM_HeroUnit[libCOMI_gv_cM_ZeratulPlayer], null, SoundLink("PlaceholderSoundFile", -1), StringExternal("Param/Value/lib_COMI_AC99805E"), StringExternal("Param/Value/lib_COMI_72381F4F"), c_transmissionDurationAdd, 10.0, true, libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior, "");
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_ProphecyIntroQ_Init () {
    libCOMI_gt_CM_Zeratul_ProphecyIntroQ = TriggerCreate("libCOMI_gt_CM_Zeratul_ProphecyIntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_ProphecyArtifactPickedUp
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_ProphecyArtifactPickedUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_artfactNumber;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_artfactNumber = libCOMI_gf_CM_ZeratulProphecyEventGetArtifactNumber();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lv_artfactNumber < 3) || ((lv_artfactNumber < 2) && (libCOOC_gf_CC_CommanderLevel(libCOMI_gf_CM_ZeratulProphecyEventGetPlayer(), "ProtossZeratul") < 2)))) {
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(libCOMI_gf_CM_ZeratulProphecyEventGetPlayer(), "ProphecyArtifactsDiscovered", 1);
    }
    libCOMI_gv_cM_ZeratulProphecyArtifactNumber += 1;
    libCOMI_gf_CM_Zeratul_SetProphecyCooldown();
    if ((libCOMI_gv_cM_ZeratulProphecyHintUnit != null)) {
        UnitRemove(libCOMI_gv_cM_ZeratulProphecyHintUnit);
        libCOMI_gv_cM_ZeratulProphecyHintUnit = null;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_ProphecyArtifactPickedUp_Init () {
    libCOMI_gt_CM_Zeratul_ProphecyArtifactPickedUp = TriggerCreate("libCOMI_gt_CM_Zeratul_ProphecyArtifactPickedUp_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_ProphecyArtifactPickedUp, false);
    libCOMI_gf_CM_ZeratulProphecyEvent(libCOMI_gt_CM_Zeratul_ProphecyArtifactPickedUp, "ZeratulEvent_ArtifactPickedUp");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_ProphecyArtifactRevealed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_ProphecyArtifactRevealed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_resourceSpawnCount;
    revealer lv_artifactRevealer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CreateRevealerCoop(libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ProtossZeratul", libCOOC_gf_CommanderPlayers()), RegionCircle(UnitGetPosition(libCOMI_gf_CM_ZeratulProphecyEventGetUnit(libCOMI_ge_CM_ZeratulProphecyEventUnits_ArtifactUnit)), 3.0));
    lv_artifactRevealer = VisRevealerLastCreated();
    Wait(5.0, c_timeGame);
    libCOMI_gf_DestroyRevealerCoop(lv_artifactRevealer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_ProphecyArtifactRevealed_Init () {
    libCOMI_gt_CM_Zeratul_ProphecyArtifactRevealed = TriggerCreate("libCOMI_gt_CM_Zeratul_ProphecyArtifactRevealed_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_ProphecyArtifactRevealed, false);
    libCOMI_gf_CM_ZeratulProphecyEvent(libCOMI_gt_CM_Zeratul_ProphecyArtifactRevealed, "ZeratulEvent_ArtifactFound");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_ProphecyArtifactDebug
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_ProphecyArtifactDebug_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((EventPlayer() == libCOMI_gv_cM_ZeratulPlayer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gv_cM_ZeratulProphecyArtifactDebug = true;
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_11D07000"), true);
    lv_point = libCOMI_gf_CM_Zeratul_FindArtifactPlacementPointDebug(1, Color(100.00, 100.00, 100.00), Color(62.35, 0.00, 95.69));
    lv_point = libCOMI_gf_CM_Zeratul_FindArtifactPlacementPointDebug(2, Color(7.06, 75.29, 98.04), Color(0.00, 0.00, 100.00));
    lv_point = libCOMI_gf_CM_Zeratul_FindArtifactPlacementPointDebug(3, Color(100.00, 100.00, 0.00), Color(95.69, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_ProphecyArtifactDebug_Init () {
    libCOMI_gt_CM_Zeratul_ProphecyArtifactDebug = TriggerCreate("libCOMI_gt_CM_Zeratul_ProphecyArtifactDebug_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_Zeratul_ProphecyArtifactDebug, c_playerAny, "zeratuldebug", true);
    TriggerAddEventChatMessage(libCOMI_gt_CM_Zeratul_ProphecyArtifactDebug, c_playerAny, "zbug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulTopBarWarpTrainStart
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_ZeratulTopBarWarpTrainStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_builder;
    string lv_topbarBuilderType;
    unit lv_summoned;
    order lv_order;
    unitgroup lv_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_builder = EventUnit();
    lv_topbarBuilderType = "CoopCasterZeratul";
    lv_summoned = EventUnitProgressUnit();
    lv_group = libCOMI_gv_cM_ZeratulTopBarRallyUnits[EventPlayer()];

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_builder) == lv_topbarBuilderType))) {
            return false;
        }

        if (!(((libNtve_gf_TriggeringProgressUnitType() == "ZeratulSummonKarass") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulSummonZealot") || (libNtve_gf_TriggeringProgressUnitType() == "Mohandar") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulSummonVoidRay") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulHeroDarkArchon") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulDarkArchon")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_summoned, "ZeratulTopBarWarpingIn", lv_builder, 1);
    if ((UnitGroupCount(lv_group, c_unitCountAlive) == 0)) {
        lv_order = OrderTargetingPoint(AbilityCommand("RallyZeratulTopBar", 0), Point(0.0, 0.0));
        UnitGroupAdd(lv_group, lv_summoned);
        UISetTargetingOrder(PlayerGroupSingle(EventPlayer()), lv_group, Order(AbilityCommand("RallyZeratulTopBar", 0)), false);
    }
    else {
        UnitIssueOrder(lv_summoned, Order(AbilityCommand("WarpableZeratul", 0)), c_orderQueueAddToFront);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_ZeratulTopBarWarpTrainStart_Init () {
    libCOMI_gt_CM_ZeratulTopBarWarpTrainStart = TriggerCreate("libCOMI_gt_CM_ZeratulTopBarWarpTrainStart_Func");
    TriggerEnable(libCOMI_gt_CM_ZeratulTopBarWarpTrainStart, false);
    TriggerAddEventUnitConstructProgress(libCOMI_gt_CM_ZeratulTopBarWarpTrainStart, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulTopBarWarpTrainFinish
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_ZeratulTopBarWarpTrainFinish_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_builder;
    string lv_topbarBuilderType;
    unit lv_summoned;
    string lv_summonedType;
    point lv_point;
    unitgroup lv_ug;
    point lv_rally;
    unit lv_itUnit;
    string lv_instance;
    string lv_minionUnitType;
    int lv_minionUnitAmount;
    string lv_minionUnitUpgrade;
    int lv_p;

    // Automatic Variable Declarations
    string auto45217894_userType;
    int auto45217894_i;
    unitgroup auto953667D9_g;
    int auto953667D9_u;

    // Variable Initialization
    lv_builder = EventUnit();
    lv_topbarBuilderType = "CoopCasterZeratul";
    lv_summoned = EventUnitProgressUnit();
    lv_summonedType = libNtve_gf_TriggeringProgressUnitType();
    lv_point = UnitGetPosition(lv_summoned);
    lv_ug = UnitGroupEmpty();
    lv_rally = UnitRallyPointTargetPoint(lv_summoned, 1, 1);
    lv_p = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_builder) == lv_topbarBuilderType))) {
            return false;
        }

        if (!(((libNtve_gf_TriggeringProgressUnitType() == "ZeratulSummonKarass") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulSummonZealot") || (libNtve_gf_TriggeringProgressUnitType() == "Mohandar") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulSummonVoidRay") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulHeroDarkArchon") || (libNtve_gf_TriggeringProgressUnitType() == "ZeratulDarkArchon")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_summoned, "ZeratulTopBarWarpingIn", 1);
    lv_rally = libCOMI_gv_cM_ZeratulTopBarRallyPoint[lv_p];
    lv_point = libNtve_gf_PointOffsetTowardsPoint(lv_point, -2.0, lv_rally);
    auto45217894_userType = "CoopAbilityZeratulTopBarCallDown";
    auto45217894_i = 1;
    for ( ; auto45217894_i <= UserDataInstanceCount(auto45217894_userType) ; auto45217894_i += 1 ) {
        lv_instance = UserDataInstance(auto45217894_userType, auto45217894_i);
        if ((UserDataGetGameLink("CoopAbilityZeratulTopBarCallDown", lv_instance, "MainUnitType", 1) == lv_summonedType)) {
            lv_minionUnitType = UserDataGetGameLink("CoopAbilityZeratulTopBarCallDown", lv_instance, "UnitToCall", 1);
            lv_minionUnitUpgrade = UserDataGetGameLink("CoopAbilityZeratulTopBarCallDown", lv_instance, "Upgrade", 1);
            lv_minionUnitAmount = UserDataGetInt("CoopAbilityZeratulTopBarCallDown", lv_instance, "Amount", TechTreeUpgradeCount(lv_p, lv_minionUnitUpgrade, c_techCountCompleteOnly));
            libNtve_gf_UnitCreateFacingPoint(lv_minionUnitAmount, lv_minionUnitType, 0, lv_p, lv_point, lv_rally);
            UnitGroupAddUnitGroup(lv_ug, UnitLastCreatedGroup());
        }

    }
    UnitGroupAdd(lv_ug, lv_summoned);
    auto953667D9_g = lv_ug;
    auto953667D9_u = UnitGroupCount(auto953667D9_g, c_unitCountAll);
    for (;; auto953667D9_u -= 1) {
        lv_itUnit = UnitGroupUnitFromEnd(auto953667D9_g, auto953667D9_u);
        if (lv_itUnit == null) { break; }
        libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2(lv_itUnit);
        UnitAbilityEnable(lv_itUnit, "move", true);
        UnitBehaviorAdd(lv_itUnit, "ZeratulTopBarTimedLife", lv_itUnit, 1);
        UnitSetPropertyFixed(lv_itUnit, c_unitPropEnergyPercent, 100.0);
        libNtve_gf_MakeUnitFacePoint(lv_itUnit, lv_rally, 0.0);
    }
    UnitGroupIssueOrder(lv_ug, OrderTargetingPoint(AbilityCommand("attack", 0), lv_rally), c_orderQueueReplace);
    UnitGroupAddUnitGroup(libCOMI_gv_cM_ZeratulTopBarRallyRedirectUnits[lv_p], lv_ug);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_ZeratulTopBarWarpTrainFinish_Init () {
    libCOMI_gt_CM_ZeratulTopBarWarpTrainFinish = TriggerCreate("libCOMI_gt_CM_ZeratulTopBarWarpTrainFinish_Func");
    TriggerEnable(libCOMI_gt_CM_ZeratulTopBarWarpTrainFinish, false);
    TriggerAddEventUnitConstructProgress(libCOMI_gt_CM_ZeratulTopBarWarpTrainFinish, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulTopBarRallySet
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_ZeratulTopBarRallySet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_summoned;
    unitgroup lv_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_summoned = EventUnit();
    lv_group = libCOMI_gv_cM_ZeratulTopBarRallyUnits[EventPlayer()];

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_summoned, "ZeratulTopBarWarpingIn", 1);
    UnitGroupClear(lv_group);
    libCOMI_gv_cM_ZeratulTopBarRallyPoint[EventPlayer()] = OrderGetTargetPosition(EventUnitOrder());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_ZeratulTopBarRallySet_Init () {
    libCOMI_gt_CM_ZeratulTopBarRallySet = TriggerCreate("libCOMI_gt_CM_ZeratulTopBarRallySet_Func");
    TriggerEnable(libCOMI_gt_CM_ZeratulTopBarRallySet, false);
    TriggerAddEventUnitOrder(libCOMI_gt_CM_ZeratulTopBarRallySet, null, AbilityCommand("RallyZeratulTopBar", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulTopBarRallyRedirect
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_ZeratulTopBarRallyRedirect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_group;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = libCOMI_gv_cM_ZeratulTopBarRallyRedirectUnits[EventPlayer()];
    lv_point = OrderGetTargetPosition(EventUnitOrder());

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_ZeratulTopBarRallyPoint[EventPlayer()] = lv_point;
    UnitGroupIssueOrder(lv_group, OrderTargetingPoint(AbilityCommand("attack", 0), lv_point), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_ZeratulTopBarRallyRedirect_Init () {
    libCOMI_gt_CM_ZeratulTopBarRallyRedirect = TriggerCreate("libCOMI_gt_CM_ZeratulTopBarRallyRedirect_Func");
    TriggerEnable(libCOMI_gt_CM_ZeratulTopBarRallyRedirect, false);
    TriggerAddEventUnitOrder(libCOMI_gt_CM_ZeratulTopBarRallyRedirect, null, AbilityCommand("RallyZeratulTopBarRedirect", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulTopBarRallyCancel
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_ZeratulTopBarRallyCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(libCOMI_gv_cM_ZeratulTopBarRallyUnits[EventPlayer()], Order(AbilityCommand("WarpableZeratul", 0)), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_ZeratulTopBarRallyCancel_Init () {
    libCOMI_gt_CM_ZeratulTopBarRallyCancel = TriggerCreate("libCOMI_gt_CM_ZeratulTopBarRallyCancel_Func");
    TriggerEnable(libCOMI_gt_CM_ZeratulTopBarRallyCancel, false);
    TriggerAddEventTargetModeUpdate(libCOMI_gt_CM_ZeratulTopBarRallyCancel, c_playerAny, AbilityCommand("RallyZeratulTopBar", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_Trade
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_Trade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libCOUI_gv_cU_GPUnit[lv_p], "ZeratulTradeTarget", libCOUI_gv_cU_GPUnit[lv_p]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_Trade_Init () {
    libCOMI_gt_CM_Zeratul_Trade = TriggerCreate("libCOMI_gt_CM_Zeratul_Trade_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_Trade, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Zeratul_Trade, c_playerAny, "ZeratulTrade");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_Trade_FullEnergyOn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_Trade_FullEnergyOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeBehaviorAllow(lv_p, "CannotTrade", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_Trade_FullEnergyOn_Init () {
    libCOMI_gt_CM_Zeratul_Trade_FullEnergyOn = TriggerCreate("libCOMI_gt_CM_Zeratul_Trade_FullEnergyOn_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_Trade_FullEnergyOn, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Zeratul_Trade_FullEnergyOn, null, "ZeratulTopBarFullEnergy", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_Trade_FullEnergyOff
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_Trade_FullEnergyOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeBehaviorAllow(lv_p, "CannotTrade", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_Trade_FullEnergyOff_Init () {
    libCOMI_gt_CM_Zeratul_Trade_FullEnergyOff = TriggerCreate("libCOMI_gt_CM_Zeratul_Trade_FullEnergyOff_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_Trade_FullEnergyOff, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Zeratul_Trade_FullEnergyOff, null, "ZeratulTopBarFullEnergy", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_AutomatedAssimilatorAutoBuild
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_nexus;
    unit lv_itGeyser;

    // Automatic Variable Declarations
    unitgroup autoCCD34BBA_g;
    int autoCCD34BBA_u;

    // Variable Initialization
    lv_p = EventPlayer();
    lv_nexus = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(lv_p) == "Zeratul"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCCD34BBA_g = UnitGroupSearch(null, 0, UnitGetPosition(lv_nexus), 10.0, UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCCD34BBA_u = UnitGroupCount(autoCCD34BBA_g, c_unitCountAll);
    for (;; autoCCD34BBA_u -= 1) {
        lv_itGeyser = UnitGroupUnitFromEnd(autoCCD34BBA_g, autoCCD34BBA_u);
        if (lv_itGeyser == null) { break; }
        if ((UnitHasBehavior2(lv_itGeyser, "GeyserBlockedByRocks") == false)) {
            UnitIssueOrder(lv_nexus, OrderTargetingUnit(AbilityCommand("NexusBuild", 0), lv_itGeyser), c_orderQueueAddToEnd);
            Wait(0.125, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild_Init () {
    libCOMI_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild = TriggerCreate("libCOMI_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild, c_playerAny, "NexusCreateSet");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild, c_playerAny, "NexusBirthSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_ReflectionShield
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_ReflectionShield_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_missile;
    string lv_effect;
    unit lv_missileCaster;
    unit lv_reflectTarget;
    unit lv_sentry;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();
    lv_missile = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_effect = UnitGetOriginalEffect(lv_missile);
    lv_missileCaster = UnitGetOriginalCaster(lv_missile);
    lv_reflectTarget = lv_missileCaster;
    lv_sentry = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_sentry) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(lv_missile, lv_p, true);
    if ((libNtve_gf_UnitCanCreateEffectOnUnit(lv_missile, lv_effect, lv_reflectTarget) == true)) {
        UnitCreateEffectUnit(lv_missile, lv_effect, lv_reflectTarget);
    }

    UnitRemove(lv_missile);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_ReflectionShield_Init () {
    libCOMI_gt_CM_Zeratul_ReflectionShield = TriggerCreate("libCOMI_gt_CM_Zeratul_ReflectionShield_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_ReflectionShield, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Zeratul_ReflectionShield, c_playerAny, "ZeratulReflectionShieldMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_DarkTemplarRetreat
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_DarkTemplarRetreat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_darkTemplar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();
    lv_darkTemplar = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(lv_darkTemplar, "ZeratulDarkTemplarRetreatBlinkTrigger", libNtve_gf_PointOffsetTowardsPoint(EventPlayerEffectUsedPoint(c_effectLocationSourcePoint), -8.0, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)));
    UnitBehaviorAdd(lv_darkTemplar, "ZeratulDarkTemplarRetreatCooldown", lv_darkTemplar, 1);
    UnitBehaviorAdd(lv_darkTemplar, "ZeratulDarkTemplarRetreatRegen", lv_darkTemplar, 1);
    UnitBehaviorAddCooldown(lv_darkTemplar, "ZeratulDarkTemplarRetreatCooldownDisplay", "Behavior/ZeratulDarkTemplarRetreatCooldownDisplay", UnitBehaviorDurationTotal(lv_darkTemplar, "ZeratulDarkTemplarRetreatCooldown"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_DarkTemplarRetreat_Init () {
    libCOMI_gt_CM_Zeratul_DarkTemplarRetreat = TriggerCreate("libCOMI_gt_CM_Zeratul_DarkTemplarRetreat_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_DarkTemplarRetreat, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Zeratul_DarkTemplarRetreat, c_playerAny, "ZeratulDarkTemplarRetreatSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_WarpPrismAutoUnload
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_WarpPrismAutoUnload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unitgroup lv_offGroup;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_offGroup = UnitGroupEmpty();
    lv_p = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_offGroup = UnitGroup(null, lv_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    libCOMI_gv_cM_Zeratul_VoidRift[lv_p] = lv_unit;
    UnitGroupRemove(lv_offGroup, lv_unit);
    UnitGroupIssueOrder(lv_offGroup, Order(AbilityCommand("ZeratulWarpPrismAutoUnload", 1)), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_WarpPrismAutoUnload_Init () {
    libCOMI_gt_CM_Zeratul_WarpPrismAutoUnload = TriggerCreate("libCOMI_gt_CM_Zeratul_WarpPrismAutoUnload_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_WarpPrismAutoUnload, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Zeratul_WarpPrismAutoUnload, null, "ZeratulWarpPrismAutoUnload", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_WarpPrismAutoUnloadOff
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_WarpPrismAutoUnloadOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    order lv_order;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_order = EventUnitOrder();
    lv_p = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((OrderGetFlag(lv_order, c_cmdUser) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_Zeratul_VoidRift[lv_p] = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_WarpPrismAutoUnloadOff_Init () {
    libCOMI_gt_CM_Zeratul_WarpPrismAutoUnloadOff = TriggerCreate("libCOMI_gt_CM_Zeratul_WarpPrismAutoUnloadOff_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_WarpPrismAutoUnloadOff, false);
    TriggerAddEventUnitOrder(libCOMI_gt_CM_Zeratul_WarpPrismAutoUnloadOff, null, AbilityCommand("ZeratulWarpPrismAutoUnload", 1));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_WarpPrismSelectRift
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_WarpPrismSelectRift_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_p = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitClearSelection(lv_p);
    UnitSelect(libCOMI_gv_cM_Zeratul_VoidRift[lv_p], lv_p, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_WarpPrismSelectRift_Init () {
    libCOMI_gt_CM_Zeratul_WarpPrismSelectRift = TriggerCreate("libCOMI_gt_CM_Zeratul_WarpPrismSelectRift_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_WarpPrismSelectRift, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Zeratul_WarpPrismSelectRift, null, AbilityCommand("ZeratulWarpPrismSelectVoidRift", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_WarpPrismMorphUnloadState
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_WarpPrismMorphUnloadState_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_u = EventUnit();

    // Conditions
    if (testConds) {
        if (!((lv_u == libCOMI_gv_cM_Zeratul_VoidRift[UnitGetOwner(lv_u)]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_u, Order(AbilityCommand("ZeratulWarpPrismAutoUnload", 0)), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_WarpPrismMorphUnloadState_Init () {
    libCOMI_gt_CM_Zeratul_WarpPrismMorphUnloadState = TriggerCreate("libCOMI_gt_CM_Zeratul_WarpPrismMorphUnloadState_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_WarpPrismMorphUnloadState, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Zeratul_WarpPrismMorphUnloadState, null, AbilityCommand("ZeratulPhasingMode", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_Projection_UnitLink
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_Projection_UnitLink_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_projection;
    unit lv_source;
    fixed lv_shields;
    fixed lv_cooldown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_projection = EventUnitCreatedUnit();
    lv_source = EventUnit();
    lv_shields = UnitGetPropertyFixed(lv_source, c_unitPropShields, c_unitPropCurrent);
    lv_cooldown = UnitAbilityGetCooldown(lv_source, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier");

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_projection, "ZeratulPhaseProjectionChanneling", lv_source, 1);
    UnitBehaviorAdd(lv_projection, "ZeratulPhotonCannonProjection", lv_source, 1);
    UnitBehaviorAdd(lv_source, "ZeratulPhotonCannonProjectionCaster", lv_projection, 1);
    UnitSetPropertyFixed(lv_projection, c_unitPropShields, lv_shields);
    UnitSetPropertyFixed(lv_source, c_unitPropShields, 0.0);
    libNtve_gf_UnitAbilityRemoveCooldown(lv_source, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier");
    UnitAbilityAddCooldown(lv_projection, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier", lv_cooldown);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_Projection_UnitLink_Init () {
    libCOMI_gt_CM_Zeratul_Projection_UnitLink = TriggerCreate("libCOMI_gt_CM_Zeratul_Projection_UnitLink_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_Projection_UnitLink, false);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Zeratul_Projection_UnitLink, null, "PhaseCannonProjection", null);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_Zeratul_Projection_UnitLink, null, "ZeratulKhaydarinMonolithProjection", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_Projection_TimedLifeFate
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_Projection_TimedLifeFate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_projection;
    unit lv_source;
    fixed lv_shields;
    fixed lv_cooldown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_projection = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_source = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_shields = UnitGetPropertyFixed(lv_projection, c_unitPropShields, c_unitPropCurrent);
    lv_cooldown = UnitAbilityGetCooldown(lv_projection, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier");

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_source, "ZeratulPhotonCannonProjectionCaster", 1);
    UnitSetPropertyFixed(lv_source, c_unitPropShields, lv_shields);
    UnitCreateEffectUnit(lv_projection, "TimedLifeFate", lv_projection);
    libNtve_gf_UnitAbilityRemoveCooldown(lv_source, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier");
    UnitAbilityAddCooldown(lv_source, "ZeratulStructureBarrier", "Abil/ZeratulStructureBarrier", lv_cooldown);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_Projection_TimedLifeFate_Init () {
    libCOMI_gt_CM_Zeratul_Projection_TimedLifeFate = TriggerCreate("libCOMI_gt_CM_Zeratul_Projection_TimedLifeFate_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_Projection_TimedLifeFate, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_Zeratul_Projection_TimedLifeFate, c_playerAny, "ZeratulPhotonCannonProjectionTimedLifeFateDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_Projection_Cancel
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_Projection_Cancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_projection;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "ZeratulPhotonCannonProjectionCaster") == true)) {
        lv_projection = UnitBehaviorEffectUnit(EventUnit(), "ZeratulPhotonCannonProjectionCaster", c_effectUnitCaster, 0);
    }
    else {
        lv_projection = EventUnit();
    }
    UnitBehaviorRemove(lv_projection, "ZeratulPhotonCannonProjection", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_Projection_Cancel_Init () {
    libCOMI_gt_CM_Zeratul_Projection_Cancel = TriggerCreate("libCOMI_gt_CM_Zeratul_Projection_Cancel_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_Projection_Cancel, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_Zeratul_Projection_Cancel, null, AbilityCommand("ZeratulPhaseCannonProjectionCancel", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_DevolveKills
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_DevolveKills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_killingplayer = UnitGetOwner(libNtve_gf_KillingUnit());

    // Conditions
    if (testConds) {
        if (!((libCOOC_gv_cC_InContestMap == false))) {
            return false;
        }

        if (!((UnitIsAlive(libNtve_gf_KillingUnit()) == true))) {
            return false;
        }

        if (!((PlayerCommander(lv_killingplayer) == "Zeratul"))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libCOMI_gv_cM_Zeratul_DevolvedUnits, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementTermQuantityAdd(lv_killingplayer, "CommanderZeratulDevolveKills", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_DevolveKills_Init () {
    libCOMI_gt_CM_Zeratul_DevolveKills = TriggerCreate("libCOMI_gt_CM_Zeratul_DevolveKills_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_DevolveKills, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_Zeratul_DevolveKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_ArtifactRush
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_ArtifactRush_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOOC_gv_cC_InContestMap == false))) {
            return false;
        }

        if (!((PlayerCommander(EventPlayer()) == "Zeratul"))) {
            return false;
        }

        if (!((EventUpgradeName() == "ZeratulArtifactTier3"))) {
            return false;
        }

        if (!(((PlayerDifficulty(EventPlayer()) >= 3) == true))) {
            return false;
        }

        if (!((GameGetMissionTime() < 721.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AchievementAward(EventPlayer(), "CommanderZeratulArtifactRush");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_ArtifactRush_Init () {
    libCOMI_gt_CM_Zeratul_ArtifactRush = TriggerCreate("libCOMI_gt_CM_Zeratul_ArtifactRush_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_ArtifactRush, false);
    TriggerAddEventUpgradeLevelChanged(libCOMI_gt_CM_Zeratul_ArtifactRush, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_TriggersInit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_TriggersInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    playergroup auto1CB18E9A_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto1CB18E9A_g = libCOOC_gf_CommanderPlayers();
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(auto1CB18E9A_g, lv_p);
        if (lv_p < 0) { break; }
        if ((PlayerCommander(lv_p) == "Zeratul")) {
            libCOMI_gv_cM_ZeratulPlayer = lv_p;
            libCOMI_gf_CM_Zeratul_PlaceArtifact(libCOMI_gv_cM_ZeratulPlayer);
            TechTreeBehaviorAllow(lv_p, "CannotTrade", false);
            TechTreeAbilityAllow(lv_p, AbilityCommand("RoboticsBayResearch", 1), false);
        }

    }
    TriggerEnable(libCOMI_gt_CM_ZeratulProphecyEventArtifactMissed, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulProphecyEventArtifactPickedUp, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulProphecyEventArtifactRevealed, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulProphecyEventArtifactUsed, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulProphecyEventProphecyCast, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulProphecyEventVision, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_ProphecyMiss, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_ProphecyCastStop, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_ProphecyArtifactPickedUp, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_ProphecyArtifactRevealed, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulArtifactTriggerUpgrades, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulTopBarWarpTrainStart, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulTopBarWarpTrainFinish, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulTopBarRallySet, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulTopBarRallyRedirect, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulTopBarRallyCancel, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_Trade, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_Trade_FullEnergyOn, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_Trade_FullEnergyOff, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_ReflectionShield, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_DarkTemplarRetreat, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_WarpPrismAutoUnload, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_WarpPrismAutoUnloadOff, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_WarpPrismSelectRift, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_WarpPrismMorphUnloadState, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_Projection_UnitLink, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_Projection_TimedLifeFate, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_Projection_Cancel, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_PurificationNova_Finale, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_PurificationNova_Create, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_PurificationNova_MainImpact, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_Entropic_Spawner, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulArtifactUpgrades, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_TransportDropOff, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_StasisDuration, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulStasisBeamIssueOrder, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulStasisBeam, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_Devolve, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_DevolveKills, true);
    TriggerEnable(libCOMI_gt_CM_Zeratul_ArtifactRush, true);
    TriggerEnable(libCOMI_gt_CM_ZeratulAvatarMinimapIcon, true);
    Wait(0.0625, c_timeGame);
    VisFillArea(libCOMI_gv_cM_ZeratulPlayer, RegionEntireMap(), c_fillTypeMasked, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_TriggersInit_Init () {
    libCOMI_gt_CM_Zeratul_TriggersInit = TriggerCreate("libCOMI_gt_CM_Zeratul_TriggersInit_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_TriggersInit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulArtifactUpgrades
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_ZeratulArtifactUpgrades_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUpgradeName() == "ZeratulArtifactTier1") || (EventUpgradeName() == "ZeratulArtifactTier2") || (EventUpgradeName() == "ZeratulArtifactTier3")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulTopBarZealotSquad", 1);
    TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulTopBarVoidRaySquad", 1);
    if ((EventUpgradeName() == "ZeratulArtifactTier1")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulShieldsLevel1", 1);
        if ((libCOOC_gf_CC_CommanderLevel(EventPlayer(), "ProtossZeratul") >= 15)) {
            TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulArtifactTier1ZeratulTalentUpgrade", 1);
        }

    }
    else if ((EventUpgradeName() == "ZeratulArtifactTier2")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulArmorsLevel2", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulShieldsLevel2", 1);
        if ((libCOOC_gf_CC_CommanderLevel(EventPlayer(), "ProtossZeratul") >= 15)) {
            TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulArtifactTier2ZeratulTalentUpgrade", 1);
        }

    }
    else if ((EventUpgradeName() == "ZeratulArtifactTier3")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulArmorsLevel3", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulShieldsLevel3", 1);
        if ((libCOOC_gf_CC_CommanderLevel(EventPlayer(), "ProtossZeratul") >= 15)) {
            TechTreeUpgradeAddLevel(EventPlayer(), "ZeratulArtifactTier3ZeratulTalentUpgrade", 1);
        }

        if ((libCOOC_gf_CC_CommanderLevel(EventPlayer(), "ProtossZeratul") >= 8)) {
            TechTreeUpgradeAddLevel(EventPlayer(), "VoidRayPrismaticRange", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_ZeratulArtifactUpgrades_Init () {
    libCOMI_gt_CM_ZeratulArtifactUpgrades = TriggerCreate("libCOMI_gt_CM_ZeratulArtifactUpgrades_Func");
    TriggerEnable(libCOMI_gt_CM_ZeratulArtifactUpgrades, false);
    TriggerAddEventUpgradeLevelChanged(libCOMI_gt_CM_ZeratulArtifactUpgrades, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulArtifactTriggerUpgrades
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_ZeratulArtifactTriggerUpgrades_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_itInstance;
    int lv_p;
    string lv_behavior;
    string lv_itBehavior;
    string lv_itUpgrade;
    int lv_stack;

    // Automatic Variable Declarations
    string auto9B9C7A8F_userType;
    int auto9B9C7A8F_i;

    // Variable Initialization
    lv_p = EventPlayer();
    lv_behavior = EventUnitBehavior();
    lv_stack = UnitBehaviorCount(EventUnit(), lv_behavior);

    // Conditions
    if (testConds) {
        if (!((PlayerCommander(lv_p) == "Zeratul"))) {
            return false;
        }

        if (!(((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate) || (EventUnitBehaviorChange() == c_unitBehaviorChangeDeactivate)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9B9C7A8F_userType = "CoopTechBehaviorZeratul";
    auto9B9C7A8F_i = 1;
    for ( ; auto9B9C7A8F_i <= UserDataInstanceCount(auto9B9C7A8F_userType) ; auto9B9C7A8F_i += 1 ) {
        lv_itInstance = UserDataInstance(auto9B9C7A8F_userType, auto9B9C7A8F_i);
        lv_itBehavior = UserDataGetGameLink("CoopTechBehaviorZeratul", lv_itInstance, "Behavior", 1);
        lv_itUpgrade = UserDataGetGameLink("CoopTechBehaviorZeratul", lv_itInstance, "Upgrade", 1);
        if ((lv_itBehavior == lv_behavior)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_p, lv_itUpgrade, lv_stack);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_ZeratulArtifactTriggerUpgrades_Init () {
    libCOMI_gt_CM_ZeratulArtifactTriggerUpgrades = TriggerCreate("libCOMI_gt_CM_ZeratulArtifactTriggerUpgrades_Func");
    TriggerEnable(libCOMI_gt_CM_ZeratulArtifactTriggerUpgrades, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_ZeratulArtifactTriggerUpgrades, null, "HaveZeratulArtifactTier1AndCyberCore", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_ZeratulArtifactTriggerUpgrades, null, "HaveZeratulArtifactTier1AndDarkShine", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_ZeratulArtifactTriggerUpgrades, null, "HaveZeratulArtifactTier1AndRoboticsBay", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_ZeratulArtifactTriggerUpgrades, null, "HaveZeratulArtifactTier2AndCyberCore", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_ZeratulArtifactTriggerUpgrades, null, "HaveZeratulArtifactTier2AndDarkShine", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_ZeratulArtifactTriggerUpgrades, null, "HaveZeratulArtifactTier2AndRoboticsBay", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_ZeratulArtifactTriggerUpgrades, null, "HaveZeratulArtifactTier3AndCyberCore", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_ZeratulArtifactTriggerUpgrades, null, "HaveZeratulArtifactTier3AndDarkShine", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_ZeratulArtifactTriggerUpgrades, null, "HaveZeratulArtifactTier3AndRoboticsBay", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Zeratul_StasisDuration
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_Zeratul_StasisDuration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDuration(EventUnit(), EventUnitBehavior(), RandomInt(1, 10));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_Zeratul_StasisDuration_Init () {
    libCOMI_gt_CM_Zeratul_StasisDuration = TriggerCreate("libCOMI_gt_CM_Zeratul_StasisDuration_Func");
    TriggerEnable(libCOMI_gt_CM_Zeratul_StasisDuration, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_Zeratul_StasisDuration, null, "ZeratulStasisField", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ZeratulAvatarMinimapIcon
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_ZeratulAvatarMinimapIcon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawnedAvatar;
    string lv_spawnedAvatarType;
    int lv_avatarPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawnedAvatar = EventUnitProgressUnit();
    lv_spawnedAvatarType = UnitGetType(lv_spawnedAvatar);
    lv_avatarPing = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!(((lv_spawnedAvatarType == "ZeratulXelNagaConstruct") || (lv_spawnedAvatarType == "ZeratulXelNagaConstructCyan")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_spawnedAvatarType == "ZeratulXelNagaConstruct")) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAvatarEssence", UnitGetPosition(lv_spawnedAvatar), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
    }
    else {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAvatarForm", UnitGetPosition(lv_spawnedAvatar), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
    }
    PingSetUnit(PingLastCreated(), lv_spawnedAvatar);
    PingSetScale(PingLastCreated(), 0.6);
    PingSetTooltip(PingLastCreated(), UnitTypeGetName(lv_spawnedAvatarType));
    lv_avatarPing = PingLastCreated();
    while ((UnitIsAlive(lv_spawnedAvatar) == true)) {
        PingSetRotation(lv_avatarPing, UnitGetFacing(lv_spawnedAvatar));
        Wait(0.125, c_timeGame);
    }
    PingDestroy(lv_avatarPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_ZeratulAvatarMinimapIcon_Init () {
    libCOMI_gt_CM_ZeratulAvatarMinimapIcon = TriggerCreate("libCOMI_gt_CM_ZeratulAvatarMinimapIcon_Func");
    TriggerEnable(libCOMI_gt_CM_ZeratulAvatarMinimapIcon, false);
    TriggerAddEventUnitConstructProgress(libCOMI_gt_CM_ZeratulAvatarMinimapIcon, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ResourcePickupAllyNew
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ResourcePickupAllyNew_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minerals;
    int lv_gas;
    int lv_itAllyPlayer;
    int lv_itPickupPlayer;

    // Automatic Variable Declarations
    playergroup auto8B695647_g;

    // Variable Initialization
    lv_minerals = CatalogFieldValueGetAsInt(c_gameCatalogEffect, EventPlayerEffectUsed(), "Resources[Minerals]", c_playerAny);
    lv_gas = CatalogFieldValueGetAsInt(c_gameCatalogEffect, EventPlayerEffectUsed(), "Resources[Vespene]", c_playerAny);
    lv_itPickupPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    auto8B695647_g = libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_itPickupPlayer);
    lv_itAllyPlayer = -1;
    while (true) {
        lv_itAllyPlayer = PlayerGroupNextPlayer(auto8B695647_g, lv_itAllyPlayer);
        if (lv_itAllyPlayer < 0) { break; }
        if ((lv_itPickupPlayer != lv_itAllyPlayer)) {
            libCOMI_gf_ResourcePickupAlly(lv_itAllyPlayer, lv_minerals, lv_gas);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ResourcePickupAllyNew_Init () {
    libCOMI_gt_ResourcePickupAllyNew = TriggerCreate("libCOMI_gt_ResourcePickupAllyNew_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupMinerals50");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupEnvelopeMinerals50");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupMinerals100");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupMinerals250");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupPalletMinerals");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupGas50");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupEnvelopeGas50");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupGas100");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupGas200");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupPalletGas");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "MutatorPickupGas50");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoAShiftCheatFailSafeThermal
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoAShiftCheatFailSafeThermal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    abilcmd lv_cmd;
    string lv_abil;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = libCOMI_gf_CM_PlayerGetGlobalCaster(EventPlayer());
    lv_cmd = AbilityCommand("SOAThermalLanceActivate", 0);
    lv_abil = AbilityCommandGetAbility(lv_cmd);

    // Conditions
    if (testConds) {
        if (!((UnitAbilityGetCooldown(lv_caster, lv_abil, CatalogFieldValueGet(c_gameCatalogAbil, lv_abil, "Cost[" + IntToString(0) + "].Cooldown.Link", EventPlayer())) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilitySpendExplicit(lv_caster, lv_cmd, c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoAShiftCheatFailSafeThermal_Init () {
    libCOMI_gt_CM_SoAShiftCheatFailSafeThermal = TriggerCreate("libCOMI_gt_CM_SoAShiftCheatFailSafeThermal_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_SoAShiftCheatFailSafeThermal, c_playerAny, "SOAThermalLanceSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoAShiftCheatFailSafeHHCallFleet
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoAShiftCheatFailSafeHHCallFleet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    abilcmd lv_cmd;
    string lv_abil;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = libCOMI_gf_CM_PlayerGetGlobalCaster(EventPlayer());
    lv_cmd = AbilityCommand("HornerAirFleetActivate", 0);
    lv_abil = AbilityCommandGetAbility(lv_cmd);

    // Conditions
    if (testConds) {
        if (!((UnitAbilityGetCooldown(lv_caster, lv_abil, CatalogFieldValueGet(c_gameCatalogAbil, lv_abil, "Cost[" + IntToString(0) + "].Cooldown.Link", EventPlayer())) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilitySpendExplicit(lv_caster, lv_cmd, c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoAShiftCheatFailSafeHHCallFleet_Init () {
    libCOMI_gt_CM_SoAShiftCheatFailSafeHHCallFleet = TriggerCreate("libCOMI_gt_CM_SoAShiftCheatFailSafeHHCallFleet_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_SoAShiftCheatFailSafeHHCallFleet, c_playerAny, "HornerAirFleetInitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoAShiftCheatFailSafeNovaBombing
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoAShiftCheatFailSafeNovaBombing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    abilcmd lv_cmd;
    string lv_abil;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = libCOMI_gf_CM_PlayerGetGlobalCaster(EventPlayer());
    lv_cmd = AbilityCommand("NovaGriffinBombingRunActivate", 0);
    lv_abil = AbilityCommandGetAbility(lv_cmd);

    // Conditions
    if (testConds) {
        if (!((UnitAbilityGetCooldown(lv_caster, lv_abil, CatalogFieldValueGet(c_gameCatalogAbil, lv_abil, "Cost[" + IntToString(0) + "].Cooldown.Link", EventPlayer())) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilitySpendExplicit(lv_caster, lv_cmd, c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoAShiftCheatFailSafeNovaBombing_Init () {
    libCOMI_gt_CM_SoAShiftCheatFailSafeNovaBombing = TriggerCreate("libCOMI_gt_CM_SoAShiftCheatFailSafeNovaBombing_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_SoAShiftCheatFailSafeNovaBombing, c_playerAny, "NovaGriffinBombingRunInitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingForceOff
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATargetingForceOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoDA5C7614_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMI_gt_CM_SoATargetingCancel, false);
    TriggerEnable(libCOMI_gt_CM_SoATargetingPointChosen, false);
    TriggerEnable(libCOMI_gt_CM_SoATargetingDirectionChosen, false);
    libCOMI_gv_cM_SoAExitInstantly = true;
    autoDA5C7614_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoDA5C7614_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOMI_gv_cM_SoATargetingPhase[lv_indexPlayer] != libCOMI_ge_CM_SoATargetingPhaseType_None)) {
            libCOMI_gv_cM_SoATargetingTransitioning[lv_indexPlayer] = false;
            UISetTargetingOrder(PlayerGroupSingle(lv_indexPlayer), libCOMI_gv_cM_SoACasterGroup[lv_indexPlayer], null, false);
            libCOMI_gf_CM_SoATargetingCancel(lv_indexPlayer);
        }

    }
    libCOMI_gv_cM_SoATargetingUsageCount = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATargetingForceOff_Init () {
    libCOMI_gt_CM_SoATargetingForceOff = TriggerCreate("libCOMI_gt_CM_SoATargetingForceOff_Func");
    TriggerAddEventGeneric(libCOMI_gt_CM_SoATargetingForceOff, "CinematicModeOn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingDeactivated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATargetingDeactivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCOMI_gv_cM_SoACasterGroup[lv_casterPlayer], null, false);
    libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer] = 0;
    libCOMI_gf_CM_SoATargetingModeExit(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATargetingDeactivated_Init () {
    libCOMI_gt_CM_SoATargetingDeactivated = TriggerCreate("libCOMI_gt_CM_SoATargetingDeactivated_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoATargetingDeactivated, null, "SOAOrbitalStrikeActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoATargetingDeactivated, null, "SOAGravitonBombActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoATargetingDeactivated, null, "SOAThermalLanceActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoATargetingDeactivated, null, "SOAStrafeAttackActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoATargetingDeactivated, null, "NovaGriffinBombingRunActivate", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoATargetingDeactivated, null, "HornerAirFleetActivate", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingPointChosen
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATargetingPointChosen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOMI_gv_cM_SoATargetingPhase[EventPlayer()] == libCOMI_ge_CM_SoATargetingPhaseType_Location))) {
            return false;
        }

        if (!((libCOMI_gv_cM_SoATargetingChargesSpent[EventPlayer()] < libCOMI_gv_cM_SoATargetingChargesTotal[EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetPoint = OrderGetTargetPoint(EventUnitOrder());
    lv_casterPlayer = EventPlayer();
    if ((VisIsVisibleForPlayer(lv_casterPlayer, lv_targetPoint) == false)) {
        return true;
    }

    libCOMI_gv_cM_SoATargetingCycling[lv_casterPlayer] = true;
    libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer] += 1;
    libNtve_gf_CreateActorAtPoint(libCOMI_gv_cM_SoATargetingModel[lv_casterPlayer], lv_targetPoint);
    libCOMI_gv_cM_SoATargetingActors[libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateActorAtPoint("SOATargetingModeConfirmationSound", lv_targetPoint);
    if ((libCOMI_gv_cM_SoATargetingUnitType[lv_casterPlayer] == null)) {
        UnitIssueOrder(libCOMI_gv_cM_SoACasterUnit[lv_casterPlayer], OrderTargetingPoint(libCOMI_gv_cM_SoATargetingExecuteCommand[lv_casterPlayer], lv_targetPoint), c_orderQueueAddToEnd);
        libCOUI_gf_CU_TargetingSetCharges((libCOMI_gv_cM_SoATargetingChargesTotal[lv_casterPlayer]-libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]), libCOMI_gv_cM_SoATargetingChargesTotal[lv_casterPlayer], lv_casterPlayer);
        if ((libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer] == libCOMI_gv_cM_SoATargetingChargesTotal[lv_casterPlayer])) {
            Wait(0.125, c_timeGame);
            UnitBehaviorRemove(libCOMI_gv_cM_SoACasterUnit[lv_casterPlayer], libCOMI_gv_cM_SoATargetingBehavior[lv_casterPlayer], 1);
        }
        else {
            Wait(0.1, c_timeGame);
            UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCOMI_gv_cM_SoACasterGroup[lv_casterPlayer], libCOMI_gv_cM_SoATargetingOrder[lv_casterPlayer], false);
        }
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, libCOMI_gv_cM_SoATargetingUnitType[lv_casterPlayer], 0, lv_casterPlayer, lv_targetPoint);
        UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
        libCOMI_gv_cM_SoATargetingUnit[libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer] = UnitLastCreated();
        libCOMI_gv_cM_SoATargetingDirectionGroup[lv_casterPlayer] = libNtve_gf_ConvertUnitToUnitGroup(libCOMI_gv_cM_SoATargetingUnit[libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer]);
        Wait(0.1, c_timeGame);
        if ((UnitIsValid(libCOMI_gv_cM_SoATargetingUnit[libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer]) == true)) {
            UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCOMI_gv_cM_SoATargetingDirectionGroup[lv_casterPlayer], OrderTargetingPoint(libCOMI_gv_cM_SoATargetingExecuteCommand[lv_casterPlayer], UnitGetPosition(libCOMI_gv_cM_SoATargetingUnit[libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer])), false);
            libCOUI_gf_CU_TargetingSetInstructionText(libCOMI_gv_cM_SoATargetingInstructionsSecondary[lv_casterPlayer], lv_casterPlayer);
            libCOMI_gv_cM_SoATargetingPhase[lv_casterPlayer] = libCOMI_ge_CM_SoATargetingPhaseType_Direction;
        }

    }
    libCOMI_gv_cM_SoATargetingCycling[lv_casterPlayer] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATargetingPointChosen_Init () {
    libCOMI_gt_CM_SoATargetingPointChosen = TriggerCreate("libCOMI_gt_CM_SoATargetingPointChosen_Func");
    TriggerEnable(libCOMI_gt_CM_SoATargetingPointChosen, false);
    TriggerAddEventUnitOrder(libCOMI_gt_CM_SoATargetingPointChosen, null, AbilityCommand("SOAOrbitalStrikeTargetingDummy", 0));
    TriggerAddEventUnitOrder(libCOMI_gt_CM_SoATargetingPointChosen, null, AbilityCommand("SOAThermalLanceTargetingDummy", 0));
    TriggerAddEventUnitOrder(libCOMI_gt_CM_SoATargetingPointChosen, null, AbilityCommand("SOAGravitonBomb", 0));
    TriggerAddEventUnitOrder(libCOMI_gt_CM_SoATargetingPointChosen, null, AbilityCommand("NovaGriffinBombingRunTargetingDummy", 0));
    TriggerAddEventUnitOrder(libCOMI_gt_CM_SoATargetingPointChosen, null, AbilityCommand("HornerAirFleetTargetingDummy", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingDirectionChosen
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATargetingDirectionChosen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_targetPoint;
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOMI_gv_cM_SoATargetingPhase[EventPlayer()] == libCOMI_ge_CM_SoATargetingPhaseType_Direction))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = EventPlayer();
    libCOMI_gv_cM_SoATargetingCycling[lv_casterPlayer] = true;
    lv_targetPoint = OrderGetTargetPoint(EventUnitOrder());
    libCOMI_gv_cM_SoATargetingUnrefundableStageEntered[lv_casterPlayer] = true;
    libNtve_gf_CreateActorAtPoint("SOATargetingModeConfirmationSound", lv_targetPoint);
    ActorSend(libCOMI_gv_cM_SoATargetingActors[libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer], "Signal Destroy");
    if ((UnitIsValid(libCOMI_gv_cM_SoATargetingUnit[libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer]) == false)) {
        return true;
    }

    libNtve_gf_MakeUnitFacePoint(libCOMI_gv_cM_SoATargetingUnit[libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]][lv_casterPlayer], lv_targetPoint, 0.0);
    libCOUI_gf_CU_TargetingSetCharges((libCOMI_gv_cM_SoATargetingChargesTotal[lv_casterPlayer]-libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer]), libCOMI_gv_cM_SoATargetingChargesTotal[lv_casterPlayer], lv_casterPlayer);
    if ((libCOMI_gv_cM_SoATargetingChargesSpent[lv_casterPlayer] == libCOMI_gv_cM_SoATargetingChargesTotal[lv_casterPlayer])) {
        UnitBehaviorRemove(libCOMI_gv_cM_SoACasterUnit[lv_casterPlayer], libCOMI_gv_cM_SoATargetingBehavior[lv_casterPlayer], 1);
        Wait(0.1, c_timeGame);
    }
    else {
        libCOUI_gf_CU_TargetingSetInstructionText(libCOMI_gv_cM_SoATargetingInstructionsPrimary[lv_casterPlayer], lv_casterPlayer);
        Wait(0.1, c_timeGame);
        if ((libCOMI_gv_cM_SoATargetingAlreadyCanceled[lv_casterPlayer] == false)) {
            UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCOMI_gv_cM_SoACasterGroup[lv_casterPlayer], libCOMI_gv_cM_SoATargetingOrder[lv_casterPlayer], false);
        }

        libCOMI_gv_cM_SoATargetingPhase[lv_casterPlayer] = libCOMI_ge_CM_SoATargetingPhaseType_Location;
    }
    libCOMI_gv_cM_SoATargetingCycling[lv_casterPlayer] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATargetingDirectionChosen_Init () {
    libCOMI_gt_CM_SoATargetingDirectionChosen = TriggerCreate("libCOMI_gt_CM_SoATargetingDirectionChosen_Func");
    TriggerEnable(libCOMI_gt_CM_SoATargetingDirectionChosen, false);
    TriggerAddEventUnitOrder(libCOMI_gt_CM_SoATargetingDirectionChosen, null, AbilityCommand("SOAThermalLanceExecute", 0));
    TriggerAddEventUnitOrder(libCOMI_gt_CM_SoATargetingDirectionChosen, null, AbilityCommand("NovaGriffinBombingRunExecute", 0));
    TriggerAddEventUnitOrder(libCOMI_gt_CM_SoATargetingDirectionChosen, null, AbilityCommand("HornerAirFleetExecute", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingEffectFired
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATargetingEffectFired_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_SoATargetingCleanupActorsAndUnits(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATargetingEffectFired_Init () {
    libCOMI_gt_CM_SoATargetingEffectFired = TriggerCreate("libCOMI_gt_CM_SoATargetingEffectFired_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_SoATargetingEffectFired, c_playerAny, "SOAOrbitalStrikeCP");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_SoATargetingEffectFired, c_playerAny, "SOAGravitonBombLM");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingCancel
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATargetingCancel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gv_cM_SoATargetingCycling[EventPlayer()] == false))) {
            return false;
        }

        if (!(((EventTargetModeAbilCmd() == AbilityCommand("SOAOrbitalStrikeTargetingDummy", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("SOAThermalLanceTargetingDummy", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("SOAGravitonBomb", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("SOAThermalLanceExecute", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("NovaGriffinBombingRunExecute", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("NovaGriffinBombingRunTargetingDummy", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("HornerAirFleetExecute", 0)) || (EventTargetModeAbilCmd() == AbilityCommand("HornerAirFleetTargetingDummy", 0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_SoATargetingCancel(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATargetingCancel_Init () {
    libCOMI_gt_CM_SoATargetingCancel = TriggerCreate("libCOMI_gt_CM_SoATargetingCancel_Func");
    TriggerEnable(libCOMI_gt_CM_SoATargetingCancel, false);
    TriggerAddEventTargetModeUpdate(libCOMI_gt_CM_SoATargetingCancel, c_playerAny, null, c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingCancelFromUI
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATargetingCancelFromUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_SoATargetingCancel(libCOUI_gf_CU_TargetingTriggeringPlayer());
    UISetTargetingOrder(PlayerGroupSingle(libCOUI_gf_CU_TargetingTriggeringPlayer()), libCOMI_gv_cM_GlobalCasterUnitGroup[libCOUI_gf_CU_TargetingTriggeringPlayer()], null, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATargetingCancelFromUI_Init () {
    libCOMI_gt_CM_SoATargetingCancelFromUI = TriggerCreate("libCOMI_gt_CM_SoATargetingCancelFromUI_Func");
    libCOUI_gf_CU_TargetingCancel(libCOMI_gt_CM_SoATargetingCancelFromUI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingCameraShake
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATargetingCameraShake_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_distance;
    fixed[4] lv_cameraPosition;
    fixed[4] lv_effectPosition;
    int lv_player;
    point lv_effectTargetPoint;
    point lv_cameraTargetPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_effectTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cameraTargetPoint = CameraGetTarget(lv_player);
    lv_cameraPosition[0] = PointGetX(lv_cameraTargetPoint);
    lv_cameraPosition[1] = (PointGetY(lv_cameraTargetPoint)-(Cos(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
    lv_cameraPosition[2] = (WorldHeight(c_heightMapGround, lv_cameraTargetPoint)+(Sin(CameraGetPitch(lv_player))*CameraGetDistance(lv_player)));
    lv_effectPosition[0] = PointGetX(lv_effectTargetPoint);
    lv_effectPosition[1] = PointGetY(lv_effectTargetPoint);
    lv_effectPosition[2] = WorldHeight(c_heightMapGround, lv_effectTargetPoint);
    lv_distance = SquareRoot((Pow((lv_cameraPosition[0]-lv_effectPosition[0]), 2.0) + Pow((lv_cameraPosition[1]-lv_effectPosition[1]), 2.0) + Pow((lv_cameraPosition[2]-lv_effectPosition[2]), 2.0)));
    CameraShakeStart(lv_player, c_cameraPositionTarget, c_cameraDirectionZ, MaxF((1-(lv_distance/50)), 0.0), 2.5, 100.0, 0.1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATargetingCameraShake_Init () {
    libCOMI_gt_CM_SoATargetingCameraShake = TriggerCreate("libCOMI_gt_CM_SoATargetingCameraShake_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_SoATargetingCameraShake, c_playerAny, "SOAOrbitalStrikeImpactSearch");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_SoATargetingCameraShake, c_playerAny, "SOAGravitonBombCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoAOrbitalStrikeActivated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoAOrbitalStrikeActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    libNtve_gf_StoreUnitSelection(lv_casterPlayer, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCOMI_gv_cM_SoATargetingActivateAbility[lv_casterPlayer] = "SOAOrbitalStrikeActivate";
    libCOMI_gv_cM_SoATargetingExecuteCommand[lv_casterPlayer] = AbilityCommand("SOAOrbitalStrikeExecute", 0);
    libCOMI_gv_cM_SoATargetingCooldown[lv_casterPlayer] = "Abil/SOAOrbitalStrikeActivate";
    libCOMI_gv_cM_SoATargetingBehavior[lv_casterPlayer] = "SOAOrbitalStrikeActivate";
    libCOMI_gv_cM_SoATargetingModel[lv_casterPlayer] = "SOAOrbitalStrikeTargetModel";
    libCOMI_gv_cM_SoATargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("SOAOrbitalStrikeTargetingDummy", 0), UnitGetPosition(libCOMI_gv_cM_SoACasterUnit[lv_casterPlayer]));
    libCOMI_gv_cM_SoATargetingUnitType[lv_casterPlayer] = null;
    libCOMI_gv_cM_SoATargetingChargesTotal[lv_casterPlayer] = 5;
    libCOMI_gv_cM_SoATargetingInstructionsPrimary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMI_84BC1D9B");
    libCOMI_gv_cM_SoATargetingInstructionsSecondary[lv_casterPlayer] = null;
    libCOMI_gf_CM_SoATargetingModeEnter(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoAOrbitalStrikeActivated_Init () {
    libCOMI_gt_CM_SoAOrbitalStrikeActivated = TriggerCreate("libCOMI_gt_CM_SoAOrbitalStrikeActivated_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoAOrbitalStrikeActivated, null, "SOAOrbitalStrikeActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoAOrbitalStrikeActivatedKarax
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoAOrbitalStrikeActivatedKarax_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "KaraxCommander", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    libCOMI_gv_cM_SoATargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("SOAOrbitalStrikeKarax", 0), UnitGetPosition(libCOMI_gv_cM_SoACasterUnit[lv_casterPlayer]));
    UISetTargetingOrder(PlayerGroupSingle(lv_casterPlayer), libCOMI_gv_cM_SoACasterGroup[lv_casterPlayer], libCOMI_gv_cM_SoATargetingOrder[lv_casterPlayer], false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoAOrbitalStrikeActivatedKarax_Init () {
    libCOMI_gt_CM_SoAOrbitalStrikeActivatedKarax = TriggerCreate("libCOMI_gt_CM_SoAOrbitalStrikeActivatedKarax_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_SoAOrbitalStrikeActivatedKarax, c_playerAny, "SOAOrbitalStrikeCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoAGravitonBombActivated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoAGravitonBombActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    libNtve_gf_StoreUnitSelection(lv_casterPlayer, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCOMI_gv_cM_SoATargetingActivateAbility[lv_casterPlayer] = "SOAGravitonBombActivate";
    libCOMI_gv_cM_SoATargetingExecuteCommand[lv_casterPlayer] = AbilityCommand("SOAGravitonBombExecute", 0);
    libCOMI_gv_cM_SoATargetingCooldown[lv_casterPlayer] = "Abil/SOAGravitonBombActivate";
    libCOMI_gv_cM_SoATargetingBehavior[lv_casterPlayer] = "SOAGravitonBombActivate";
    libCOMI_gv_cM_SoATargetingModel[lv_casterPlayer] = "SOAGravitonBombTargetModel";
    libCOMI_gv_cM_SoATargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("SOAGravitonBomb", 0), UnitGetPosition(libCOMI_gv_cM_SoACasterUnit[lv_casterPlayer]));
    libCOMI_gv_cM_SoATargetingUnitType[lv_casterPlayer] = null;
    libCOMI_gv_cM_SoATargetingChargesTotal[lv_casterPlayer] = 3;
    libCOMI_gv_cM_SoATargetingInstructionsPrimary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMI_92A6D619");
    libCOMI_gv_cM_SoATargetingInstructionsSecondary[lv_casterPlayer] = null;
    libCOMI_gf_CM_SoATargetingModeEnter(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoAGravitonBombActivated_Init () {
    libCOMI_gt_CM_SoAGravitonBombActivated = TriggerCreate("libCOMI_gt_CM_SoAGravitonBombActivated_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoAGravitonBombActivated, null, "SOAGravitonBombActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoAThermalLanceActivated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoAThermalLanceActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = UnitGetOwner(EventUnit());
    libNtve_gf_StoreUnitSelection(lv_casterPlayer, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCOMI_gv_cM_SoATargetingActivateAbility[lv_casterPlayer] = "SOAThermalLanceActivate";
    libCOMI_gv_cM_SoATargetingExecuteCommand[lv_casterPlayer] = AbilityCommand("SOAThermalLanceExecute", 0);
    libCOMI_gv_cM_SoATargetingCooldown[lv_casterPlayer] = "Abil/SOAThermalLanceActivate";
    libCOMI_gv_cM_SoATargetingBehavior[lv_casterPlayer] = "SOAThermalLanceActivate";
    libCOMI_gv_cM_SoATargetingModel[lv_casterPlayer] = "SOAThermalLanceTargetingModel";
    libCOMI_gv_cM_SoATargetingOrder[lv_casterPlayer] = OrderTargetingPoint(AbilityCommand("SOAThermalLanceTargetingDummy", 0), UnitGetPosition(libCOMI_gv_cM_SoACasterUnit[lv_casterPlayer]));
    libCOMI_gv_cM_SoATargetingUnitType[lv_casterPlayer] = "SOAThermalLanceTargeter";
    libCOMI_gv_cM_SoATargetingChargesTotal[lv_casterPlayer] = 3;
    libCOMI_gv_cM_SoATargetingInstructionsPrimary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMI_FA8A12D3");
    libCOMI_gv_cM_SoATargetingInstructionsSecondary[lv_casterPlayer] = StringExternal("Param/Value/lib_COMI_B639B493");
    libCOMI_gf_CM_SoATargetingModeEnter(lv_casterPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoAThermalLanceActivated_Init () {
    libCOMI_gt_CM_SoAThermalLanceActivated = TriggerCreate("libCOMI_gt_CM_SoAThermalLanceActivated_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_SoAThermalLanceActivated, null, "SOAThermalLanceActivate", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATimeFreezeOn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATimeFreezeOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_SoATimeFreezeApply(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATimeFreezeOn_Init () {
    libCOMI_gt_CM_SoATimeFreezeOn = TriggerCreate("libCOMI_gt_CM_SoATimeFreezeOn_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_SoATimeFreezeOn, c_playerAny, "SOATimeFreeze");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATimeFreezeCleanup
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATimeFreezeCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOOC_gf_CC_TimeAITemporaryRestore();
    libCOOC_gf_CC_AchievementToggleTimeStop(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATimeFreezeCleanup_Init () {
    libCOMI_gt_CM_SoATimeFreezeCleanup = TriggerCreate("libCOMI_gt_CM_SoATimeFreezeCleanup_Func");
    TriggerEnable(libCOMI_gt_CM_SoATimeFreezeCleanup, false);
    TriggerAddEventTimer(libCOMI_gt_CM_SoATimeFreezeCleanup, libCOMI_gv_cM_SoATimeFreezeTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoATargetingPurifierBeamOn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_PM_SoATargetingPurifierBeamOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StoreUnitSelection(EventPlayer(), libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    libCOMI_gv_cM_SoATargetingActivateAbility[EventPlayer()] = "SOAPurifierBeam";
    libCOMI_gv_cM_SoATargetingOrder[EventPlayer()] = null;
    libCOMI_gv_cM_SoATargetingExecuteCommand[EventPlayer()] = null;
    libCOMI_gv_cM_SoATargetingCooldown[EventPlayer()] = "";
    libCOMI_gv_cM_SoATargetingBehavior[EventPlayer()] = null;
    libCOMI_gv_cM_SoATargetingModel[EventPlayer()] = null;
    libCOMI_gv_cM_SoATargetingUnitType[EventPlayer()] = null;
    libCOMI_gv_cM_SoATargetingChargesTotal[EventPlayer()] = 1;
    libCOMI_gv_cM_SoATargetingInstructionsPrimary[EventPlayer()] = StringExternal("Param/Value/lib_COMI_43A2DF64");
    libCOMI_gf_CM_SoATargetingModeEnter(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_PM_SoATargetingPurifierBeamOn_Init () {
    libCOMI_gt_PM_SoATargetingPurifierBeamOn = TriggerCreate("libCOMI_gt_PM_SoATargetingPurifierBeamOn_Func");
    TriggerAddEventTargetModeUpdate(libCOMI_gt_PM_SoATargetingPurifierBeamOn, c_playerAny, AbilityCommand("SOAPurifierBeam", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoATargetingPurifierBeamOff
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_PM_SoATargetingPurifierBeamOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_SoATargetingModeExit(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_PM_SoATargetingPurifierBeamOff_Init () {
    libCOMI_gt_PM_SoATargetingPurifierBeamOff = TriggerCreate("libCOMI_gt_PM_SoATargetingPurifierBeamOff_Func");
    TriggerAddEventTargetModeUpdate(libCOMI_gt_PM_SoATargetingPurifierBeamOff, c_playerAny, AbilityCommand("SOAPurifierBeam", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoAStrafeActivated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_PM_SoAStrafeActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_radius;
    fixed lv_radiusMinimum;
    fixed lv_radiusMaximum;
    int lv_i;
    fixed lv_r;
    int lv_casterPlayer;
    point lv_targetPoint;
    int lv_masteryCount;
    fixed lv_masteryBonusPerPoint;
    fixed lv_masteryBonusTotal;
    fixed lv_shotCount;

    // Automatic Variable Declarations
    fixed auto76D8B0DB_ae;
    const fixed auto76D8B0DB_ai = 1.0;

    // Variable Initialization
    lv_radiusMinimum = 2.0;
    lv_radiusMaximum = 10.0;
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_masteryBonusPerPoint = 0.02;
    lv_masteryBonusTotal = 1.0;
    lv_shotCount = 100.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "MasteryArtanisSolarBombardment", c_techCountQueuedOrBetter) >= 1)) {
        lv_masteryCount = TechTreeUpgradeCount(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "MasteryArtanisSolarBombardment", c_techCountQueuedOrBetter);
        lv_masteryBonusTotal += (lv_masteryCount * lv_masteryBonusPerPoint);
        lv_shotCount *= lv_masteryBonusTotal;
        lv_radiusMaximum *= lv_masteryBonusTotal;
    }

    auto76D8B0DB_ae = lv_shotCount;
    lv_r = 1.0;
    for ( ; ( (auto76D8B0DB_ai >= 0 && lv_r <= auto76D8B0DB_ae) || (auto76D8B0DB_ai < 0 && lv_r >= auto76D8B0DB_ae) ) ; lv_r += auto76D8B0DB_ai ) {
        lv_radius = (((lv_r / lv_shotCount) * (lv_radiusMaximum - lv_radiusMinimum)) + lv_radiusMinimum);
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOAStrafeAttackDamage", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radius)));
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOAStrafeAttackDamage", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radius)));
        if ((TechTreeUpgradeCount(EventPlayer(), "SOAStrafeAttackUpgrade", c_techCountQueuedOrBetter) >= 1)) {
            UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOAStrafeAttackDamage", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radius)));
            UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOAStrafeAttackDamage", RegionRandomPoint(RegionCircle(lv_targetPoint, lv_radius)));
        }

        Wait(0.15, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_PM_SoAStrafeActivated_Init () {
    libCOMI_gt_PM_SoAStrafeActivated = TriggerCreate("libCOMI_gt_PM_SoAStrafeActivated_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_PM_SoAStrafeActivated, c_playerAny, "SOAStrafeAttackCreateTargeter");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PM_SoASuperShieldsActivated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_PM_SoASuperShieldsActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pCommander;
    int lv_itCommander;

    // Automatic Variable Declarations
    playergroup auto6C2DA7B3_g;
    unitgroup auto953598FB_g;
    int auto953598FB_u;
    unit auto953598FB_var;

    // Variable Initialization
    lv_pCommander = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    auto6C2DA7B3_g = libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_pCommander);
    lv_itCommander = -1;
    while (true) {
        lv_itCommander = PlayerGroupNextPlayer(auto6C2DA7B3_g, lv_itCommander);
        if (lv_itCommander < 0) { break; }
        auto953598FB_g = UnitGroup(null, lv_itCommander, RegionEntireMap(), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto953598FB_u = UnitGroupCount(auto953598FB_g, c_unitCountAll);
        for (;; auto953598FB_u -= 1) {
            auto953598FB_var = UnitGroupUnitFromEnd(auto953598FB_g, auto953598FB_u);
            if (auto953598FB_var == null) { break; }
            if ((UnitGetType(auto953598FB_var) != "KerriganVoidCoopEconDropLT1") && (UnitGetType(auto953598FB_var) != "KerriganVoidCoopEconDrop1") && (UnitGetType(auto953598FB_var) != "KerriganVoidCoopEconDrop2") && (UnitGetType(auto953598FB_var) != "KerriganVoidCoopEconDrop3") && (UnitGetType(auto953598FB_var) != "KerriganVoidCoopEconDrop4") && (UnitGetType(auto953598FB_var) != "KerriganVoidCoopEconDrop5")) {
                UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SOASuperShieldApply", auto953598FB_var);
            }

        }
    }
    Wait(StringToFixed(CatalogReferenceGet("Behavior,SOASuperShield,Duration", c_playerAny)), c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_PM_SoASuperShieldsActivated_Init () {
    libCOMI_gt_PM_SoASuperShieldsActivated = TriggerCreate("libCOMI_gt_PM_SoASuperShieldsActivated_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_PM_SoASuperShieldsActivated, c_playerAny, "SOASuperShieldDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoASuperChronoApply
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoASuperChronoApply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOOC_gf_CC_AchievementToggleSuperChrono(true);
    TriggerEnable(libCOMI_gt_CM_SoASuperChronoCleanup, true);
    TimerStart(libCOMI_gv_cM_SoASuperChronoTimer, CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "SOAMapWideChrono", "Duration", c_playerAny), false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoASuperChronoApply_Init () {
    libCOMI_gt_CM_SoASuperChronoApply = TriggerCreate("libCOMI_gt_CM_SoASuperChronoApply_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CM_SoASuperChronoApply, null, AbilityCommand("SOAMapWideChrono", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoASuperChronoCleanup
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoASuperChronoCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOOC_gf_CC_AchievementToggleSuperChrono(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoASuperChronoCleanup_Init () {
    libCOMI_gt_CM_SoASuperChronoCleanup = TriggerCreate("libCOMI_gt_CM_SoASuperChronoCleanup_Func");
    TriggerEnable(libCOMI_gt_CM_SoASuperChronoCleanup, false);
    TriggerAddEventTimer(libCOMI_gt_CM_SoASuperChronoCleanup, libCOMI_gv_cM_SoASuperChronoTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: COD Construc Invulnerable On
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CODConstrucInvulnerableOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnit(), c_unitStateInvulnerable, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CODConstrucInvulnerableOn_Init () {
    libCOMI_gt_CODConstrucInvulnerableOn = TriggerCreate("libCOMI_gt_CODConstrucInvulnerableOn_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CODConstrucInvulnerableOn, null, "ConstructInvulnerability", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: COD Construc Invulnerable  Off
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CODConstrucInvulnerableOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetState(EventUnit(), c_unitStateInvulnerable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CODConstrucInvulnerableOff_Init () {
    libCOMI_gt_CODConstrucInvulnerableOff = TriggerCreate("libCOMI_gt_CODConstrucInvulnerableOff_Func");
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CODConstrucInvulnerableOff, null, "ConstructInvulnerability", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VoidACShard Modify Health
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_VoidACShardModifyHealth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_unitLife;
    fixed lv_unitShields;
    fixed lv_totalDamage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true)) {
        lv_unitLife = UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLife, c_unitPropCurrent);
        lv_unitShields = UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropShields, c_unitPropCurrent);
        lv_totalDamage = (lv_unitLife + lv_unitShields);
        lv_totalDamage *= 0.75;
        CatalogFieldValueSet(c_gameCatalogEffect, "VoidShardACDeathGripDamageDummy", "Amount", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), FixedToString(lv_totalDamage, 3));
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "VoidShardACDeathGripDamageDummy", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_VoidACShardModifyHealth_Init () {
    libCOMI_gt_VoidACShardModifyHealth = TriggerCreate("libCOMI_gt_VoidACShardModifyHealth_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_VoidACShardModifyHealth, c_playerAny, "VoidShardACModifyHealthDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ExpansionRocksChangeOwner
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ExpansionRocksChangeOwner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster), 3, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ExpansionRocksChangeOwner_Init () {
    libCOMI_gt_ExpansionRocksChangeOwner = TriggerCreate("libCOMI_gt_ExpansionRocksChangeOwner_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ExpansionRocksChangeOwner, c_playerAny, "ExpansionRockTriggerDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abort Mission
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbortMission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PerfTestStop();
    libCOMI_gv_cM_EndMissionResult[EventPlayer()] = c_gameOverDefeat;
    libCOOC_gf_CC_PlayerAwardMissionXP(c_gameOverDefeat, EventPlayer());
    libCOOC_gf_CC_SetPlayerDefeated(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbortMission_Init () {
    libCOMI_gt_CM_AbortMission = TriggerCreate("libCOMI_gt_CM_AbortMission_Func");
    TriggerAddEventAbortMission(libCOMI_gt_CM_AbortMission, c_playerAny);
    TriggerAddEventGameMenuItemSelected(libCOMI_gt_CM_AbortMission, c_playerAny, c_gameMenuDialogQuitButton);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionScoreScreenExited
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MissionScoreScreenExited_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerScoreValueGetAsInt(libCOUI_gf_CU_ScoreTriggeringPlayer(), "MutatorIsWeeklyChallenge") == 999)) {
        GameOver(libCOUI_gf_CU_ScoreTriggeringPlayer(), c_gameOverVictory, false, false);
        return true;
    }

    GameOver(libCOUI_gf_CU_ScoreTriggeringPlayer(), libCOMI_gv_cM_EndMissionResult[libCOUI_gf_CU_ScoreTriggeringPlayer()], false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MissionScoreScreenExited_Init () {
    libCOMI_gt_CM_MissionScoreScreenExited = TriggerCreate("libCOMI_gt_CM_MissionScoreScreenExited_Func");
    libCOUI_gf_CU_ScoreClosed(libCOMI_gt_CM_MissionScoreScreenExited);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionHandlePlayerQuitGiveResources
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MissionHandlePlayerQuitGiveResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libCOMI_gf_GameIsOver() == false)) {
        PlayerModifyPropertyInt(libCOOC_gf_CC_PlayerAlly(EventPlayer()), c_playerPropMinerals, c_playerPropOperAdd, PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals));
        PlayerModifyPropertyInt(libCOOC_gf_CC_PlayerAlly(EventPlayer()), c_playerPropVespene, c_playerPropOperAdd, PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene));
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
        PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
        TechTreeUpgradeAddLevel(libCOOC_gf_CC_PlayerAlly(EventPlayer()), "NydusNetworkCoopAllyLeft", 1);
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MissionHandlePlayerQuitGiveResources_Init () {
    libCOMI_gt_CM_MissionHandlePlayerQuitGiveResources = TriggerCreate("libCOMI_gt_CM_MissionHandlePlayerQuitGiveResources_Func");
    TriggerAddEventPlayerLeft(libCOMI_gt_CM_MissionHandlePlayerQuitGiveResources, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionHandlePlayerQuitGameEnd
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MissionHandlePlayerQuitGameEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto4B8F39D4_g;
    playergroup auto3501898E_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4B8F39D4_g = libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(EventPlayer());
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto4B8F39D4_g, lv_player);
        if (lv_player < 0) { break; }
        if ((PlayerStatus(lv_player) == c_playerStatusActive)) {
            return true;
        }

    }
    auto3501898E_g = libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(EventPlayer());
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto3501898E_g, lv_player);
        if (lv_player < 0) { break; }
        GameOver(lv_player, c_gameOverDefeat, false, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MissionHandlePlayerQuitGameEnd_Init () {
    libCOMI_gt_CM_MissionHandlePlayerQuitGameEnd = TriggerCreate("libCOMI_gt_CM_MissionHandlePlayerQuitGameEnd_Func");
    TriggerAddEventPlayerLeft(libCOMI_gt_CM_MissionHandlePlayerQuitGameEnd, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionVictoryCheatEndMission
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MissionVictoryCheatEndMission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_EndCampaignMission(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MissionVictoryCheatEndMission_Init () {
    libCOMI_gt_CM_MissionVictoryCheatEndMission = TriggerCreate("libCOMI_gt_CM_MissionVictoryCheatEndMission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionVictoryCallbackBlockActionQueueOneMinute
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gv_cM_MissionVictoryActionQueyeEmpty = true;
    Wait(60.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute_Init () {
    libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute = TriggerCreate("libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionVictoryCallbackBlockActionQueue
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gv_cM_MissionVictoryActionQueyeEmpty = true;
    while (true) {
        Wait(10.0, c_timeReal);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueue_Init () {
    libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueue = TriggerCreate("libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Hatchery Primary Search
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_HatcheryPrimarySearch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    fixed lv_distance;
    unitgroup lv_hatcheryGroup;
    unit lv_closestHatchery;
    unit lv_indexTownHall;

    // Automatic Variable Declarations
    playergroup auto59F15E5F_g;
    unitgroup auto1A7E7594_g;
    int auto1A7E7594_u;

    // Variable Initialization
    lv_distance = 500.0;
    lv_hatcheryGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto59F15E5F_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto59F15E5F_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((UnitGetOwner(libCOMI_gv_cM_PrimaryTownHall[lv_indexPlayer]) != lv_indexPlayer)) {
            UnitBehaviorRemove(libCOMI_gv_cM_PrimaryTownHall[lv_indexPlayer], "ZerglingRespawnPrimary", 1);
        }

        lv_closestHatchery = null;
        lv_distance = 500.0;
        if (((TechTreeBehaviorCount(lv_indexPlayer, "ZerglingRespawnPrimary", c_techCountCompleteOnly) == 0) || (libCOMI_gf_CM_PrimaryTownHall(lv_indexPlayer) == null))) {
            lv_hatcheryGroup = libCOOC_gf_CC_TownHallsForPlayer(lv_indexPlayer);
            auto1A7E7594_g = lv_hatcheryGroup;
            auto1A7E7594_u = UnitGroupCount(auto1A7E7594_g, c_unitCountAll);
            for (;; auto1A7E7594_u -= 1) {
                lv_indexTownHall = UnitGroupUnitFromEnd(auto1A7E7594_g, auto1A7E7594_u);
                if (lv_indexTownHall == null) { break; }
                if ((DistanceBetweenPoints(PlayerStartLocation(lv_indexPlayer), UnitGetPosition(lv_indexTownHall)) < lv_distance)) {
                    lv_distance = DistanceBetweenPoints(PlayerStartLocation(lv_indexPlayer), UnitGetPosition(lv_indexTownHall));
                    lv_closestHatchery = lv_indexTownHall;
                }

            }
            if ((lv_closestHatchery != null)) {
                libCOMI_gf_ZerglingRespawnSetPrimaryHatchery(lv_closestHatchery);
                libCOMI_gv_cM_PrimaryTownHall[lv_indexPlayer] = lv_closestHatchery;
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_HatcheryPrimarySearch_Init () {
    libCOMI_gt_CM_HatcheryPrimarySearch = TriggerCreate("libCOMI_gt_CM_HatcheryPrimarySearch_Func");
    TriggerEnable(libCOMI_gt_CM_HatcheryPrimarySearch, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_CM_HatcheryPrimarySearch, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_StartingTech
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_StartingTech_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    playergroup lv_itPlayerGroup;

    // Automatic Variable Declarations
    playergroup auto62F6BACF_playerPool;
    int auto62F6BACF_itPlayer;
    playergroup auto62F6BACF_itTestPool;
    playergroup autoC927CB98_g;

    // Variable Initialization
    lv_itPlayerGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto62F6BACF_playerPool = PlayerGroupAll();
    auto62F6BACF_itPlayer = 0;
    auto62F6BACF_itTestPool=null;
    while (PlayerGroupCount(auto62F6BACF_playerPool)) {
        auto62F6BACF_itPlayer = PlayerGroupPlayer(auto62F6BACF_playerPool, 1);
        auto62F6BACF_itTestPool = libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(auto62F6BACF_itPlayer);
        PlayerGroupRemove(auto62F6BACF_playerPool, auto62F6BACF_itPlayer);
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_AllyMutual,auto62F6BACF_itPlayer), auto62F6BACF_playerPool);
        if(PlayerGroupCount(auto62F6BACF_itTestPool)){
            lv_itPlayerGroup = auto62F6BACF_itTestPool;
            libNtve_gf_SetAllianceAspectForPlayerGroup(lv_itPlayerGroup, c_allianceIdPower, true);
        }
    }
    autoC927CB98_g = libCOOC_gf_CommanderPlayers();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoC927CB98_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libCOMI_gf_CM_StartingTechForHumanPlayer(lv_itPlayer);
        libCOMI_gf_SetWorkerRallyPointsPlayersNexuses(lv_itPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_StartingTech_Init () {
    libCOMI_gt_CM_StartingTech = TriggerCreate("libCOMI_gt_CM_StartingTech_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: VoicePackDebug
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_VoicePackDebug_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_itReward;
    string lv_appReward;
    string lv_rewardStringIDCombine;

    // Automatic Variable Declarations
    int autoA7A5BD22_catalog;
    int autoA7A5BD22_i;
    int auto76AAF890_catalog;
    int auto76AAF890_i;

    // Variable Initialization
    lv_rewardStringIDCombine = "";

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA7A5BD22_catalog = c_gameCatalogReward;
    autoA7A5BD22_i = 1;
    for ( ; autoA7A5BD22_i <= CatalogEntryCount(c_gameCatalogReward) ; autoA7A5BD22_i += 1 ) {
        lv_itReward = CatalogEntryGet(autoA7A5BD22_catalog, autoA7A5BD22_i);
        if (((CatalogEntryScope(c_gameCatalogReward, lv_itReward) == "CRewardVoicePack") && (StringContains((lv_itReward), ("_" + (libCOOC_gf_ActiveCommanderForPlayer(1))), c_stringAnywhere, c_stringCase) == false))) {
            if ((PlayerHasReward(1, lv_itReward) == true)) {
                lv_rewardStringIDCombine = (((lv_itReward) + "_" + (libCOOC_gf_ActiveCommanderForPlayer(1))));
                TextExpressionSetToken("Param/Expression/lib_COMI_E45A8AE0", "A", StringToText((lv_itReward)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_E45A8AE0"), true);
                TextExpressionSetToken("Param/Expression/lib_COMI_BA6DF236", "A", StringToText(lv_rewardStringIDCombine));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_BA6DF236"), true);
                auto76AAF890_catalog = c_gameCatalogReward;
                auto76AAF890_i = 1;
                for ( ; auto76AAF890_i <= CatalogEntryCount(c_gameCatalogReward) ; auto76AAF890_i += 1 ) {
                    lv_appReward = CatalogEntryGet(auto76AAF890_catalog, auto76AAF890_i);
                    if ((CatalogEntryScope(c_gameCatalogReward, lv_appReward) == "CRewardVoicePack")) {
                        if (((lv_appReward) == lv_rewardStringIDCombine)) {
                            PlayerAddReward(1, lv_rewardStringIDCombine);
                            TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_BD9298EE"), true);
                        }

                    }

                }
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_VoicePackDebug_Init () {
    libCOMI_gt_VoicePackDebug = TriggerCreate("libCOMI_gt_VoicePackDebug_Func");
    TriggerAddEventChatMessage(libCOMI_gt_VoicePackDebug, c_playerAny, "voicepackdebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Hatchery Egg Models
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_HatcheryEggModels_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cM_PrimaryTownHall[0] != null) && (TechTreeUpgradeCount(1, "K5ZerglingRespawn", c_techCountCompleteOnly) == 1)) {
        if ((UnitAbilityChargeInfo(libCOMI_gv_cM_PrimaryTownHall[0], AbilityCommand("ZerglingRespawnTrain", 0), c_unitAbilChargeCountLeft) > 0.0)) {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn1On");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn1Off");
        }
        if ((UnitAbilityChargeInfo(libCOMI_gv_cM_PrimaryTownHall[0], AbilityCommand("ZerglingRespawnTrain", 0), c_unitAbilChargeCountLeft) > 2.0)) {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn2On");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn2Off");
        }
        if ((UnitAbilityChargeInfo(libCOMI_gv_cM_PrimaryTownHall[0], AbilityCommand("ZerglingRespawnTrain", 0), c_unitAbilChargeCountLeft) > 4.0)) {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn3On");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn3Off");
        }
        if ((UnitAbilityChargeInfo(libCOMI_gv_cM_PrimaryTownHall[0], AbilityCommand("ZerglingRespawnTrain", 0), c_unitAbilChargeCountLeft) > 7.0)) {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn4On");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn4Off");
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_HatcheryEggModels_Init () {
    libCOMI_gt_CM_HatcheryEggModels = TriggerCreate("libCOMI_gt_CM_HatcheryEggModels_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_HatcheryEggModels, 1, "ZerglingRespawnEggCheck");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Hatchery Egg Births
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_HatcheryEggBirths_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cM_PrimaryTownHall[0] != null) && (TechTreeUpgradeCount(1, "K5ZerglingRespawn", c_techCountCompleteOnly) == 1)) {
        libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn1Off");
        libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn2Off");
        libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn3Off");
        libNtve_gf_SendActorMessageToUnit(libCOMI_gv_cM_PrimaryTownHall[0], "Signal ZerglingRespawn4Off");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_HatcheryEggBirths_Init () {
    libCOMI_gt_CM_HatcheryEggBirths = TriggerCreate("libCOMI_gt_CM_HatcheryEggBirths_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_HatcheryEggBirths, 1, "ZerglingRespawnEggBirth");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_HeroDied
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_HeroDied_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoABF82C79_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoABF82C79_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoABF82C79_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((EventUnit() == libCOMI_gv_cM_HeroUnit[lv_indexPlayer]) && (PlayerCommander(lv_indexPlayer) != "Tychus")) {
            libCOMI_gf_CM_HeroHandleDeath(lv_indexPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_HeroDied_Init () {
    libCOMI_gt_CM_HeroDied = TriggerCreate("libCOMI_gt_CM_HeroDied_Func");
    TriggerAddEventUnitDied(libCOMI_gt_CM_HeroDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaRespawnBuyBack
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaRespawnBuyBack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_HeroReviveTargetLocation[EventPlayer()] = EventUnitTargetPoint();
    libNtve_gf_PlayerRemoveCooldown(EventPlayer(), libCOOC_gf_CC_CommanderHeroReviveLink(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer())));
    TriggerEnable(libCOMI_gt_CM_NovaRespawnBuyBackCostAdjustment, false);
    CatalogFieldValueSet(c_gameCatalogAbil, "NovaReviveInstantBuyback", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", EventPlayer(), "450");
    UnitBehaviorAdd(libCOMI_gv_cM_HeroUnit[EventPlayer()], "TargetedRevive", libCOMI_gv_cM_HeroUnit[EventPlayer()], 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaRespawnBuyBack_Init () {
    libCOMI_gt_CM_NovaRespawnBuyBack = TriggerCreate("libCOMI_gt_CM_NovaRespawnBuyBack_Func");
    TriggerAddEventUnitAbility(libCOMI_gt_CM_NovaRespawnBuyBack, null, AbilityCommand("NovaReviveInstantBuyback", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_NovaRespawnBuyBackCostAdjustment
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_NovaRespawnBuyBackCostAdjustment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_reviveTimer;
    int lv_reviveCostPerSecond;
    fixed lv_totalBuybackCost;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoFF2C04E6_g;

    // Variable Initialization
    lv_reviveCostPerSecond = 5;

    // Actions
    if (!runActions) {
        return true;
    }

    autoFF2C04E6_g = libCOOC_gf_CC_PlayersOfCommander("TerranNova");
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoFF2C04E6_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_reviveTimer[lv_itPlayer] = UnitBehaviorDuration(libCOMI_gv_cM_HeroReviver[lv_itPlayer], "NovaReviveTimer");
        lv_totalBuybackCost = (Round(lv_reviveTimer[lv_itPlayer]) * lv_reviveCostPerSecond);
        CatalogFieldValueSet(c_gameCatalogAbil, "NovaReviveInstantBuyback", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", lv_itPlayer, FixedToString(lv_totalBuybackCost, 0));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_NovaRespawnBuyBackCostAdjustment_Init () {
    libCOMI_gt_CM_NovaRespawnBuyBackCostAdjustment = TriggerCreate("libCOMI_gt_CM_NovaRespawnBuyBackCostAdjustment_Func");
    TriggerEnable(libCOMI_gt_CM_NovaRespawnBuyBackCostAdjustment, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_CM_NovaRespawnBuyBackCostAdjustment, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_HeroSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_HeroSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    point lv_spawnPoint;
    point lv_mineralPoint;

    // Automatic Variable Declarations
    playergroup autoC7F97A67_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoC7F97A67_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoC7F97A67_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOOC_gf_CC_CommanderHeroUnitType(libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer)) != null)) {
            lv_spawnPoint = UnitGetPosition(libCOMI_gf_CM_PrimaryTownHall(lv_indexPlayer));
            libCOMI_gf_CM_HeroCreateForPlayer(lv_spawnPoint, lv_indexPlayer, 270.0, 0);
            libCOUI_gf_SetHeroPanelUnit(1, UnitLastCreated(), lv_indexPlayer);
            if ((TechTreeUpgradeCount(lv_indexPlayer, "DehakaCommander", c_techCountCompleteOnly) == 1)) {
                UnitBehaviorAdd(libCOMI_gv_cM_HeroUnit[lv_indexPlayer], libCOMI_gv_cM_DehakaVeterencyBehavior[lv_indexPlayer], libCOMI_gv_cM_HeroUnit[lv_indexPlayer], 1);
            }

            if ((TechTreeUpgradeCount(lv_indexPlayer, "MasteryDehakaAttackSpeed", c_techCountCompleteOnly) >= 1)) {
                UnitBehaviorAdd(libCOMI_gv_cM_HeroUnit[lv_indexPlayer], "DehakaAttEssenceMastery", libCOMI_gv_cM_HeroUnit[lv_indexPlayer], 1);
                UnitBehaviorRemove(libCOMI_gv_cM_HeroUnit[lv_indexPlayer], "DehakaAttEssence", 1);
            }

            UnitBehaviorAdd(libCOMI_gv_cM_HeroUnit[lv_indexPlayer], "ZergGenericDeath", libCOMI_gv_cM_HeroUnit[lv_indexPlayer], 1);
            UnitSetPosition(libCOMI_gv_cM_HeroUnit[lv_indexPlayer], Point(0.0, 0.0), false);
            UnitKill(libCOMI_gv_cM_HeroUnit[lv_indexPlayer]);
        }

        if ((libCOOC_gf_CC_CommanderHeroStructureType(libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer)) != null)) {
            lv_mineralPoint = UnitGroupCenterOfGroup(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(libCOMI_gf_CM_PrimaryTownHall(lv_indexPlayer)), 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            if ((UnitGroupCount(UnitGroup("ACHeroSpawnPlacement", lv_indexPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                lv_spawnPoint = UnitGetPosition(UnitGroupUnit(UnitGroup("ACHeroSpawnPlacement", lv_indexPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1));
            }
            else {
                TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_D32F9D56"), false);
                lv_spawnPoint = libNtve_gf_PointOffsetTowardsPoint(lv_mineralPoint, 13.0, UnitGetPosition(libCOMI_gf_CM_PrimaryTownHall(lv_indexPlayer)));
            }
            libCOMI_gf_CM_HeroStructureCreateForPlayer(lv_spawnPoint, lv_indexPlayer, 225.0, 0);
            if ((TechTreeUpgradeCount(lv_indexPlayer, "NovaCommander", c_techCountCompleteOnly) == 1)) {
                UnitBehaviorAdd(UnitLastCreated(), "NovaCoopGhostAcademyLandingIntro", UnitLastCreated(), 1);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_HeroSpawn_Init () {
    libCOMI_gt_CM_HeroSpawn = TriggerCreate("libCOMI_gt_CM_HeroSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_GlobalCasterInit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_GlobalCasterInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoB36D32D9_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB36D32D9_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoB36D32D9_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) == c_playerTypeUser) && (libCOOC_gf_CC_CommanderGlobalCastUnitType(libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer)) != null)) {
            libCOMI_gf_CM_GlobalCasterCreateUnit(lv_indexPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_GlobalCasterInit_Init () {
    libCOMI_gt_CM_GlobalCasterInit = TriggerCreate("libCOMI_gt_CM_GlobalCasterInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AutoRevealRegionController
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AutoRevealRegionController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoF67ED6CB_ae;
    const int autoF67ED6CB_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        autoF67ED6CB_ae = (libLbty_gv_autoRevealers.lv_count - 1);
        lv_i = 0;
        for ( ; ( (autoF67ED6CB_ai >= 0 && lv_i <= autoF67ED6CB_ae) || (autoF67ED6CB_ai < 0 && lv_i >= autoF67ED6CB_ae) ) ; lv_i += autoF67ED6CB_ai ) {
            if ((UnitGroupCount(UnitGroup(null, libLbty_gv_autoRevealers.lv_triggeringPlayers[lv_i], libLbty_gv_autoRevealers.lv_triggeringRegions[lv_i], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1), c_unitCountAlive) > 0)) {
                libCOMI_gf_EnableDisableRevealerCoop(libLbty_gv_autoRevealers.lv_revealers[lv_i], true);
            }
            else {
                libCOMI_gf_EnableDisableRevealerCoop(libLbty_gv_autoRevealers.lv_revealers[lv_i], false);
            }
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AutoRevealRegionController_Init () {
    libCOMI_gt_CM_AutoRevealRegionController = TriggerCreate("libCOMI_gt_CM_AutoRevealRegionController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_GPReminderAbilityUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_GPReminderAbilityUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    if ((libCOMI_gv_cM_GPRemindersOn[1] == false) && (libCOMI_gv_cM_GPRemindersOn[2] == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_GPReminderAbilityUsed_Init () {
    libCOMI_gt_CM_GPReminderAbilityUsed = TriggerCreate("libCOMI_gt_CM_GPReminderAbilityUsed_Func");
    TriggerEnable(libCOMI_gt_CM_GPReminderAbilityUsed, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("SoASuperShield", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("SOAOrbitalStrikeActivate", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("VoidSentryBlackHole", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("SOADarkPylon", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("SOAShadowGuardCalldown", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("SpawnToxicNest", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_GPReminderAbilityUsed, null, AbilityCommand("HHTrainTopBar", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionRaynorHyperion
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionRaynorHyperion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("RaynorCommander_Hyperion", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionRaynorHyperion_Init () {
    libCOMI_gt_CM_AbilityTransmissionRaynorHyperion = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionRaynorHyperion_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionRaynorHyperion, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionRaynorHyperion, null, AbilityCommand("VoidCoopSummonHyperion", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionRaynorBansheesUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionRaynorBansheesUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("RaynorCommander_Banshee", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionRaynorBansheesUsed_Init () {
    libCOMI_gt_CM_AbilityTransmissionRaynorBansheesUsed = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionRaynorBansheesUsed_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionRaynorBansheesUsed, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionRaynorBansheesUsed, null, AbilityCommand("BansheeAirstrike", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionSwannDrone
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionSwannDrone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("SwannCommander_Drone", -1), PlayerGroupAll());
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    libCOMI_gf_CM_CommanderVOSend(EventPlayer(), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(libCOOC_gf_CC_PlayerAlly(EventPlayer())), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOThankyou), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionSwannDrone_Init () {
    libCOMI_gt_CM_AbilityTransmissionSwannDrone = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionSwannDrone_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionSwannDrone, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionSwannDrone, null, AbilityCommand("VespeneDroneCast", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionSwannLaserDrill
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionSwannLaserDrill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("SwannCommander_LaserDrill", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionSwannLaserDrill_Init () {
    libCOMI_gt_CM_AbilityTransmissionSwannLaserDrill = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionSwannLaserDrill_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionSwannLaserDrill, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionSwannLaserDrill, null, AbilityCommand("ConstructDrakkenLaserDrillCoop", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionSwannCombatDropUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionSwannCombatDropUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("SwannCommander_Delivery", -1), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionSwannCombatDropUsed_Init () {
    libCOMI_gt_CM_AbilityTransmissionSwannCombatDropUsed = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionSwannCombatDropUsed_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionSwannCombatDropUsed, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionSwannCombatDropUsed, null, AbilityCommand("SpecialDelivery", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionKerriganCrushingGrip
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionKerriganCrushingGrip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("KerriganCommander_CrushingGrip", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionKerriganCrushingGrip_Init () {
    libCOMI_gt_CM_AbilityTransmissionKerriganCrushingGrip = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionKerriganCrushingGrip_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionKerriganCrushingGrip, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionKerriganCrushingGrip, null, AbilityCommand("KerriganVoidCoopCrushingGripWave", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionKerriganAssimilation
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionKerriganAssimilation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("KerriganCommander_Assimilation", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionKerriganAssimilation_Init () {
    libCOMI_gt_CM_AbilityTransmissionKerriganAssimilation = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionKerriganAssimilation_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionKerriganAssimilation, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionKerriganAssimilation, null, AbilityCommand("KerriganVoidCoopEconDrop", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionZagaraRoachDrop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionZagaraRoachDrop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("ZagaraCommander_Roach", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionZagaraRoachDrop_Init () {
    libCOMI_gt_CM_AbilityTransmissionZagaraRoachDrop = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionZagaraRoachDrop_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionZagaraRoachDrop, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionZagaraRoachDrop, null, AbilityCommand("ZagaraVoidCoopMassRoachDrop", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionArtanisSuperShields
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionArtanisSuperShields_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(EventPlayer());
    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("ArtanisCommander_Shield", -1), PlayerGroupAll());
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    libCOMI_gf_CM_CommanderVOSend(EventPlayer(), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(libCOOC_gf_CC_PlayerAlly(EventPlayer())), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOThankyou), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionArtanisSuperShields_Init () {
    libCOMI_gt_CM_AbilityTransmissionArtanisSuperShields = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionArtanisSuperShields_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionArtanisSuperShields, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionArtanisSuperShields, null, AbilityCommand("SoASuperShield", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionVorazunTimeStop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionVorazunTimeStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(EventPlayer());
    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("VorazunCommander_TimeStop", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionVorazunTimeStop_Init () {
    libCOMI_gt_CM_AbilityTransmissionVorazunTimeStop = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionVorazunTimeStop_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionVorazunTimeStop, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionVorazunTimeStop, null, AbilityCommand("SOATimeFreeze", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionKaraxPassiveChronoBoost
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_karaxPlayers;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto4752790F_g;

    // Variable Initialization
    lv_karaxPlayers = libCOOC_gf_CC_PlayersOfCommander("ProtossKarax");

    // Conditions
    if (testConds) {
        if (!((PlayerGroupCount(lv_karaxPlayers) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() >= 35.0))) {
        Wait(1.0, c_timeGame);
    }
    auto4752790F_g = lv_karaxPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto4752790F_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((TechTreeUpgradeCount(lv_itPlayer, "CommanderLevel", c_techCountQueuedOrBetter) > 1)) {
            TriggerQueueEnter();
            libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(lv_itPlayer), SoundLink("KaraxCommander_ChronoPassive", -1), PlayerGroupAll());
            TriggerQueueExit();
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost_Init () {
    libCOMI_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionKaraxChronoMap
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionKaraxChronoMap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("KaraxCommander_Chrono", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionKaraxChronoMap_Init () {
    libCOMI_gt_CM_AbilityTransmissionKaraxChronoMap = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionKaraxChronoMap_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionKaraxChronoMap, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionKaraxChronoMap, null, AbilityCommand("SOAMapWideChrono", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionAbathurMend
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionAbathurMend_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("AbathurCommander_Mend", -1), PlayerGroupAll());
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionAbathurMend_Init () {
    libCOMI_gt_CM_AbilityTransmissionAbathurMend = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionAbathurMend_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionAbathurMend, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionAbathurMend, null, AbilityCommand("AbathurMend", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionAlarakEmpower
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionAlarakEmpower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("AlarakCommander_EmpowerMe", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionAlarakEmpower_Init () {
    libCOMI_gt_CM_AbilityTransmissionAlarakEmpower = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionAlarakEmpower_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionAlarakEmpower, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionAlarakEmpower, null, AbilityCommand("AlarakEmpower", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionAlarakDeathFleet
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionAlarakDeathFleet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("AlarakCommander_DeathFleet", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionAlarakDeathFleet_Init () {
    libCOMI_gt_CM_AbilityTransmissionAlarakDeathFleet = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionAlarakDeathFleet_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionAlarakDeathFleet, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionAlarakDeathFleet, null, AbilityCommand("AlarakACSummonDeathfleetTarget", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionAlarakOvercharge
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionAlarakOvercharge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitTargetUnit() != null) && (UnitGetOwner(EventUnit()) != UnitGetOwner(EventUnitTargetUnit()))) {
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("AlarakCommander_StructureOverchargeAlly", -1), PlayerGroupAll());
    }
    else {
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("AlarakCommander_StructureOvercharge", -1), PlayerGroupAll());
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionAlarakOvercharge_Init () {
    libCOMI_gt_CM_AbilityTransmissionAlarakOvercharge = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionAlarakOvercharge_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionAlarakOvercharge, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionAlarakOvercharge, null, AbilityCommand("AlarakStructureOvercharge", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionAlarakSacrifice
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionAlarakSacrifice_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(EventPlayer(), SoundLink("AlarakCommander_Sacrifice", -1), PlayerGroupSingle(EventPlayer()));
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionAlarakSacrifice_Init () {
    libCOMI_gt_CM_AbilityTransmissionAlarakSacrifice = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionAlarakSacrifice_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionAlarakSacrifice, false);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_AbilityTransmissionAlarakSacrifice, c_playerAny, "AlarakTheStrongestSurviveSearchImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionNovaBombingRun
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionNovaBombingRun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("NovaCommander_GriffinAirstrike", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionNovaBombingRun_Init () {
    libCOMI_gt_CM_AbilityTransmissionNovaBombingRun = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionNovaBombingRun_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionNovaBombingRun, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionNovaBombingRun, null, AbilityCommand("NovaGriffinBombingRunExecute", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionNovaTransport
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionNovaTransport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("NovaCommander_GriffinAirlift", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionNovaTransport_Init () {
    libCOMI_gt_CM_AbilityTransmissionNovaTransport = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionNovaTransport_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionNovaTransport, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionNovaTransport, null, AbilityCommand("NovaGriffinTransportLoadUnits", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionNovaDMatrix
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionNovaDMatrix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("NovaCommander_DefensiveMatrix", -1), PlayerGroupAll());
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionNovaDMatrix_Init () {
    libCOMI_gt_CM_AbilityTransmissionNovaDMatrix = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionNovaDMatrix_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionNovaDMatrix, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionNovaDMatrix, null, AbilityCommand("NovaDefensiveMatrixDrone", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionStukovAleksander
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionStukovAleksander_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("StukovCommander_Aleksander", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionStukovAleksander_Init () {
    libCOMI_gt_CM_AbilityTransmissionStukovAleksander = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionStukovAleksander_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionStukovAleksander, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionStukovAleksander, null, AbilityCommand("StukovSummonAleksander", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionStukovApocalisk
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionStukovApocalisk_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("StukovCommander_Apocalisk", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionStukovApocalisk_Init () {
    libCOMI_gt_CM_AbilityTransmissionStukovApocalisk = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionStukovApocalisk_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionStukovApocalisk, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionStukovApocalisk, null, AbilityCommand("StukovSummonApocalisk", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionStukovInfestStructure
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionStukovInfestStructure_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitTargetUnit() != null) && (UnitGetOwner(EventUnit()) != UnitGetOwner(EventUnitTargetUnit()))) {
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("StukovCommander_InfestStructure", -1), PlayerGroupAll());
    }
    else {
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("StukovCommander_InfestStructureSelf", -1), PlayerGroupAll());
    }
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionStukovInfestStructure_Init () {
    libCOMI_gt_CM_AbilityTransmissionStukovInfestStructure = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionStukovInfestStructure_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionStukovInfestStructure, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionStukovInfestStructure, null, AbilityCommand("SIStukovInfestStructure", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionStukovInfestStructure, null, AbilityCommand("SIStukovInfestStructureUpgraded", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateTalis
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionFenixCreateTalis_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_AdeptChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionFenixCreateTalis_Init () {
    libCOMI_gt_CM_AbilityTransmissionFenixCreateTalis = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionFenixCreateTalis_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateTalis, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionFenixCreateTalis, null, AbilityCommand("FenixTalisAdeptMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateKaldalis
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionFenixCreateKaldalis_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ZealotChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionFenixCreateKaldalis_Init () {
    libCOMI_gt_CM_AbilityTransmissionFenixCreateKaldalis = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionFenixCreateKaldalis_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateKaldalis, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionFenixCreateKaldalis, null, AbilityCommand("FenixKaldalisZealotMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateTaldarin
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionFenixCreateTaldarin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ImmortalChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionFenixCreateTaldarin_Init () {
    libCOMI_gt_CM_AbilityTransmissionFenixCreateTaldarin = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionFenixCreateTaldarin_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateTaldarin, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionFenixCreateTaldarin, null, AbilityCommand("FenixTaldarinImmortalMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateWarbringer
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionFenixCreateWarbringer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ColossusChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionFenixCreateWarbringer_Init () {
    libCOMI_gt_CM_AbilityTransmissionFenixCreateWarbringer = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionFenixCreateWarbringer_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateWarbringer, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionFenixCreateWarbringer, null, AbilityCommand("FenixWarbringerColossusMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateMojo
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionFenixCreateMojo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ScoutChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionFenixCreateMojo_Init () {
    libCOMI_gt_CM_AbilityTransmissionFenixCreateMojo = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionFenixCreateMojo_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateMojo, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionFenixCreateMojo, null, AbilityCommand("FenixMojoScoutMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixCreateClolarion
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionFenixCreateClolarion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_CarrierChampion", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionFenixCreateClolarion_Init () {
    libCOMI_gt_CM_AbilityTransmissionFenixCreateClolarion = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionFenixCreateClolarion_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixCreateClolarion, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionFenixCreateClolarion, null, AbilityCommand("FenixClolarionCarrierMorph", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixZealotSuit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionFenixZealotSuit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cM_FenixVOTalandarRecalled[EventPlayer()] == false) && (TechTreeUpgradeCount(EventPlayer(), "AStrongHeart", c_techCountCompleteOnly) > 0)) {
        libCOMI_gv_cM_FenixVOTalandarRecalled[EventPlayer()] = true;
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("FenixNameChangeTalandar", -1), PlayerGroupSingle(EventPlayer()));
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(EventPlayer()), libCOMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_COMI_E1D5A0CD"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        return true;
    }

    if (((libCOMI_gv_cM_FenixVOTransmissionFirstPlay[1][lv_player] == true) || (RandomInt(1, 100) <= libCOMI_gv_cMC_FenixVOTransmissionProbablity) || (TimerGetRemaining(libCOMI_gv_cM_FenixVOTransmissionTimer) <= 0.0))) {
        libCOMI_gv_cM_FenixVOTransmissionFirstPlay[1][lv_player] = false;
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ZealotSuit", -1), PlayerGroupAll());
        TimerStart(libCOMI_gv_cM_FenixVOTransmissionTimer, libCOMI_gv_cMC_FenixVOTransmissionTimerDelay, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionFenixZealotSuit_Init () {
    libCOMI_gt_CM_AbilityTransmissionFenixZealotSuit = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionFenixZealotSuit_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixZealotSuit, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionFenixZealotSuit, null, AbilityCommand("SOASummonFenix", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixDragoonSuit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionFenixDragoonSuit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cM_FenixVOTalandarRecalled[EventPlayer()] == false) && (TechTreeUpgradeCount(EventPlayer(), "AStrongHeart", c_techCountCompleteOnly) > 0)) {
        libCOMI_gv_cM_FenixVOTalandarRecalled[EventPlayer()] = true;
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("FenixNameChangeTalandar", -1), PlayerGroupSingle(EventPlayer()));
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(UnitGetOwner(lv_unit)), libCOMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_COMI_F5F41020"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        return true;
    }

    if (((libCOMI_gv_cM_FenixVOTransmissionFirstPlay[2][lv_player] == true) || (RandomInt(1, 100) <= libCOMI_gv_cMC_FenixVOTransmissionProbablity) || (TimerGetRemaining(libCOMI_gv_cM_FenixVOTransmissionTimer) <= 0.0))) {
        libCOMI_gv_cM_FenixVOTransmissionFirstPlay[2][lv_player] = false;
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_DragoonSuit", -1), PlayerGroupAll());
        TimerStart(libCOMI_gv_cM_FenixVOTransmissionTimer, libCOMI_gv_cMC_FenixVOTransmissionTimerDelay, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionFenixDragoonSuit_Init () {
    libCOMI_gt_CM_AbilityTransmissionFenixDragoonSuit = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionFenixDragoonSuit_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixDragoonSuit, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionFenixDragoonSuit, null, AbilityCommand("SOASummonFenixDragoon", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixArbiterSuit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionFenixArbiterSuit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cM_FenixVOTalandarRecalled[lv_player] == false) && (TechTreeUpgradeCount(lv_player, "AStrongHeart", c_techCountCompleteOnly) > 0)) {
        libCOMI_gv_cM_FenixVOTalandarRecalled[lv_player] = true;
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(lv_player), SoundLink("FenixNameChangeTalandar", -1), PlayerGroupSingle(lv_player));
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(lv_player), libCOMI_ge_CampaignMessageType_SimpleHint, StringExternal("Param/Value/lib_COMI_33A1F80A"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        return true;
    }

    if (((libCOMI_gv_cM_FenixVOTransmissionFirstPlay[3][lv_player] == true) || (RandomInt(1, 100) <= libCOMI_gv_cMC_FenixVOTransmissionProbablity) || (TimerGetRemaining(libCOMI_gv_cM_FenixVOTransmissionTimer) <= 0.0))) {
        libCOMI_gv_cM_FenixVOTransmissionFirstPlay[3][lv_player] = false;
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(lv_player), SoundLink("FenixCommander_ArbiterSuit", -1), libCOOC_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_player));
        TimerStart(libCOMI_gv_cM_FenixVOTransmissionTimer, libCOMI_gv_cMC_FenixVOTransmissionTimerDelay, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionFenixArbiterSuit_Init () {
    libCOMI_gt_CM_AbilityTransmissionFenixArbiterSuit = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionFenixArbiterSuit_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixArbiterSuit, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionFenixArbiterSuit, null, AbilityCommand("SOASummonFenixArbiter", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionFenixMassRecall
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionFenixMassRecall_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_MassRecall", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionFenixMassRecall_Init () {
    libCOMI_gt_CM_AbilityTransmissionFenixMassRecall = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionFenixMassRecall_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionFenixMassRecall, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionFenixMassRecall, null, AbilityCommand("ArbiterMPRecall", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_HeroTransmissionFenixHeroDies
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_HeroTransmissionFenixHeroDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingUnit() != EventUnit()))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libCOMI_gv_cM_Fenix_HeroGroup[lv_player], EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "FenixCoop")) {
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ZealotSuitDestroyed", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }

    if ((UnitGetType(EventUnit()) == "FenixDragoon")) {
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_DragoonSuitDestroyed", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }

    if ((UnitGetType(EventUnit()) == "FenixArbiter")) {
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(UnitGetOwner(EventUnit())), SoundLink("FenixCommander_ArbiterSuitDestroyed", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_HeroTransmissionFenixHeroDies_Init () {
    libCOMI_gt_CM_HeroTransmissionFenixHeroDies = TriggerCreate("libCOMI_gt_CM_HeroTransmissionFenixHeroDies_Func");
    TriggerEnable(libCOMI_gt_CM_HeroTransmissionFenixHeroDies, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_HeroTransmissionFenixHeroDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_HeroTransmissionFenixHeroRepaired
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_HeroTransmissionFenixHeroRepaired_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    string auto895F5F62_val;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    auto895F5F62_val = UnitGetType(EventUnit());
    if (auto895F5F62_val == UnitGetType(libCOMI_gv_cM_Fenix_Suits[1][lv_player])) {
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(lv_player), SoundLink("FenixCommander_ZealotSuitReady", -1), PlayerGroupSingle(lv_player));
    }
    else if (auto895F5F62_val == UnitGetType(libCOMI_gv_cM_Fenix_Suits[2][lv_player])) {
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(lv_player), SoundLink("FenixCommander_DragoonSuitReady", -1), PlayerGroupSingle(lv_player));
    }
    else if (auto895F5F62_val == UnitGetType(libCOMI_gv_cM_Fenix_Suits[3][lv_player])) {
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(lv_player), SoundLink("FenixCommander_ArbiterSuitReady", -1), PlayerGroupSingle(lv_player));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_HeroTransmissionFenixHeroRepaired_Init () {
    libCOMI_gt_CM_HeroTransmissionFenixHeroRepaired = TriggerCreate("libCOMI_gt_CM_HeroTransmissionFenixHeroRepaired_Func");
    TriggerEnable(libCOMI_gt_CM_HeroTransmissionFenixHeroRepaired, false);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_HeroTransmissionFenixHeroRepaired, null, "SOASummonFenixCooldownDummy", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_HeroTransmissionFenixHeroRepaired, null, "SOASummonFenixDragoonCooldownDummy", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(libCOMI_gt_CM_HeroTransmissionFenixHeroRepaired, null, "SOASummonFenixArbiterCooldownDummy", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_HeroTransmissionFenixNameChange
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_HeroTransmissionFenixNameChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gv_cM_FenixVOTalandarRecalled[EventPlayer()] = true;
    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), SoundLink("FenixNameChangeTalandar", -1), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_HeroTransmissionFenixNameChange_Init () {
    libCOMI_gt_CM_HeroTransmissionFenixNameChange = TriggerCreate("libCOMI_gt_CM_HeroTransmissionFenixNameChange_Func");
    TriggerEnable(libCOMI_gt_CM_HeroTransmissionFenixNameChange, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_HeroTransmissionFenixNameChange, null, AbilityCommand("ForgeResearch", 16), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaGlevig
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionDehakaGlevig_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("DehakaCommander_SummonGlevig", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionDehakaGlevig_Init () {
    libCOMI_gt_CM_AbilityTransmissionDehakaGlevig = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionDehakaGlevig_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionDehakaGlevig, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionDehakaGlevig, null, AbilityCommand("DehakaGlevigTopBar", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaMurvar
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionDehakaMurvar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("DehakaCommander_SummonMurvar", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionDehakaMurvar_Init () {
    libCOMI_gt_CM_AbilityTransmissionDehakaMurvar = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionDehakaMurvar_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionDehakaMurvar, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionDehakaMurvar, null, AbilityCommand("DehakaMurvarTopBar", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaDakrun
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionDehakaDakrun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("DehakaCommander_SummonDakrun", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionDehakaDakrun_Init () {
    libCOMI_gt_CM_AbilityTransmissionDehakaDakrun = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionDehakaDakrun_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionDehakaDakrun, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionDehakaDakrun, null, AbilityCommand("DehakaDakrunTopBar", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaPrimalWurm
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionDehakaPrimalWurm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("DehakaCommander_SummonPrimalWurm", -1), PlayerGroupAll());
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(15.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionDehakaPrimalWurm_Init () {
    libCOMI_gt_CM_AbilityTransmissionDehakaPrimalWurm = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionDehakaPrimalWurm_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionDehakaPrimalWurm, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionDehakaPrimalWurm, null, AbilityCommand("DehakaNydusDestroyerTopBar", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionDehakaGlevigConstruct
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_UnitTransmissionDehakaGlevigConstruct_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "DehakaGlevigStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnitProgressUnit())), SoundLink("DehakaCommander_ConstructGlevig", -1), PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_UnitTransmissionDehakaGlevigConstruct_Init () {
    libCOMI_gt_CM_UnitTransmissionDehakaGlevigConstruct = TriggerCreate("libCOMI_gt_CM_UnitTransmissionDehakaGlevigConstruct_Func");
    TriggerEnable(libCOMI_gt_CM_UnitTransmissionDehakaGlevigConstruct, false);
    TriggerAddEventUnitConstructProgress(libCOMI_gt_CM_UnitTransmissionDehakaGlevigConstruct, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionDehakaMurvarConstruct
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_UnitTransmissionDehakaMurvarConstruct_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "DehakaMurvarStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnitProgressUnit())), SoundLink("DehakaCommander_ConstructMurvar", -1), PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_UnitTransmissionDehakaMurvarConstruct_Init () {
    libCOMI_gt_CM_UnitTransmissionDehakaMurvarConstruct = TriggerCreate("libCOMI_gt_CM_UnitTransmissionDehakaMurvarConstruct_Func");
    TriggerEnable(libCOMI_gt_CM_UnitTransmissionDehakaMurvarConstruct, false);
    TriggerAddEventUnitConstructProgress(libCOMI_gt_CM_UnitTransmissionDehakaMurvarConstruct, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionDehakaDakrunConstruct
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_UnitTransmissionDehakaDakrunConstruct_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "DehakaDakrunStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnitProgressUnit())), SoundLink("DehakaCommander_ConstructDakrun", -1), PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_UnitTransmissionDehakaDakrunConstruct_Init () {
    libCOMI_gt_CM_UnitTransmissionDehakaDakrunConstruct = TriggerCreate("libCOMI_gt_CM_UnitTransmissionDehakaDakrunConstruct_Func");
    TriggerEnable(libCOMI_gt_CM_UnitTransmissionDehakaDakrunConstruct, false);
    TriggerAddEventUnitConstructProgress(libCOMI_gt_CM_UnitTransmissionDehakaDakrunConstruct, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaChangeReminderLevel
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderLevel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DehakaCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(libCOMI_gv_cM_DehakaVOLearnReminderTimer) <= 0.0)) {
        TimerStart(libCOMI_gv_cM_DehakaVOLearnReminderTimer, libCOMI_gv_cMC_DehakaVOLearnReminderDelay, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderLevel_Init () {
    libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderLevel = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderLevel_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderLevel, false);
    TriggerAddEventUnitGainLevel(libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderLevel, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaChangeReminderLearn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderLearn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DehakaCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_HeroCanSpendSkillPoint(EventUnit(), AbilityCommandGetAbility(EventUnitAbility())) == false)) {
        libNtve_gf_StopTimer(libCOMI_gv_cM_DehakaVOLearnReminderTimer);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderLearn_Init () {
    libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderLearn = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderLearn_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderLearn, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderLearn, null, libCOMI_gv_dataDehakaLearnAbilCmdLink, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaChangeReminderTimerExpire
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gv_cM_DehakaVODehakaPlayer, SoundLink("DehakaCommander_ChangeReminder", -1), PlayerGroupSingle(libCOMI_gv_cM_DehakaVODehakaPlayer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire_Init () {
    libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire, false);
    TriggerAddEventTimer(libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire, libCOMI_gv_cM_DehakaVOLearnReminderTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaWurmStructureBuilt
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "DehakaGlevigStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_DehakaVOWurmStructureAlive = true;
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionDehakaWurmStructureKilled, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt_Init () {
    libCOMI_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt, false);
    TriggerAddEventUnitConstructProgress(libCOMI_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionDehakaWurmStructureKilled
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionDehakaWurmStructureKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "DehakaGlevigStructure"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_DehakaVOWurmStructureAlive = false;
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt, true);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionDehakaWurmStructureKilled_Init () {
    libCOMI_gt_CM_AbilityTransmissionDehakaWurmStructureKilled = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionDehakaWurmStructureKilled_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionDehakaWurmStructureKilled, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_AbilityTransmissionDehakaWurmStructureKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionHornerFleet
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionHornerFleet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("HornerHan_CallFleetUsed", -1), PlayerGroupAll());
    libCOMI_gv_cM_HornerVOFleetOffCooldown = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionHornerFleet_Init () {
    libCOMI_gt_CM_AbilityTransmissionHornerFleet = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionHornerFleet_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionHornerFleet, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionHornerFleet, null, AbilityCommand("HornerAirFleetExecute", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionHornerStation
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionHornerStation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("HornerHan_SpacestationUsed", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionHornerStation_Init () {
    libCOMI_gt_CM_AbilityTransmissionHornerStation = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionHornerStation_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionHornerStation, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionHornerStation, null, AbilityCommand("HHSummonMercenarySpaceStation", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionHornerBomberBuild
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_UnitTransmissionHornerBomberBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "HHBomberPlatform"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_HornerVOBomberBuilt = true;
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionHornerBomberUse, true);
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionHornerBomberReminder, true);
    TimerStart(libCOMI_gv_cM_HornerVOBomberReminderTimer, libCOMI_gv_cMC_HornerVOBomberReminderDelay, false, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_UnitTransmissionHornerBomberBuild_Init () {
    libCOMI_gt_CM_UnitTransmissionHornerBomberBuild = TriggerCreate("libCOMI_gt_CM_UnitTransmissionHornerBomberBuild_Func");
    TriggerEnable(libCOMI_gt_CM_UnitTransmissionHornerBomberBuild, false);
    TriggerAddEventUnitConstructProgress(libCOMI_gt_CM_UnitTransmissionHornerBomberBuild, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionHornerBomberUse
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionHornerBomberUse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libCOMI_gv_cM_HornerVOBomberReminderTimer, libCOMI_gv_cMC_HornerVOBomberReminderDelay, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionHornerBomberUse_Init () {
    libCOMI_gt_CM_AbilityTransmissionHornerBomberUse = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionHornerBomberUse_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionHornerBomberUse, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionHornerBomberUse, null, AbilityCommand("HHBomberPlatformAreaBombTopBarOrder", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionHornerBomberUse, null, AbilityCommand("HHBomberPlatformAreaBombOrder", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionHornerBomberReminder
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionHornerBomberReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitAbilityChargeInfo(libCOMI_gv_cM_GlobalCasterUnit[libCOMI_gv_cM_HornerVOHornerPlayer], AbilityCommand("HHBomberPlatformAreaBombTopBarOrder", 0), c_unitAbilChargeCountLeft) > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(libCOMI_gv_cM_HornerVOHornerPlayer), SoundLink("HornerHan_BomberPlatformReady", -1), PlayerGroupSingle(libCOMI_gv_cM_HornerVOHornerPlayer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionHornerBomberReminder_Init () {
    libCOMI_gt_CM_AbilityTransmissionHornerBomberReminder = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionHornerBomberReminder_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionHornerBomberReminder, false);
    TriggerAddEventTimer(libCOMI_gt_CM_AbilityTransmissionHornerBomberReminder, libCOMI_gv_cM_HornerVOBomberReminderTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreateReaper
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionTychusCreateReaper_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_ReaperReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionTychusCreateReaper_Init () {
    libCOMI_gt_CM_AbilityTransmissionTychusCreateReaper = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionTychusCreateReaper_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusCreateReaper, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionTychusCreateReaper, null, AbilityCommand("TychusBarracksTrain", 3), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreateWarhound
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionTychusCreateWarhound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_WarhoundReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionTychusCreateWarhound_Init () {
    libCOMI_gt_CM_AbilityTransmissionTychusCreateWarhound = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionTychusCreateWarhound_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusCreateWarhound, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionTychusCreateWarhound, null, AbilityCommand("TychusFactoryTrain", 3), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreateFirebat
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionTychusCreateFirebat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_FirebatReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionTychusCreateFirebat_Init () {
    libCOMI_gt_CM_AbilityTransmissionTychusCreateFirebat = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionTychusCreateFirebat_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusCreateFirebat, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionTychusCreateFirebat, null, AbilityCommand("TychusBarracksTrain", 1), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreateMarauder
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionTychusCreateMarauder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_MarauderReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionTychusCreateMarauder_Init () {
    libCOMI_gt_CM_AbilityTransmissionTychusCreateMarauder = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionTychusCreateMarauder_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusCreateMarauder, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionTychusCreateMarauder, null, AbilityCommand("TychusBarracksTrain", 4), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreateHERC
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionTychusCreateHERC_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_HERCReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionTychusCreateHERC_Init () {
    libCOMI_gt_CM_AbilityTransmissionTychusCreateHERC = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionTychusCreateHERC_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusCreateHERC, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionTychusCreateHERC, null, AbilityCommand("TychusFactoryTrain", 1), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreateGhost
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionTychusCreateGhost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_GhostReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionTychusCreateGhost_Init () {
    libCOMI_gt_CM_AbilityTransmissionTychusCreateGhost = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionTychusCreateGhost_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusCreateGhost, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionTychusCreateGhost, null, AbilityCommand("TychusBarracksTrain", 2), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreatePhantom
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionTychusCreatePhantom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_SpectreReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionTychusCreatePhantom_Init () {
    libCOMI_gt_CM_AbilityTransmissionTychusCreatePhantom = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionTychusCreatePhantom_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusCreatePhantom, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionTychusCreatePhantom, null, AbilityCommand("TychusBarracksTrain", 5), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusCreateMedic
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionTychusCreateMedic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(EventUnit()), SoundLink("TychusCommander_MedicReady", -1), PlayerGroupSingle(UnitGetOwner(EventUnit())));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionTychusCreateMedic_Init () {
    libCOMI_gt_CM_AbilityTransmissionTychusCreateMedic = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionTychusCreateMedic_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusCreateMedic, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionTychusCreateMedic, null, AbilityCommand("TychusBarracksTrain", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusOdinUse
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionTychusOdinUse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("TychusCommander_OdinUsed", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionTychusOdinUse_Init () {
    libCOMI_gt_CM_AbilityTransmissionTychusOdinUse = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionTychusOdinUse_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusOdinUse, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionTychusOdinUse, null, AbilityCommand("TychusCalldownOdinTargeted", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusTransportUse
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionTychusTransportUse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_GPReminderDisable(UnitGetOwner(EventUnit()));
    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAllyNew(UnitGetOwner(EventUnit())), SoundLink("TychusCommander_MedivacUsed", -1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionTychusTransportUse_Init () {
    libCOMI_gt_CM_AbilityTransmissionTychusTransportUse = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionTychusTransportUse_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusTransportUse, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_AbilityTransmissionTychusTransportUse, null, AbilityCommand("TychusMedicTransportLoadUnits", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AbilityTransmissionTychusTransportReminder
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbilityTransmissionTychusTransportReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TimerGetRemaining(libCOMI_gv_cM_TychusVOTransportFlairCooldownTimer) <= 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gv_cM_TychusVOTychusPlayer, SoundLink("TychusCommander_MedivacPlatformReminder", -1), PlayerGroupSingle(libCOMI_gv_cM_TychusVOTychusPlayer));
    TriggerEnable(libCOMI_gt_CM_UnitTransmissionTychusTransportBuild, false);
    TriggerEnable(TriggerGetCurrent(), false);
    TimerStart(libCOMI_gv_cM_TychusVOTransportFlairCooldownTimer, libCOMI_gv_cMC_TychusVOTransportFlairCooldown, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbilityTransmissionTychusTransportReminder_Init () {
    libCOMI_gt_CM_AbilityTransmissionTychusTransportReminder = TriggerCreate("libCOMI_gt_CM_AbilityTransmissionTychusTransportReminder_Func");
    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusTransportReminder, false);
    TriggerAddEventTimer(libCOMI_gt_CM_AbilityTransmissionTychusTransportReminder, libCOMI_gv_cM_TychusVOTransportReminderTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusTransportBuild
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_UnitTransmissionTychusTransportBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitProgressUnit()) == "TychusMedivacPlatform"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMI_gt_CM_AbilityTransmissionTychusTransportReminder, false);
    libNtve_gf_StopTimer(libCOMI_gv_cM_TychusVOTransportReminderTimer);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_UnitTransmissionTychusTransportBuild_Init () {
    libCOMI_gt_CM_UnitTransmissionTychusTransportBuild = TriggerCreate("libCOMI_gt_CM_UnitTransmissionTychusTransportBuild_Func");
    TriggerEnable(libCOMI_gt_CM_UnitTransmissionTychusTransportBuild, false);
    TriggerAddEventUnitConstructProgress(libCOMI_gt_CM_UnitTransmissionTychusTransportBuild, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusOutlawFirstDeath
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_UnitTransmissionTychusOutlawFirstDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libCOMI_gf_EventTychusHero()) != UserDataGetUnit("CoopTechTychusSquad", "Tychus", "Unit Type", 1))) {
        libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(libCOMI_gf_EventTychusHero()), SoundLink("TychusCommander_OutlawDeath", -1), PlayerGroupSingle(UnitGetOwner(libCOMI_gf_EventTychusHero())));
    }
    else {
        libCOMI_gf_CM_CommanderVOSend(UnitGetOwner(libCOMI_gf_EventTychusHero()), SoundLink("TychusHeroVO_Death", -1), PlayerGroupSingle(UnitGetOwner(libCOMI_gf_EventTychusHero())));
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_UnitTransmissionTychusOutlawFirstDeath_Init () {
    libCOMI_gt_CM_UnitTransmissionTychusOutlawFirstDeath = TriggerCreate("libCOMI_gt_CM_UnitTransmissionTychusOutlawFirstDeath_Func");
    TriggerEnable(libCOMI_gt_CM_UnitTransmissionTychusOutlawFirstDeath, false);
    libCOMI_gf_TychusHeroEvent(libCOMI_gt_CM_UnitTransmissionTychusOutlawFirstDeath, "Event_TychusHeroDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusOutlawDeath
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_UnitTransmissionTychusOutlawDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(libCOMI_gf_EventTychusHero()) != UserDataGetUnit("CoopTechTychusSquad", "Tychus", "Unit Type", 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libCOMI_gt_CM_UnitTransmissionTychusOutlawReviveReminder) == true) && (TimerGetRemaining(libCOMI_gv_cM_TychusVOOutlawReviveReminderTimer) <= 0.0)) {
        TimerStart(libCOMI_gv_cM_TychusVOOutlawReviveReminderTimer, libCOMI_gv_cMC_TychusVOOutlawReviveReminderDelay, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_UnitTransmissionTychusOutlawDeath_Init () {
    libCOMI_gt_CM_UnitTransmissionTychusOutlawDeath = TriggerCreate("libCOMI_gt_CM_UnitTransmissionTychusOutlawDeath_Func");
    TriggerEnable(libCOMI_gt_CM_UnitTransmissionTychusOutlawDeath, false);
    libCOMI_gf_TychusHeroEvent(libCOMI_gt_CM_UnitTransmissionTychusOutlawDeath, "Event_TychusHeroDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusOutlawRevived
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_UnitTransmissionTychusOutlawRevived_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(libCOMI_gf_EventTychusHero()) != UserDataGetUnit("CoopTechTychusSquad", "Tychus", "Unit Type", 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(libCOMI_gv_cM_TychusVOOutlawReviveReminderTimer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_UnitTransmissionTychusOutlawRevived_Init () {
    libCOMI_gt_CM_UnitTransmissionTychusOutlawRevived = TriggerCreate("libCOMI_gt_CM_UnitTransmissionTychusOutlawRevived_Func");
    TriggerEnable(libCOMI_gt_CM_UnitTransmissionTychusOutlawRevived, false);
    libCOMI_gf_TychusHeroEvent(libCOMI_gt_CM_UnitTransmissionTychusOutlawRevived, "Event_TychusHeroRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusOutlawReviveReminder
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_UnitTransmissionTychusOutlawReviveReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gv_cM_TychusVOTychusPlayer, SoundLink("TychusCommander_ReviveOutlaw", -1), PlayerGroupSingle(libCOMI_gv_cM_TychusVOTychusPlayer));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_UnitTransmissionTychusOutlawReviveReminder_Init () {
    libCOMI_gt_CM_UnitTransmissionTychusOutlawReviveReminder = TriggerCreate("libCOMI_gt_CM_UnitTransmissionTychusOutlawReviveReminder_Func");
    TriggerEnable(libCOMI_gt_CM_UnitTransmissionTychusOutlawReviveReminder, false);
    TriggerAddEventTimer(libCOMI_gt_CM_UnitTransmissionTychusOutlawReviveReminder, libCOMI_gv_cM_TychusVOOutlawReviveReminderTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusOutlawRecruitAvailable
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libCOMI_gv_cM_TychusVOOutlawRecruitReminderTimer, libCOMI_gv_cMC_TychusVOOutlawRecruitReminderDelay, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable_Init () {
    libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable = TriggerCreate("libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable_Func");
    TriggerEnable(libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable, false);
    TriggerAddEventGeneric(libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable, "TychusHeroAvailable");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusOutlawRecruited
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruited_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGetType(libCOMI_gf_EventTychusHero()) != UserDataGetUnit("CoopTechTychusSquad", "Tychus", "Unit Type", 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(libCOMI_gv_cM_TychusVOOutlawRecruitReminderTimer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruited_Init () {
    libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruited = TriggerCreate("libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruited_Func");
    TriggerEnable(libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruited, false);
    libCOMI_gf_TychusHeroEvent(libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruited, "Event_TychusHeroCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_UnitTransmissionTychusOutlawRecruitReminder
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruitReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOMI_gv_cM_TychusVOTychusPlayer, SoundLink("TychusCommander_RecruitOutlaw", -1), PlayerGroupSingle(libCOMI_gv_cM_TychusVOTychusPlayer));
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruitReminder_Init () {
    libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruitReminder = TriggerCreate("libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruitReminder_Func");
    TriggerEnable(libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruitReminder, false);
    TriggerAddEventTimer(libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruitReminder, libCOMI_gv_cM_TychusVOOutlawRecruitReminderTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ArtifactTransmission_Hint
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_ArtifactTransmission_Hint_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_CM_Zeratul_ProphecyHintLevel(libCOMI_gf_CM_ZeratulProphecyEventGetArtifactNumber()) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CM_ZeratulProphecyEventGetPlayer(), SoundLink("ZeratulCommander_FindArtifact", -1), libCOOC_gf_CC_PlayersOfCommander("ProtossZeratul"));
    Wait(60.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_ArtifactTransmission_Hint_Init () {
    libCOMI_gt_CM_ArtifactTransmission_Hint = TriggerCreate("libCOMI_gt_CM_ArtifactTransmission_Hint_Func");
    TriggerEnable(libCOMI_gt_CM_ArtifactTransmission_Hint, false);
    libCOMI_gf_CM_ZeratulProphecyEvent(libCOMI_gt_CM_ArtifactTransmission_Hint, "ZeratulEvent_ArtifactMissed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ArtifactTransmission_PickedUp
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_ArtifactTransmission_PickedUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto2560BE39_val;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_CM_ZeratulProphecyEventGetArtifactNumber() <= 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libCOMI_gv_cM_ArtifactTransmission_SelectAbilityReminder, 45.0, false, c_timeGame);
    auto2560BE39_val = libCOMI_gf_CM_ZeratulProphecyEventGetArtifactNumber();
    if (auto2560BE39_val == 3) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CM_ZeratulProphecyEventGetPlayer(), SoundLink("ZeratulCommander_CompleteArtifact", -1), libCOOC_gf_CC_PlayersOfCommander("ProtossZeratul"));
    }
    else {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CM_ZeratulProphecyEventGetPlayer(), SoundLink("ZeratulCommander_ObtainArtifact", -1), libCOOC_gf_CC_PlayersOfCommander("ProtossZeratul"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_ArtifactTransmission_PickedUp_Init () {
    libCOMI_gt_CM_ArtifactTransmission_PickedUp = TriggerCreate("libCOMI_gt_CM_ArtifactTransmission_PickedUp_Func");
    TriggerEnable(libCOMI_gt_CM_ArtifactTransmission_PickedUp, false);
    libCOMI_gf_CM_ZeratulProphecyEvent(libCOMI_gt_CM_ArtifactTransmission_PickedUp, "ZeratulEvent_ArtifactPickedUp");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ArtifactTransmission_ProphecyCast
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_ArtifactTransmission_ProphecyCast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libNtve_gf_UnitInRegion(libCOMI_gv_cM_ZeratulProphecyArtifact, RegionCircle(UnitGetPosition(DataTableGetUnit(false, TriggerEventParamName(("ZeratulEvent_ProphecyCastStart"), "ZeratulEventUnit"))), 14.0)) == false)) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CM_ZeratulProphecyEventGetPlayer(), SoundLink("ZeratulCommander_FindArtifact", -1), libCOOC_gf_CC_PlayersOfCommander("ProtossZeratul"));
        Wait(libCOMI_gv_cMC_ZeratulVOTransmissionProphacyCastDelay, c_timeGame);
    }

    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_ArtifactTransmission_ProphecyCast_Init () {
    libCOMI_gt_CM_ArtifactTransmission_ProphecyCast = TriggerCreate("libCOMI_gt_CM_ArtifactTransmission_ProphecyCast_Func");
    TriggerEnable(libCOMI_gt_CM_ArtifactTransmission_ProphecyCast, false);
    libCOMI_gf_CM_ZeratulProphecyEvent(libCOMI_gt_CM_ArtifactTransmission_ProphecyCast, "ZeratulEvent_ProphecyCastStart");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ArtifactTransmission_Upgraded
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_ArtifactTransmission_Upgraded_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((PlayerCommander(EventPlayer()) == "Zeratul"))) {
            return false;
        }

        if (!(((EventUpgradeName() == "ZeratulArtifactUpgradeTier0A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier0B") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier0C") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier1A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier1B") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier1C") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier2A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier2B") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier2C") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier3A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier3B")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(libCOMI_gv_cM_ArtifactTransmission_SelectAbilityReminder, true);
    libCOMI_gf_CM_CommanderVOSend(EventPlayer(), SoundLink("ZeratulCommander_AbilitySelected", -1), libCOOC_gf_CC_PlayersOfCommander("ProtossZeratul"));
    if (((EventUpgradeName() == "ZeratulArtifactUpgradeTier3A") || (EventUpgradeName() == "ZeratulArtifactUpgradeTier3B"))) {
        libCOMI_gf_CM_CommanderVOAbilityWatch(EventPlayer(), SoundLink("ZeratulCommander_AbilityReady", -1), "Abil/ZeratulTopBarUltimateWarpTrain", null);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_ArtifactTransmission_Upgraded_Init () {
    libCOMI_gt_CM_ArtifactTransmission_Upgraded = TriggerCreate("libCOMI_gt_CM_ArtifactTransmission_Upgraded_Func");
    TriggerEnable(libCOMI_gt_CM_ArtifactTransmission_Upgraded, false);
    TriggerAddEventUpgradeLevelChanged(libCOMI_gt_CM_ArtifactTransmission_Upgraded, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_ArtifactTransmission_SelectAbilityReminder
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_ArtifactTransmission_SelectAbilityReminder_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerOfCommanderInGroupFirst("ProtossZeratul", libCOOC_gf_CommanderPlayers()), SoundLink("ZeratulCommander_SelectAbility", -1), libCOOC_gf_CC_PlayersOfCommander("ProtossZeratul"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_ArtifactTransmission_SelectAbilityReminder_Init () {
    libCOMI_gt_CM_ArtifactTransmission_SelectAbilityReminder = TriggerCreate("libCOMI_gt_CM_ArtifactTransmission_SelectAbilityReminder_Func");
    TriggerEnable(libCOMI_gt_CM_ArtifactTransmission_SelectAbilityReminder, false);
    TriggerAddEventTimer(libCOMI_gt_CM_ArtifactTransmission_SelectAbilityReminder, libCOMI_gv_cM_ArtifactTransmission_SelectAbilityReminder);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOResourceSent
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_VOResourceSent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventResourceTradeAmount(c_resourceTypeMinerals) == 0)) {
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOVespeneSent), PlayerGroupSingle(libCOOC_gf_CC_PlayerAlly(EventPlayer())));
    }
    else if ((EventResourceTradeAmount(c_resourceTypeVespene) == 0)) {
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOMineralsSent), PlayerGroupSingle(libCOOC_gf_CC_PlayerAlly(EventPlayer())));
    }
    else if (true) {
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOResourcesSent), PlayerGroupSingle(libCOOC_gf_CC_PlayerAlly(EventPlayer())));
    }
    libCOMI_gf_CM_CommanderVOSend(EventPlayer(), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(libCOOC_gf_CC_PlayerAlly(EventPlayer())), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOThankyou), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_VOResourceSent_Init () {
    libCOMI_gt_CM_VOResourceSent = TriggerCreate("libCOMI_gt_CM_VOResourceSent_Func");
    TriggerEnable(libCOMI_gt_CM_VOResourceSent, false);
    TriggerAddEventResourceTrade(libCOMI_gt_CM_VOResourceSent, c_playerAny, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOResourceRequest
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_VOResourceRequest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventResourceRequestAmount(c_resourceTypeMinerals) == 0)) {
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOVespeneRequested), PlayerGroupSingle(libCOOC_gf_CC_PlayerAlly(EventPlayer())));
    }
    else if ((EventResourceRequestAmount(c_resourceTypeVespene) == 0)) {
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOMineralsRequested), PlayerGroupSingle(libCOOC_gf_CC_PlayerAlly(EventPlayer())));
    }
    else if (true) {
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(EventPlayer()), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(EventPlayer()), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOResourcesRequested), PlayerGroupSingle(libCOOC_gf_CC_PlayerAlly(EventPlayer())));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_VOResourceRequest_Init () {
    libCOMI_gt_CM_VOResourceRequest = TriggerCreate("libCOMI_gt_CM_VOResourceRequest_Func");
    TriggerEnable(libCOMI_gt_CM_VOResourceRequest, false);
    TriggerAddEventResourceRequest(libCOMI_gt_CM_VOResourceRequest, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOEnemySpotted
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_VOEnemySpotted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enemyPlayer;
    int lv_userPlayer;
    unit lv_enemyUnit;

    // Automatic Variable Declarations
    string auto14B6B300_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), UnitGetOwner(EventUnitTarget())) == true)) {
        lv_userPlayer = UnitGetOwner(EventUnitTarget());
    }
    else if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnitTarget()), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true)) {
        lv_enemyPlayer = UnitGetOwner(EventUnitTarget());
        lv_enemyUnit = EventUnitTarget();
    }
    if ((PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), EventPlayer()) == true)) {
        lv_userPlayer = EventPlayer();
    }
    else if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnitTarget()), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true)) {
        lv_enemyPlayer = EventPlayer();
        lv_enemyUnit = EventUnit();
    }
    if (((lv_enemyPlayer == 0) || (lv_userPlayer == 0))) {
        return true;
    }

    if (((lv_enemyUnit == null) || (PlayerRace(3) != libCOMI_gf_GetUnitRace(lv_enemyUnit)))) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto14B6B300_val = PlayerRace(lv_enemyPlayer);
    if (auto14B6B300_val == "Prot") {
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(lv_userPlayer), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(lv_userPlayer), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsProtoss), PlayerGroupAll());
    }
    else if (auto14B6B300_val == "Terr") {
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(lv_userPlayer), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(lv_userPlayer), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsTerran), PlayerGroupAll());
    }
    else if (auto14B6B300_val == "Zerg") {
        libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(lv_userPlayer), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(lv_userPlayer), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsZerg), PlayerGroupAll());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_VOEnemySpotted_Init () {
    libCOMI_gt_CM_VOEnemySpotted = TriggerCreate("libCOMI_gt_CM_VOEnemySpotted_Func");
    TriggerEnable(libCOMI_gt_CM_VOEnemySpotted, false);
    TriggerAddEventUnitAttacked2(libCOMI_gt_CM_VOEnemySpotted, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOUnitsLostCheck
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_VOUnitsLostCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_lastKnownArmySize;
    fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_highestArmySize;
    fixed lv_currentArmySize;
    int lv_indexPlayer;
    unit lv_indexUnit;
    fixed[libCOOC_gv_cCC_MAXPLAYERS + 1] lv_percentThreshold;

    // Automatic Variable Declarations
    playergroup auto6F85AF09_g;
    playergroup autoBA9689F6_g;
    unitgroup auto7D09EFD3_g;
    int auto7D09EFD3_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto6F85AF09_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto6F85AF09_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer) == "ZergZagara")) {
            lv_percentThreshold[lv_indexPlayer] = 0.2;
        }
        else {
            lv_percentThreshold[lv_indexPlayer] = 0.4;
        }
    }
    while (true) {
        Wait(10.0, c_timeGame);
        if ((libCOMI_gf_GameIsOver() == true)) {
            return true;
        }

        autoBA9689F6_g = libCOOC_gf_CommanderPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoBA9689F6_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            lv_currentArmySize = 0;
            auto7D09EFD3_g = UnitGroup(null, lv_indexPlayer, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
            auto7D09EFD3_u = UnitGroupCount(auto7D09EFD3_g, c_unitCountAll);
            for (;; auto7D09EFD3_u -= 1) {
                lv_indexUnit = UnitGroupUnitFromEnd(auto7D09EFD3_g, auto7D09EFD3_u);
                if (lv_indexUnit == null) { break; }
                if (((UnitTestState(lv_indexUnit, c_unitStateUsingSupply) == false) || ((libNtve_gf_UnitIsHidden(lv_indexUnit) == true) && (libNtve_gf_UnitIsInsideTransport(lv_indexUnit) == false)))) {
                    continue;
                }

                lv_currentArmySize += UnitGetPropertyFixed(lv_indexUnit, c_unitPropSuppliesUsed, c_unitPropCurrent);
            }
            if ((lv_currentArmySize > lv_highestArmySize[lv_indexPlayer])) {
                lv_highestArmySize[lv_indexPlayer] = lv_currentArmySize;
                continue;
            }

            if (((lv_lastKnownArmySize[lv_indexPlayer] - lv_currentArmySize) >= 10.0) && ((lv_currentArmySize / lv_highestArmySize[lv_indexPlayer]) <= lv_percentThreshold[lv_indexPlayer]) && ((lv_highestArmySize[lv_indexPlayer] - lv_currentArmySize) >= 20.0)) {
                libCOMI_gf_CM_CommanderVOSend(libCOOC_gf_CC_PlayerAlly(lv_indexPlayer), libCOOC_gf_CC_CommanderVOLine(libCOOC_gf_ActiveCommanderForPlayer(lv_indexPlayer), libCOOC_ge_CC_CommanderVOLines_CC_CommanderVOArmyLost), PlayerGroupAll());
                Wait(60.0, c_timeGame);
                TriggerExecute(libCOMI_gt_CM_VOUnitsLostCheck, true, false);
                return true;
            }

            lv_lastKnownArmySize[lv_indexPlayer] = lv_currentArmySize;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_VOUnitsLostCheck_Init () {
    libCOMI_gt_CM_VOUnitsLostCheck = TriggerCreate("libCOMI_gt_CM_VOUnitsLostCheck_Func");
    TriggerEnable(libCOMI_gt_CM_VOUnitsLostCheck, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOEnemyCloakedSpotted
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_VOEnemyCloakedSpotted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_userPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitFilterMatch(EventUnitTarget(), EventPlayer(), UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) || (PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), UnitGetOwner(EventUnitTarget())) == true) || (libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnitTarget()), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == false) || (TriggerQueueIsEmpty() == false))) {
        return true;
    }

    lv_userPlayer = EventPlayer();
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconDetectPing", UnitGetPosition(EventUnitTarget()), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 10.0, 270.0);
    libCOMI_gf_SendMissionTransmission("CloakedUnitsSpotted", true, lv_userPlayer);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_VOEnemyCloakedSpotted_Init () {
    libCOMI_gt_CM_VOEnemyCloakedSpotted = TriggerCreate("libCOMI_gt_CM_VOEnemyCloakedSpotted_Func");
    TriggerEnable(libCOMI_gt_CM_VOEnemyCloakedSpotted, false);
    TriggerAddEventUnitAttacked2(libCOMI_gt_CM_VOEnemyCloakedSpotted, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TransmissionSend
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TransmissionSend_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UserDataSetInt("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "PlayingNow", 1, 1);
    if ((libCOMI_gv_cM_TransmissionSource != -1) && (PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), libCOMI_gv_cM_TransmissionSource) == true)) {
        if (((libCOMI_gv_cM_TransmissionCurrentType == "AttackWave") || (libCOMI_gv_cM_TransmissionCurrentType == "CloakedUnitsSpotted"))) {
            ConversationDataSetListenerGender("acAttackWave", libCOOC_gf_CC_CommanderGender(libCOOC_gf_ActiveCommanderForPlayer(libCOOC_gf_CC_PlayerAlly(libCOMI_gv_cM_TransmissionSource))));
        }

        UserDataSetInt("PlayerCommanders", libCOOC_gf_ActiveCommanderForPlayer(libCOMI_gv_cM_TransmissionSource), "SendingTransmission", 1, 1);
    }
    else {
        if (((libCOMI_gv_cM_TransmissionCurrentType == "AttackWave") || (libCOMI_gv_cM_TransmissionCurrentType == "CloakedUnitsSpotted"))) {
            ConversationDataSetListenerGender("acAttackWave", c_genderDefault);
        }

    }
    libCOMI_gf_CM_TransmissionUpdateConvoPlayers(UserDataGetGameLink("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "Conversation", 1));
    ConversationDataRun(UserDataGetGameLink("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "Conversation", 1), libCOOC_gf_NondefeatedPlayers(), c_conversationSkipNone, true);
    while (!((libCOMI_gf_CM_PlayerHasTransmission(1) == false) && (libCOMI_gf_CM_PlayerHasTransmission(2) == false))) {
        Wait(0.0625, c_timeGame);
    }
    if ((RandomInt(1, 100) <= UserDataGetInt("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "ResponseChance", 1))) {
        ConversationDataRun("acResponses", libCOOC_gf_NondefeatedPlayers(), c_conversationSkipNone, true);
        while (!((libCOMI_gf_CM_PlayerHasTransmission(1) == false) && (libCOMI_gf_CM_PlayerHasTransmission(2) == false))) {
            Wait(0.0625, c_timeGame);
        }
    }

    UserDataSetInt("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "PlayingNow", 1, 0);
    libCOMI_gv_cM_TransmissionCurrentType = null;
    if ((libCOMI_gv_cM_TransmissionSource != -1) && (PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), libCOMI_gv_cM_TransmissionSource) == true)) {
        UserDataSetInt("PlayerCommanders", libCOOC_gf_ActiveCommanderForPlayer(libCOMI_gv_cM_TransmissionSource), "SendingTransmission", 1, 0);
    }

    libCOMI_gv_cM_TransmissionCount += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TransmissionSend_Init () {
    libCOMI_gt_CM_TransmissionSend = TriggerCreate("libCOMI_gt_CM_TransmissionSend_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SendTransmissionCampaignTick
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SendTransmissionCampaignTick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libCOMI_gv_cM_SendTransmissionCampaignIndex == 0) && (libCOMI_gv_cM_SendTransmissionCampaignPlayingTick > 0)) {
            libCOMI_gv_cM_SendTransmissionCampaignPlayingTick -= 1;
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SendTransmissionCampaignTick_Init () {
    libCOMI_gt_CM_SendTransmissionCampaignTick = TriggerCreate("libCOMI_gt_CM_SendTransmissionCampaignTick_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DropPod_Zerg_Don'tWait
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DropPod_Zerg_DontWait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_DropPod_Zerg_Wait(libCOMI_gv_cM_DropPod_TP_Location, libCOMI_gv_cM_DropPod_TP_Units, libCOMI_gv_cM_DropPod_TP_Player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DropPod_Zerg_DontWait_Init () {
    libCOMI_gt_CM_DropPod_Zerg_DontWait = TriggerCreate("libCOMI_gt_CM_DropPod_Zerg_DontWait_Func");
    TriggerEnable(libCOMI_gt_CM_DropPod_Zerg_DontWait, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DropPod_Terran_Don'tWait
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DropPod_Terran_DontWait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_DropPod_Terran_Wait(libCOMI_gv_cM_DropPod_TP_Location, libCOMI_gv_cM_DropPod_TP_Units, libCOMI_gv_cM_DropPod_TP_Player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DropPod_Terran_DontWait_Init () {
    libCOMI_gt_CM_DropPod_Terran_DontWait = TriggerCreate("libCOMI_gt_CM_DropPod_Terran_DontWait_Func");
    TriggerEnable(libCOMI_gt_CM_DropPod_Terran_DontWait, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignUnitTeaching
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignUnitTeaching_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoD03D3C7E_g;
    int autoD03D3C7E_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoD03D3C7E_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD03D3C7E_u = UnitGroupCount(autoD03D3C7E_g, c_unitCountAll);
    for (;; autoD03D3C7E_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoD03D3C7E_g, autoD03D3C7E_u);
        if (lv_indexUnit == null) { break; }
        if (((UnitGetOwner(lv_indexUnit) == 1) || (UnitGetOwner(lv_indexUnit) == 2))) {
            libCOMI_gf_CM_UseUnitNameAsUnitTip(lv_indexUnit);
            libCOMI_gf_CM_ApplyCampaignTeachingToUnit(lv_indexUnit);
        }

        if (((UnitFilterMatch(lv_indexUnit, 1, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true) || (UnitFilterMatch(lv_indexUnit, 1, UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            libCOMI_gf_CM_UseUnitNameAsUnitTip(lv_indexUnit);
        }

    }
    TriggerEnable(libCOMI_gt_CM_CampaignUnitCreated, true);
    TriggerEnable(libCOMI_gt_CM_CampaignUnitChangeOwner, true);
    TriggerEnable(libCOMI_gt_CM_CampaignUnitInfoUnitMorphes, true);
    TriggerEnable(libCOMI_gt_CM_CampaignLaserDrillCreated, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignUnitTeaching_Init () {
    libCOMI_gt_CM_CampaignUnitTeaching = TriggerCreate("libCOMI_gt_CM_CampaignUnitTeaching_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignUnitCreated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignUnitCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOOC_gf_CommanderPlayers(), UnitGetOwner(EventUnitCreatedUnit())) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitCreatedUnit(), UnitGetOwner(EventUnitCreatedUnit()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_UseUnitNameAsUnitTip(EventUnitCreatedUnit());
    libCOMI_gf_CM_ApplyCampaignTeachingToUnit(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignUnitCreated_Init () {
    libCOMI_gt_CM_CampaignUnitCreated = TriggerCreate("libCOMI_gt_CM_CampaignUnitCreated_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignUnitCreated, false);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_CampaignUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignCyberneticsSelected
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignCyberneticsSelected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "CyberneticsCore"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libCOMI_gt_CM_CampaignCyberneticsDestroyed, false);
    libCOOC_gv_pCX_UpgradesTaught = true;
    libNtve_gf_KillModel(libCOMI_gv_cM_UpgradeReticle);
    TextTagDestroy(libCOMI_gv_cM_UpgradeTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignCyberneticsSelected_Init () {
    libCOMI_gt_CM_CampaignCyberneticsSelected = TriggerCreate("libCOMI_gt_CM_CampaignCyberneticsSelected_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignCyberneticsSelected, false);
    TriggerAddEventUnitSelected(libCOMI_gt_CM_CampaignCyberneticsSelected, null, 1, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignCybCoreBuilding
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignCybCoreBuilding_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "CyberneticsCore"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TextTagDestroy(libCOMI_gv_cM_CybCoreTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignCybCoreBuilding_Init () {
    libCOMI_gt_CM_CampaignCybCoreBuilding = TriggerCreate("libCOMI_gt_CM_CampaignCybCoreBuilding_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignCybCoreBuilding, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_CampaignCybCoreBuilding, null, AbilityCommand("CyberneticsCoreResearch", 14), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignCyberneticsDestroyed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignCyberneticsDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libCOMI_gt_CM_CampaignCyberneticsSelected, false);
    libNtve_gf_KillModel(libCOMI_gv_cM_UpgradeReticle);
    TextTagDestroy(libCOMI_gv_cM_UpgradeTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignCyberneticsDestroyed_Init () {
    libCOMI_gt_CM_CampaignCyberneticsDestroyed = TriggerCreate("libCOMI_gt_CM_CampaignCyberneticsDestroyed_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignCyberneticsDestroyed, false);
    TriggerAddEventUnitDied(libCOMI_gt_CM_CampaignCyberneticsDestroyed, UnitRefFromVariable("libCOMI_gv_cM_UpgradeUnit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignLaserDrillCreated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignLaserDrillCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DrakkenLaserDrillCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.5, c_timeGame);
    libCOMI_gf_CM_UseUnitNameAsUnitTip(EventUnit());
    libCOMI_gf_CM_ApplyCampaignTeachingToUnit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignLaserDrillCreated_Init () {
    libCOMI_gt_CM_CampaignLaserDrillCreated = TriggerCreate("libCOMI_gt_CM_CampaignLaserDrillCreated_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignLaserDrillCreated, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_CampaignLaserDrillCreated, null, AbilityCommand("ConstructDrakkenLaserDrillCoop", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignLaserDrillSelected
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignLaserDrillSelected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DrakkenLaserDrillCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TextTagDestroy(libCOMI_gv_cM_DrillTextTagCreated);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignLaserDrillSelected_Init () {
    libCOMI_gt_CM_CampaignLaserDrillSelected = TriggerCreate("libCOMI_gt_CM_CampaignLaserDrillSelected_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignLaserDrillSelected, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_CampaignLaserDrillSelected, null, AbilityCommand("DrakkenLaserDrillResearch", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignLaserDrillDamaged
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignLaserDrillDamaged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "DamagedDrakkenLaserDrillCoop"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TextTagDestroy(libCOMI_gv_cM_DrillTextTagCreated);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignLaserDrillDamaged_Init () {
    libCOMI_gt_CM_CampaignLaserDrillDamaged = TriggerCreate("libCOMI_gt_CM_CampaignLaserDrillDamaged_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignLaserDrillDamaged, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_CampaignLaserDrillDamaged, null, AbilityCommand("BrokenDrakkenLaserDrill", 0), c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignSolarForgeSelected
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignSolarForgeSelected_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SolarForge"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TextTagDestroy(libCOMI_gv_cM_SolarForgeTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignSolarForgeSelected_Init () {
    libCOMI_gt_CM_CampaignSolarForgeSelected = TriggerCreate("libCOMI_gt_CM_CampaignSolarForgeSelected_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignSolarForgeSelected, false);
    TriggerAddEventUnitAbility(libCOMI_gt_CM_CampaignSolarForgeSelected, null, AbilityCommand("SolarForgeResearch", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignUnitChangeOwner
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignUnitChangeOwner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_UseUnitNameAsUnitTip(EventUnit());
    libCOMI_gf_CM_ApplyCampaignTeachingToUnit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignUnitChangeOwner_Init () {
    libCOMI_gt_CM_CampaignUnitChangeOwner = TriggerCreate("libCOMI_gt_CM_CampaignUnitChangeOwner_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignUnitChangeOwner, false);
    TriggerAddEventUnitChangeOwner(libCOMI_gt_CM_CampaignUnitChangeOwner, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignUnitInfoUnitMorphes
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignUnitInfoUnitMorphes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_UseUnitNameAsUnitTip(EventUnit());
    libCOMI_gf_CM_ApplyCampaignTeachingToUnit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignUnitInfoUnitMorphes_Init () {
    libCOMI_gt_CM_CampaignUnitInfoUnitMorphes = TriggerCreate("libCOMI_gt_CM_CampaignUnitInfoUnitMorphes_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignUnitInfoUnitMorphes, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignMissionPerfLog
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignMissionPerfLog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeReal);
        PerfTestGetFPS();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignMissionPerfLog_Init () {
    libCOMI_gt_CM_CampaignMissionPerfLog = TriggerCreate("libCOMI_gt_CM_CampaignMissionPerfLog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignMissionInitialize
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignMissionInitialize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) {
        TriggerExecute(libCOMI_gt_CM_CoopAI_InitAIDebugging, true, false);
        TriggerExecute(libCOMI_gt_CM_DebugGiveOfflineControl, true, false);
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_9E760929"), false);
    libCOMI_gf_CM_CampaignMissionInit();
    libCOOC_gf_CC_StatRecordMapStart();
    TriggerExecute(libCOMI_gv_cM_CampaignMissionStartTrigger, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignMissionInitialize_Init () {
    libCOMI_gt_CM_CampaignMissionInitialize = TriggerCreate("libCOMI_gt_CM_CampaignMissionInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignMissionPerfTestEnable
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignMissionPerfTestEnable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_680811E4"), true);
    libCOMI_gv_cM_CampaignMissionPerfTest = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignMissionPerfTestEnable_Init () {
    libCOMI_gt_CM_CampaignMissionPerfTestEnable = TriggerCreate("libCOMI_gt_CM_CampaignMissionPerfTestEnable_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_CampaignMissionPerfTestEnable, c_playerAny, "logperf", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignMissionIntroZoomIn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignMissionIntroZoomIn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_originalDistance;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto3DF840ED_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    CinematicFade(true, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    auto3DF840ED_g = libCOOC_gf_CommanderPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto3DF840ED_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        lv_originalDistance = CameraGetDistance(lv_indexPlayer);
        CameraSetValue(lv_indexPlayer, c_cameraValueDistance, (lv_originalDistance+8.0), 0.0, -1, 10.0);
        CameraSetValue(lv_indexPlayer, c_cameraValueDistance, lv_originalDistance, 1.5, -1, 10.0);
    }
    Wait(1.5, c_timeGame);
    libCOMI_gf_CinematicModeCampaign(false, 1.0, false);
    UnitPauseAll(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignMissionIntroZoomIn_Init () {
    libCOMI_gt_CM_CampaignMissionIntroZoomIn = TriggerCreate("libCOMI_gt_CM_CampaignMissionIntroZoomIn_Func");
}

void libCOMI_InitTriggers () {
    libCOMI_gt_VoidPingSound_Init();
    libCOMI_gt_CM_DebugAbathurBiomassReport_Init();
    libCOMI_gt_CM_DebugAIPersonalityChange_Init();
    libCOMI_gt_CM_DebugHeroReviveInstant_Init();
    libCOMI_gt_CM_DebugCommanderCooldowns_Init();
    libCOMI_gt_CM_DebugApplySkin_Init();
    libCOMI_gt_CM_DebugTargetSpawnersSet_Init();
    libCOMI_gt_CM_CinematicModeOn_Init();
    libCOMI_gt_CM_CinematicModeOff_Init();
    libCOMI_gt_CM_CoopAI_AIManager_Init();
    libCOMI_gt_CM_CoopAI_AttackWaveSetup_Init();
    libCOMI_gt_CM_CoopAI_AIDetectionManager_Init();
    libCOMI_gt_CM_CoopAI_AttackWavePingManager_Init();
    libCOMI_gt_CM_CoopAI_InitAIDebugging_Init();
    libCOMI_gt_ToggleAIDebugMessages_Init();
    libCOMI_gt_BanelingScourgeDeathrattleScrapDeaths_Init();
    libCOMI_gt_BanelingScourgeEconDrop_Init();
    libCOMI_gt_BanelingScourgeLocusts_Init();
    libCOMI_gt_BanelingScourgeEssenceDrop_Init();
    libCOMI_gt_BanelingScourgeBiomassDrop_Init();
    libCOMI_gt_ShieldColorUnitCreate_Init();
    libCOMI_gt_ShieldColorUnitMorph_Init();
    libCOMI_gt_DeathPreventGrantKillCredit_Init();
    libCOMI_gt_AttackFastBuffHack_Init();
    libCOMI_gt_DmgandAttackSpeedInheritNew_Init();
    libCOMI_gt_DmgandAttackSpeedInheritExisting_Init();
    libCOMI_gt_ConjoinedVitalRegenOnOff_Init();
    libCOMI_gt_CM_TargetLockOrder_Init();
    libCOMI_gt_CM_TargetLockOrderRaven_Init();
    libCOMI_gt_ChronoAnimSpeedOn_Init();
    libCOMI_gt_ChronoAnimSpeedOff_Init();
    libCOMI_gt_SamePlaceRevive_Init();
    libCOMI_gt_MU_CandyBowlMassBuy_Init();
    libCOMI_gt_CM_InstantRevive_Init();
    libCOMI_gt_SupplicantWarpTrain_Init();
    libCOMI_gt_SupplicantActualTrain_Init();
    libCOMI_gt_SupplicantWarpFinish_Init();
    libCOMI_gt_SupplicantWarpCancel_Init();
    libCOMI_gt_StukovSnareBehaviorOn2_Init();
    libCOMI_gt_CM_CargoDeath_Init();
    libCOMI_gt_CM_MasteryVorazunDarkPylonRadius_Init();
    libCOMI_gt_CM_AchievementRaynorBansheesUsed_Init();
    libCOMI_gt_CM_AchievementSwannCombatDropUsed_Init();
    libCOMI_gt_CM_AchievementVorazunBlackHoleUsed_Init();
    libCOMI_gt_CM_AchievementArtanisSolarBombardmentUsed_Init();
    libCOMI_gt_CM_AchievementKaraxSolarLanceUsed_Init();
    libCOMI_gt_CM_AchievementFenixChampionAllExist_Init();
    libCOMI_gt_CreepTumorBuild_Init();
    libCOMI_gt_CM_DebugVictoryS_Init();
    libCOMI_gt_CM_DebugGiveOfflineControl_Init();
    libCOMI_gt_MindControlSupplyOn_Init();
    libCOMI_gt_MindControlSupplyOff_Init();
    libCOMI_gt_BehaviorPermanentlyChangesOwner_Init();
    libCOMI_gt_CM_Abathur_TriggersInit_Init();
    libCOMI_gt_CM_Abathur_ToxicNestDeathFailsafe_Init();
    libCOMI_gt_CM_Abathur_MeleeBonusUpgrade_Init();
    libCOMI_gt_CM_Abathur_BiomassDrop_Init();
    libCOMI_gt_CM_Abathur_BiomassPickup_Init();
    libCOMI_gt_CM_Abathur_BiomassRefund_Init();
    libCOMI_gt_CM_DebugAbathurBiomassLost_Init();
    libCOMI_gt_CM_Abathur_BiomassTrain_Init();
    libCOMI_gt_CM_Abathur_BiomassManualUpdate_Init();
    libCOMI_gt_CM_Abathur_BiomassScaler_Init();
    libCOMI_gt_CM_Abathur_Enemy_Death_Create_Locusts_Init();
    libCOMI_gt_CM_Abathur_ToxicNest_Init();
    libCOMI_gt_CM_Abathur_SwarmHostLocustLaunchCast_Init();
    libCOMI_gt_CM_Abathur_RavagerSpellCooldown_Init();
    libCOMI_gt_CM_Alarak_Upgrade_Init();
    libCOMI_gt_CM_Alarak_Sacrific_Scale_Init();
    libCOMI_gt_CM_AlarakLightningStrikes_FlashOn_Init();
    libCOMI_gt_CM_AlarakLightningStrikes_FlashOff_Init();
    libCOMI_gt_CM_AlarakLightningStrikes_Sacriface_Init();
    libCOMI_gt_CM_Alarak_SoulAbsorption_Impact_Init();
    libCOMI_gt_CM_Alarak_SoulAbsorption_Launch_Init();
    libCOMI_gt_CM_Alarak_EmpowerAdd_Init();
    libCOMI_gt_CM_Alarak_EmpowerRemove_Init();
    libCOMI_gt_CM_Alarak_EmpowerWorshiperAdd_Init();
    libCOMI_gt_CM_Alarak_EmpowerWorshiperRemove_Init();
    libCOMI_gt_CM_Alarak_EmpowerUpdate_Init();
    libCOMI_gt_CM_DehakaGeneThornsOn_Init();
    libCOMI_gt_CM_DehakaDenReviveFootprintOn_Init();
    libCOMI_gt_CM_DehakaDenReviveFootprintOff_Init();
    libCOMI_gt_CM_DehakaDenReviveEatTextTagDead_Init();
    libCOMI_gt_CM_DehakaDenReviveEatTextTagRevived_Init();
    libCOMI_gt_CM_DehakaDenReviveEatUsed_Init();
    libCOMI_gt_CM_DehakaBossFacingSetting_Init();
    libCOMI_gt_CM_DehakaMutaliskReviveCooldownOn_Init();
    libCOMI_gt_CM_DehakaMammothBreathLookAtStart_Init();
    libCOMI_gt_CM_DehakaMammothBreathLookAtStop_Init();
    libCOMI_gt_CM_DehakaConsumeTimeStopHackOn_Init();
    libCOMI_gt_CM_DehakaConsumeExecuted_Init();
    libCOMI_gt_CM_DehakaConsumeDetachFailSafe_Init();
    libCOMI_gt_CM_DehakaConsumeLaunchFailSafe_Init();
    libCOMI_gt_CM_DehakaConsumeEffectHeroic_Init();
    libCOMI_gt_CM_DehakaConsumeLearnLevel2_Init();
    libCOMI_gt_CM_DehakaConsumeLearnLevel3_Init();
    libCOMI_gt_CM_DehakaLearn_Init();
    libCOMI_gt_CM_DehakaPackLeaderGlevigBuilt_Init();
    libCOMI_gt_CM_DehakaPackLeaderMurvarBuilt_Init();
    libCOMI_gt_CM_DehakaPackLeaderDakrunBuilt_Init();
    libCOMI_gt_CM_DehakaReviveGasWorkerBehaviorAdd_Init();
    libCOMI_gt_CM_DehakaReviveGasWorkerBehaviorRemove_Init();
    libCOMI_gt_CM_DehakaReviveEatButtonClicked_Init();
    libCOMI_gt_CM_DehakaReviveTimerAdjustments_Init();
    libCOMI_gt_CM_DehakaLeapRadiusReference_DataInit_Init();
    libCOMI_gt_CM_DehakaGlevigTimerAdjustments_Init();
    libCOMI_gt_CM_DehakaAutocastSettingsOn_Init();
    libCOMI_gt_CM_DehakaAutocastSettingsOff_Init();
    libCOMI_gt_CM_DehakaAutocastBossSummonStateAdjust_Init();
    libCOMI_gt_CM_Dehaka_TriggersInit_Init();
    libCOMI_gt_CM_Dehaka_EssenceDrop_Init();
    libCOMI_gt_CM_Dehaka_EssencePickup_Init();
    libCOMI_gt_CM_Dehaka_EssenceManualUpdate_Init();
    libCOMI_gt_CM_Dehaka_LevelUp_Stage2_ColossusLegs_Init();
    libCOMI_gt_CM_Dehaka_LevelUp_Stage3_Init();
    libCOMI_gt_CM_Dehaka_LevelUp_Stun_Off_Init();
    libCOMI_gt_CM_Dehaka_UnitCostRefund_Init();
    libCOMI_gt_CM_Fenix_AchievementCarrierAmount_Init();
    libCOMI_gt_CM_Fenix_AchievementCarrierResearched_Init();
    libCOMI_gt_CM_Fenix_SentryNullShield_Init();
    libCOMI_gt_CM_Fenix_TaldarinDetonationStore_Init();
    libCOMI_gt_CM_Fenix_TaldarinDetonationRelease_Init();
    libCOMI_gt_CM_Fenix_InitialDummySpawn_Init();
    libCOMI_gt_CM_Fenix_HeroSpawn_Init();
    libCOMI_gt_CM_Fenix_HeroSpawnCleanup_Init();
    libCOMI_gt_CM_Fenix_HeroKilled_Init();
    libCOMI_gt_CM_Fenix_SuicideUpdateVital_Init();
    libCOMI_gt_CM_Fenix_ResearchRemoveSuicide_Init();
    libCOMI_gt_CM_Fenix_RallySetToFenix_Init();
    libCOMI_gt_CM_Fenix_ChampionInitialSetup_Init();
    libCOMI_gt_CM_Fenix_ChampionPotentialVoluteerTrained_Init();
    libCOMI_gt_CM_Fenix_ChampionBuildingReBuilt_Init();
    libCOMI_gt_CM_Fenix_ChampionUpgradeResearched_Init();
    libCOMI_gt_CM_Fenix_ChampionTimers_Init();
    libCOMI_gt_CM_Fenix_ChampionMorphed_Init();
    libCOMI_gt_CM_Fenix_ChampionDies_Init();
    libCOMI_gt_CM_Fenix_NetworkedUnitDies_Init();
    libCOMI_gt_CM_Fenix_ProbiusSwap_Init();
    libCOMI_gt_CM_Fenix_AvengingProtocol_BuffExpires_Init();
    libCOMI_gt_CM_Fenix_ConclaiveTrainStart_Init();
    libCOMI_gt_CM_Fenix_ConclaiveTrainStop_Init();
    libCOMI_gt_CM_Fenix_ChampionAugmentAbilitySoundTrigger_Init();
    libCOMI_gt_CM_Fenix_ChargedBusterOnCost_Init();
    libCOMI_gt_CM_Fenix_ChargedBusterOffCost_Init();
    libCOMI_gt_CM_FenixAutocastSettingsOn_Init();
    libCOMI_gt_CM_FenixAutocastSettingsOff_Init();
    libCOMI_gt_CM_FenixAutocastSuitSummonStateAdjust_Init();
    libCOMI_gt_CM_Fenix_TriggersInit_Init();
    libCOMI_gt_CM_Horner_AirFleet_Activated_Init();
    libCOMI_gt_CM_Horner_DeathRattleHellionFearApply_Init();
    libCOMI_gt_CM_Horner_DeathRattle_Reaper_Init();
    libCOMI_gt_CM_Horner_DeathRattle_WidowMine_Init();
    libCOMI_gt_CM_Horner_DeathRattle_Hellion_Init();
    libCOMI_gt_CM_Horner_DeathRattle_Hellbat_Init();
    libCOMI_gt_CM_Horner_DoubleSupplyStun_Init();
    libCOMI_gt_CM_Horner_MTO_Upgrade_Init();
    libCOMI_gt_CM_Horner_HangerFinish_Init();
    libCOMI_gt_CM_Horner_ScrapDrop_Init();
    libCOMI_gt_CM_Horner_ScrapDropForSwannWreckage_Init();
    libCOMI_gt_CM_Horner_ScrapPickup_Init();
    libCOMI_gt_CM_Horner_SupplyAchievement_Init();
    libCOMI_gt_CM_Horner_StarportCreateTechLabOrder_Init();
    libCOMI_gt_CM_Horner_StarportCreateTechLabStart_Init();
    libCOMI_gt_CM_Horner_StarportCreateTechLabFinish_Init();
    libCOMI_gt_CM_Horner_StarportRecreateTechLabOrder_Init();
    libCOMI_gt_CM_Horner_StarportRecreate_Init();
    libCOMI_gt_CM_Horner_StarportFinishCreateTechLabOrder_Init();
    libCOMI_gt_CM_Horner_BomberPlatform_PlatformCreated_Init();
    libCOMI_gt_CM_Horner_BomberPlatform_PlatformDies_Init();
    libCOMI_gt_CM_Horner_BomberPlatform_BomberLaunched_Init();
    libCOMI_gt_CM_Horner_BomberPlatform_BomberReturned_Init();
    libCOMI_gt_CM_Horner_BomberPlatform_BomberRebuilt_Init();
    libCOMI_gt_CM_Horner_BomberPlatform_TopBar_TargetSelected_Init();
    libCOMI_gt_CM_Horner_BomberPlatform_Individual_TargetSelected_Init();
    libCOMI_gt_CM_Horner_VikingTacticalJumpMorph_Init();
    libCOMI_gt_CM_Horner_MagMines_Init();
    libCOMI_gt_CM_Horner_TriggersInit_Init();
    libCOMI_gt_CM_KaraxUnitReviveBarrier_Init();
    libCOMI_gt_CM_KaraxSolarForgeSOAEnergy_Init();
    libCOMI_gt_CM_MasteryKerriganInstantReviveCooldown_Init();
    libCOMI_gt_KerriganPsiStrike_Init();
    libCOMI_gt_KerriganEconDrop_Init();
    libCOMI_gt_CM_Kerrigan_WeaponSwap_Init();
    libCOMI_gt_CM_LaserDrillBFGActivate_Init();
    libCOMI_gt_CM_LaserDrillNukeActivate_Init();
    libCOMI_gt_CM_LaserDrillBFG_Init();
    libCOMI_gt_LaserDrillBeamSoundRegionClear_Init();
    libCOMI_gt_LaserDrillBeamSoundFiring_Init();
    libCOMI_gt_LaserDrillBFGBeamSoundFiring_Init();
    libCOMI_gt_LaserDrillNukeBeamSoundFiring_Init();
    libCOMI_gt_LaserDrillNukeBeamSoundRegionClear_Init();
    libCOMI_gt_CM_LaserDrillTopbarOrder_Init();
    libCOMI_gt_NovaUnitNames_GenerateNameList_Init();
    libCOMI_gt_NovaUnitNames_Assign_Init();
    libCOMI_gt_NovaUnitNames_KillCountUpdate_Init();
    libCOMI_gt_NovaUnitNames_KillCountUpdateLaserTurret_Init();
    libCOMI_gt_CM_NovaGriffinTransportActived_Init();
    libCOMI_gt_CM_NovaGriffinTransportStop_Init();
    libCOMI_gt_CM_NovaGriffinTransportTimeOut_Init();
    libCOMI_gt_CM_NovaGriffinTransportAirBehaviorApplied_Init();
    libCOMI_gt_CM_NovaGriffinTransportGroundBehaviorApplied_Init();
    libCOMI_gt_CM_NovaGriffinTransportTeleportUnload_Init();
    libCOMI_gt_CM_NovaGriffinBombingRunActivated_Init();
    libCOMI_gt_CM_NovaGriffinBombingRunFinish_Init();
    libCOMI_gt_CM_Nova_TriggersInit_Init();
    libCOMI_gt_CM_NovaSiegeModeProgressiveRangeIncreaseApply_Init();
    libCOMI_gt_CM_NovaPsiStrike_Init();
    libCOMI_gt_CM_Nova_BuildingCompletedTrigger_Init();
    libCOMI_gt_CM_HyperionMinimapIconDynamicFacingDisplay_Init();
    libCOMI_gt_AdvancedConstructionAutoUser_Init();
    libCOMI_gt_AdvancedConstructionAutoAutoCast_Init();
    libCOMI_gt_SwannVespeneDroneTrigger_Init();
    libCOMI_gt_SwannSiegeTankRebuildController_Init();
    libCOMI_gt_SwannThorRebuildController_Init();
    libCOMI_gt_SwannLaserDrillCallForHelp_Init();
    libCOMI_gt_CM_Stukov_FullSupplyCheat_Init();
    libCOMI_gt_CM_Stukov_AutoCreepTumor_Init();
    libCOMI_gt_CM_Stukov_InfestedStructureInitialSpawn_Init();
    libCOMI_gt_CM_Stukov_InfestedStructureRebuilt_Init();
    libCOMI_gt_CM_Stukov_HordeWaveSpawner_Init();
    libCOMI_gt_CM_Stukov_HordeWaveCreated_Init();
    libCOMI_gt_CM_Stukov_HordeWaveExploderCreated_Init();
    libCOMI_gt_CM_Stukov_HordeWaveInteruptionReissueOrder_Init();
    libCOMI_gt_CM_Stukov_RallyPlaced_Init();
    libCOMI_gt_CM_Stukov_RallyToUnitDies_Init();
    libCOMI_gt_CM_Stukov_TriggersInit_Init();
    libCOMI_gt_CM_Stukov_InfestedBunkerAutoLoad_Init();
    libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackBurrow_Init();
    libCOMI_gt_CM_Stukov_InfestedTimedLifeFoodHackTrain_Init();
    libCOMI_gt_CM_Stukov_InfestedBunkerUnloadRally_Init();
    libCOMI_gt_CM_Stukov_InfestedBunkerRegister_Init();
    libCOMI_gt_CM_Stukov_InfestedBunkerInitialSpawn_Init();
    libCOMI_gt_CM_Stukov_UnitCostRefund_Init();
    libCOMI_gt_CM_Stukov_InfestedSiegeTankDeath_Init();
    libCOMI_gt_CM_TychusHERC_ShieldCooldown_Init();
    libCOMI_gt_CM_TychusHERC_CriticalText_Init();
    libCOMI_gt__CM_TychusEventHook_Init();
    libCOMI_gt__CM_TychusStructureEventHook_Init();
    libCOMI_gt_CM_Tychus_OdinSummon_Used_Init();
    libCOMI_gt_CM_Tychus_OdinSummon_CameraShake_Init();
    libCOMI_gt_CM_Tychus_Odin_Timeout_Init();
    libCOMI_gt_CM_Tychus_WarhoundFearApply_Init();
    libCOMI_gt_CM_TychusSpecialistTrainingAuraOn_Init();
    libCOMI_gt_CM_TychusSpecialistTrainingAuraOff_Init();
    libCOMI_gt_CM_TychusMedicTransportActived_Init();
    libCOMI_gt_CM_TychusMedicTopBarButton_Init();
    libCOMI_gt_CM_TychusMedicTransportTargetOn_Init();
    libCOMI_gt_CM_TychusMedicTransportTargetOff_Init();
    libCOMI_gt_CM_TychusMedicTransportStop_Init();
    libCOMI_gt_CM_TychusMedicTransportTimeOut_Init();
    libCOMI_gt_CM_TychusMedicTransportAirBehaviorApplied_Init();
    libCOMI_gt_CM_TychusMedicTransportGroundBehaviorApplied_Init();
    libCOMI_gt_CM_TychusMedicTransportTeleportUnload_Init();
    libCOMI_gt_CM_Tychus_HeroQueue_Init();
    libCOMI_gt_CM_Tychus_HeroCancel_Init();
    libCOMI_gt_CM_Tychus_TrainMaxChargesRemove_Init();
    libCOMI_gt_CM_Tychus_HeroReviveUsed_Init();
    libCOMI_gt_CM_Tychus_HeroReviveFailSafe_Init();
    libCOMI_gt_CM_Tychus_OilBombFireDamageResponse_Init();
    libCOMI_gt_CM_Tychus_UltimateAchievement_Init();
    libCOMI_gt_CM_Tychus_HealAchievement_Init();
    libCOMI_gt_CM_Tychus_SnareFailSafe_Init();
    libCOMI_gt_CM_Tychus_TriggersInit_Init();
    libCOMI_gt_CM_Tychus_TriUnitSpeed_Upgrade_Init();
    libCOMI_gt_CM_Tychus_TriUnitHealth_Upgrade_Init();
    libCOMI_gt_CM_TychusReplaceResearchCenter_Init();
    libCOMI_gt_CM_Tychus_Hero_Charge_Timing_Init();
    libCOMI_gt_CM_Tychus_CalldownOdinDeselect_Init();
    libCOMI_gt_CM_Tychus_CalldownOdinUpdateTarget_Init();
    libCOMI_gt_CM_Tychus_CalldownOdinTychusSelect_Init();
    libCOMI_gt_CM_TychusWarhound_Revive_Init();
    libCOMI_gt_CM_TychusHeroPurchaseDummy_Init();
    libCOMI_gt_CM_TychusReaper_Revive_Init();
    libCOMI_gt_RoachDropScale_Init();
    libCOMI_gt_CM_Zagara_WeaponSwap_Init();
    libCOMI_gt_CM_Zeratul_Entropic_Spawner_Init();
    libCOMI_gt_CM_Zeratul_Devolve_Init();
    libCOMI_gt_CM_ZeratulProphecyEventVision_Init();
    libCOMI_gt_CM_ZeratulProphecyEventArtifactMissed_Init();
    libCOMI_gt_CM_ZeratulProphecyEventArtifactPickedUp_Init();
    libCOMI_gt_CM_ZeratulProphecyEventArtifactRevealed_Init();
    libCOMI_gt_CM_ZeratulProphecyEventArtifactUsed_Init();
    libCOMI_gt_CM_ZeratulProphecyEventProphecyCast_Init();
    libCOMI_gt_CM_Zeratul_TransportDropOff_Init();
    libCOMI_gt_CM_Zeratul_PurificationNova_Finale_Init();
    libCOMI_gt_CM_Zeratul_PurificationNova_Create_Init();
    libCOMI_gt_CM_Zeratul_PurificationNova_MainImpact_Init();
    libCOMI_gt_CM_ZeratulStasisBeamIssueOrder_Init();
    libCOMI_gt_CM_ZeratulStasisBeam_Init();
    libCOMI_gt_CM_Zeratul_ProphecyMiss_Init();
    libCOMI_gt_CM_Zeratul_ProphecyCastStop_Init();
    libCOMI_gt_CM_Zeratul_ProphecyIntroQ_Init();
    libCOMI_gt_CM_Zeratul_ProphecyArtifactPickedUp_Init();
    libCOMI_gt_CM_Zeratul_ProphecyArtifactRevealed_Init();
    libCOMI_gt_CM_Zeratul_ProphecyArtifactDebug_Init();
    libCOMI_gt_CM_ZeratulTopBarWarpTrainStart_Init();
    libCOMI_gt_CM_ZeratulTopBarWarpTrainFinish_Init();
    libCOMI_gt_CM_ZeratulTopBarRallySet_Init();
    libCOMI_gt_CM_ZeratulTopBarRallyRedirect_Init();
    libCOMI_gt_CM_ZeratulTopBarRallyCancel_Init();
    libCOMI_gt_CM_Zeratul_Trade_Init();
    libCOMI_gt_CM_Zeratul_Trade_FullEnergyOn_Init();
    libCOMI_gt_CM_Zeratul_Trade_FullEnergyOff_Init();
    libCOMI_gt_CM_Zeratul_AutomatedAssimilatorAutoBuild_Init();
    libCOMI_gt_CM_Zeratul_ReflectionShield_Init();
    libCOMI_gt_CM_Zeratul_DarkTemplarRetreat_Init();
    libCOMI_gt_CM_Zeratul_WarpPrismAutoUnload_Init();
    libCOMI_gt_CM_Zeratul_WarpPrismAutoUnloadOff_Init();
    libCOMI_gt_CM_Zeratul_WarpPrismSelectRift_Init();
    libCOMI_gt_CM_Zeratul_WarpPrismMorphUnloadState_Init();
    libCOMI_gt_CM_Zeratul_Projection_UnitLink_Init();
    libCOMI_gt_CM_Zeratul_Projection_TimedLifeFate_Init();
    libCOMI_gt_CM_Zeratul_Projection_Cancel_Init();
    libCOMI_gt_CM_Zeratul_DevolveKills_Init();
    libCOMI_gt_CM_Zeratul_ArtifactRush_Init();
    libCOMI_gt_CM_Zeratul_TriggersInit_Init();
    libCOMI_gt_CM_ZeratulArtifactUpgrades_Init();
    libCOMI_gt_CM_ZeratulArtifactTriggerUpgrades_Init();
    libCOMI_gt_CM_Zeratul_StasisDuration_Init();
    libCOMI_gt_CM_ZeratulAvatarMinimapIcon_Init();
    libCOMI_gt_ResourcePickupAllyNew_Init();
    libCOMI_gt_CM_SoAShiftCheatFailSafeThermal_Init();
    libCOMI_gt_CM_SoAShiftCheatFailSafeHHCallFleet_Init();
    libCOMI_gt_CM_SoAShiftCheatFailSafeNovaBombing_Init();
    libCOMI_gt_CM_SoATargetingForceOff_Init();
    libCOMI_gt_CM_SoATargetingDeactivated_Init();
    libCOMI_gt_CM_SoATargetingPointChosen_Init();
    libCOMI_gt_CM_SoATargetingDirectionChosen_Init();
    libCOMI_gt_CM_SoATargetingEffectFired_Init();
    libCOMI_gt_CM_SoATargetingCancel_Init();
    libCOMI_gt_CM_SoATargetingCancelFromUI_Init();
    libCOMI_gt_CM_SoATargetingCameraShake_Init();
    libCOMI_gt_CM_SoAOrbitalStrikeActivated_Init();
    libCOMI_gt_CM_SoAOrbitalStrikeActivatedKarax_Init();
    libCOMI_gt_CM_SoAGravitonBombActivated_Init();
    libCOMI_gt_CM_SoAThermalLanceActivated_Init();
    libCOMI_gt_CM_SoATimeFreezeOn_Init();
    libCOMI_gt_CM_SoATimeFreezeCleanup_Init();
    libCOMI_gt_PM_SoATargetingPurifierBeamOn_Init();
    libCOMI_gt_PM_SoATargetingPurifierBeamOff_Init();
    libCOMI_gt_PM_SoAStrafeActivated_Init();
    libCOMI_gt_PM_SoASuperShieldsActivated_Init();
    libCOMI_gt_CM_SoASuperChronoApply_Init();
    libCOMI_gt_CM_SoASuperChronoCleanup_Init();
    libCOMI_gt_CODConstrucInvulnerableOn_Init();
    libCOMI_gt_CODConstrucInvulnerableOff_Init();
    libCOMI_gt_VoidACShardModifyHealth_Init();
    libCOMI_gt_ExpansionRocksChangeOwner_Init();
    libCOMI_gt_CM_AbortMission_Init();
    libCOMI_gt_CM_MissionScoreScreenExited_Init();
    libCOMI_gt_CM_MissionHandlePlayerQuitGiveResources_Init();
    libCOMI_gt_CM_MissionHandlePlayerQuitGameEnd_Init();
    libCOMI_gt_CM_MissionVictoryCheatEndMission_Init();
    libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute_Init();
    libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueue_Init();
    libCOMI_gt_CM_HatcheryPrimarySearch_Init();
    libCOMI_gt_CM_StartingTech_Init();
    libCOMI_gt_VoicePackDebug_Init();
    libCOMI_gt_CM_HatcheryEggModels_Init();
    libCOMI_gt_CM_HatcheryEggBirths_Init();
    libCOMI_gt_CM_HeroDied_Init();
    libCOMI_gt_CM_NovaRespawnBuyBack_Init();
    libCOMI_gt_CM_NovaRespawnBuyBackCostAdjustment_Init();
    libCOMI_gt_CM_HeroSpawn_Init();
    libCOMI_gt_CM_GlobalCasterInit_Init();
    libCOMI_gt_CM_AutoRevealRegionController_Init();
    libCOMI_gt_CM_GPReminderAbilityUsed_Init();
    libCOMI_gt_CM_AbilityTransmissionRaynorHyperion_Init();
    libCOMI_gt_CM_AbilityTransmissionRaynorBansheesUsed_Init();
    libCOMI_gt_CM_AbilityTransmissionSwannDrone_Init();
    libCOMI_gt_CM_AbilityTransmissionSwannLaserDrill_Init();
    libCOMI_gt_CM_AbilityTransmissionSwannCombatDropUsed_Init();
    libCOMI_gt_CM_AbilityTransmissionKerriganCrushingGrip_Init();
    libCOMI_gt_CM_AbilityTransmissionKerriganAssimilation_Init();
    libCOMI_gt_CM_AbilityTransmissionZagaraRoachDrop_Init();
    libCOMI_gt_CM_AbilityTransmissionArtanisSuperShields_Init();
    libCOMI_gt_CM_AbilityTransmissionVorazunTimeStop_Init();
    libCOMI_gt_CM_AbilityTransmissionKaraxPassiveChronoBoost_Init();
    libCOMI_gt_CM_AbilityTransmissionKaraxChronoMap_Init();
    libCOMI_gt_CM_AbilityTransmissionAbathurMend_Init();
    libCOMI_gt_CM_AbilityTransmissionAlarakEmpower_Init();
    libCOMI_gt_CM_AbilityTransmissionAlarakDeathFleet_Init();
    libCOMI_gt_CM_AbilityTransmissionAlarakOvercharge_Init();
    libCOMI_gt_CM_AbilityTransmissionAlarakSacrifice_Init();
    libCOMI_gt_CM_AbilityTransmissionNovaBombingRun_Init();
    libCOMI_gt_CM_AbilityTransmissionNovaTransport_Init();
    libCOMI_gt_CM_AbilityTransmissionNovaDMatrix_Init();
    libCOMI_gt_CM_AbilityTransmissionStukovAleksander_Init();
    libCOMI_gt_CM_AbilityTransmissionStukovApocalisk_Init();
    libCOMI_gt_CM_AbilityTransmissionStukovInfestStructure_Init();
    libCOMI_gt_CM_AbilityTransmissionFenixCreateTalis_Init();
    libCOMI_gt_CM_AbilityTransmissionFenixCreateKaldalis_Init();
    libCOMI_gt_CM_AbilityTransmissionFenixCreateTaldarin_Init();
    libCOMI_gt_CM_AbilityTransmissionFenixCreateWarbringer_Init();
    libCOMI_gt_CM_AbilityTransmissionFenixCreateMojo_Init();
    libCOMI_gt_CM_AbilityTransmissionFenixCreateClolarion_Init();
    libCOMI_gt_CM_AbilityTransmissionFenixZealotSuit_Init();
    libCOMI_gt_CM_AbilityTransmissionFenixDragoonSuit_Init();
    libCOMI_gt_CM_AbilityTransmissionFenixArbiterSuit_Init();
    libCOMI_gt_CM_AbilityTransmissionFenixMassRecall_Init();
    libCOMI_gt_CM_HeroTransmissionFenixHeroDies_Init();
    libCOMI_gt_CM_HeroTransmissionFenixHeroRepaired_Init();
    libCOMI_gt_CM_HeroTransmissionFenixNameChange_Init();
    libCOMI_gt_CM_AbilityTransmissionDehakaGlevig_Init();
    libCOMI_gt_CM_AbilityTransmissionDehakaMurvar_Init();
    libCOMI_gt_CM_AbilityTransmissionDehakaDakrun_Init();
    libCOMI_gt_CM_AbilityTransmissionDehakaPrimalWurm_Init();
    libCOMI_gt_CM_UnitTransmissionDehakaGlevigConstruct_Init();
    libCOMI_gt_CM_UnitTransmissionDehakaMurvarConstruct_Init();
    libCOMI_gt_CM_UnitTransmissionDehakaDakrunConstruct_Init();
    libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderLevel_Init();
    libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderLearn_Init();
    libCOMI_gt_CM_AbilityTransmissionDehakaChangeReminderTimerExpire_Init();
    libCOMI_gt_CM_AbilityTransmissionDehakaWurmStructureBuilt_Init();
    libCOMI_gt_CM_AbilityTransmissionDehakaWurmStructureKilled_Init();
    libCOMI_gt_CM_AbilityTransmissionHornerFleet_Init();
    libCOMI_gt_CM_AbilityTransmissionHornerStation_Init();
    libCOMI_gt_CM_UnitTransmissionHornerBomberBuild_Init();
    libCOMI_gt_CM_AbilityTransmissionHornerBomberUse_Init();
    libCOMI_gt_CM_AbilityTransmissionHornerBomberReminder_Init();
    libCOMI_gt_CM_AbilityTransmissionTychusCreateReaper_Init();
    libCOMI_gt_CM_AbilityTransmissionTychusCreateWarhound_Init();
    libCOMI_gt_CM_AbilityTransmissionTychusCreateFirebat_Init();
    libCOMI_gt_CM_AbilityTransmissionTychusCreateMarauder_Init();
    libCOMI_gt_CM_AbilityTransmissionTychusCreateHERC_Init();
    libCOMI_gt_CM_AbilityTransmissionTychusCreateGhost_Init();
    libCOMI_gt_CM_AbilityTransmissionTychusCreatePhantom_Init();
    libCOMI_gt_CM_AbilityTransmissionTychusCreateMedic_Init();
    libCOMI_gt_CM_AbilityTransmissionTychusOdinUse_Init();
    libCOMI_gt_CM_AbilityTransmissionTychusTransportUse_Init();
    libCOMI_gt_CM_AbilityTransmissionTychusTransportReminder_Init();
    libCOMI_gt_CM_UnitTransmissionTychusTransportBuild_Init();
    libCOMI_gt_CM_UnitTransmissionTychusOutlawFirstDeath_Init();
    libCOMI_gt_CM_UnitTransmissionTychusOutlawDeath_Init();
    libCOMI_gt_CM_UnitTransmissionTychusOutlawRevived_Init();
    libCOMI_gt_CM_UnitTransmissionTychusOutlawReviveReminder_Init();
    libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruitAvailable_Init();
    libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruited_Init();
    libCOMI_gt_CM_UnitTransmissionTychusOutlawRecruitReminder_Init();
    libCOMI_gt_CM_ArtifactTransmission_Hint_Init();
    libCOMI_gt_CM_ArtifactTransmission_PickedUp_Init();
    libCOMI_gt_CM_ArtifactTransmission_ProphecyCast_Init();
    libCOMI_gt_CM_ArtifactTransmission_Upgraded_Init();
    libCOMI_gt_CM_ArtifactTransmission_SelectAbilityReminder_Init();
    libCOMI_gt_CM_VOResourceSent_Init();
    libCOMI_gt_CM_VOResourceRequest_Init();
    libCOMI_gt_CM_VOEnemySpotted_Init();
    libCOMI_gt_CM_VOUnitsLostCheck_Init();
    libCOMI_gt_CM_VOEnemyCloakedSpotted_Init();
    libCOMI_gt_CM_TransmissionSend_Init();
    libCOMI_gt_CM_SendTransmissionCampaignTick_Init();
    libCOMI_gt_CM_DropPod_Zerg_DontWait_Init();
    libCOMI_gt_CM_DropPod_Terran_DontWait_Init();
    libCOMI_gt_CM_CampaignUnitTeaching_Init();
    libCOMI_gt_CM_CampaignUnitCreated_Init();
    libCOMI_gt_CM_CampaignCyberneticsSelected_Init();
    libCOMI_gt_CM_CampaignCybCoreBuilding_Init();
    libCOMI_gt_CM_CampaignCyberneticsDestroyed_Init();
    libCOMI_gt_CM_CampaignLaserDrillCreated_Init();
    libCOMI_gt_CM_CampaignLaserDrillSelected_Init();
    libCOMI_gt_CM_CampaignLaserDrillDamaged_Init();
    libCOMI_gt_CM_CampaignSolarForgeSelected_Init();
    libCOMI_gt_CM_CampaignUnitChangeOwner_Init();
    libCOMI_gt_CM_CampaignUnitInfoUnitMorphes_Init();
    libCOMI_gt_CM_CampaignMissionPerfLog_Init();
    libCOMI_gt_CM_CampaignMissionInitialize_Init();
    libCOMI_gt_CM_CampaignMissionPerfTestEnable_Init();
    libCOMI_gt_CM_CampaignMissionIntroZoomIn_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libCOMI_InitLib_completed = false;

void libCOMI_InitLib () {
    if (libCOMI_InitLib_completed) {
        return;
    }

    libCOMI_InitLib_completed = true;

    libCOMI_InitLibraries();
    libCOMI_InitVariables();
    libCOMI_InitCustomScript();
    libCOMI_InitTriggers();
}

include "LibCOOC"
include "LibCOUI"
include "LibCOMU"

