#ifndef PS_BOKEH_CIRCULARFILTEROFFSETS
#define PS_BOKEH_CIRCULARFILTEROFFSETS

#define DOF_MAX_RING_COUNT    4

/*
#if PRESET == PRESET_LOW
#define DOF_RING_COUNT    2
#elif PRESET == PRESET_MED // #if PRESET == PRESET_LOW
#define DOF_RING_COUNT    3
#elif PRESET == PRESET_HIGH // #elif PRESET == PRESET_MED // #if PRESET == PRESET_LOW
#define DOF_RING_COUNT    4
#else // #elif PRESET == PRESET_HIGH // #elif PRESET == PRESET_MED // #if PRESET == PRESET_LOW
#error PRESET is not set
#endif // #else // #elif PRESET == PRESET_HIGH // #elif PRESET == PRESET_MED // #if PRESET == PRESET_LOW
*/
#if 1
// Hexagon
static const float3 c_vCircleOffsets[] =
{
    { 0.125000, 	-0.216506, 	1.f },
    { -0.125000, 	-0.216506, 	1.f },
    { -0.250000, 	0.000000, 	1.f },
    { -0.125000, 	0.216506, 	1.f },
    { 0.125000, 	0.216506, 	1.f },
    { 0.250000, 	0.000000, 	1.f },

    { 0.250000, 	-0.433013, 	2.f },
    {0.000000, 	    -0.433013, 	2.f },
    { -0.250000, 	-0.433013, 	2.f },
    {-0.375000, 	-0.216506, 	2.f },
    { -0.500000, 	0.000000, 	2.f },
    {-0.375000, 	0.216506, 	2.f },
    { -0.250000, 	0.433013, 	2.f },
    {0.000000, 	    0.433013, 	2.f },
    { 0.250000, 	0.433013, 	2.f },
    {0.375000, 	    0.216506, 	2.f },
    { 0.500000, 	0.000000, 	2.f },
    {0.375000,  	-0.216506, 	2.f },

    { 0.375000, 	-0.649519, 	3.f },
    {0.187500, 	    -0.649519, 	3.f },
    {0.000000, 	    -0.649519, 	3.f },
    {-0.187500, 	-0.649519, 	3.f },
    { -0.375000, 	-0.649519, 	3.f },
    {-0.468750, 	-0.487139, 	3.f },
    {-0.562500, 	-0.324760, 	3.f },
    {-0.656250, 	-0.162380, 	3.f },
    { -0.750000, 	0.000000, 	3.f },
    {-0.656250, 	0.162380, 	3.f },
    {-0.562500, 	0.324760, 	3.f },
    {-0.468750, 	0.487139, 	3.f },
    { -0.375000, 	0.649519, 	3.f },
    {-0.187500, 	0.649519, 	3.f },
    {0.000000, 	    0.649519, 	3.f },
    {0.187500, 	    0.649519, 	3.f },
    { 0.375000, 	0.649519, 	3.f },
    {0.468750, 	    0.487139, 	3.f },
    {0.562500, 	    0.324760, 	3.f },
    {0.656250, 	    0.162380, 	3.f },
    { 0.750000, 	0.000000, 	3.f },
    {0.656250, 	    -0.162380, 	3.f },
    {0.562500, 	    -0.324760, 	3.f },
    {0.468750, 	    -0.487139, 	3.f },

    { 0.500000, 	-0.866025, 	4.f },
    {0.300000, 	    -0.866025, 	4.f },
    {0.100000, 	    -0.866025, 	4.f },
    {-0.100000, 	-0.866025, 	4.f },
    {-0.300000, 	-0.866025, 	4.f },
    { -0.500000, 	-0.866025, 	4.f },
    {-0.600000, 	-0.692820, 	4.f },
    {-0.700000, 	-0.519615, 	4.f },
    {-0.800000, 	-0.346410, 	4.f },
    {-0.900000, 	-0.173205, 	4.f },
    { -1.000000, 	0.000000, 	4.f },
    {-0.900000, 	0.173205, 	4.f },
    {-0.800000, 	0.346410, 	4.f },
    {-0.700000, 	0.519615, 	4.f },
    {-0.600000, 	0.692820, 	4.f },
    { -0.500000, 	0.866025, 	4.f },
    {-0.300000, 	0.866025, 	4.f },
    {-0.100000, 	0.866025, 	4.f },
    {0.100000, 	    0.866025, 	4.f },
    {0.300000, 	    0.866025, 	4.f },
    { 0.500000, 	0.866025, 	4.f },
    {0.600000, 	    0.692820, 	4.f },
    {0.700000, 	    0.519615, 	4.f },
    {0.800000, 	    0.346410, 	4.f },
    {0.900000, 	    0.173205, 	4.f },
    { 1.000000, 	0.000000, 	4.f },
    {0.900000, 	    -0.173205, 	4.f },
    {0.800000, 	    -0.346410, 	4.f },
    {0.700000, 	    -0.519615, 	4.f },
    {0.600000, 	    -0.692820, 	4.f },
};

static const int ringSampleCount[] = { 0, 6, 18, 42, 72 };
static const float ringNormFactor[] = { 1.0, 0.142857f, 0.052631f, 0.023255f, 0.013888f };

#else
static const float3 c_vCircleOffsets[] =
{
    {  0.2310, -0.0957, 1.0 },
    { -0.2310,  0.0957, 1.0 },
    { -0.2310, -0.0957, 1.0 },
    {  0.2310,  0.0957, 1.0 },
    { -0.0957, -0.2310, 1.0 },
    {  0.0957,  0.2310, 1.0 },
    {  0.0957, -0.2310, 1.0 },
    { -0.0957,  0.2310, 1.0 },
    { -0.3536,  0.3536, 2.0 },
    {  0.3536, -0.3536, 2.0 },
    {  0.4619, -0.1913, 2.0 },
    { -0.4619,  0.1913, 2.0 },
    { -0.5000,  0.0000, 2.0 },
    {  0.5000,  0.0000, 2.0 },
    { -0.4619, -0.1913, 2.0 },
    {  0.4619,  0.1913, 2.0 },
    { -0.3536, -0.3536, 2.0 },
    {  0.3536,  0.3536, 2.0 },
    { -0.1913, -0.4619, 2.0 },
    {  0.1913,  0.4619, 2.0 },
    { -0.0000, -0.5000, 2.0 },
    {  0.0000,  0.5000, 2.0 },
    {  0.1913, -0.4619, 2.0 },
    { -0.1913,  0.4619, 2.0 },
    {  0.4566, -0.5950, 3.0 },
    { -0.4566,  0.5950, 3.0 },
    { -0.5950,  0.4566, 3.0 },
    {  0.5950, -0.4566, 3.0 },
    {  0.6929, -0.2870, 3.0 },
    { -0.6929,  0.2870, 3.0 },
    { -0.7436,  0.0979, 3.0 },
    {  0.7436, -0.0979, 3.0 },
    { -0.7436, -0.0979, 3.0 },
    {  0.7436,  0.0979, 3.0 },
    { -0.6929, -0.2870, 3.0 },
    {  0.6929,  0.2870, 3.0 },
    { -0.5950, -0.4566, 3.0 },
    {  0.5950,  0.4566, 3.0 },
    {  0.4566,  0.5950, 3.0 },
    { -0.4566, -0.5950, 3.0 },
    { -0.2870, -0.6929, 3.0 },
    {  0.2870,  0.6929, 3.0 },
    { -0.0979, -0.7436, 3.0 },
    {  0.0979,  0.7436, 3.0 },
    { -0.0979,  0.7436, 3.0 },
    {  0.0979, -0.7436, 3.0 },
    {  0.2870, -0.6929, 3.0 },
    { -0.2870,  0.6929, 3.0 },
    { -0.5556,  0.8315, 4.0 },
    {  0.5556, -0.8315, 4.0 },
    { -0.7071,  0.7071, 4.0 },
    {  0.7071, -0.7071, 4.0 },
    {  0.8315, -0.5556, 4.0 },
    { -0.8315,  0.5556, 4.0 },
    {  0.9239, -0.3827, 4.0 },
    { -0.9239,  0.3827, 4.0 },
    {  0.9808, -0.1951, 4.0 },
    { -0.9808,  0.1951, 4.0 },
    { -1.0000,  0.0000, 4.0 },
    {  1.0000,  0.0000, 4.0 },
    { -0.9808, -0.1951, 4.0 },
    {  0.9808,  0.1951, 4.0 },
    { -0.9239, -0.3827, 4.0 },
    {  0.9239,  0.3827, 4.0 },
    {  0.8315,  0.5556, 4.0 },
    { -0.8315, -0.5556, 4.0 },
    { -0.7071, -0.7071, 4.0 },
    {  0.7071,  0.7071, 4.0 },
    { -0.5556, -0.8315, 4.0 },
    {  0.5556,  0.8315, 4.0 },
    { -0.3827, -0.9239, 4.0 },
    {  0.3827,  0.9239, 4.0 },
    {  0.1951,  0.9808, 4.0 },
    { -0.1951, -0.9808, 4.0 },
    { -0.0000, -1.0000, 4.0 },
    {  0.0000,  1.0000, 4.0 },
    {  0.1951, -0.9808, 4.0 },
    { -0.1951,  0.9808, 4.0 },
    {  0.3827, -0.9239, 4.0 },
    { -0.3827,  0.9239, 4.0 },
};

static const int ringSampleCount[] = { 0, 8, 24, 48, 80 };
static const float ringNormFactor[] = { 1.0, 0.111111, 0.040000, 0.020408, 0.012346 };
#endif

#endif // Inclusion guard