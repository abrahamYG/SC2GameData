/// # Remove Ability
///
/// Removes an ability from a unit.
native void UnitAbilityRemove(
    unit inUnit,                    /// * Unit               :: unit
    string inBehavior               /// * Ability            :: gamelink<Abil>
);

/// # Add Ability
///
/// Added ability may not be able to be cast without command buttons. You can set a ability to automaticly create command button, by go to the ability's Command+ field, and assigne default button for them. "Use Default Button" and "Create Default Button" flags needs to be check to allow the button to be auto created. The position of the auto-created button can be set in the Button data.
native void UnitAbilityAdd(
    unit inUnit,                    /// * Unit               :: unit
    string inBehavior               /// * Ability            :: gamelink<Abil>
);

/// # Unit Ability Order State (Flags)
native int UnitAbilOrderStateFlags(
    unit inUnit,                    /// * Unit               :: unit
    order abilityCommand            /// * Ability Command    :: order
);

/// # Replace Unit Ability
native void UnitAbilityChangeLink(
    unit inUnit,                    /// * Unit               :: unit
    string ability,                 /// * Ability            :: gamelink<Abil>
    string newAbility               /// * New Ability        :: gamelink<Abil>
);

/// # Set Ability Default Submenu
native void UnitAbilityChangeCardId(
    unit inUnit,                    /// * Unit               :: unit
    string ability,                 /// * Ability            :: gamelink<Abil>
    string submenuCardId            /// * Submenu Card Id    :: string
);

/// # Unit Ability Default Submenu
native string UnitAbilityGetCardId(
    unit inUnit,                    /// * Unit               :: unit
    string ability                  /// * Ability            :: gamelink<Abil>
);

/// # Reset Unit Learn Ability
///
/// Reset the specified learn ability on the specified unit.
native void UnitLearnAbilResetLevel(
    unit inUnit,                    /// * Unit               :: unit
    string learnAbility,            /// * Learn Ability      :: gamelink<Abil>
    int index                       /// * Index              :: int
);

/// # Add Learn Ability Level For Unit
///
/// Add learned level(s) the specified learn ability index on the specified unit. Consumes skill points.
native void UnitLearnAbilAddLevel(
    unit inUnit,                    /// * Unit               :: unit
    string learnAbility,            /// * Learn Ability      :: gamelink<Abil>
    int index,                      /// * Index              :: int
    int level                       /// * Level              :: int
);

/// # Current Learn Ability Level For Unit
///
/// Returns the current learned level of the specified learn ability index on the specified unit.
native int UnitLearnAbilGetLevel(
    unit inUnit,                    /// * Unit               :: unit
    string learnAbility,            /// * Learn Ability      :: gamelink<Abil>
    int index                       /// * Index              :: int
);

/// # Add Skill Points To Unit Learn Ability
///
/// Adds point(s) to the specified learn ability on the specified unit.
native void UnitLearnAbilAddPoints(
    unit inUnit,                    /// * Unit               :: unit
    string learnAbility,            /// * Learn Ability      :: gamelink<Abil>
    int points                      /// * Points             :: int
);

/// # Learn Ability Skill Point For Unit
///
/// Returns the current point of the specified learn ability on the specified unit.
native int UnitLearnAbilGetPoints(
    unit inUnit,                    /// * Unit               :: unit
    string learnAbility,            /// * Learn Ability      :: gamelink<Abil>
    bool currentTotal               /// * Current/Total      :: Preset<libNtve_ge_CurrentTotalOptions>
);

/// # Actor Scope Move To
native void ActorScopeMoveTo(
    actorscope inActorScope,        /// * Actor Scope        :: actorscope
    actor inActor                   /// * Actor              :: actor
);

/// # Actor Add Orient Update
///
/// Causes StatusSet actor messages to be sent to every on screen actor unit every frame. The status value is based on the facing of the unit.
native void ActorAddOrientUpdate(
    string statusName,              /// * StatusName         :: string
    int divisions                   /// * Divisions          :: int
);

/// # Release Unit
///
/// Releases a unit by setting it back to idle.
native void AIReleaseUnit(
    unit inUnit                     /// * Unit               :: unit
);

/// # Get Scout
///
/// Returns a unit that will be the next scout for a player.
/// The Previous Unit parameter is optional (pass null to it if it is undesired).
/// If no Previous Unit is specified, then this will always return a new scout.
/// If Previous Unit is specified, then this will return that unit, unless there is a better unit type available for scouting, in which case it will return a new unit of that type.
native unit AIGetScout(
    int player,                     /// * Player             :: int
    int indexSlot,                  /// * Index Slot         :: int
    unit previousUnit               /// * Previous Unit      :: unit
);

/// # Call Unit Ability Tactical Script
native void AIExecuteAbilTactical(
    unit inUnit,                    /// * Unit               :: unit
    string scrip,                   /// * Scrip              :: string
    unitgroup scanGroup,            /// * Scan Group         :: unitgroup
    string ability,                 /// * Ability            :: gamelink<Abil>
    unit item                       /// * Item               :: unit
);

/// # Tactical AI Filter Energy
///
/// Sets the specified AI Filter to only include units whose energy is within the specified range.
/// Use this and the other "Tactical AI Filter" actions to set up an AI Filter, which can then be used in a "Tactical AI Filter - Run" function to filter a unit group.
native void AISetFilterEnergy(
    aifilter filter,                /// * Filter             :: aifilter
    fixed min,                      /// * Min                :: fixed
    fixed max                       /// * Max                :: fixed
);

/// # Remove Bank Backup
///
/// Removes the backup bank with specific backup id for the associated playerid
native void BankBackupRemove(
    bank backupBank,                /// * Backup Bank        :: bank
    int backupid,                   /// * Backup Bank Id     :: int
    int playerid                    /// * Player Id          :: int
);

/// # Get Bank Backup Id
///
/// Retrieve the bank backup id associated with the backup bank
native int BankBackupGetId(
    bank backupBank                 /// * Backup Bank        :: bank
);

/// # Get Bank Backup Latest Id
///
/// Retrieve the latest bank backup id associated with the backup bank
native int BankBackupGetLatestId(
    bank backupBank                 /// * Backup Bank        :: bank
);

/// # Restore Bank Backup
///
/// Restores the original bank with the contents from its backup bank with backup id if it exists, for the particular player. The backup bank will always look for your passed in bank name with an appended on "_backup_#" string.
native void BankRestore(
    bank originalBank,              /// * Original Bank      :: bank
    int playerId,                   /// * Player             :: int
    int backupId                    /// * Backup Id          :: int
);

/// # Backup Bank
///
/// Creates a backup of the passed in bank and saves it into another bank with the same name appended with a "_backup_#" string in a backup directory where your banks are saved. This can only be called from either the MapInit event or Generic event.
native void BankBackup(
    bank toBackUp,                  /// * To Backup          :: bank
    int playerId                    /// * PlayerId           :: int
);

/// # Picked Bank Backup
///
/// The current bank backup within the current bank backup iteration.
native bank BankBackupLoopCurrent();

/// # Duration Of Behavior On Unit
///
/// Gets a behavior duration on a unit.
native fixed UnitBehaviorDurationTotal(
    unit inUnit,                    /// * Unit               :: unit
    string behavior                 /// * Behavior           :: gamelink<Behavior>
);

/// # Set Unit Behavior User Data
///
/// Sets a behavior user data on a unit.
native void UnitBehaviorEffectTreeSetUserData(
    unit inUnit,                    /// * Unit               :: unit
    string behavior,                /// * Behavior           :: gamelink<Behavior>
    string userData,                /// * User Data          :: string
    fixed value                     /// * Value              :: fixed
);

/// # User Data Of Behavior On Unit
///
/// Gets a behavior user data on a unit.
native fixed UnitBehaviorEffectTreeUserData(
    unit inUnit,                    /// * Unit               :: unit
    string behavior,                /// * Behavior           :: gamelink<Behavior>
    string userData                 /// * User Data          :: string
);

/// # User Data Of Behavior On Unit Exists
native bool UnitBehaviorEffectTreeUserDataExists(
    unit inUnit,                    /// * Unit               :: unit
    string behavior,                /// * Behavior           :: gamelink<Behavior>
    string userData                 /// * User Data          :: string
);

/// # Unit Attribute Point
///
/// Returns the point count of the an attribute behavior on a unit.
native int UnitGetAttributePoint(
    unit inUnit,                    /// * Unit               :: unit
    string attribute,               /// * Attribute          :: gamelink<Behavior>
    bool baseBonus                  /// * Base/Bonus         :: Preset<libNtve_ge_BaseBonusOptions>
);

/// # Set Unit Attribute Point
///
/// Sets attribute point on a unit.
native void UnitSetAttributePoint(
    unit inUnit,                    /// * Unit               :: unit
    string attribute,               /// * Attribute          :: gamelink<Behavior>
    bool baseBonus,                 /// * Base/Bonus         :: Preset<libNtve_ge_BaseBonusOptions>
    int count                       /// * Count              :: int
);

/// # Unit Tracked Group
///
/// Returns the tracked unit group of a unit given a unit tracker behavior
native unitgroup UnitGetTrackedUnitGroup(
    unit inUnit,                    /// * Tracker Unit       :: unit
    string inConjoinedBehavior      /// * Unit Tracker Behavior :: gamelink<Behavior>
);

/// # Add Unit To Shared Tracked Unit List
///
/// Adds a behavior to the specified unit setting the casting unit to the specified caster.
native void BehaviorAddToSharedTrackedUnitList(
    string inBehavior,              /// * Behavior           :: gamelink<Behavior>
    unit inCaster                   /// * Target             :: unit
);

/// # Active Data Conversation Line
///
/// Returns the active line in the running data conversation
///
/// # Returns `convline`
native string ConversationDataActiveLine();

/// # Add Global Cutscene Filter
///
/// Adds a new filter for all cutscenes.
/// Any nodes with a non-empty filter property that does not match any filter value will be filtered out of your cutscene.
/// Newly created cutscenes will use this filter.
native void CutsceneAddGlobalFilter(
    string inFilter                 /// * Filter             :: string
);

/// # Add Cutscene Filter
///
/// Adds a new filter for a cutscene.
/// Any nodes with a non-empty filter property that does not match any filter value will be filtered out of your cutscene.
native void CutsceneAddFilter(
    int inCutscene,                 /// * Cutscene           :: Preset<libNtve_ge_Cutscene>
    string inFilter                 /// * Filter             :: string
);

/// # Remove Global Cutscene Filter
///
/// Removes the filter for all cutscenes.
/// Any nodes with a non-empty filter property that does not match this value will be filtered out of your cutscene.
native void CutsceneRemoveGlobalFilter(
    string inFilter                 /// * Filter             :: string
);

/// # Remove Cutscene Filter
///
/// Removes the filter for a cutscene.
/// Any nodes with a non-empty filter property that does not match this value will be filtered out of your cutscene.
native void CutsceneRemoveFilter(
    int inCutscene,                 /// * Cutscene           :: Preset<libNtve_ge_Cutscene>
    string inFilter                 /// * Filter             :: string
);

/// # Clear Global Cutscene Filters
///
/// Clears all global cutscene filters.
native void CutsceneClearGlobalFilters();

/// # Clear Cutscene Filter
///
/// Removes all filters on the given cutscene.
native void CutsceneClearFilters(
    int inCutscene                  /// * Cutscene           :: Preset<libNtve_ge_Cutscene>
);

/// # Create Cutscene
///
/// Cutscenes are built using the Cutscene Editor and saved to .SC2Cutscene files.
/// They can describe a complicated cinematic or a simple conversation.
/// WARNING: The Sound action Play Sound Scene File also accepts .SC2Cutscene files, but old-style scene files are not compatible with this action.
///
/// # Returns `Preset<libNtve_ge_Cutscene>`
native int CutsceneCreateNoPosition(
    string inFilePath,              /// * File Path          :: filepath
    playergroup players,            /// * Players            :: playergroup
    bool inAutoPlay                 /// * AutoPlay           :: bool
);

/// # Show/Hide Cutscene
///
/// Shows or hides a cutscene.
/// When hidden, the cutscene will continue to advance and fire events, but it will not be visible nor will it play any sounds.
native void CutsceneShow(
    int inCutscene,                 /// * Cutscene           :: Preset<libNtve_ge_Cutscene>
    bool inShow                     /// * Show/Hide          :: Preset<libNtve_ge_ShowHideOption>
);

/// # Cutscene Fade
///
/// Cutscene Fading allows you to manipulate the same fade system that Cutscenes use.
/// For example, a cutscene can Fade Out the scene, then you can fade back in with this trigger.
/// This is separate from Cinematic Fade, which only fades the game world.
native void CutsceneFade(
    bool fadeIn,                    /// * Fade In            :: Preset<libNtve_ge_FadeOption>
    fixed duration,                 /// * Duration           :: fixed
    color inColor,                  /// * Color              :: color
    fixed amount,                   /// * Amount             :: fixed
    playergroup players,            /// * Players            :: playergroup
    bool inWaitUntilDone            /// * Wait Until Done    :: Preset<libNtve_ge_Trigger_Wait_Option>
);

/// # Save Data Table Value (Ability Command) - Instance
///
/// Saves an ability command value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetAbilCmd(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    abilcmd value                   /// * Value              :: abilcmd
);

/// # Save Data Table Value (Actor) - Instance
///
/// Saves an actor value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetActor(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    actor value                     /// * Value              :: actor
);

/// # Save Data Table Value (Actor Scope) - Instance
///
/// Saves an actor scope value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetActorScope(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    actorscope value                /// * Value              :: actorscope
);

/// # Save Data Table Value (AI Filter) - Instance
///
/// Saves an AI filter value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetAIFilter(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    aifilter value                  /// * Value              :: aifilter
);

/// # Save Data Table Value (Bank) - Instance
///
/// Saves a bank value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetBank(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    bank value                      /// * Value              :: bank
);

/// # Save Data Table Value (Boolean) - Instance
native void DataTableInstanceSetBool(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    bool value                      /// * Value              :: bool
);

/// # Save Data Table Value (Byte) - Instance
///
/// Saves a byte value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetByte(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    byte value                      /// * Value              :: byte
);

/// # Save Data Table Value (Camera Object) - Instance
///
/// Saves a camera object value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetCameraInfo(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    camerainfo value                /// * Value              :: camerainfo
);

/// # Save Data Table Value (Cinematic) - Instance
///
/// Saves a cinematic value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetCinematic(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    int value                       /// * Value              :: cinematic
);

/// # Save Data Table Value (Color) - Instance
///
/// Saves a color value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetColor(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    color value                     /// * Value              :: color
);

/// # Save Data Table Value (Control) - Instance
///
/// Saves a control value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetControl(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    int value                       /// * Value              :: control
);

/// # Save Data Table Value (Conversation) - Instance
///
/// Saves a conversation value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetConversation(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    int value                       /// * Value              :: conversation
);

/// # Save Data Table Value (Conversation Reply) - Instance
///
/// Saves a conversation reply value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetReply(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    int value                       /// * Value              :: reply
);

/// # Save Data Table Value (Dialog) - Instance
///
/// Saves a dialog value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetDialog(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    int value                       /// * Value              :: dialog
);

/// # Save Data Table Value (Doodad) - Instance
///
/// Saves a doodad value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetDoodad(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    doodad value                    /// * Value              :: doodad
);

/// # Save Data Table Value (Integer) - Instance
native void DataTableInstanceSetInt(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    int value                       /// * Value              :: int
);

/// # Save Data Table Value (Marker) - Instance
native void DataTableInstanceSetMarker(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    marker value                    /// * Value              :: marker
);

/// # Save Data Table Value (Objective) - Instance
///
/// Saves an objective value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetObjective(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    int value                       /// * Value              :: objective
);

/// # Save Data Table Value (Order) - Instance
///
/// Saves an order value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetOrder(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    order value                     /// * Value              :: order
);

/// # Save Data Table Value (Ping) - Instance
native void DataTableInstanceSetPing(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    int value                       /// * Value              :: ping
);

/// # Save Data Table Value (Planet) - Instance
native void DataTableInstanceSetPlanet(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    int value                       /// * Value              :: planet
);

/// # Save Data Table Value (Player Group) - Instance
///
/// Saves a player group value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetPlayerGroup(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    playergroup value               /// * Value              :: playergroup
);

/// # Save Data Table Value (Point) - Instance
///
/// Saves a point value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetPoint(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    point value                     /// * Value              :: point
);

/// # Save Data Table Value (Portrait) - Instance
///
/// Saves a portrait value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetPortrait(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    int value                       /// * Value              :: portrait
);

/// # Save Data Table Value (Real) - Instance
///
/// Saves a real value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetFixed(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    fixed value                     /// * Value              :: fixed
);

/// # Save Data Table Value (Region) - Instance
///
/// Saves a region value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetRegion(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    region value                    /// * Value              :: region
);

/// # Save Data Table Value (Revealer) - Instance
native void DataTableInstanceSetRevealer(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    revealer value                  /// * Value              :: revealer
);

/// # Save Data Table Value (Sound) - Instance
///
/// Saves a sound value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetSound(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    sound value                     /// * Value              :: sound
);

/// # Save Data Table Value (Sound Link) - Instance
///
/// Saves a sound link value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetSoundLink(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    soundlink value                 /// * Value              :: soundlink
);

/// # Save Data Table Value (String) - Instance
native void DataTableInstanceSetString(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    string value                    /// * Value              :: string
);

/// # Save Data Table Value (Text) - Instance
///
/// Saves a text value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetText(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    text value                      /// * Value              :: text
);

/// # Save Data Table Value (Timer) - Instance
///
/// Saves a timer value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetTimer(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    timer value                     /// * Value              :: timer
);

/// # Save Data Table Value (Transmission) - Instance
native void DataTableInstanceSetTransmission(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    int value                       /// * Value              :: transmission
);

/// # Save Data Table Value (Transmission Source) - Instance
///
/// Saves a transmission Source value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetTransmissionSource(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    transmissionsource value        /// * Value              :: transmissionsource
);

/// # Save Data Table Value (Trigger) - Instance
///
/// Saves a trigger value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetTrigger(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    trigger value                   /// * Value              :: trigger
);

/// # Save Data Table Value (Unit) - Instance
///
/// Saves a unit value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetUnit(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    unit value                      /// * Value              :: unit
);

/// # Save Data Table Value (Unit Filter) - Instance
///
/// Saves a unit filter value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetUnitFilter(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    unitfilter value                /// * Value              :: unitfilter
);

/// # Save Data Table Value (Unit Group) - Instance
///
/// Saves a unit group value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetUnitGroup(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    unitgroup value                 /// * Value              :: unitgroup
);

/// # Save Data Table Value (Unit Reference) - Instance
///
/// Saves a unit value into a data table instace. If a unit variable is used, the current value of the variable will be checked whenever this value is retrieved from the table.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetUnitRef(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    unitref value                   /// * Value              :: unit
);

/// # Save Data Table Value (Wave) - Instance
///
/// Saves a wave value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetWave(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    wave value                      /// * Value              :: wave
);

/// # Save Data Table Value (Wave Info) - Instance
///
/// Saves a wave info value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetWaveInfo(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    waveinfo value                  /// * Value              :: waveinfo
);

/// # Save Data Table Value (Wave Target) - Instance
///
/// Saves a wave target value into a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
/// If you save a data table value using a string identifier that already exists, you will overwrite the old value, even if it is a different data type than the value you are saving.
native void DataTableInstanceSetWaveTarget(
    int instance,                   /// * Instance           :: datatable
    string name,                    /// * Name               :: string
    wavetarget value                /// * Value              :: wavetarget
);

/// # Value From Data Table (Ability Command) - Instance
///
/// Returns an ability command value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native abilcmd DataTableInstanceGetAbilCmd(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Actor) - Instance
///
/// Returns an actor value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native actor DataTableInstanceGetActor(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Actor Scope) - Instance
///
/// Returns an actor scope value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native actorscope DataTableInstanceGetActorScope(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (AI Filter) - Instance
///
/// Returns an AI filter value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native aifilter DataTableInstanceGetAIFilter(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Bank) - Instance
///
/// Returns a bank value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native bank DataTableInstanceGetBank(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Boolean) - Instance
///
/// Returns a boolean value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native bool DataTableInstanceGetBool(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Byte) - Instance
///
/// Returns a byte value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native byte DataTableInstanceGetByte(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Camera Object) - Instance
///
/// Returns a camera object value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native camerainfo DataTableInstanceGetCameraInfo(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Cinematic) - Instance
///
/// Returns a cinematic value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
///
/// # Returns `cinematic`
native int DataTableInstanceGetCinematic(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Color) - Instance
///
/// Returns a color value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native color DataTableInstanceGetColor(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Control) - Instance
///
/// # Returns `control`
native int DataTableInstanceGetControl(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Conversation) - Instance
///
/// Returns a conversation value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
///
/// # Returns `conversation`
native int DataTableInstanceGetConversation(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Conversation Reply) - Instance
///
/// Returns a conversation reply value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
///
/// # Returns `reply`
native int DataTableInstanceGetReply(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Dialog) - Instance
///
/// Returns a dialog value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
///
/// # Returns `dialog`
native int DataTableInstanceGetDialog(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Doodad) - Instance
///
/// Returns a doodad value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native doodad DataTableInstanceGetDoodad(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Integer) - Instance
///
/// Returns an integer value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native int DataTableInstanceGetInt(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Marker) - Instance
native marker DataTableInstanceGetMarker(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Objective) - Instance
///
/// Returns an objective value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
///
/// # Returns `objective`
native int DataTableInstanceGetObjective(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Order) - Instance
native order DataTableInstanceGetOrder(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Ping) - Instance
///
/// Returns ping value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
///
/// # Returns `ping`
native int DataTableInstanceGetPing(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Planet) - Instance
///
/// Returns a planet value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
///
/// # Returns `planet`
native int DataTableInstanceGetPlanet(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Player Group) - Instance
///
/// Returns a player group value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native playergroup DataTableInstanceGetPlayerGroup(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Point) - Instance
///
/// Returns a point value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native point DataTableInstanceGetPoint(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Portrait) - Instance
///
/// Returns a portrait value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
///
/// # Returns `portrait`
native int DataTableInstanceGetPortrait(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Real) - Instance
///
/// Returns a real value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native fixed DataTableInstanceGetFixed(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Region) - Instance
///
/// Returns a region value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native region DataTableInstanceGetRegion(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Revealer) - Instance
native revealer DataTableInstanceGetRevealer(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Sound) - Instance
///
/// Returns a sound value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native sound DataTableInstanceGetSound(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Sound Link) - Instance
///
/// Returns a sound link value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native soundlink DataTableInstanceGetSoundLink(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (String) - Instance
///
/// Returns a string value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native string DataTableInstanceGetString(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Text) - Instance
native text DataTableInstanceGetText(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Timer) - Instance
native timer DataTableInstanceGetTimer(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Transmission) - Instance
///
/// Returns a transmission value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
///
/// # Returns `transmission`
native int DataTableInstanceGetTransmission(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Transmission Source) - Instance
///
/// Returns a transmission source value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native transmissionsource DataTableInstanceGetTransmissionSource(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Trigger) - Instance
native trigger DataTableInstanceGetTrigger(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Unit) - Instance
///
/// Returns a unit value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native unit DataTableInstanceGetUnit(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Unit Filter) - Instance
///
/// Returns a unit filter value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native unitfilter DataTableInstanceGetUnitFilter(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Unit Group) - Instance
///
/// Returns a unit group value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native unitgroup DataTableInstanceGetUnitGroup(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Wave) - Instance
///
/// Returns a wave value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native wave DataTableInstanceGetWave(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Wave Info) - Instance
///
/// Returns a wave info value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native waveinfo DataTableInstanceGetWaveInfo(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Value From Data Table (Wave Target) - Instance
///
/// Returns a wave target value from a data table instace.
/// Data tables allow you to store and recall values using a string identifier.
native wavetarget DataTableInstanceGetWaveTarget(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Create Data Table - Instance
native void DataTableInstanceCreate();

/// # Copy Data Table - Instance
native void DataTableInstanceCopy(
    int targetInstance,             /// * Target Instance    :: datatable
    int sourceInstance,             /// * Source Instance    :: datatable
    string inReqPrefix              /// * Required Prefix    :: string
);

/// # Clear Data Table - Instance
///
/// Clears a saved data table instance.
native void DataTableInstanceClear(
    int instance                    /// * Instance           :: datatable
);

/// # Last Created Data Table - Instance
///
/// # Returns `datatable`
native int DataTableInstanceLastCreated();

/// # Number Of Data Table Values - Instance
///
/// Returns the number of values in a data table instance.
native int DataTableInstanceValueCount(
    int instance                    /// * Instance           :: datatable
);

/// # Name Of Data Table Value - Instance
///
/// Returns the name of a data table instance value.
native string DataTableInstanceValueName(
    int instance,                   /// * Instance           :: datatable
    int index                       /// * Index              :: int
);

/// # Data Table Value Exists - Instance
///
/// Returns true if a data table instance value exists.
native bool DataTableInstanceValueExists(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Type Of Data Table Value - Instance
///
/// Returns the type of a data table intance value.
///
/// # Returns `Preset<libNtve_ge_DataType>`
native int DataTableInstanceValueType(
    int instance,                   /// * Instance           :: datatable
    string name                     /// * Name               :: string
);

/// # Convert DateTime To String
///
/// Converts a DateTime to a colon delimited string of numbers.
native string DateTimeToString(
    datetime inDateTime             /// * DateTime           :: datetime
);

/// # Convert String To DateTime
///
/// Converts a colon delimited string of numbers to a DateTime. Returns Jan 1, 1970 for an invalid string.
native datetime StringToDateTime(
    string inString                 /// * String             :: string
);

/// # Set Graph Minimum X Visible
///
/// Set the minimum X data point value that is visible for a graph
native void DialogControlSetMinXVisible(
    int graph,                      /// * Graph              :: control
    playergroup players,            /// * Players            :: playergroup
    fixed minXValue                 /// * MinXValue          :: fixed
);

/// # Get Graph Minimum X Value
///
/// Get the minimum X data point value for a graph
native fixed DialogControlGetMinXValue(
    int graph,                      /// * Graph              :: control
    playergroup players             /// * Players            :: playergroup
);

/// # Set Graph Maximum X Visible
///
/// Set the maximum X data point value that is visible for a graph
native void DialogControlSetMaxXVisible(
    int graph,                      /// * Graph              :: control
    playergroup players,            /// * Players            :: playergroup
    fixed maxXValue                 /// * MaxXValue          :: fixed
);

/// # Get Graph Maximum X Value
///
/// Get the maximum X data point value for a graph
native fixed DialogControlGetMaxXValue(
    int graph,                      /// * Graph              :: control
    playergroup players             /// * Players            :: playergroup
);

/// # Set Graph Minimum Y Visible
///
/// Set the minimum Y data point value that is visible for a graph
native void DialogControlSetMinYVisible(
    int graph,                      /// * Graph              :: control
    playergroup players,            /// * Players            :: playergroup
    fixed minYValue                 /// * MinYValue          :: fixed
);

/// # Get Graph Minimum Y Value
///
/// Get the minimum Y data point value for a graph
native fixed DialogControlGetMinYValue(
    int graph,                      /// * Graph              :: control
    playergroup players             /// * Players            :: playergroup
);

/// # Set Graph Maximum Y Visible
///
/// Set the maximum Y data point value that is visible for a graph
native void DialogControlSetMaxYVisible(
    int graph,                      /// * Graph              :: control
    playergroup players,            /// * Players            :: playergroup
    fixed maxYValue                 /// * MaxYValue          :: fixed
);

/// # Get Graph Maximum Y Value
///
/// Get the maximum Y data point value for a graph
native fixed DialogControlGetMaxYValue(
    int graph,                      /// * Graph              :: control
    playergroup players             /// * Players            :: playergroup
);

/// # Game Day/Night State Change
native void TriggerAddEventGameTimeEvent(
    int type                        /// * Type               :: Preset<libNtve_ge_DayNightEventType>
);

/// # Set Time Of Day (Seconds)
///
/// Sets the time of day.
native void GameTimeOfDayValueSet(
    int seconds                     /// * Seconds            :: int
);

/// # Set Time Of Day (Hours, Minutes, Seconds)
///
/// Sets the time of day.
native void GameTimeOfDayTimeValueSet(
    int hours,                      /// * Hours              :: int
    int minutes,                    /// * Minutes            :: int
    int seconds                     /// * Seconds            :: int
);

/// # Triggering Day/Night State
///
/// # Returns `Preset<libNtve_ge_DayNightEventType>`
native int EventGameTimeEvent();

/// # Current Time Of Day (Seconds)
///
/// Returns the current game time of day.
native int GameTimeOfDayValueGet(
    int type                        /// * Type               :: Preset<libNtve_ge_TimeOfDayValueType>
);

/// # Current Day/Night State
///
/// Returns the current game time of day.
///
/// # Returns `Preset<libNtve_ge_DayNightEventType>`
native int GameTimeOfDayCurrentTimeEvent();

/// # Triggering Effect Item
native unit EventPlayerEffectUsedItem();

/// # Triggering Effect Impact Unit
native unit EventPlayerEffectUsedUnitImpact();

/// # Triggering Effect Launch Unit
native unit EventPlayerEffectUsedUnitLaunch();

/// # Triggering Effect Item Type
///
/// # Returns `gamelink<Unit>`
native string EventPlayerEffectUsedItemType();

/// # Triggering Effect Weapon
///
/// # Returns `gamelink<Weapon>`
native string EventPlayerEffectUsedWeapon();

/// # Triggering Effect Ability
///
/// # Returns `gamelink<Abil>`
native string EventPlayerEffectUsedAbil();

/// # Set Charge Remaining
///
/// Set charge remaining count for the specified item.
native void ItemSetChargeCount(
    unit inItem,                    /// * Item               :: unit
    fixed inVal                     /// * Value              :: fixed
);

/// # Charge Count
///
/// Returns the current/max charges for the item.
native fixed ItemGetChargeCount(
    unit inItem,                    /// * Item               :: unit
    bool remainingMax               /// * Remaining/Max      :: Preset<libNtve_ge_ChargeRemaingMaxOption>
);

/// # Game Set Quit On Quit Button
///
/// Used to turn on and off the behavior of the game automatically quitting when the quit button is pressed.
/// Only usable by official blizzard maps.
native void GameSetQuitOnQuitButton(
    bool enable                     /// * Enable             :: bool
);

/// # Online Map To Map Load
///
/// Executes an online map to map load. Ends the game for all observers and players that have not already won, tied, lost or left the game, then transitions them together into another map published by the same author. The destination map is chosen by a map slot. Map slots must be set using the managed published dialog. Ensure that the source and destination maps have the same set of user controlled players to prevent map transition failures. Default variants and game settings will be used to create the destination map. Only supported for online games.
native void OnlineMapToMapLoad(
    int mapSlot,                    /// * Map Slot           :: int
    playergroup victoryPlayers,     /// * Victory Players    :: playergroup
    playergroup defeatPlayers       /// * Defeat Players     :: playergroup
);

/// # Picked Integer Deprecated
///
/// Returns the picked integer.
/// This function is only for use with the "Pick Each Integer" action. It will do nothing when used outside of a pick each integer loop.
native int IntLoopCurrentDeprecated();

/// # Create Loot At Unit
native void UnitLootDropUnit(
    unit dropUnit,                  /// * Drop Unit          :: unit
    string loot,                    /// * Loot               :: gamelink<Loot>
    int killerPlayer                /// * Killer Player      :: int
);

/// # Create Loot At Point
native void UnitLootDropPoint(
    int dropPlayer,                 /// * Drop Player        :: int
    point dropLocation,             /// * Drop Location      :: point
    string loot,                    /// * Loot               :: gamelink<Loot>
    int killerPlayer                /// * Killer Player      :: int
);

/// # Last Created Loot Unit
///
/// Returns the last loot unit/item created via the "Drop Loot At Unit" or "Drop Loot At Point" actions.
/// This function ignores units created by other triggers.
native unit UnitLootLastCreated();

/// # Last Created Loot Units
///
/// Returns the last group of units/items created via the "Drop Loot At Unit" or "Drop Loot At Point" actions. This function ignores units created by other triggers.
native unitgroup UnitLootLastCreatedGroup();

/// # Spray Of Player
///
/// Returns the chosen spray at the specified index for the player.
///
/// # Returns `gamelink<Spray>`
native string PlayerSpray(
    int p,                          /// * Player             :: int
    int sprayIndex                  /// * Spray Index        :: int
);

/// # Brutal Plus Difficulty of Player
///
/// Returns the Brutal Plus difficulty level for the current player.
native int PlayerBrutalPlusDifficulty(
    int p                           /// * Player             :: int
);

/// # Retry Mutation Index of Player
///
/// Returns the mutation index for retrying the previous random mutation game for a player. (Mutation Number shold be [0-3])
native int PlayerRetryMutation(
    int p,                          /// * Player             :: int
    int mutationNumber              /// * Mutation Number    :: int
);

/// # Allied Commander Enemy Wave Type
///
/// Returns the Allied Commanders wave type for retrying a coop game for a player. Returns 0 for non-retry games.
native int PlayerACEnemyWaveType(
    int p                           /// * Player             :: int
);

/// # Set Player Console Skin
///
/// Sets the console skin of the specified player.
native void PlayerSetConsoleSkin(
    int player,                     /// * Player             :: int
    string consoleSkin              /// * Console Skin       :: gamelink<ConsoleSkin>
);

/// # Set Player Spray
///
/// Sets the mount of the specified player.
native void PlayerSetSpray(
    int player,                     /// * Player             :: int
    int index,                      /// * Index              :: int
    string spray                    /// * Spray              :: gamelink<Spray>
);

/// # Add Player Response
///
/// Adds the specified player response to the Player. Player response is player based unit damage/death response.
native void PlayerAddResponse(
    int player,                     /// * Player             :: int
    string response                 /// * Response           :: gamelink<PlayerResponse>
);

/// # Remove Player Response
///
/// Remove the specified Response from the Player.
native void PlayerRemoveResponse(
    int player,                     /// * Player             :: int
    string response                 /// * Response           :: gamelink<PlayerResponse>
);

/// # Clear Player Response
///
/// Remove the specified Response from the Player.
native void PlayerClearResponse(
    int player,                     /// * Player             :: int
    int responseType,               /// * Response Type      :: Preset<libNtve_ge_PlayerResponseType>
    int location                    /// * Location           :: Preset<libNtve_ge_DamageLocation>
);

/// # Override Player Option
///
/// Setting the value to "No Value" will clear the override and return the value to whatever the player had selected previously. If an override value is set, option UI will be disabled for the player. Overrides are removed when leaving a game.
native void PlayerOptionOverride(
    int p,                          /// * Player             :: int
    string option,                  /// * Option             :: gameoption
    string value                    /// * Value              :: gameoptionvalue
);

/// # Picked Player Deprecated
///
/// Returns an integer value equal to the iterating value inside of a "Pick Each Player In Player Group" action.
/// This function will return 0 if used outisde of a pick each player in group loop.
native int PlayerGroupLoopCurrentDeprecated();

/// # Control Group Units
native unitgroup UnitControlGroup(
    int player,                     /// * Player             :: int
    int controlGroup                /// * Control Group      :: int
);

/// # Enable/Disable Soundtrack Shuffle
///
/// Enables or disables cue and/or index shuffling for a soundtrack.
/// Index shuffling corresponds to the asset array in the sound data.
/// Cue shuffling corresponds to the array of sounds in each soundtrack data.
native void SoundtrackSetShuffle(
    playergroup players,            /// * Players            :: playergroup
    int category,                   /// * Category           :: Preset<libNtve_ge_SoundtrackCategory>
    bool cue,                       /// * Cue                :: Preset<libNtve_ge_Enable_Disable_Option>
    bool index                      /// * Index              :: Preset<libNtve_ge_Enable_Disable_Option>
);

/// # Create Stat Event
///
/// Blizzard only.
/// Creates a new stat event with the given name.
/// You can then add data to that state event before sending it to Battle.net.
///
/// # Returns `Preset<libNtve_ge_StatEvent>`
native int StatEventCreate(
    string eventName                /// * Event Name         :: string
);

/// # Add String Data to Stat Event
///
/// Blizzard only.
/// Adds the Key-Value pair to the Stat Event.
native void StatEventAddDataString(
    int statEvent,                  /// * Stat Event         :: Preset<libNtve_ge_StatEvent>
    string key,                     /// * Key                :: string
    string value                    /// * Value              :: string
);

/// # Add Integer Data to Stat Event
///
/// Blizzard only.
/// Adds the Key-Value pair to the Stat Event.
native void StatEventAddDataInt(
    int statEvent,                  /// * Stat Event         :: Preset<libNtve_ge_StatEvent>
    string key,                     /// * Key                :: string
    int value                       /// * Value              :: int
);

/// # Add Real Data to Stat Event
///
/// Blizzard only.
/// Adds the Key-Value pair to the Stat Event.
native void StatEventAddDataFixed(
    int statEvent,                  /// * Stat Event         :: Preset<libNtve_ge_StatEvent>
    string key,                     /// * Key                :: string
    fixed value                     /// * Value              :: fixed
);

/// # Send Stat Event
///
/// Blizzard only.
/// Sends the Stat Event to Battle.net.
/// The Stat Event is destroyed.
native void StatEventSend(
    int statEvent                   /// * Stat Event         :: Preset<libNtve_ge_StatEvent>
);

/// # Last Created Stat Event
///
/// Returns the last created Stat Event.
///
/// # Returns `Preset<libNtve_ge_StatEvent>`
native int StatEventLastCreated();

/// # Set Production Cap For Player
///
/// Use -1 to remove the cap of the production.
native void TechTreeSetProduceCap(
    int p,                          /// * Player             :: int
    string production,              /// * Production         :: anygamelink
    int cat,                        /// * Category           :: Preset<libNtve_ge_TechTreeCategory>
    int cap                         /// * Cap                :: int
);

/// # Production Cap For Player
native int TechTreeGetProduceCap(
    int p,                          /// * Player             :: int
    string production,              /// * Production         :: anygamelink
    int cat                         /// * Category           :: Preset<libNtve_ge_TechTreeCategory>
);

/// # Send Transmission For Player
///
/// Sends a transmission with sound and an optional portrait actor to the specified players from a source unit or model.
/// Use "Last Sent Transmission" to refer to this transmission after it has begun.
///
/// # Returns `transmission`
native int TransmissionSendForPlayerSelect(
    playergroup Players,            /// * Players            :: playergroup
    transmissionsource Source,      /// * Source             :: transmissionsource
    int Target,                     /// * Portrait           :: portrait
    string portraitActor,           /// * Portrait Actor     :: string
    string PortraitAnim,            /// * Portrait Anim      :: modelanim
    soundlink inSound,              /// * Sound              :: soundlink
    text Speaker,                   /// * Name               :: text
    text Subtitle,                  /// * Message            :: text
    fixed Duration,                 /// * Duration           :: fixed
    int DurationType,               /// * DurationType       :: Preset<libNtve_ge_TransmissionDurationType>
    bool WaitUntilDone,             /// * WaitUntilDone      :: Preset<libNtve_ge_Trigger_Wait_Option>
    int player,                     /// * Player             :: int
    bool isSelect                   /// * Is Select          :: bool
);

/// # Hotkey Pressed
///
/// Returns the hotkey pressed.
/// Use in response to a "Hotkey Pressed" event.
///
/// # Returns `Preset<libNtve_ge_Key>`
native int EventHotkeyPressed();

/// # Set Minimap Bounds
///
/// Sets the Minimap Bounds to the specified Region.
native void UISetMiniMapBounds(
    playergroup players,            /// * Players            :: playergroup
    region bounds                   /// * Bounds             :: region
);

/// # Ideal Harvester Count
///
/// Returns the ideal harvester count for this unit. The recommended number of workers that should be harvesting to/from the given unit.
native int UnitIdealWorkerCount(
    unit inUnit                     /// * Unit               :: unit
);

/// # Current Harvester Count
///
/// Returns the current harvester count for this unit. The number of workers that are harvesting to/from the given unit.
native int UnitCurrentWorkerCount(
    unit inUnit                     /// * undefined          :: unit
);

/// # Unit Spends Vital
native void TriggerAddEventUnitSpendVital(
    unitref u,                      /// * Unit               :: unit
    int vitalType                   /// * Vital Type         :: Preset<libNtve_ge_UnitVitalType>
);

/// # Triggering Spent Vital Type
///
/// # Returns `Preset<libNtve_ge_UnitVitalType>`
native int EventUnitSpentVitalVital();

/// # Triggering Vital Spent
native fixed EventUnitSpentVitalAmount();

/// # Unit Order Get Progress
///
/// Get the progress of the current order for the given unit.
native fixed UnitOrderGetProgress(
    unit inUnit                     /// * Unit               :: unit
);

/// # Unit Seed
native int UnitGetSeed(
    unit u                          /// * Unit               :: unit
);

/// # Set Unit Seed
///
/// Sets a unit's state.
native void UnitSetSeed(
    unit inUnit,                    /// * Unit               :: unit
    int seed                        /// * Seed               :: int
);

/// # Reset Unit Seed
native void UnitResetSeed(
    unit u                          /// * Unit               :: unit
);

/// # Set Unit Command Button Tooltip
///
/// Sets the info text for the specified unit.
native void UnitSetInfoButtonTooltip(
    unit inUnit,                    /// * Unit               :: unit
    string key,                     /// * Modification Key   :: string
    text inText                     /// * Text               :: text
);

/// # Reset Unit Command Button Tooltip
///
/// Sets the info text for the specified unit.
native void UnitClearInfoButtonTooltip(
    unit inUnit,                    /// * Unit               :: unit
    string key                      /// * Modification Key   :: string
);

/// # Put Unit InTransport
native void UnitPutInTransport(
    unit inUnit,                    /// * Unit               :: unit
    unit inTransport                /// * Transport          :: unit
);

/// # Add Item To Inventory
native void UnitInventoryAdd(
    unit u,                         /// * Unit               :: unit
    unit item                       /// * Item               :: unit
);

/// # Unit Object Group Call For Help
native void UnitObjectGroupCallForHelp(
    unit inUnit,                    /// * Unit               :: unit
    unit attacker                   /// * Attacker           :: unit
);

/// # Create Unit Object Group From Unit Group
native int UnitObjectGroupFromUnitGroup(
    unitgroup group,                /// * Unit Group         :: unitgroup
    int groupLevel                  /// * Group Level        :: int
);

/// # Picked Unit Deprecated
///
/// Returns the current unit picked in a "Pick Each Unit In Unit Group" loop.
native unit UnitGroupLoopCurrentDeprecated();

/// # Validator Execute
///
/// Runs Validator
///
/// # Returns `Preset<libNtve_ge_CommandResult>`
native int ValidatorExecute(
    string validatorLink,           /// * ValidatorLink      :: gamelink<Validator>
    unit sourceUnit,                /// * Source Unit        :: unit
    unit targetUnit                 /// * Target Unit        :: unit
);

