//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Enemy Intelligence
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "TriggerLibs/SwarmLib"
include "TriggerLibs/VoidLib"
include "LibComC"
include "LibCMMI"
include "LibNovC"
include "LibNCMI"
include "LibNCUI"
include "aiA88256A6"
include "ai663E0A14"
include "ai3F4FA9FC"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libHots_InitLib();
    libLotv_InitLib();
    libComC_InitLib();
    libCMMI_InitLib();
    libNovC_InitLib();
    libNCMI_InitLib();
    libNCUI_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_pLAYER_01_USER = 1;
const int gv_pLAYER_02_NOVASUPPORT = 2;
const int gv_pLAYER_03_FERALZERG_MIDDLEBULLIES = 3;
const int gv_pLAYER_04_FERALZERG_RIGHTBULLIES = 4;
const int gv_pLAYER_05_FERALZERG_LEFTBULLIES = 5;
const int gv_pLAYER_06_DEFENDERSOFMAN = 6;
const int gv_pLAYER_07_STRANDEDTERRANS = 7;
const int gv_pLAYER_08_FERALZERG_INSIDE = 8;
const int gv_pLAYER_09_FERALZERG_MIDDLEWAVES = 9;
const int gv_pLAYER_10_FERALZERG_RIGHTWAVES = 10;
const int gv_pLAYER_11_FERALZERG_LEFTWAVES = 11;
const int gv_pLAYER_12_RECOVERYTERMINALS = 12;
const int gv_pLAYER_14_CINEMATICUNITS = 14;
const fixed gv_unitInvestigateTransmissionCooldown = 30.0;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_RECORDGarrisonSpot {
    unit lv_beaconUnit;
    region lv_beaconRegion;
    point lv_unitTargetPoint;
    point lv_unitGarrisonedPoint;
    unit lv_garrisonTurret;
    unit lv_entryInfestation;
    bool lv_garrisonSpotCompleted;
    bool lv_garrisonBeaconRevealed;
    string lv_garrisonUnitType;
    int lv_garrisonUnitCount;
    int lv_garrisonUnitMax;
    region lv_garrisonSightRegion;
    int lv_garrisonZergPlayer;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unit gv_zeratul;
string gv_mapMusicTrack;
playergroup gv_enemyZergPlayersStage01;
actorscope gv_cameraSoundActorScope;
int gv_unitInvestigateTransmissionCycleTrooper;
int gv_unitInvestigateTransmissionCycleMarauder;
timer gv_unitInvestigateTransmissionCooldownTimer;
int gv_currentStage;
string gv_lighting_Stage01;
string gv_lighting_Stage02;
gs_RECORDGarrisonSpot[17] gv_s1_GarrisonSpots;
int gv_s1_GarrisonSpotsCount;
unitgroup gv_s1_NydusUnloadedUnits;
int gv_s1_BO_Ping;
unitgroup gv_s2_UnitsHiddenDuringS1;
actor gv_s2_SwordTutorialReticle;
int gv_s2_SwordTutorialTextTag;
unitgroup gv_s2_SwordTutorialUnitGroup;
unit gv_s2_BeaconActionableIntel;
unit gv_s3_BeaconEnd;
unitgroup gv_evacGroup1;
unitgroup gv_evacGroup2;
unitgroup gv_evacGroup3;
unitgroup gv_evacGroupAll;
unit gv_herculesUnit;
unitgroup gv_s3_ZerglingTrickleUnitGroup;
unitgroup gv_s3_ZerglingTrickleUnitGroup2;
unitgroup gv_s3_AtriumTerrans;
unitgroup gv_s3_AtriumZerg;
unitgroup gv_s3_AtriumRoaches;
unitgroup gv_s3_AtriumOverlords;
unitgroup gv_s3_FinalRoomTerrans;
unitgroup gv_s3_FinalRoomZerg;
int gv_victoryStat_DOMKills;
int gv_victoryStat_SupplyReached;
bool gv_achievement_PlayerSupplyExceeded35;
bool gv_achievement_NovaHasKilledDOMUnit;
int gv_objectiveDestroyZergBase3;
int gv_objectiveFillGarrisonsCount;
int gv_objectiveFillGarrisonsMax;
int gv_objectiveRescueStalkers;
int gv_objectiveDestroyZergBase2;
int gv_objectiveDestroyZergBase5;
int gv_objectiveDestroyZergBase4;
unitgroup gv_cinematicHiddenUnits;
unitgroup gv_cinematicPausedUnits;
unitgroup gv_cinematicTempUnits;
bool gv_cinematicCompleted;
unit gv_cinematicNova;
unit gv_cinematicSiegeTank;
unit gv_cinematicMannedTurret;
unitgroup gv_cinematicGarrisonGroup;
unitgroup gv_cinematicZergGroup;
int[9] gv_introMinerals;
int[2] gv_introGas;
unit gv_introCineNovaShip;
unitgroup gv_introPlayerUnits;
unit gv_introFactory;
unit gv_introBarracks;
bool gv_introCinematicOver;
unit[5] gv_introMarines;
unit[3] gv_introMarauders;
unit gv_introSiegeTank;
unit gv_cinematicMarine02;
unit gv_cinematicStationOfficer;
unit gv_cinematicMarine01;
unit gv_midCinematic02_Nova;
unit gv_midCinematic02_StationOfficer;
unitgroup gv_midCinematic02_Detectors;
unitgroup gv_midCinematic02_TurretDetectors;
unitgroup gv_midCinematic02_FleeingTechnicians;
unit[2] gv_midCinematic02_SecurityDoor;
unitgroup gv_midCinematic02_NorthReinforcements;
unitgroup gv_midCinematic02_EastReinforcements;
sound gv_midCinematic02_AlarmSound;

void InitGlobals () {
    gv_zeratul = UnitFromId(161);
    gv_enemyZergPlayersStage01 = PlayerGroupEmpty();
    gv_unitInvestigateTransmissionCooldownTimer = TimerCreate();
    gv_currentStage = 1;
    gv_s1_NydusUnloadedUnits = UnitGroupEmpty();
    gv_s1_BO_Ping = c_invalidPingId;
    gv_s2_UnitsHiddenDuringS1 = UnitGroupEmpty();
    gv_s2_SwordTutorialTextTag = c_textTagNone;
    gv_s2_SwordTutorialUnitGroup = UnitGroupEmpty();
    gv_s2_BeaconActionableIntel = UnitFromId(515);
    gv_s3_BeaconEnd = UnitFromId(860);
    gv_evacGroup1 = UnitGroupEmpty();
    gv_evacGroup2 = UnitGroupEmpty();
    gv_evacGroup3 = UnitGroupEmpty();
    gv_evacGroupAll = UnitGroupEmpty();
    gv_s3_ZerglingTrickleUnitGroup = UnitGroupEmpty();
    gv_s3_ZerglingTrickleUnitGroup2 = UnitGroupEmpty();
    gv_s3_AtriumTerrans = UnitGroupEmpty();
    gv_s3_AtriumZerg = UnitGroupEmpty();
    gv_s3_AtriumRoaches = UnitGroupEmpty();
    gv_s3_AtriumOverlords = UnitGroupEmpty();
    gv_s3_FinalRoomTerrans = UnitGroupEmpty();
    gv_s3_FinalRoomZerg = UnitGroupEmpty();
    gv_victoryStat_SupplyReached = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesUsed);
    gv_objectiveDestroyZergBase3 = c_invalidObjectiveId;
    gv_objectiveRescueStalkers = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase2 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase5 = c_invalidObjectiveId;
    gv_objectiveDestroyZergBase4 = c_invalidObjectiveId;
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicPausedUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    gv_cinematicGarrisonGroup = UnitGroupEmpty();
    gv_cinematicZergGroup = UnitGroupEmpty();
    gv_introPlayerUnits = UnitGroupEmpty();
    gv_midCinematic02_Detectors = UnitGroupEmpty();
    gv_midCinematic02_TurretDetectors = UnitGroupEmpty();
    gv_midCinematic02_FleeingTechnicians = UnitGroupEmpty();
    gv_midCinematic02_NorthReinforcements = UnitGroupEmpty();
    gv_midCinematic02_EastReinforcements = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
point gf_RandomPointinRegionSharedbyGroup (region lp_region, unitgroup lp_unitGroup);
void gf_DOMUnitsInvestigateTransmissionsQ (unitgroup lp_investigatingUnitGroup, point lp_investigatingPoint);
void gf_S1GarrisonUnit (unit lp_garrisonUnit, int lp_garrisonIndex);
void gf_S1MoveAndGarrisonUnit (unit lp_garrisonUnit, int lp_garrisonIndex, int lp_garrisonSpotIndex);
void gf_S1UnloadUnitsFromNydusWorm (int lp_count, string lp_unitType, unit lp_nydusWorm, point lp_rallyPoint, int lp_player);
void gf_S1BonusObjectiveDespawnZergFlyer (unit lp_flyerUnit);
void gf_S1BonusObjectiveSpawnSurvivor (unit lp_survivorUnit);
void gf_S3ZergWanderAfterDelay (unit lp_unit, fixed lp_delay);
void gf_S3LiftOffHerculesVertically (unit lp_shipUnit);
void gf_S3LandHerculesVertically (unit lp_shipUnit);
void gf_S3LiftOffHerculesLaunchForward (unit lp_shipUnit, fixed lp_launchAngle);
void gf_S3OverseerPatrol2Points (unit lp_overseer, point lp_point1, point lp_point2, fixed lp_waitTimeAtPoint);
void gf_S3UnloadUnitsFromNydusWorm (int lp_count, string lp_unitType, unit lp_nydusWorm, point lp_rallyPoint, int lp_player);
void gf_S1TrackWaveSpawnBullyUnit (unit lp_bullyUnitInitial, region lp_bullyRespawnRegion, int lp_bullyPlayer);
void gf_S1MoveOverseerToMapEdgeAndDespawn (unit lp_overseerUnit, point lp_targetPoint);
void gf_S1SpawnStreamingWaveUnit (int lp_count, string lp_unitType, int lp_player, point lp_spawnPoint, fixed lp_delay);
void gf_BriefingMoveAndDespawnGarrisonUnit (unit lp_garrisonUnit, int lp_garrisonPointIndex);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_Init01Technology;
trigger gt_Init02Players;
trigger gt_Init03Units;
trigger gt_Init03bDefenderStealthAIUnits;
trigger gt_Init04MusicSound;
trigger gt_Init05Environment;
trigger gt_Init06Difficulties;
trigger gt_Init07Help;
trigger gt_DebugIntro;
trigger gt_DebugStage2FindIntel;
trigger gt_DebugStage3CatchStationOfficer;
trigger gt_NovaPicksUpRestorationCharge2;
trigger gt_NovaKillsDOMUnitInDefendRegion;
trigger gt_NovaFlashbangsUnitInDefendRegion;
trigger gt_NovaLosesDetectorConeDetectedEMPedQ;
trigger gt_NovaLosesDetectorConeDetectedStillCloakedQ;
trigger gt_NovaReCloaksTransmissionQ;
trigger gt_StartGame01QGarrisonSpots;
trigger gt_StartGame02QReachCommsHub;
trigger gt_StartGame03QReachCommandRoom;
trigger gt_S1CleanUpSection01;
trigger gt_S2CleanUpSection02;
trigger gt_S1GarrisonSpotsInit;
trigger gt_S1GarrisonInfestationDies;
trigger gt_S1FirstInfestationSightedQ;
trigger gt_S1FirstInfestationDiesQ;
trigger gt_S1UnitEntersGarrison;
trigger gt_S1GarrisonFilledQ;
trigger gt_S1GarrisonsAllFilledUp;
trigger gt_S1TacNukeStrikeOnlineQ;
trigger gt_S1TurnOffTacNukeStrikeHighlight;
trigger gt_S1PlayerEntersBuildingCollapseReveal;
trigger gt_S1UltraliskPatrol;
trigger gt_S1RavagerShots;
trigger gt_S1PlayerEntersNydusWormTrigger;
trigger gt_S1PlayerNearsEnemyBaseLeftQ;
trigger gt_S1PlayerNearsEnemyBaseMiddleQ;
trigger gt_S1PlayerNearsEnemyBaseRightQ;
trigger gt_S1PlayerKillsEnemiesInEnemyBaseAreasQ;
trigger gt_S1UnitEntersBonusObjectiveCreate;
trigger gt_S1BonusObjectiveRevealQ;
trigger gt_S1BonusObjectiveHerculesCrash;
trigger gt_S1UnitEntersBonusObjectiveRevealQ;
trigger gt_S2FirstUnitsFleeStealthedNova;
trigger gt_S2FirstUnitsGetToHallwayUnits;
trigger gt_S2FirstUnitsFleeStealthedNovaTransmissionQ;
trigger gt_S2NovaPassesHallwayUnitsUndetectedQ;
trigger gt_S2HallwayUnitsConfrontStealthedNova;
trigger gt_S2HallwayUnitsConfrontStealthedNovaTransmissionQ;
trigger gt_S2NovaEntersInitialEncounter;
trigger gt_S2NovaEntersInitialEncounterTransmissionQ;
trigger gt_S2NovaUsesDashAttack;
trigger gt_S2NovaKillsUnitInTutorialRoom;
trigger gt_S2NovaSkipsSwordTutorialTransmissionQ;
trigger gt_S2TurnOffSwordTutorial;
trigger gt_S2MarauderEntersSwordTutorialRoomTransmissionQ;
trigger gt_S2NovaKillsAnotherinSwordTutorialRoomTransmissionQ;
trigger gt_S2NovaKillsHaikuTargetQ;
trigger gt_S2NovaEntersGhostGuardRoom01;
trigger gt_S2TargetPracticeTrooper01;
trigger gt_S2TargetPracticeTrooper02;
trigger gt_S2BonusObjectiveDetectorsDeadQ;
trigger gt_S2NovaEntersGhostRoom02;
trigger gt_S2GhostRoom02DetectorDead;
trigger gt_S2NovaEntersGhostRoom03;
trigger gt_S2NovaAdjacentToCommsHubRoomQ;
trigger gt_S2NovaEntersBeaconIntelQ;
trigger gt_S3NovaEntersCommsRoom;
trigger gt_S3NovaEntersAtriumFirstTime;
trigger gt_S3NovaEntersAtriumFirstTimeTransmissionQ;
trigger gt_S3PsiEmitters;
trigger gt_S3PsiEmittersTransmissionQ;
trigger gt_S3PsiEmittersLoadTransport;
trigger gt_S3BuildingCollapse;
trigger gt_S3BuildingCollapseTransmissionQ;
trigger gt_S3BuildingCollapseInitialGroup;
trigger gt_S3BuildingCollapseMedicsFallBack;
trigger gt_S3BuildingCollapseGhostInCombat;
trigger gt_S3UnitsRunToOutsideShuttlesQ;
trigger gt_S3NovaEntersOutsideShuttlesRevealer;
trigger gt_S3OutsideShuttlesTransmissionQ;
trigger gt_S3NydusInTheAtrium;
trigger gt_S3NydusInTheAtriumTransmissionQ;
trigger gt_S3NydusInTheAtriumShuttles;
trigger gt_S3NydusInTheAtriumGhostInCombat;
trigger gt_S3NovaEntersZergRunDownHallway;
trigger gt_S3ZergedUpRoom;
trigger gt_S3ZergedUpRoomTransmissionQ;
trigger gt_S3NovaEntersFinalRoomQ;
trigger gt_S3FinalRoomZergTrickle;
trigger gt_S3FinalRoomGhostsAndTroopersInCombat;
trigger gt_S3FinalRoomThorTransmissionQ;
trigger gt_DefeatBaseDead;
trigger gt_DefeatNovaDead;
trigger gt_DefeatCatchStationOfficerFailed;
trigger gt_VictoryCatchStationOfficerCompleted;
trigger gt_VictorySequence;
trigger gt_Victory;
trigger gt_Defeat;
trigger gt_VictoryCheat;
trigger gt_DefeatCheat;
trigger gt_VictoryStatDOMKills;
trigger gt_VictoryStatSupplyTracker;
trigger gt_AchievementBunkerRush;
trigger gt_TipReadyQ;
trigger gt_StartAI;
trigger gt_AIUpgradesCasualNormal;
trigger gt_AIUpgradesHardBrutal;
trigger gt_S1KillEggsAndLarvae;
trigger gt_S1SetUpWaveSpawnRegionBullies;
trigger gt_S1TurnOnLaneBullyBuilding01;
trigger gt_S1TurnOnLaneBullyBuilding02;
trigger gt_S1ApplyPlayerUpgradesToGarrisonPlayer;
trigger gt_S1AttackWaveOverseerReturnsHome;
trigger gt_S1FirstZergAttackMiddleQ;
trigger gt_S1FirstZergAttackRightQ;
trigger gt_S1FirstZergAttackLeftQ;
trigger gt_S1FirstZergAttackFlyersQ;
trigger gt_S1ZergFirehoseGarrisonP03;
trigger gt_S1ZergFirehoseGarrisonP04;
trigger gt_S1ZergFirehoseGarrisonP05;
trigger gt_ObjectiveFillGarrisonsCreate;
trigger gt_ObjectiveFillGarrisonsComplete;
trigger gt_ObjectiveFillGarrisonsUpdate;
trigger gt_ObjectiveFillGarrisonsFailed;
trigger gt_ObjectiveRecoverDownedForcesCreate;
trigger gt_ObjectiveRecoverDownedForcesComplete;
trigger gt_ObjectiveRecoverDownedForcesFailed;
trigger gt_ObjectiveReachCommunicationsHubCreate;
trigger gt_ObjectiveReachCommunicationsHubComplete;
trigger gt_ObjectiveReachCommunicationsHubFailed;
trigger gt_ObjectiveNovaMustSurviveCreate;
trigger gt_ObjectiveNovaMustSurviveComplete;
trigger gt_ObjectiveNovaMustSurviveFailed;
trigger gt_ObjectiveReachCommandRoomCreate;
trigger gt_ObjectiveReachCommandRoomComplete;
trigger gt_ObjectiveReachCommandRoomFailed;
trigger gt_BriefingQ;
trigger gt_BriefingScene00TarsonisInfested;
trigger gt_BreifingScene00TarsosnisCamera;
trigger gt_BriefingScene01DOMBase;
trigger gt_BriefingScene02ShowGarrisons;
trigger gt_BriefingScene03ShowSiegeTanks;
trigger gt_BriefingZergAttack;
trigger gt_BriefingScene04ShowHellbats;
trigger gt_BriefingHellbatAttack;
trigger gt_IntroQ;
trigger gt_IntroSetup;
trigger gt_IntroCinematic;
trigger gt_IntroCinematicEnd;
trigger gt_IntroCleanup;
trigger gt_IntroSpawnTank;
trigger gt_IntroSpawnBarracksUnits;
trigger gt_MidQ;
trigger gt_MidSetup;
trigger gt_MidCinematic;
trigger gt_MidCinematicEnd;
trigger gt_MidCleanup;
trigger gt_MidQ2;
trigger gt_MidSetup2;
trigger gt_MidCinematic2;
trigger gt_MidCinematicEnd2;
trigger gt_MidCleanup2;
trigger gt_MidTrooperResponse2;
trigger gt_MidScientistResponse2;
trigger gt_VictoryQ;
trigger gt_VictorySetup;
trigger gt_VictoryCinematic;
trigger gt_VictoryCinematicEnd;
trigger gt_VictoryCleanup;

//--------------------------------------------------------------------------------------------------
// Custom AI Functions
//--------------------------------------------------------------------------------------------------
string[17] cai_playerAI;

//--------------------------------------------------------------------------------------------------
void InitCustomAI () {
    int init_i;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        cai_playerAI[init_i] = null;
    }
}

//--------------------------------------------------------------------------------------------------
void cai_start (string ai, int p) {
    if (p < 0 || p >= 16) {
        return;
    }
    cai_playerAI[p] = ai;

    if (cai_playerAI[p] == "aiA88256A6") { aiA88256A6_start(p); }
    if (cai_playerAI[p] == "ai663E0A14") { ai663E0A14_start(p); }
    if (cai_playerAI[p] == "ai3F4FA9FC") { ai3F4FA9FC_start(p); }
}

//--------------------------------------------------------------------------------------------------
void cai_setDefGather (int p, point val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiA88256A6") { aiA88256A6_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai663E0A14") { ai663E0A14_setDefGather(p, val); }
    if (cai_playerAI[p] == "ai3F4FA9FC") { ai3F4FA9FC_setDefGather(p, val); }
}

//--------------------------------------------------------------------------------------------------
string cai_getCustomData (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiA88256A6") { return aiA88256A6_getCustomData(p); }
    if (cai_playerAI[p] == "ai663E0A14") { return ai663E0A14_getCustomData(p); }
    if (cai_playerAI[p] == "ai3F4FA9FC") { return ai3F4FA9FC_getCustomData(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_getLastWave (int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiA88256A6") { return aiA88256A6_getLastWave(p); }
    if (cai_playerAI[p] == "ai663E0A14") { return ai663E0A14_getLastWave(p); }
    if (cai_playerAI[p] == "ai3F4FA9FC") { return ai3F4FA9FC_getLastWave(p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_waves_run (int p, playergroup target) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiA88256A6") { aiA88256A6_waves_run(p, target); }
    if (cai_playerAI[p] == "ai663E0A14") { ai663E0A14_waves_run(p, target); }
    if (cai_playerAI[p] == "ai3F4FA9FC") { ai3F4FA9FC_waves_run(p, target); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_enable (int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiA88256A6") { aiA88256A6_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai663E0A14") { ai663E0A14_waves_enable(p, val); }
    if (cai_playerAI[p] == "ai3F4FA9FC") { ai3F4FA9FC_waves_enable(p, val); }
}

//--------------------------------------------------------------------------------------------------
void cai_waves_stop (string ai) {
    if (ai == "aiA88256A6") { aiA88256A6_waves_stop(); }
    if (ai == "ai663E0A14") { ai663E0A14_waves_stop(); }
    if (ai == "ai3F4FA9FC") { ai3F4FA9FC_waves_stop(); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_run (int w, int p, playergroup target, bool wait) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiA88256A6") { aiA88256A6_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai663E0A14") { ai663E0A14_wave_run(w, p, target, wait); }
    if (cai_playerAI[p] == "ai3F4FA9FC") { ai3F4FA9FC_wave_run(w, p, target, wait); }
}

//--------------------------------------------------------------------------------------------------
void cai_wave_enable (int w, int p, bool val) {
    if (p < 0 || p >= 16) {
        return;
    }
    if (cai_playerAI[p] == "aiA88256A6") { aiA88256A6_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai663E0A14") { ai663E0A14_wave_enable(w, p, val); }
    if (cai_playerAI[p] == "ai3F4FA9FC") { ai3F4FA9FC_wave_enable(w, p, val); }
}

//--------------------------------------------------------------------------------------------------
bool cai_wave_isEnabled (int w, int p) {
    if (p < 0 || p >= 16) {
        return false;
    }
    if (cai_playerAI[p] == "aiA88256A6") { return aiA88256A6_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai663E0A14") { return ai663E0A14_wave_isEnabled(w, p); }
    if (cai_playerAI[p] == "ai3F4FA9FC") { return ai3F4FA9FC_wave_isEnabled(w, p); }
    return false;
}

//--------------------------------------------------------------------------------------------------
unitgroup cai_wave_createdUnits (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiA88256A6") { return aiA88256A6_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai663E0A14") { return ai663E0A14_wave_createdUnits(w, p); }
    if (cai_playerAI[p] == "ai3F4FA9FC") { return ai3F4FA9FC_wave_createdUnits(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
wave cai_wave_createdWave (int w, int p) {
    if (p < 0 || p >= 16) {
        return null;
    }
    if (cai_playerAI[p] == "aiA88256A6") { return aiA88256A6_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai663E0A14") { return ai663E0A14_wave_createdWave(w, p); }
    if (cai_playerAI[p] == "ai3F4FA9FC") { return ai3F4FA9FC_wave_createdWave(w, p); }
    return null;
}

//--------------------------------------------------------------------------------------------------
void cai_startall () {
    cai_start("aiA88256A6", 9);
    cai_start("ai663E0A14", 10);
    cai_start("ai3F4FA9FC", 11);
    AICampaignStart(2);
    AICampaignStart(3);
    AICampaignStart(4);
    AICampaignStart(5);
    AICampaignStart(6);
    AICampaignStart(7);
    AICampaignStart(8);
}

//--------------------------------------------------------------------------------------------------
void cai_runall () {
    playergroup target = PlayerGroupEmpty();

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(9, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(10, target);

    PlayerGroupClear(target);
    PlayerGroupAdd(target, 1);
    cai_waves_run(11, target);
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
point gf_RandomPointinRegionSharedbyGroup (region lp_region, unitgroup lp_unitGroup) {
    int auto632605BB_n;
    int auto632605BB_i;
    int auto6E14573E_ae;
    int auto6E14573E_ai;

    // Variable Declarations
    point lv_currentPoint;
    int lv_unitIndex;
    bool lv_pointIsValid;

    // Variable Initialization

    // Implementation
    auto632605BB_n = 50;
    for (auto632605BB_i = 1; auto632605BB_i <= auto632605BB_n; auto632605BB_i += 1) {
        lv_currentPoint = RegionRandomPoint(lp_region);
        lv_pointIsValid = true;
        auto6E14573E_ae = UnitGroupCount(lp_unitGroup, c_unitCountAlive);
        auto6E14573E_ai = 1;
        lv_unitIndex = 1;
        for ( ; ( (auto6E14573E_ai >= 0 && lv_unitIndex <= auto6E14573E_ae) || (auto6E14573E_ai <= 0 && lv_unitIndex >= auto6E14573E_ae) ) ; lv_unitIndex += auto6E14573E_ai ) {
            if ((DistanceBetweenPoints(libNCMI_gf_StealthAIGetHomePointOfUnit(UnitGroupUnit(lp_unitGroup, lv_unitIndex)), lv_currentPoint) < 1.0)) {
                lv_pointIsValid = false;
                break;
            }

        }
        if ((lv_pointIsValid == true)) {
            break;
        }

    }
    return lv_currentPoint;
}

trigger auto_gf_DOMUnitsInvestigateTransmissionsQ_Trigger = null;
unitgroup auto_gf_DOMUnitsInvestigateTransmissionsQ_lp_investigatingUnitGroup;
point auto_gf_DOMUnitsInvestigateTransmissionsQ_lp_investigatingPoint;

void gf_DOMUnitsInvestigateTransmissionsQ (unitgroup lp_investigatingUnitGroup, point lp_investigatingPoint) {
    auto_gf_DOMUnitsInvestigateTransmissionsQ_lp_investigatingUnitGroup = lp_investigatingUnitGroup;
    auto_gf_DOMUnitsInvestigateTransmissionsQ_lp_investigatingPoint = lp_investigatingPoint;

    if (auto_gf_DOMUnitsInvestigateTransmissionsQ_Trigger == null) {
        auto_gf_DOMUnitsInvestigateTransmissionsQ_Trigger = TriggerCreate("auto_gf_DOMUnitsInvestigateTransmissionsQ_TriggerFunc");
    }

    TriggerExecute(auto_gf_DOMUnitsInvestigateTransmissionsQ_Trigger, false, false);
}

bool auto_gf_DOMUnitsInvestigateTransmissionsQ_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_investigatingUnitGroup = auto_gf_DOMUnitsInvestigateTransmissionsQ_lp_investigatingUnitGroup;
    point lp_investigatingPoint = auto_gf_DOMUnitsInvestigateTransmissionsQ_lp_investigatingPoint;

    int autoC12BC70F_val;
    int auto8F97E3BD_val;

    // Variable Declarations
    unit lv_speaker;
    timer lv_talkTimer;

    // Variable Initialization
    lv_talkTimer = TimerCreate();

    // Implementation
    TimerStart(lv_talkTimer, 2.0, false, c_timeAI);
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (TimerGetRemaining(lv_talkTimer) < 0.1) || (UnitIsAlive(gv_zeratul) == false))) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    if ((UnitGroupCount(lp_investigatingUnitGroup, c_unitCountAlive) > 0)) {
        TimerStart(gv_unitInvestigateTransmissionCooldownTimer, gv_unitInvestigateTransmissionCooldown, false, c_timeGame);
        lv_speaker = UnitGroupClosestToPoint(lp_investigatingUnitGroup, lp_investigatingPoint);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        if (((UnitGetType(lv_speaker) == "Ghost") || (UnitGetType(lv_speaker) == "GhostDetectorCone"))) {
            libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00088", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if (((UnitGetType(lv_speaker) == "GhostAlternate") || (UnitGetType(lv_speaker) == "GhostAlternateDetectorCone"))) {
            libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00134", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else if ((UnitGetType(lv_speaker) == "Separatist")) {
            if (gv_unitInvestigateTransmissionCycleTrooper >= 4) {
                gv_unitInvestigateTransmissionCycleTrooper = 1;
            }
            else {
                gv_unitInvestigateTransmissionCycleTrooper = gv_unitInvestigateTransmissionCycleTrooper + 1;
            }
            autoC12BC70F_val = gv_unitInvestigateTransmissionCycleTrooper;
            if (autoC12BC70F_val == 1) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00077", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (autoC12BC70F_val == 2) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00084", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (autoC12BC70F_val == 3) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00082", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (autoC12BC70F_val == 4) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00078", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        else if ((UnitGetType(lv_speaker) == "Marauder")) {
            if (gv_unitInvestigateTransmissionCycleMarauder >= 2) {
                gv_unitInvestigateTransmissionCycleMarauder = 1;
            }
            else {
                gv_unitInvestigateTransmissionCycleMarauder = gv_unitInvestigateTransmissionCycleMarauder + 1;
            }
            auto8F97E3BD_val = gv_unitInvestigateTransmissionCycleMarauder;
            if (auto8F97E3BD_val == 1) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00079", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto8F97E3BD_val == 2) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00086", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

trigger auto_gf_S1GarrisonUnit_Trigger = null;
unit auto_gf_S1GarrisonUnit_lp_garrisonUnit;
int auto_gf_S1GarrisonUnit_lp_garrisonIndex;

void gf_S1GarrisonUnit (unit lp_garrisonUnit, int lp_garrisonIndex) {
    auto_gf_S1GarrisonUnit_lp_garrisonUnit = lp_garrisonUnit;
    auto_gf_S1GarrisonUnit_lp_garrisonIndex = lp_garrisonIndex;

    if (auto_gf_S1GarrisonUnit_Trigger == null) {
        auto_gf_S1GarrisonUnit_Trigger = TriggerCreate("auto_gf_S1GarrisonUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_S1GarrisonUnit_Trigger, false, false);
}

bool auto_gf_S1GarrisonUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_garrisonUnit = auto_gf_S1GarrisonUnit_lp_garrisonUnit;
    int lp_garrisonIndex = auto_gf_S1GarrisonUnit_lp_garrisonIndex;

    // Implementation
    gv_s1_GarrisonSpots[lp_garrisonIndex].lv_garrisonUnitCount += 1;
    TextExpressionSetToken("Param/Expression/0F43735D", "A", UnitTypeGetName(gv_s1_GarrisonSpots[lp_garrisonIndex].lv_garrisonUnitType));
    TextExpressionSetToken("Param/Expression/0F43735D", "B", IntToText(gv_s1_GarrisonSpots[lp_garrisonIndex].lv_garrisonUnitCount));
    TextExpressionSetToken("Param/Expression/0F43735D", "C", IntToText(gv_s1_GarrisonSpots[lp_garrisonIndex].lv_garrisonUnitMax));
    PingSetTooltip(libHots_gf_PingStoredForUnit(gv_s1_GarrisonSpots[lp_garrisonIndex].lv_beaconUnit, 1), TextExpressionAssemble("Param/Expression/0F43735D"));
    TextExpressionSetToken("Param/Expression/D9156B0B", "A", UnitTypeGetName(gv_s1_GarrisonSpots[lp_garrisonIndex].lv_garrisonUnitType));
    TextExpressionSetToken("Param/Expression/D9156B0B", "B", IntToText(gv_s1_GarrisonSpots[lp_garrisonIndex].lv_garrisonUnitCount));
    TextExpressionSetToken("Param/Expression/D9156B0B", "C", IntToText(gv_s1_GarrisonSpots[lp_garrisonIndex].lv_garrisonUnitMax));
    TextTagSetText(libHots_gf_TextTagForUnit(gv_s1_GarrisonSpots[lp_garrisonIndex].lv_beaconUnit, 1), TextExpressionAssemble("Param/Expression/D9156B0B"));
    gf_S1MoveAndGarrisonUnit(lp_garrisonUnit, lp_garrisonIndex, gv_s1_GarrisonSpots[lp_garrisonIndex].lv_garrisonUnitCount);
    if ((gv_s1_GarrisonSpots[lp_garrisonIndex].lv_garrisonUnitCount == 1)) {
        VisRevealArea(gv_pLAYER_01_USER, gv_s1_GarrisonSpots[lp_garrisonIndex].lv_garrisonSightRegion, 0.0, false);
    }

    if ((gv_s1_GarrisonSpots[lp_garrisonIndex].lv_garrisonUnitCount >= gv_s1_GarrisonSpots[lp_garrisonIndex].lv_garrisonUnitMax)) {
        gv_s1_GarrisonSpots[lp_garrisonIndex].lv_garrisonSpotCompleted = true;
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/E0358B13"), null, UnitGetPosition(gv_s1_GarrisonSpots[lp_garrisonIndex].lv_beaconUnit));
        PingDestroy(libHots_gf_PingStoredForUnit(gv_s1_GarrisonSpots[lp_garrisonIndex].lv_beaconUnit, 1));
        TextTagDestroy(libHots_gf_TextTagForUnit(gv_s1_GarrisonSpots[lp_garrisonIndex].lv_beaconUnit, 1));
        UnitKill(gv_s1_GarrisonSpots[lp_garrisonIndex].lv_beaconUnit);
        gv_objectiveFillGarrisonsCount += 1;
        TriggerExecute(gt_AchievementBunkerRush, true, false);
        TriggerExecute(gt_ObjectiveFillGarrisonsUpdate, true, false);
        if ((gv_objectiveFillGarrisonsCount >= gv_objectiveFillGarrisonsMax)) {
            TriggerExecute(gt_S1GarrisonsAllFilledUp, true, false);
        }
        else {
            Wait(2.0, c_timeGame);
            TriggerExecute(gt_S1GarrisonFilledQ, true, false);
        }
    }

    return true;
}

trigger auto_gf_S1MoveAndGarrisonUnit_Trigger = null;
unit auto_gf_S1MoveAndGarrisonUnit_lp_garrisonUnit;
int auto_gf_S1MoveAndGarrisonUnit_lp_garrisonIndex;
int auto_gf_S1MoveAndGarrisonUnit_lp_garrisonSpotIndex;

void gf_S1MoveAndGarrisonUnit (unit lp_garrisonUnit, int lp_garrisonIndex, int lp_garrisonSpotIndex) {
    auto_gf_S1MoveAndGarrisonUnit_lp_garrisonUnit = lp_garrisonUnit;
    auto_gf_S1MoveAndGarrisonUnit_lp_garrisonIndex = lp_garrisonIndex;
    auto_gf_S1MoveAndGarrisonUnit_lp_garrisonSpotIndex = lp_garrisonSpotIndex;

    if (auto_gf_S1MoveAndGarrisonUnit_Trigger == null) {
        auto_gf_S1MoveAndGarrisonUnit_Trigger = TriggerCreate("auto_gf_S1MoveAndGarrisonUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_S1MoveAndGarrisonUnit_Trigger, false, false);
}

bool auto_gf_S1MoveAndGarrisonUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_garrisonUnit = auto_gf_S1MoveAndGarrisonUnit_lp_garrisonUnit;
    int lp_garrisonIndex = auto_gf_S1MoveAndGarrisonUnit_lp_garrisonIndex;
    int lp_garrisonSpotIndex = auto_gf_S1MoveAndGarrisonUnit_lp_garrisonSpotIndex;

    string autoB9250851_val;

    // Implementation
    UnitSelect(lp_garrisonUnit, gv_pLAYER_01_USER, false);
    UnitSetOwner(lp_garrisonUnit, gv_pLAYER_02_NOVASUPPORT, true);
    UnitAbilityEnable(lp_garrisonUnit, "attack", false);
    UnitSetState(lp_garrisonUnit, c_unitStateHighlightable, false);
    UnitSetState(lp_garrisonUnit, c_unitStateTargetable, false);
    UnitSetState(lp_garrisonUnit, c_unitStateInvulnerable, true);
    UnitSetPropertyFixed(lp_garrisonUnit, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lp_garrisonUnit, c_unitPropShieldsPercent, 100.0);
    UnitSetPropertyFixed(lp_garrisonUnit, c_unitPropEnergyPercent, 100.0);
    UnitBehaviorAdd(lp_garrisonUnit, "SuppressCollision", lp_garrisonUnit, 1);
    while ((libNCMI_gf_GameIsOver() == false) && (gv_currentStage == 1) && (UnitIsAlive(lp_garrisonUnit) == true) && (DistanceBetweenPoints(UnitGetPosition(lp_garrisonUnit), gv_s1_GarrisonSpots[lp_garrisonIndex].lv_unitTargetPoint) >= 1)) {
        if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            UnitIssueOrder(lp_garrisonUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_s1_GarrisonSpots[lp_garrisonIndex].lv_unitTargetPoint), c_orderQueueReplace);
        }

        Wait(0.0625, c_timeGame);
    }
    if ((UnitIsAlive(lp_garrisonUnit) == true)) {
        SoundPlayForPlayer(SoundLink("Medivac_Load", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        UnitSetOwner(gv_s1_GarrisonSpots[lp_garrisonIndex].lv_garrisonTurret, gv_pLAYER_02_NOVASUPPORT, true);
        UnitSetPosition(lp_garrisonUnit, PointFromName(("S1 - Garrison 0" + IntToString(lp_garrisonIndex) + " Point 0" + IntToString(lp_garrisonSpotIndex))), false);
        UnitSetFacing(lp_garrisonUnit, PointGetFacing(PointFromName(("S1 - Garrison 0" + IntToString(lp_garrisonIndex) + " Point 0" + IntToString(lp_garrisonSpotIndex)))), 0.0);
        UnitAbilityEnable(lp_garrisonUnit, "attack", true);
        UnitSetState(lp_garrisonUnit, c_unitStateHighlightable, true);
        UnitSetState(lp_garrisonUnit, c_unitStateTargetable, true);
        autoB9250851_val = UnitGetType(lp_garrisonUnit);
        if (autoB9250851_val == "Marauder") {
            UnitBehaviorAdd(lp_garrisonUnit, "GarrisonMarauder", lp_garrisonUnit, 1);
        }
        else if (autoB9250851_val == "MengskMarauder") {
            UnitBehaviorAdd(lp_garrisonUnit, "GarrisonMarauder", lp_garrisonUnit, 1);
        }
        else if (autoB9250851_val == "Marine") {
            UnitBehaviorAdd(lp_garrisonUnit, "GarrisonMarine", lp_garrisonUnit, 1);
        }
        else if (autoB9250851_val == "Reaper") {
            UnitBehaviorAdd(lp_garrisonUnit, "GarrisonReaper", lp_garrisonUnit, 1);
        }
        else {
        }
    }

    return true;
}

trigger auto_gf_S1UnloadUnitsFromNydusWorm_Trigger = null;
int auto_gf_S1UnloadUnitsFromNydusWorm_lp_count;
string auto_gf_S1UnloadUnitsFromNydusWorm_lp_unitType;
unit auto_gf_S1UnloadUnitsFromNydusWorm_lp_nydusWorm;
point auto_gf_S1UnloadUnitsFromNydusWorm_lp_rallyPoint;
int auto_gf_S1UnloadUnitsFromNydusWorm_lp_player;

void gf_S1UnloadUnitsFromNydusWorm (int lp_count, string lp_unitType, unit lp_nydusWorm, point lp_rallyPoint, int lp_player) {
    auto_gf_S1UnloadUnitsFromNydusWorm_lp_count = lp_count;
    auto_gf_S1UnloadUnitsFromNydusWorm_lp_unitType = lp_unitType;
    auto_gf_S1UnloadUnitsFromNydusWorm_lp_nydusWorm = lp_nydusWorm;
    auto_gf_S1UnloadUnitsFromNydusWorm_lp_rallyPoint = lp_rallyPoint;
    auto_gf_S1UnloadUnitsFromNydusWorm_lp_player = lp_player;

    if (auto_gf_S1UnloadUnitsFromNydusWorm_Trigger == null) {
        auto_gf_S1UnloadUnitsFromNydusWorm_Trigger = TriggerCreate("auto_gf_S1UnloadUnitsFromNydusWorm_TriggerFunc");
    }

    TriggerExecute(auto_gf_S1UnloadUnitsFromNydusWorm_Trigger, false, false);
}

bool auto_gf_S1UnloadUnitsFromNydusWorm_TriggerFunc (bool testConds, bool runActions) {
    int lp_count = auto_gf_S1UnloadUnitsFromNydusWorm_lp_count;
    string lp_unitType = auto_gf_S1UnloadUnitsFromNydusWorm_lp_unitType;
    unit lp_nydusWorm = auto_gf_S1UnloadUnitsFromNydusWorm_lp_nydusWorm;
    point lp_rallyPoint = auto_gf_S1UnloadUnitsFromNydusWorm_lp_rallyPoint;
    int lp_player = auto_gf_S1UnloadUnitsFromNydusWorm_lp_player;

    int auto7205CDCE_ae;
    int auto7205CDCE_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto7205CDCE_ae = lp_count;
    auto7205CDCE_ai = 1;
    lv_i = 1;
    for ( ; ( (auto7205CDCE_ai >= 0 && lv_i <= auto7205CDCE_ae) || (auto7205CDCE_ai <= 0 && lv_i >= auto7205CDCE_ae) ) ; lv_i += auto7205CDCE_ai ) {
        if ((UnitIsAlive(lp_nydusWorm) == true) && (libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
            SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Unload", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_nydusWorm), 0.0, 100.0, 0.0);
            libNtve_gf_SendActorMessageToUnit(lp_nydusWorm, "AnimPlay Spell Spell");
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, lp_player, PointWithOffset(UnitGetPosition(lp_nydusWorm), 0.0, -1.0));
            UnitGroupAdd(gv_s1_NydusUnloadedUnits, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_rallyPoint), c_orderQueueReplace);
            Wait(0.75, c_timeGame);
        }

    }
    return true;
}

trigger auto_gf_S1BonusObjectiveDespawnZergFlyer_Trigger = null;
unit auto_gf_S1BonusObjectiveDespawnZergFlyer_lp_flyerUnit;

void gf_S1BonusObjectiveDespawnZergFlyer (unit lp_flyerUnit) {
    auto_gf_S1BonusObjectiveDespawnZergFlyer_lp_flyerUnit = lp_flyerUnit;

    if (auto_gf_S1BonusObjectiveDespawnZergFlyer_Trigger == null) {
        auto_gf_S1BonusObjectiveDespawnZergFlyer_Trigger = TriggerCreate("auto_gf_S1BonusObjectiveDespawnZergFlyer_TriggerFunc");
    }

    TriggerExecute(auto_gf_S1BonusObjectiveDespawnZergFlyer_Trigger, false, false);
}

bool auto_gf_S1BonusObjectiveDespawnZergFlyer_TriggerFunc (bool testConds, bool runActions) {
    unit lp_flyerUnit = auto_gf_S1BonusObjectiveDespawnZergFlyer_lp_flyerUnit;

    // Implementation
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_currentStage == 1) && (DistanceBetweenPoints(UnitGetPosition(lp_flyerUnit), RegionGetCenter(RegionFromId(57))) >= 1)) {
        UnitIssueOrder(lp_flyerUnit, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(57))), c_orderQueueReplace);
        Wait(0.25, c_timeGame);
    }
    return true;
}

trigger auto_gf_S1BonusObjectiveSpawnSurvivor_Trigger = null;
unit auto_gf_S1BonusObjectiveSpawnSurvivor_lp_survivorUnit;

void gf_S1BonusObjectiveSpawnSurvivor (unit lp_survivorUnit) {
    auto_gf_S1BonusObjectiveSpawnSurvivor_lp_survivorUnit = lp_survivorUnit;

    if (auto_gf_S1BonusObjectiveSpawnSurvivor_Trigger == null) {
        auto_gf_S1BonusObjectiveSpawnSurvivor_Trigger = TriggerCreate("auto_gf_S1BonusObjectiveSpawnSurvivor_TriggerFunc");
    }

    TriggerExecute(auto_gf_S1BonusObjectiveSpawnSurvivor_Trigger, false, false);
}

bool auto_gf_S1BonusObjectiveSpawnSurvivor_TriggerFunc (bool testConds, bool runActions) {
    unit lp_survivorUnit = auto_gf_S1BonusObjectiveSpawnSurvivor_lp_survivorUnit;

    // Variable Declarations
    point lv_survivorTargetPoint;

    // Variable Initialization

    // Implementation
    lv_survivorTargetPoint = UnitGetPosition(lp_survivorUnit);
    UnitSetPosition(lp_survivorUnit, PointFromId(505), false);
    libNtve_gf_PauseUnit(lp_survivorUnit, false);
    libNtve_gf_ShowHideUnit(lp_survivorUnit, true);
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(lp_survivorUnit) == true) && (DistanceBetweenPoints(UnitGetPosition(lp_survivorUnit), lv_survivorTargetPoint) > 0.5) && (gv_currentStage == 1)) {
        UnitIssueOrder(lp_survivorUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_survivorTargetPoint), c_orderQueueReplace);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_S3ZergWanderAfterDelay_Trigger = null;
unit auto_gf_S3ZergWanderAfterDelay_lp_unit;
fixed auto_gf_S3ZergWanderAfterDelay_lp_delay;

void gf_S3ZergWanderAfterDelay (unit lp_unit, fixed lp_delay) {
    auto_gf_S3ZergWanderAfterDelay_lp_unit = lp_unit;
    auto_gf_S3ZergWanderAfterDelay_lp_delay = lp_delay;

    if (auto_gf_S3ZergWanderAfterDelay_Trigger == null) {
        auto_gf_S3ZergWanderAfterDelay_Trigger = TriggerCreate("auto_gf_S3ZergWanderAfterDelay_TriggerFunc");
    }

    TriggerExecute(auto_gf_S3ZergWanderAfterDelay_Trigger, false, false);
}

bool auto_gf_S3ZergWanderAfterDelay_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_S3ZergWanderAfterDelay_lp_unit;
    fixed lp_delay = auto_gf_S3ZergWanderAfterDelay_lp_delay;

    // Variable Declarations
    region lv_wanderRegion;

    // Variable Initialization

    // Implementation
    Wait(lp_delay, c_timeGame);
    if ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(lp_unit) == true)) {
        lv_wanderRegion = RegionCircle(UnitGetPosition(lp_unit), 4.0);
        while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(lp_unit) == true)) {
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lv_wanderRegion)), c_orderQueueReplace);
            }

            Wait(2.0, c_timeGame);
        }
    }

    return true;
}

trigger auto_gf_S3LiftOffHerculesVertically_Trigger = null;
unit auto_gf_S3LiftOffHerculesVertically_lp_shipUnit;

void gf_S3LiftOffHerculesVertically (unit lp_shipUnit) {
    auto_gf_S3LiftOffHerculesVertically_lp_shipUnit = lp_shipUnit;

    if (auto_gf_S3LiftOffHerculesVertically_Trigger == null) {
        auto_gf_S3LiftOffHerculesVertically_Trigger = TriggerCreate("auto_gf_S3LiftOffHerculesVertically_TriggerFunc");
    }

    TriggerExecute(auto_gf_S3LiftOffHerculesVertically_Trigger, false, false);
}

bool auto_gf_S3LiftOffHerculesVertically_TriggerFunc (bool testConds, bool runActions) {
    unit lp_shipUnit = auto_gf_S3LiftOffHerculesVertically_lp_shipUnit;

    // Implementation
    UnitIssueOrder(lp_shipUnit, Order(AbilityCommand("HerculesLiftOff", 0)), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    UnitSetHeight(lp_shipUnit, 10.0, 3.0);
    Wait(1.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(lp_shipUnit, "SetOpacity 0.000000 1.500000");
    Wait(1.5, c_timeGame);
    UnitGroupLoopBegin(UnitCargoGroup(lp_shipUnit));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitRemove(lp_shipUnit);
    return true;
}

trigger auto_gf_S3LandHerculesVertically_Trigger = null;
unit auto_gf_S3LandHerculesVertically_lp_shipUnit;

void gf_S3LandHerculesVertically (unit lp_shipUnit) {
    auto_gf_S3LandHerculesVertically_lp_shipUnit = lp_shipUnit;

    if (auto_gf_S3LandHerculesVertically_Trigger == null) {
        auto_gf_S3LandHerculesVertically_Trigger = TriggerCreate("auto_gf_S3LandHerculesVertically_TriggerFunc");
    }

    TriggerExecute(auto_gf_S3LandHerculesVertically_Trigger, false, false);
}

bool auto_gf_S3LandHerculesVertically_TriggerFunc (bool testConds, bool runActions) {
    unit lp_shipUnit = auto_gf_S3LandHerculesVertically_lp_shipUnit;

    // Implementation
    libNtve_gf_PauseUnit(lp_shipUnit, true);
    UnitSetHeight(lp_shipUnit, 10.0, 0.0);
    UnitSetHeight(lp_shipUnit, 3.0, 3.0);
    libNtve_gf_SendActorMessageToUnit(lp_shipUnit, "SetOpacity");
    libNtve_gf_SendActorMessageToUnit(lp_shipUnit, "SetOpacity 1.000000 1.500000");
    Wait(3.0, c_timeGame);
    libNtve_gf_PauseUnit(lp_shipUnit, false);
    UnitIssueOrder(lp_shipUnit, OrderTargetingPoint(AbilityCommand("HerculesLand", 0), UnitGetPosition(lp_shipUnit)), c_orderQueueReplace);
    return true;
}

trigger auto_gf_S3LiftOffHerculesLaunchForward_Trigger = null;
unit auto_gf_S3LiftOffHerculesLaunchForward_lp_shipUnit;
fixed auto_gf_S3LiftOffHerculesLaunchForward_lp_launchAngle;

void gf_S3LiftOffHerculesLaunchForward (unit lp_shipUnit, fixed lp_launchAngle) {
    auto_gf_S3LiftOffHerculesLaunchForward_lp_shipUnit = lp_shipUnit;
    auto_gf_S3LiftOffHerculesLaunchForward_lp_launchAngle = lp_launchAngle;

    if (auto_gf_S3LiftOffHerculesLaunchForward_Trigger == null) {
        auto_gf_S3LiftOffHerculesLaunchForward_Trigger = TriggerCreate("auto_gf_S3LiftOffHerculesLaunchForward_TriggerFunc");
    }

    TriggerExecute(auto_gf_S3LiftOffHerculesLaunchForward_Trigger, false, false);
}

bool auto_gf_S3LiftOffHerculesLaunchForward_TriggerFunc (bool testConds, bool runActions) {
    unit lp_shipUnit = auto_gf_S3LiftOffHerculesLaunchForward_lp_shipUnit;
    fixed lp_launchAngle = auto_gf_S3LiftOffHerculesLaunchForward_lp_launchAngle;

    // Implementation
    UnitIssueOrder(lp_shipUnit, Order(AbilityCommand("HerculesLiftOff", 0)), c_orderQueueReplace);
    Wait(6.0, c_timeGame);
    if ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(lp_shipUnit) == true)) {
        UnitIssueOrder(lp_shipUnit, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(lp_shipUnit), 1.0, lp_launchAngle)), c_orderQueueReplace);
    }

    Wait(1.0, c_timeGame);
    if ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(lp_shipUnit) == true)) {
        libNtve_gf_MakeUnitInvulnerable(lp_shipUnit, true);
        libNtve_gf_SendActorMessageToUnit(lp_shipUnit, "AnimPlay Spell Land,Forward PlayForever,NonLooping");
    }

    return true;
}

trigger auto_gf_S3OverseerPatrol2Points_Trigger = null;
unit auto_gf_S3OverseerPatrol2Points_lp_overseer;
point auto_gf_S3OverseerPatrol2Points_lp_point1;
point auto_gf_S3OverseerPatrol2Points_lp_point2;
fixed auto_gf_S3OverseerPatrol2Points_lp_waitTimeAtPoint;

void gf_S3OverseerPatrol2Points (unit lp_overseer, point lp_point1, point lp_point2, fixed lp_waitTimeAtPoint) {
    auto_gf_S3OverseerPatrol2Points_lp_overseer = lp_overseer;
    auto_gf_S3OverseerPatrol2Points_lp_point1 = lp_point1;
    auto_gf_S3OverseerPatrol2Points_lp_point2 = lp_point2;
    auto_gf_S3OverseerPatrol2Points_lp_waitTimeAtPoint = lp_waitTimeAtPoint;

    if (auto_gf_S3OverseerPatrol2Points_Trigger == null) {
        auto_gf_S3OverseerPatrol2Points_Trigger = TriggerCreate("auto_gf_S3OverseerPatrol2Points_TriggerFunc");
    }

    TriggerExecute(auto_gf_S3OverseerPatrol2Points_Trigger, false, false);
}

bool auto_gf_S3OverseerPatrol2Points_TriggerFunc (bool testConds, bool runActions) {
    unit lp_overseer = auto_gf_S3OverseerPatrol2Points_lp_overseer;
    point lp_point1 = auto_gf_S3OverseerPatrol2Points_lp_point1;
    point lp_point2 = auto_gf_S3OverseerPatrol2Points_lp_point2;
    fixed lp_waitTimeAtPoint = auto_gf_S3OverseerPatrol2Points_lp_waitTimeAtPoint;

    point auto06B6615B_val;

    // Variable Declarations
    point lv_targetPoint;
    timer lv_waitTimer;

    // Variable Initialization
    lv_waitTimer = TimerCreate();

    // Implementation
    lv_targetPoint = lp_point1;
    while ((libNCMI_gf_GameIsOver() == false) && (UnitIsAlive(lp_overseer) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_overseer), lv_targetPoint) <= 0.5)) {
            auto06B6615B_val = lv_targetPoint;
            if (auto06B6615B_val == lp_point1) {
                lv_targetPoint = lp_point2;
            }
            else if (auto06B6615B_val == lp_point2) {
                lv_targetPoint = lp_point1;
            }
            else {
            }
            TimerStart(lv_waitTimer, lp_waitTimeAtPoint, false, c_timeGame);
        }
        else {
            if ((TimerGetRemaining(lv_waitTimer) <= 0.0)) {
                UnitIssueOrder(lp_overseer, OrderTargetingPoint(AbilityCommand("move", 3), lv_targetPoint), c_orderQueueReplace);
            }

        }
        Wait(0.25, c_timeGame);
    }
    return true;
}

trigger auto_gf_S3UnloadUnitsFromNydusWorm_Trigger = null;
int auto_gf_S3UnloadUnitsFromNydusWorm_lp_count;
string auto_gf_S3UnloadUnitsFromNydusWorm_lp_unitType;
unit auto_gf_S3UnloadUnitsFromNydusWorm_lp_nydusWorm;
point auto_gf_S3UnloadUnitsFromNydusWorm_lp_rallyPoint;
int auto_gf_S3UnloadUnitsFromNydusWorm_lp_player;

void gf_S3UnloadUnitsFromNydusWorm (int lp_count, string lp_unitType, unit lp_nydusWorm, point lp_rallyPoint, int lp_player) {
    auto_gf_S3UnloadUnitsFromNydusWorm_lp_count = lp_count;
    auto_gf_S3UnloadUnitsFromNydusWorm_lp_unitType = lp_unitType;
    auto_gf_S3UnloadUnitsFromNydusWorm_lp_nydusWorm = lp_nydusWorm;
    auto_gf_S3UnloadUnitsFromNydusWorm_lp_rallyPoint = lp_rallyPoint;
    auto_gf_S3UnloadUnitsFromNydusWorm_lp_player = lp_player;

    if (auto_gf_S3UnloadUnitsFromNydusWorm_Trigger == null) {
        auto_gf_S3UnloadUnitsFromNydusWorm_Trigger = TriggerCreate("auto_gf_S3UnloadUnitsFromNydusWorm_TriggerFunc");
    }

    TriggerExecute(auto_gf_S3UnloadUnitsFromNydusWorm_Trigger, false, false);
}

bool auto_gf_S3UnloadUnitsFromNydusWorm_TriggerFunc (bool testConds, bool runActions) {
    int lp_count = auto_gf_S3UnloadUnitsFromNydusWorm_lp_count;
    string lp_unitType = auto_gf_S3UnloadUnitsFromNydusWorm_lp_unitType;
    unit lp_nydusWorm = auto_gf_S3UnloadUnitsFromNydusWorm_lp_nydusWorm;
    point lp_rallyPoint = auto_gf_S3UnloadUnitsFromNydusWorm_lp_rallyPoint;
    int lp_player = auto_gf_S3UnloadUnitsFromNydusWorm_lp_player;

    int autoABEDA275_ae;
    int autoABEDA275_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoABEDA275_ae = lp_count;
    autoABEDA275_ai = 1;
    lv_i = 1;
    for ( ; ( (autoABEDA275_ai >= 0 && lv_i <= autoABEDA275_ae) || (autoABEDA275_ai <= 0 && lv_i >= autoABEDA275_ae) ) ; lv_i += autoABEDA275_ai ) {
        if ((UnitIsAlive(lp_nydusWorm) == true) && (libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (((lp_unitType == "Zergling") && (UnitGroupCount(UnitGroupFilter("Zergling", gv_pLAYER_08_FERALZERG_INSIDE, gv_s3_FinalRoomZerg, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 40)) || ((lp_unitType == "Roach") && (UnitGroupCount(UnitGroupFilter("Roach", gv_pLAYER_08_FERALZERG_INSIDE, gv_s3_FinalRoomZerg, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 4)) || ((lp_unitType == "Hydralisk") && (UnitGroupCount(UnitGroupFilter("Hydralisk", gv_pLAYER_08_FERALZERG_INSIDE, gv_s3_FinalRoomZerg, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 4)))) {
            SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Unload", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lp_nydusWorm), 0.0, 100.0, 0.0);
            libNtve_gf_SendActorMessageToUnit(lp_nydusWorm, "AnimPlay Spell Spell");
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unitType, 0, lp_player, PointWithOffset(UnitGetPosition(lp_nydusWorm), 0.0, -1.0));
            UnitGroupAdd(gv_s3_FinalRoomZerg, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), lp_rallyPoint), c_orderQueueReplace);
            gf_S3ZergWanderAfterDelay(UnitLastCreated(), RandomFixed(6.0, 9.0));
            Wait(0.75, c_timeGame);
        }

    }
    return true;
}

trigger auto_gf_S1TrackWaveSpawnBullyUnit_Trigger = null;
unit auto_gf_S1TrackWaveSpawnBullyUnit_lp_bullyUnitInitial;
region auto_gf_S1TrackWaveSpawnBullyUnit_lp_bullyRespawnRegion;
int auto_gf_S1TrackWaveSpawnBullyUnit_lp_bullyPlayer;

void gf_S1TrackWaveSpawnBullyUnit (unit lp_bullyUnitInitial, region lp_bullyRespawnRegion, int lp_bullyPlayer) {
    auto_gf_S1TrackWaveSpawnBullyUnit_lp_bullyUnitInitial = lp_bullyUnitInitial;
    auto_gf_S1TrackWaveSpawnBullyUnit_lp_bullyRespawnRegion = lp_bullyRespawnRegion;
    auto_gf_S1TrackWaveSpawnBullyUnit_lp_bullyPlayer = lp_bullyPlayer;

    if (auto_gf_S1TrackWaveSpawnBullyUnit_Trigger == null) {
        auto_gf_S1TrackWaveSpawnBullyUnit_Trigger = TriggerCreate("auto_gf_S1TrackWaveSpawnBullyUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_S1TrackWaveSpawnBullyUnit_Trigger, false, false);
}

bool auto_gf_S1TrackWaveSpawnBullyUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_bullyUnitInitial = auto_gf_S1TrackWaveSpawnBullyUnit_lp_bullyUnitInitial;
    region lp_bullyRespawnRegion = auto_gf_S1TrackWaveSpawnBullyUnit_lp_bullyRespawnRegion;
    int lp_bullyPlayer = auto_gf_S1TrackWaveSpawnBullyUnit_lp_bullyPlayer;

    string auto4050175D_val;

    // Variable Declarations
    string lv_bullyUnitType;
    unit lv_bullyUnit;

    // Variable Initialization

    // Implementation
    lv_bullyUnitType = UnitGetType(lp_bullyUnitInitial);
    lv_bullyUnit = lp_bullyUnitInitial;
    while ((libNCMI_gf_GameIsOver() == false) && (gv_currentStage == 1)) {
        if ((libNCMI_gf_PlayerInCinematicModeCampaign() == false) && ((UnitIsAlive(lv_bullyUnit) == false) || ((lv_bullyUnitType == "Overlord") && (UnitGetType(lv_bullyUnit) != "Overlord")) || ((lv_bullyUnitType == "Drone") && (UnitGetType(lv_bullyUnit) != "Drone")))) {
            auto4050175D_val = lv_bullyUnitType;
            if (auto4050175D_val == "SpineCrawler") {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, lp_bullyPlayer, RegionRandomPoint(lp_bullyRespawnRegion));
            }
            else if (auto4050175D_val == "SporeCrawler") {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, lp_bullyPlayer, RegionRandomPoint(lp_bullyRespawnRegion));
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_bullyUnitType, 0, lp_bullyPlayer, RegionRandomPoint(lp_bullyRespawnRegion));
            }
            lv_bullyUnit = UnitLastCreated();
        }

        Wait(15.0, c_timeGame);
    }
    return true;
}

trigger auto_gf_S1MoveOverseerToMapEdgeAndDespawn_Trigger = null;
unit auto_gf_S1MoveOverseerToMapEdgeAndDespawn_lp_overseerUnit;
point auto_gf_S1MoveOverseerToMapEdgeAndDespawn_lp_targetPoint;

void gf_S1MoveOverseerToMapEdgeAndDespawn (unit lp_overseerUnit, point lp_targetPoint) {
    auto_gf_S1MoveOverseerToMapEdgeAndDespawn_lp_overseerUnit = lp_overseerUnit;
    auto_gf_S1MoveOverseerToMapEdgeAndDespawn_lp_targetPoint = lp_targetPoint;

    if (auto_gf_S1MoveOverseerToMapEdgeAndDespawn_Trigger == null) {
        auto_gf_S1MoveOverseerToMapEdgeAndDespawn_Trigger = TriggerCreate("auto_gf_S1MoveOverseerToMapEdgeAndDespawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_S1MoveOverseerToMapEdgeAndDespawn_Trigger, false, false);
}

bool auto_gf_S1MoveOverseerToMapEdgeAndDespawn_TriggerFunc (bool testConds, bool runActions) {
    unit lp_overseerUnit = auto_gf_S1MoveOverseerToMapEdgeAndDespawn_lp_overseerUnit;
    point lp_targetPoint = auto_gf_S1MoveOverseerToMapEdgeAndDespawn_lp_targetPoint;

    // Implementation
    AIRemoveUnitFromAnyWaves(lp_overseerUnit);
    while ((libNCMI_gf_GameIsOver() == false) && (gv_currentStage == 1) && (UnitIsAlive(lp_overseerUnit) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_overseerUnit), lp_targetPoint) <= 1)) {
            UnitRemove(lp_overseerUnit);
        }
        else {
            UnitIssueOrder(lp_overseerUnit, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), c_orderQueueReplace);
        }
        Wait(0.25, c_timeGame);
    }
    return true;
}

void gf_S1SpawnStreamingWaveUnit (int lp_count, string lp_unitType, int lp_player, point lp_spawnPoint, fixed lp_delay) {
    // Implementation
    if ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_currentStage == 1) && (lp_count > 0)) {
        libNtve_gf_CreateUnitsAtPoint2(lp_count, lp_unitType, 0, lp_player, lp_spawnPoint);
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
            libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1750)));
        }
        UnitGroupLoopEnd();
        AISetGroupSuicide(UnitLastCreatedGroup(), true);
        Wait(lp_delay, c_timeAI);
    }

}

trigger auto_gf_BriefingMoveAndDespawnGarrisonUnit_Trigger = null;
unit auto_gf_BriefingMoveAndDespawnGarrisonUnit_lp_garrisonUnit;
int auto_gf_BriefingMoveAndDespawnGarrisonUnit_lp_garrisonPointIndex;

void gf_BriefingMoveAndDespawnGarrisonUnit (unit lp_garrisonUnit, int lp_garrisonPointIndex) {
    auto_gf_BriefingMoveAndDespawnGarrisonUnit_lp_garrisonUnit = lp_garrisonUnit;
    auto_gf_BriefingMoveAndDespawnGarrisonUnit_lp_garrisonPointIndex = lp_garrisonPointIndex;

    if (auto_gf_BriefingMoveAndDespawnGarrisonUnit_Trigger == null) {
        auto_gf_BriefingMoveAndDespawnGarrisonUnit_Trigger = TriggerCreate("auto_gf_BriefingMoveAndDespawnGarrisonUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_BriefingMoveAndDespawnGarrisonUnit_Trigger, false, false);
}

bool auto_gf_BriefingMoveAndDespawnGarrisonUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_garrisonUnit = auto_gf_BriefingMoveAndDespawnGarrisonUnit_lp_garrisonUnit;
    int lp_garrisonPointIndex = auto_gf_BriefingMoveAndDespawnGarrisonUnit_lp_garrisonPointIndex;

    // Implementation
    while ((DistanceBetweenPoints(UnitGetPosition(lp_garrisonUnit), PointFromId(414)) >= 1)) {
        UnitIssueOrder(lp_garrisonUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(414)), c_orderQueueReplace);
        Wait(0.0625, c_timeGame);
    }
    SoundPlayForPlayer(SoundLink("Medivac_Load", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UnitRemove(lp_garrisonUnit);
    libNtve_gf_ShowHideUnit(gv_cinematicMannedTurret, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", c_unitCreateIgnorePlacement, gv_pLAYER_02_NOVASUPPORT, PointFromName(("S1 - Garrison 00 Point 0" + IntToString(lp_garrisonPointIndex))));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitBehaviorAdd(UnitLastCreated(), "GarrisonMarauder", UnitLastCreated(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_InitializeNovaMission("Nova03");
    TriggerExecute(gt_Init01Technology, true, false);
    libNovC_gf_PurchaseStorymodeTech();
    TriggerExecute(gt_Init02Players, true, false);
    TriggerExecute(gt_Init03Units, true, false);
    TriggerExecute(gt_Init04MusicSound, true, false);
    TriggerExecute(gt_Init05Environment, true, false);
    TriggerExecute(gt_Init06Difficulties, true, false);
    TriggerExecute(gt_Init07Help, true, false);
    if ((GameIsTestMap(true) == true)) {
        TriggerExecute(gt_BriefingQ, true, true);
        ConsoleCommand("exit", true, true);
    }

    TriggerExecute(gt_IntroQ, true, true);
    TriggerExecute(gt_StartGame01QGarrisonSpots, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 01 Technology
//--------------------------------------------------------------------------------------------------
bool gt_Init01Technology_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNovC_gf_SetTechRestrictionsCallback(TriggerGetCurrent());
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "BearclawNozzles", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "FirebatJuggernautPlating", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "NanobotInjectors", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "StabilizerMedPacks", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "NovaVoice3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init01Technology_Init () {
    gt_Init01Technology = TriggerCreate("gt_Init01Technology_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 02 Players
//--------------------------------------------------------------------------------------------------
bool gt_Init02Players_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_02_NOVASUPPORT, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_04_FERALZERG_RIGHTBULLIES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_05_FERALZERG_LEFTBULLIES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_06_DEFENDERSOFMAN, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_07_STRANDEDTERRANS, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_08_FERALZERG_INSIDE, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_NOVASUPPORT, gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_NOVASUPPORT, gv_pLAYER_04_FERALZERG_RIGHTBULLIES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_NOVASUPPORT, gv_pLAYER_05_FERALZERG_LEFTBULLIES, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_NOVASUPPORT, gv_pLAYER_06_DEFENDERSOFMAN, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_02_NOVASUPPORT, gv_pLAYER_07_STRANDEDTERRANS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_02_NOVASUPPORT, gv_pLAYER_08_FERALZERG_INSIDE, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_06_DEFENDERSOFMAN, gv_pLAYER_07_STRANDEDTERRANS, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(gv_pLAYER_06_DEFENDERSOFMAN, gv_pLAYER_08_FERALZERG_INSIDE, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(gv_pLAYER_01_USER, gv_pLAYER_12_RECOVERYTERMINALS, libNtve_ge_AllianceSetting_Ally);
    PlayerGroupAdd(gv_enemyZergPlayersStage01, gv_pLAYER_03_FERALZERG_MIDDLEBULLIES);
    PlayerGroupAdd(gv_enemyZergPlayersStage01, gv_pLAYER_04_FERALZERG_RIGHTBULLIES);
    PlayerGroupAdd(gv_enemyZergPlayersStage01, gv_pLAYER_05_FERALZERG_LEFTBULLIES);
    PlayerGroupAdd(gv_enemyZergPlayersStage01, gv_pLAYER_09_FERALZERG_MIDDLEWAVES);
    PlayerGroupAdd(gv_enemyZergPlayersStage01, gv_pLAYER_10_FERALZERG_RIGHTWAVES);
    PlayerGroupAdd(gv_enemyZergPlayersStage01, gv_pLAYER_11_FERALZERG_LEFTWAVES);
    PlayerGroupLoopBegin(gv_enemyZergPlayersStage01);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_04_FERALZERG_RIGHTBULLIES, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_05_FERALZERG_LEFTBULLIES, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_06_DEFENDERSOFMAN, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_07_STRANDEDTERRANS, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_08_FERALZERG_INSIDE, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_09_FERALZERG_MIDDLEWAVES, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_10_FERALZERG_RIGHTWAVES, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), gv_pLAYER_11_FERALZERG_LEFTWAVES, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    }
    PlayerGroupLoopEnd();
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, 350);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, 150);
    PlayerGroupLoopBegin(gv_enemyZergPlayersStage01);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerSetState(PlayerGroupLoopCurrent(), c_playerStateMineralCostIgnored, true);
        PlayerSetState(PlayerGroupLoopCurrent(), c_playerStateVespeneCostIgnored, true);
        PlayerSetState(PlayerGroupLoopCurrent(), c_playerStateFoodIgnored, true);
    }
    PlayerGroupLoopEnd();
    PlayerSetState(gv_pLAYER_06_DEFENDERSOFMAN, c_playerStateMineralCostIgnored, true);
    PlayerSetState(gv_pLAYER_06_DEFENDERSOFMAN, c_playerStateVespeneCostIgnored, true);
    PlayerSetState(gv_pLAYER_06_DEFENDERSOFMAN, c_playerStateFoodIgnored, true);
    TechTreeUpgradeAddLevel(gv_pLAYER_02_NOVASUPPORT, "BlackOps", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_06_DEFENDERSOFMAN, "DOM", 1);
    PlayerSetColorIndex(gv_pLAYER_04_FERALZERG_RIGHTBULLIES, 6, true);
    PlayerSetColorIndex(gv_pLAYER_05_FERALZERG_LEFTBULLIES, 6, true);
    PlayerSetColorIndex(gv_pLAYER_08_FERALZERG_INSIDE, 6, true);
    PlayerSetColorIndex(gv_pLAYER_09_FERALZERG_MIDDLEWAVES, 6, true);
    PlayerSetColorIndex(gv_pLAYER_10_FERALZERG_RIGHTWAVES, 6, true);
    PlayerSetColorIndex(gv_pLAYER_11_FERALZERG_LEFTWAVES, 6, true);
    PlayerSetState(gv_pLAYER_06_DEFENDERSOFMAN, c_playerStateFidgetingEnabled, false);
    libNCMI_gf_NM_DetectionUpgradesApply();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init02Players_Init () {
    gt_Init02Players = TriggerCreate("gt_Init02Players_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03 Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03Units_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_SetNovaHeroUnit(gv_zeratul);
    libNCMI_gf_EnableDisableHeroReviveSystem(true, gv_pLAYER_01_USER);
    libNCMI_gf_StealthAIAddUnitToStealthAIEnemyUnitGroup(gv_zeratul);
    TriggerExecute(gt_S1GarrisonSpotsInit, true, false);
    libNCMI_gf_SetAllWorkerRallyPointsForPlayer(gv_pLAYER_01_USER);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "InfestedBunker") || (UnitGetType(UnitGroupLoopCurrent()) == "InfestedBarracks") || (UnitGetType(UnitGroupLoopCurrent()) == "InfestedFactory") || (UnitGetType(UnitGroupLoopCurrent()) == "InfestedMissileTurret") || (UnitGetType(UnitGroupLoopCurrent()) == "InfestedSupply"))) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "ColonyInfestation", UnitGroupLoopCurrent(), 1);
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "InfestedBunker")) {
            UnitCargoCreate(UnitGroupLoopCurrent(), "InfestedTerranCampaign", 4);
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_FERALZERG_RIGHTBULLIES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "InfestedBunker") || (UnitGetType(UnitGroupLoopCurrent()) == "InfestedBarracks") || (UnitGetType(UnitGroupLoopCurrent()) == "InfestedFactory") || (UnitGetType(UnitGroupLoopCurrent()) == "InfestedMissileTurret") || (UnitGetType(UnitGroupLoopCurrent()) == "InfestedSupply"))) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "ColonyInfestation", UnitGroupLoopCurrent(), 1);
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "InfestedBunker")) {
            UnitCargoCreate(UnitGroupLoopCurrent(), "InfestedTerranCampaign", 4);
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05_FERALZERG_LEFTBULLIES, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "InfestedBunker") || (UnitGetType(UnitGroupLoopCurrent()) == "InfestedBarracks") || (UnitGetType(UnitGroupLoopCurrent()) == "InfestedFactory") || (UnitGetType(UnitGroupLoopCurrent()) == "InfestedMissileTurret") || (UnitGetType(UnitGroupLoopCurrent()) == "InfestedSupply"))) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "ColonyInfestation", UnitGroupLoopCurrent(), 1);
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "InfestedBunker")) {
            UnitCargoCreate(UnitGroupLoopCurrent(), "InfestedTerranCampaign", 4);
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("InfestationSpire", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "Harmless", UnitGroupLoopCurrent(), 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("InfestedCocoon", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "Harmless", UnitGroupLoopCurrent(), 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("CreepPodsUnit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "Harmless", UnitGroupLoopCurrent(), 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Overseer", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Raven", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("MannedTurret", gv_pLAYER_02_NOVASUPPORT, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, true);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateHighlightable, false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateTargetable, false);
        UnitSetOwner(UnitGroupLoopCurrent(), 0, true);
    }
    UnitGroupLoopEnd();
    UnitSetOwner(UnitFromId(12), gv_pLAYER_02_NOVASUPPORT, true);
    UnitSetState(UnitFromId(12), c_unitStateInvulnerable, true);
    UnitBehaviorAdd(UnitFromId(528), "GarrisonMarauder", UnitFromId(528), 1);
    UnitBehaviorAdd(UnitFromId(529), "GarrisonMarauder", UnitFromId(529), 1);
    UnitBehaviorAdd(UnitFromId(530), "GarrisonMarauder", UnitFromId(530), 1);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_07_STRANDEDTERRANS, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_Init03bDefenderStealthAIUnits, true, true);
    UnitGroupLoopBegin(UnitGroup("DOMHealthDispenser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitBehaviorAdd(UnitFromId(957), "Harmless", UnitFromId(957), 1);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 0.0);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Overlord", gv_pLAYER_08_FERALZERG_INSIDE, RegionFromId(49), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        UnitSetHeight(UnitGroupLoopCurrent(), 1.0, 0.0);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Overlord", gv_pLAYER_08_FERALZERG_INSIDE, RegionFromId(51), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetHeight(UnitGroupLoopCurrent(), 2.5, 0.0);
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(3883), true);
    UnitSetState(UnitFromId(3883), c_unitStateTargetable, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(59), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupAdd(gv_s3_AtriumTerrans, UnitGroupLoopCurrent());
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(61), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupAdd(gv_s3_AtriumTerrans, UnitGroupLoopCurrent());
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(76), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupAdd(gv_s3_AtriumTerrans, UnitGroupLoopCurrent());
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(112), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupAdd(gv_s3_AtriumTerrans, UnitGroupLoopCurrent());
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(97), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupAdd(gv_s3_FinalRoomTerrans, UnitGroupLoopCurrent());
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupAdd(gv_s3_FinalRoomTerrans, UnitGroupLoopCurrent());
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_08_FERALZERG_INSIDE, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupAdd(gv_s3_FinalRoomZerg, UnitGroupLoopCurrent());
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_08_FERALZERG_INSIDE, RegionFromId(97), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        UnitGroupAdd(gv_s3_FinalRoomZerg, UnitGroupLoopCurrent());
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_14_CINEMATICUNITS, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03Units_Init () {
    gt_Init03Units = TriggerCreate("gt_Init03Units_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 03b Defender Stealth AI Units
//--------------------------------------------------------------------------------------------------
bool gt_Init03bDefenderStealthAIUnits_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(21), gv_pLAYER_06_DEFENDERSOFMAN);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(21), UnitGroupLoopCurrent(), libNtve_gf_PointFacingAngle(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetFacing(UnitGroupLoopCurrent())));
    }
    UnitGroupLoopEnd();
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(109), gv_pLAYER_06_DEFENDERSOFMAN);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(109), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(109), UnitGroupLoopCurrent(), libNtve_gf_PointFacingAngle(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetFacing(UnitGroupLoopCurrent())));
    }
    UnitGroupLoopEnd();
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(67), gv_pLAYER_06_DEFENDERSOFMAN);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(67), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(67), UnitGroupLoopCurrent(), libNtve_gf_PointFacingAngle(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetFacing(UnitGroupLoopCurrent())));
    }
    UnitGroupLoopEnd();
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(31), gv_pLAYER_06_DEFENDERSOFMAN);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(31), UnitGroupLoopCurrent(), libNtve_gf_PointFacingAngle(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetFacing(UnitGroupLoopCurrent())));
    }
    UnitGroupLoopEnd();
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(32), gv_pLAYER_06_DEFENDERSOFMAN);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(32), UnitGroupLoopCurrent(), libNtve_gf_PointFacingAngle(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetFacing(UnitGroupLoopCurrent())));
    }
    UnitGroupLoopEnd();
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(100), gv_pLAYER_06_DEFENDERSOFMAN);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(100), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(100), UnitGroupLoopCurrent(), libNtve_gf_PointFacingAngle(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetFacing(UnitGroupLoopCurrent())));
    }
    UnitGroupLoopEnd();
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(101), gv_pLAYER_06_DEFENDERSOFMAN);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(101), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "GhostDetectorCone") || (UnitGetType(UnitGroupLoopCurrent()) == "GhostAlternateDetectorCone"))) {
            libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(101), UnitGroupLoopCurrent(), libNtve_gf_PointFacingAngle(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetFacing(UnitGroupLoopCurrent())));
        }

    }
    UnitGroupLoopEnd();
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(102), gv_pLAYER_06_DEFENDERSOFMAN);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(112), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(102), UnitGroupLoopCurrent(), libNtve_gf_PointFacingAngle(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetFacing(UnitGroupLoopCurrent())));
    }
    UnitGroupLoopEnd();
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(97), gv_pLAYER_06_DEFENDERSOFMAN);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(114), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(97), UnitGroupLoopCurrent(), libNtve_gf_PointFacingAngle(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetFacing(UnitGroupLoopCurrent())));
    }
    UnitGroupLoopEnd();
    libNCMI_gf_StealthAIInitializeStealthAIDefendRegion(RegionFromId(44), gv_pLAYER_06_DEFENDERSOFMAN);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(115), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(44), UnitGroupLoopCurrent(), libNtve_gf_PointFacingAngle(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetFacing(UnitGroupLoopCurrent())));
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init03bDefenderStealthAIUnits_Init () {
    gt_Init03bDefenderStealthAIUnits = TriggerCreate("gt_Init03bDefenderStealthAIUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 04 Music/Sound
//--------------------------------------------------------------------------------------------------
bool gt_Init04MusicSound_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_mapMusicTrack = "nDLC_Music_Nova03_Main_A";
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, gv_mapMusicTrack, c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init04MusicSound_Init () {
    gt_Init04MusicSound = TriggerCreate("gt_Init04MusicSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 05 Environment
//--------------------------------------------------------------------------------------------------
bool gt_Init05Environment_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_lighting_Stage01 = "TarsonisCity";
    gv_lighting_Stage02 = "TarsonisInterior";
    GameTimeOfDaySet("08:00:00");
    libLbty_gf_AutoRevealRegion(RegionFromId(74), RegionFromId(74), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(63), RegionFromId(63), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(75), RegionFromId(75), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(72), RegionFromId(73), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(23), RegionFromId(23), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(28), RegionFromId(28), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(31), RegionFromId(31), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(39), RegionFromId(39), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(49), RegionFromId(49), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(51), RegionFromId(51), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(77), RegionFromId(77), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(46), RegionFromId(46), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(97), RegionFromId(97), gv_pLAYER_01_USER);
    libLbty_gf_AutoRevealRegion(RegionFromId(44), RegionFromId(44), gv_pLAYER_01_USER);
    libNCMI_gf_SendActorMessageToDoodadsInRegion("Signal DoodadDeath", "Tarsonis_Windows_Zerg_Destructible", RegionFromId(113));
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(13), "ScientistCorpseGory");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(13), "ColonistCorpse");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(13), "BloodSplats");
    ActorSend(ActorFromDoodad(DoodadFromId(1084)), "Signal Off");
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(42), "SpaceFallingDebris");
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "NovaOutdoorSounds", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init05Environment_Init () {
    gt_Init05Environment = TriggerCreate("gt_Init05Environment_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 06 Difficulties
//--------------------------------------------------------------------------------------------------
bool gt_Init06Difficulties_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(gv_pLAYER_02_NOVASUPPORT, "PunisherGrenades", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_06_DEFENDERSOFMAN, "PunisherGrenades", 1);
    TechTreeAbilityAllow(gv_pLAYER_06_DEFENDERSOFMAN, AbilityCommand("MorphToHellion", 0), false);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_FERALZERG_RIGHTBULLIES, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_FERALZERG_LEFTBULLIES, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_08_FERALZERG_INSIDE, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_09_FERALZERG_MIDDLEWAVES, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_10_FERALZERG_RIGHTWAVES, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_11_FERALZERG_LEFTWAVES, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, "overlordspeed", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_04_FERALZERG_RIGHTBULLIES, "overlordspeed", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_05_FERALZERG_LEFTBULLIES, "overlordspeed", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_09_FERALZERG_MIDDLEWAVES, "overlordspeed", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_10_FERALZERG_RIGHTWAVES, "overlordspeed", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_11_FERALZERG_LEFTWAVES, "overlordspeed", 1);
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        PlayerGroupLoopBegin(gv_enemyZergPlayersStage01);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            TechTreeAbilityAllow(PlayerGroupLoopCurrent(), AbilityCommand("FungalGrowth", 0), false);
        }
        PlayerGroupLoopEnd();
        TechTreeAbilityAllow(gv_pLAYER_08_FERALZERG_INSIDE, AbilityCommand("FungalGrowth", 0), false);
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
    }

    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        PlayerGroupLoopBegin(gv_enemyZergPlayersStage01);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "zerglingmovementspeed", 1);
        }
        PlayerGroupLoopEnd();
        TechTreeUpgradeAddLevel(gv_pLAYER_08_FERALZERG_INSIDE, "zerglingmovementspeed", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init06Difficulties_Init () {
    gt_Init06Difficulties = TriggerCreate("gt_Init06Difficulties_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init 07 Help
//--------------------------------------------------------------------------------------------------
bool gt_Init07Help_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_AddMissionTipCampaign("Garrison Buildings");
    libNCMI_gf_AddMissionTipCampaign("Feral Zerg");
    libComC_gf_AddUnitTypeToUnitHelpPanel("SCV", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Marine", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Reaper", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Marauder", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Hellion", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("HellionTank", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("SiegeTank", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("SiegeTankSieged", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Medic", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Firebat", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Separatist", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Ghost", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("GhostAlternate", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("RotatingTurretPassiveSCW", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("ThorAP", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Overlord", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Overseer", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("QueenClassic", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Drone", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Zergling", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Baneling", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Roach", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Ravager", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Hydralisk", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Infestor", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Mutalisk", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Guardian", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("Ultralisk", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("InfestedCivilian", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("InfestedTerranCampaign", gv_pLAYER_01_USER);
    libComC_gf_AddUnitTypeToUnitHelpPanel("InfestedAbomination", gv_pLAYER_01_USER);
    libNCMI_gf_AddMissionCheat("Stage2", "Skip to the second mission stage", gt_DebugStage2FindIntel, libNCMI_ge_MissionCheatType_Stage, libNCMI_ge_MissionCheatUIType_Button);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init07Help_Init () {
    gt_Init07Help = TriggerCreate("gt_Init07Help_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug -  Intro
//--------------------------------------------------------------------------------------------------
bool gt_DebugIntro_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_BriefingQ, true, true);
    ConsoleCommand("exit", true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugIntro_Init () {
    gt_DebugIntro = TriggerCreate("gt_DebugIntro_Func");
    TriggerAddEventChatMessage(gt_DebugIntro, 1, "Intro", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 2 - Find Intel
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage2FindIntel_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S1GarrisonsAllFilledUp, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage2FindIntel_Init () {
    gt_DebugStage2FindIntel = TriggerCreate("gt_DebugStage2FindIntel_Func");
    TriggerAddEventChatMessage(gt_DebugStage2FindIntel, c_playerAny, "S2", true);
    TriggerAddEventChatMessage(gt_DebugStage2FindIntel, c_playerAny, "Stage2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Stage 3 - Catch Station Officer
//--------------------------------------------------------------------------------------------------
bool gt_DebugStage3CatchStationOfficer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((TriggerActiveCount(gt_DebugStage2FindIntel) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DebugStage2FindIntel, false);
    gv_currentStage = 2;
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_TarsonisCityUnderground_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupLoopCurrent() != gv_zeratul)) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_s2_UnitsHiddenDuringS1);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(13), "ScientistCorpseGory");
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(13), "ColonistCorpse");
    libNtve_gf_ShowHideDoodadsInRegion(true, RegionFromId(13), "BloodSplats");
    UnitAbilityEnable(gv_zeratul, "NovaNukeTimer", false);
    GameSetLighting(gv_lighting_Stage02, 0.0);
    RegionPlayableMapSet(RegionEntireMap());
    UnitSetPosition(gv_zeratul, PointWithOffset(PointFromId(794), -2.0, -2.0), false);
    Wait(0.0625, c_timeGame);
    CameraPan(gv_pLAYER_01_USER, UnitGetPosition(gv_zeratul), 0.0, -1, 10.0, false);
    libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotSuit");
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPSuitItem1");
    libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotHelmet");
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPHelmetItem1");
    libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotGadget");
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPGadgetItem4");
    libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotWeapon");
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPWeaponItem3");
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "NovaWeaponMinScanRangeZero", 1);
    UnitAbilityEnable(gv_zeratul, "NovaPsiStrike", true);
    UnitAbilityShow(gv_zeratul, "NovaPsiStrike", true);
    TriggerExecute(gt_S2NovaEntersBeaconIntelQ, false, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DebugStage3CatchStationOfficer_Init () {
    gt_DebugStage3CatchStationOfficer = TriggerCreate("gt_DebugStage3CatchStationOfficer_Func");
    TriggerAddEventChatMessage(gt_DebugStage3CatchStationOfficer, c_playerAny, "S3", true);
    TriggerAddEventChatMessage(gt_DebugStage3CatchStationOfficer, c_playerAny, "Stage3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Picks Up Restoration Charge 2
//--------------------------------------------------------------------------------------------------
bool gt_NovaPicksUpRestorationCharge2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventPlayerEffectUsedUnitImpact() == gv_zeratul))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((EventPlayerEffectUsed() == "HealthDispenserLife500")) {
        SoundPlayOnUnitForPlayer(SoundLink("HeroNovaMP1_Health_Pickup", -1), c_maxPlayers, PlayerGroupAll(), gv_zeratul, 0.0, 100.0, 0.0);
    }
    else if ((EventPlayerEffectUsed() == "HealthDispenserEnergy500")) {
        SoundPlayOnUnitForPlayer(SoundLink("HeroNovaMP1_Energy_Pickup", -1), c_maxPlayers, PlayerGroupAll(), gv_zeratul, 0.0, 100.0, 0.0);
    }
    else if (true) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    Wait(10.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaPicksUpRestorationCharge2_Init () {
    gt_NovaPicksUpRestorationCharge2 = TriggerCreate("gt_NovaPicksUpRestorationCharge2_Func");
    TriggerAddEventPlayerEffectUsed(gt_NovaPicksUpRestorationCharge2, c_playerAny, "HealthDispenserLife500");
    TriggerAddEventPlayerEffectUsed(gt_NovaPicksUpRestorationCharge2, c_playerAny, "HealthDispenserEnergy500");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Kills DOM Unit In Defend Region
//--------------------------------------------------------------------------------------------------
bool gt_NovaKillsDOMUnitInDefendRegion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_triggeringUnitDefendRegion;
    point lv_triggeringUnitPoint;
    unitgroup lv_nearbyEnemies;
    unit lv_speaker;

    // Variable Initialization
    lv_triggeringUnitPoint = UnitGetPosition(EventUnit());
    lv_nearbyEnemies = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() == gv_pLAYER_01_USER))) {
            return false;
        }

        if (!((EventPlayer() == gv_pLAYER_06_DEFENDERSOFMAN))) {
            return false;
        }

        if (!((gv_currentStage > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringUnitDefendRegion = libNCMI_gf_StealthAIGetDefendRegionOfUnit(EventUnit());
    if ((lv_triggeringUnitDefendRegion != null)) {
        UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionCircle(lv_triggeringUnitPoint, 6.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libNCMI_gf_StealthAIGetStealthAIUnitState(UnitGroupLoopCurrent()) == libNCMI_ge_StealthAIUnitState_Idle) && (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), lv_triggeringUnitDefendRegion) == true) && (UnitGetType(UnitGroupLoopCurrent()) != "GhostDetectorCone") && (UnitGetType(UnitGroupLoopCurrent()) != "GhostAlternateDetectorCone")) {
                UnitGroupAdd(lv_nearbyEnemies, UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
        if ((UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0)) {
            libNCMI_gf_StealthAIMakeUnitGroupReactToPoint(lv_nearbyEnemies, lv_triggeringUnitPoint);
            if ((TimerGetRemaining(gv_unitInvestigateTransmissionCooldownTimer) == 0.0)) {
                gf_DOMUnitsInvestigateTransmissionsQ(lv_nearbyEnemies, lv_triggeringUnitPoint);
            }

        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaKillsDOMUnitInDefendRegion_Init () {
    gt_NovaKillsDOMUnitInDefendRegion = TriggerCreate("gt_NovaKillsDOMUnitInDefendRegion_Func");
    TriggerAddEventUnitDied(gt_NovaKillsDOMUnitInDefendRegion, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Flashbangs Unit In Defend Region
//--------------------------------------------------------------------------------------------------
bool gt_NovaFlashbangsUnitInDefendRegion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_flashbangImpactPoint;
    region lv_flashbangImpactDefendRegion;
    unitgroup lv_nearbyEnemies;
    unit lv_speaker;

    // Variable Initialization
    lv_flashbangImpactPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_nearbyEnemies = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(0.125, c_timeGame);
    if ((RegionContainsPoint(RegionFromId(109), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(109);
    }
    else if ((RegionContainsPoint(RegionFromId(67), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(67);
    }
    else if ((RegionContainsPoint(RegionFromId(31), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(31);
    }
    else if ((RegionContainsPoint(RegionFromId(32), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(32);
    }
    else if ((RegionContainsPoint(RegionFromId(100), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(100);
    }
    else if ((RegionContainsPoint(RegionFromId(101), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(101);
    }
    else if ((RegionContainsPoint(RegionFromId(102), lv_flashbangImpactPoint) == true)) {
        lv_flashbangImpactDefendRegion = RegionFromId(102);
    }
    else if (true) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionCircle(lv_flashbangImpactPoint, 12.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "FlashBangGrenade") == false) && (libNCMI_gf_StealthAIGetStealthAIUnitState(UnitGroupLoopCurrent()) == libNCMI_ge_StealthAIUnitState_Idle) && (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), lv_flashbangImpactDefendRegion) == true) && (UnitGetType(UnitGroupLoopCurrent()) != "GhostDetectorCone") && (UnitGetType(UnitGroupLoopCurrent()) != "GhostAlternateDetectorCone")) {
            UnitGroupAdd(lv_nearbyEnemies, UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    if ((UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0)) {
        libNCMI_gf_StealthAIMakeUnitGroupReactToPoint(lv_nearbyEnemies, lv_flashbangImpactPoint);
        if ((TimerGetRemaining(gv_unitInvestigateTransmissionCooldownTimer) == 0.0)) {
            gf_DOMUnitsInvestigateTransmissionsQ(lv_nearbyEnemies, lv_flashbangImpactPoint);
        }

    }

    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaFlashbangsUnitInDefendRegion_Init () {
    gt_NovaFlashbangsUnitInDefendRegion = TriggerCreate("gt_NovaFlashbangsUnitInDefendRegion_Func");
    TriggerAddEventPlayerEffectUsed(gt_NovaFlashbangsUnitInDefendRegion, gv_pLAYER_01_USER, "NovaGadgetFlashBangGrenadeSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Loses DetectorConeDetected - EMPed Q
//--------------------------------------------------------------------------------------------------
bool gt_NovaLosesDetectorConeDetectedEMPedQ_Func (bool testConds, bool runActions) {
    fixed auto212E6CBB_at;
    int autoADD03158_val;
    int auto22D1ABCC_val;

    // Variable Declarations
    timer lv_talkTimer;
    unit lv_detectingUnit;

    // Variable Initialization
    lv_talkTimer = TimerCreate();
    lv_detectingUnit = UnitBehaviorEffectUnit(gv_zeratul, "DetectorConeDetected", c_effectUnitCaster, 0);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto212E6CBB_at = 0;
    while (!((UnitHasBehavior2(gv_zeratul, "DetectorConeDetected") == false)) && auto212E6CBB_at <= 3.0) {
        Wait(0.0625, c_timeAI);
        auto212E6CBB_at = auto212E6CBB_at + 0.0625;
    }
    TimerStart(lv_talkTimer, 2.0, false, c_timeAI);
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (TimerGetRemaining(lv_talkTimer) < 0.1) || (UnitIsAlive(gv_zeratul) == false) || (UnitIsAlive(lv_detectingUnit) == false))) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    if ((UnitHasBehavior2(gv_zeratul, "DOMEMPDecloak") == true)) {
        if (((UnitGetType(lv_detectingUnit) == "Ghost") || (UnitGetType(lv_detectingUnit) == "GhostDetectorCone"))) {
            auto22D1ABCC_val = RandomInt(1, 2);
            if (auto22D1ABCC_val == 1) {
                libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
                libNCMI_gf_SendTransmissionCampaign(lv_detectingUnit, "Mission_Nova03|Line00124", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
            }
            else if (auto22D1ABCC_val == 2) {
                libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
                libNCMI_gf_SendTransmissionCampaign(lv_detectingUnit, "Mission_Nova03|Line00125", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
            }
            else {
            }
        }
        else {
            autoADD03158_val = RandomInt(1, 2);
            if (autoADD03158_val == 1) {
                libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
                libNCMI_gf_SendTransmissionCampaign(lv_detectingUnit, "Mission_Nova03|Line00126", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
            }
            else if (autoADD03158_val == 2) {
                libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
                libNCMI_gf_SendTransmissionCampaign(lv_detectingUnit, "Mission_Nova03|Line00127", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
                libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
            }
            else {
            }
        }
    }

    TriggerQueueExit();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaLosesDetectorConeDetectedEMPedQ_Init () {
    gt_NovaLosesDetectorConeDetectedEMPedQ = TriggerCreate("gt_NovaLosesDetectorConeDetectedEMPedQ_Func");
    TriggerAddEventUnitBehaviorChange(gt_NovaLosesDetectorConeDetectedEMPedQ, UnitRefFromVariable("gv_zeratul"), "DetectorConeDetected", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Loses DetectorConeDetected - Still Cloaked Q
//--------------------------------------------------------------------------------------------------
bool gt_NovaLosesDetectorConeDetectedStillCloakedQ_Func (bool testConds, bool runActions) {
    fixed auto4BF0A57A_at;

    // Variable Declarations
    timer lv_talkTimer;
    unit lv_detectingUnit;

    // Variable Initialization
    lv_talkTimer = TimerCreate();
    lv_detectingUnit = UnitBehaviorEffectUnit(gv_zeratul, "DetectorConeDetected", c_effectUnitCaster, 0);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto4BF0A57A_at = 0;
    while (!((UnitHasBehavior2(gv_zeratul, "DetectorConeDetected") == false)) && auto4BF0A57A_at <= 3.0) {
        Wait(0.0625, c_timeAI);
        auto4BF0A57A_at = auto4BF0A57A_at + 0.0625;
    }
    Wait(0.5, c_timeAI);
    TimerStart(lv_talkTimer, 2.0, false, c_timeAI);
    TriggerQueueEnter();
    if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (TimerGetRemaining(lv_talkTimer) < 0.1) || (UnitIsAlive(gv_zeratul) == false) || (UnitIsAlive(lv_detectingUnit) == false) || (UnitHasBehavior2(libNCMI_gf_NovaHeroUnit(), "DOMEMPDecloak") == true))) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    if (((UnitGetType(lv_detectingUnit) == "Ghost") || (UnitGetType(lv_detectingUnit) == "GhostDetectorCone"))) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(lv_detectingUnit, "Mission_Nova03|Line00133", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    else if (((UnitGetType(lv_detectingUnit) == "GhostAlternate") || (UnitGetType(lv_detectingUnit) == "GhostAlternateDetectorCone"))) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(lv_detectingUnit, "Mission_Nova03|Line00134", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }
    TriggerQueueExit();
    Wait(15.0, c_timeAI);
    if ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaLosesDetectorConeDetectedStillCloakedQ_Init () {
    gt_NovaLosesDetectorConeDetectedStillCloakedQ = TriggerCreate("gt_NovaLosesDetectorConeDetectedStillCloakedQ_Func");
    TriggerAddEventUnitBehaviorChange(gt_NovaLosesDetectorConeDetectedStillCloakedQ, UnitRefFromVariable("gv_zeratul"), "DetectorConeDetected", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nova Re-Cloaks Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_NovaReCloaksTransmissionQ_Func (bool testConds, bool runActions) {
    fixed auto6FD3BA92_at;
    int auto967C6E45_val;
    int autoA600EB33_val;
    int auto90A3AA3E_val;

    // Variable Declarations
    timer lv_talkTimer;
    unitgroup lv_nearbyEnemies;
    unit lv_speaker;
    unit lv_caster;

    // Variable Initialization
    lv_talkTimer = TimerCreate();
    lv_nearbyEnemies = UnitGroupEmpty();
    lv_caster = UnitBehaviorEffectUnit(gv_zeratul, "DOMEMPDecloak", c_effectUnitCaster, 0);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6FD3BA92_at = 0;
    while (!((UnitHasBehavior2(gv_zeratul, "DOMEMPDecloak") == false)) && auto6FD3BA92_at <= 15.0) {
        Wait(0.0625, c_timeAI);
        auto6FD3BA92_at = auto6FD3BA92_at + 0.0625;
    }
    TimerStart(lv_talkTimer, 1.0, false, c_timeAI);
    TriggerQueueEnter();
    if (((TimerGetRemaining(lv_talkTimer) < 0.1) || (UnitIsAlive(gv_zeratul) == false) || (UnitIsAlive(lv_caster) == false) || (libNtve_gf_UnitIsVisibleToPlayer(gv_zeratul, gv_pLAYER_06_DEFENDERSOFMAN) == true))) {
        return true;
    }

    lv_nearbyEnemies = UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionCircle(UnitGetPosition(gv_zeratul), 12.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_nearbyEnemies, c_unitCountAlive) > 0)) {
        lv_speaker = UnitGroupClosestToPoint(lv_nearbyEnemies, UnitGetPosition(gv_zeratul));
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        if (((UnitGetType(lv_speaker) == "Ghost") || (UnitGetType(lv_speaker) == "GhostDetectorCone"))) {
            auto967C6E45_val = RandomInt(1, 2);
            if (auto967C6E45_val == 1) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00129", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto967C6E45_val == 2) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00130", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        else if (((UnitGetType(lv_speaker) == "GhostAlternate") || (UnitGetType(lv_speaker) == "GhostAlternateDetectorCone"))) {
            autoA600EB33_val = RandomInt(1, 2);
            if (autoA600EB33_val == 1) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00131", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (autoA600EB33_val == 2) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00132", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        else if (true) {
            auto90A3AA3E_val = RandomInt(1, 4);
            if (auto90A3AA3E_val == 1) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00139", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto90A3AA3E_val == 2) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00140", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto90A3AA3E_val == 3) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00141", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else if (auto90A3AA3E_val == 4) {
                libNCMI_gf_SendTransmissionCampaign(lv_speaker, "Mission_Nova03|Line00142", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            }
            else {
            }
        }
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NovaReCloaksTransmissionQ_Init () {
    gt_NovaReCloaksTransmissionQ = TriggerCreate("gt_NovaReCloaksTransmissionQ_Func");
    TriggerAddEventUnitBehaviorChange(gt_NovaReCloaksTransmissionQ, UnitRefFromVariable("gv_zeratul"), "DOMEMPDecloak", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game 01 Q - Garrison Spots
//--------------------------------------------------------------------------------------------------
bool gt_StartGame01QGarrisonSpots_Func (bool testConds, bool runActions) {
    int auto5AF052D1_ae;
    int auto5AF052D1_ai;

    // Variable Declarations
    int lv_iter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/3FE01CF1"), null, PointFromId(19));
    libNCMI_gf_StartingWorkersAutoHarvest(RegionFromId(1), null);
    UnitGroupLoopBegin(UnitGroup("Overlord", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_AICast(UnitGroupLoopCurrent(), Order(AbilityCommand("GenerateCreep", 0)));
    }
    UnitGroupLoopEnd();
    libNCUI_gf_SetHeroPanelUnit(1, gv_zeratul);
    TriggerExecute(gt_S1UltraliskPatrol, true, false);
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_ObjectiveFillGarrisonsCreate, true, true);
    auto5AF052D1_ae = gv_s1_GarrisonSpotsCount;
    auto5AF052D1_ai = 1;
    lv_iter = 1;
    for ( ; ( (auto5AF052D1_ai >= 0 && lv_iter <= auto5AF052D1_ae) || (auto5AF052D1_ai <= 0 && lv_iter >= auto5AF052D1_ae) ) ; lv_iter += auto5AF052D1_ai ) {
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/F4988F5A"), null, UnitGetPosition(gv_s1_GarrisonSpots[lv_iter].lv_beaconUnit));
        SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        TextTagShow(libHots_gf_TextTagForUnit(gv_s1_GarrisonSpots[lv_iter].lv_beaconUnit, 1), PlayerGroupAll(), true);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_s1_GarrisonSpots[lv_iter].lv_beaconUnit), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        libHots_gf_StorePingForUnit(gv_s1_GarrisonSpots[lv_iter].lv_beaconUnit, 1, PingLastCreated());
        PingSetScale(PingLastCreated(), 0.8);
        TextExpressionSetToken("Param/Expression/5337C10D", "A", UnitTypeGetName(gv_s1_GarrisonSpots[lv_iter].lv_garrisonUnitType));
        TextExpressionSetToken("Param/Expression/5337C10D", "B", IntToText(gv_s1_GarrisonSpots[lv_iter].lv_garrisonUnitCount));
        TextExpressionSetToken("Param/Expression/5337C10D", "C", IntToText(gv_s1_GarrisonSpots[lv_iter].lv_garrisonUnitMax));
        PingSetTooltip(PingLastCreated(), TextExpressionAssemble("Param/Expression/5337C10D"));
        VisRevealArea(gv_pLAYER_01_USER, RegionCircle(gv_s1_GarrisonSpots[lv_iter].lv_unitTargetPoint, 4.0), 6.0, false);
        Wait(0.125, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00063", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00009", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerEnable(gt_S1FirstInfestationSightedQ, true);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_TipReadyQ, true, false);
    Wait(390.0, c_timeGame);
    TriggerExecute(gt_S1BonusObjectiveRevealQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame01QGarrisonSpots_Init () {
    gt_StartGame01QGarrisonSpots = TriggerCreate("gt_StartGame01QGarrisonSpots_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game 02 Q - Reach Comms Hub
//--------------------------------------------------------------------------------------------------
bool gt_StartGame02QReachCommsHub_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_TarsonisCityUnderground_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/30FCFA14"), null, PointFromId(163));
    libNCMI_gf_AddMissionTipCampaign("Monomolecular Blade");
    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/52DC9371"));
    TriggerEnable(gt_S2FirstUnitsFleeStealthedNova, true);
    TriggerEnable(gt_S2HallwayUnitsConfrontStealthedNova, true);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitAbilityEnable(UnitGroupLoopCurrent(), "attack", false);
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveReachCommunicationsHubCreate, true, true);
    TriggerExecute(gt_ObjectiveNovaMustSurviveCreate, true, true);
    libNCMI_gf_CreateObjectivePing(true, PointFromId(514), StringExternal("Param/Value/24A55886"));
    libHots_gf_StorePingForUnit(gv_s2_BeaconActionableIntel, 1, PingLastCreated());
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00122", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00036", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame02QReachCommsHub_Init () {
    gt_StartGame02QReachCommsHub = TriggerCreate("gt_StartGame02QReachCommsHub_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game 03 Q - Reach Command Room
//--------------------------------------------------------------------------------------------------
bool gt_StartGame03QReachCommandRoom_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/925F6196"), null, PointFromId(800));
    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/D59C3172"));
    UnitIssueOrder(UnitFromId(108), Order(AbilityCommand("Tarsonis_DoorNELowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, c_unitPropNormal));
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_s3_AtriumTerrans);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "Signal GuideHide");
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(32), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitAbilityEnable(UnitGroupLoopCurrent(), "attack", true);
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeReal);
    ObjectiveShow(gv_objectiveDestroyZergBase2, PlayerGroupAll(), false);
    TriggerExecute(gt_ObjectiveReachCommandRoomCreate, true, true);
    TriggerExecute(gt_ObjectiveNovaMustSurviveCreate, true, true);
    ObjectiveSetLast(gv_objectiveDestroyZergBase5);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(75), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    PingSetUnit(PingLastCreated(), gv_s3_BeaconEnd);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/9AE4F875"));
    libHots_gf_StorePingForUnit(gv_s3_BeaconEnd, 1, PingLastCreated());
    Wait(2.0, c_timeReal);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00049", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00050", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartGame03QReachCommandRoom_Init () {
    gt_StartGame03QReachCommandRoom = TriggerCreate("gt_StartGame03QReachCommandRoom_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Clean Up Section 01
//--------------------------------------------------------------------------------------------------
bool gt_S1CleanUpSection01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ActorScopeSend(gv_cameraSoundActorScope, "Destroy");
    UnitAbilityEnable(gv_zeratul, "NovaNukeTimer", false);
    UnitAbilityEnable(gv_zeratul, "HeroNuclearStrike", false);
    cai_waves_stop("aiA88256A6");
    cai_waves_stop("ai663E0A14");
    cai_waves_stop("ai3F4FA9FC");
    AIAttackWaveCancel(cai_getLastWave(gv_pLAYER_03_FERALZERG_MIDDLEBULLIES));
    AIAttackWaveCancel(cai_getLastWave(gv_pLAYER_04_FERALZERG_RIGHTBULLIES));
    AIAttackWaveCancel(cai_getLastWave(gv_pLAYER_05_FERALZERG_LEFTBULLIES));
    AISetAPM(gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, 3000);
    TriggerEnable(gt_S1BonusObjectiveRevealQ, false);
    TriggerEnable(gt_S1UnitEntersBonusObjectiveRevealQ, false);
    TriggerEnable(gt_S1UnitEntersGarrison, false);
    TriggerEnable(gt_S1KillEggsAndLarvae, false);
    TriggerEnable(gt_DefeatBaseDead, false);
    TriggerStop(gt_StartGame01QGarrisonSpots);
    TriggerStop(gt_S1BonusObjectiveRevealQ);
    TriggerStop(gt_S1UnitEntersBonusObjectiveRevealQ);
    TriggerStop(gt_S1UnitEntersGarrison);
    TriggerStop(gt_S1GarrisonFilledQ);
    TriggerStop(gt_S1FirstZergAttackMiddleQ);
    TriggerStop(gt_S1FirstZergAttackRightQ);
    TriggerStop(gt_S1FirstZergAttackLeftQ);
    TriggerQueueClear(c_triggerQueueRemove);
    TransmissionClearAll();
    libNCMI_gf_HideCampaignTransmissionPortrait();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1CleanUpSection01_Init () {
    gt_S1CleanUpSection01 = TriggerCreate("gt_S1CleanUpSection01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Clean Up Section 02
//--------------------------------------------------------------------------------------------------
bool gt_S2CleanUpSection02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S1CleanUpSection01, true, false);
    TriggerEnable(gt_S2NovaEntersInitialEncounter, false);
    TriggerEnable(gt_S2NovaUsesDashAttack, false);
    TriggerEnable(gt_S2NovaKillsUnitInTutorialRoom, false);
    TriggerEnable(gt_S2NovaEntersGhostGuardRoom01, false);
    TriggerEnable(gt_S2NovaEntersGhostRoom03, false);
    TriggerEnable(gt_S2NovaEntersBeaconIntelQ, false);
    TriggerStop(gt_StartGame02QReachCommsHub);
    TriggerStop(gt_S2NovaEntersGhostGuardRoom01);
    TriggerStop(gt_S2NovaEntersGhostRoom03);
    TriggerStop(gt_S3NovaEntersCommsRoom);
    TriggerStop(gt_S2NovaEntersInitialEncounter);
    TriggerStop(gt_S2NovaEntersInitialEncounterTransmissionQ);
    TriggerStop(gt_S2NovaKillsUnitInTutorialRoom);
    TriggerStop(gt_S2NovaUsesDashAttack);
    TriggerStop(gt_S2TurnOffSwordTutorial);
    TriggerStop(gt_S2MarauderEntersSwordTutorialRoomTransmissionQ);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(109), libNCMI_ge_StealthAIDefendRegionState_Inactive);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(67), libNCMI_ge_StealthAIDefendRegionState_Inactive);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(31), libNCMI_ge_StealthAIDefendRegionState_Inactive);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(109), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(67), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(31), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitIssueOrder(UnitFromId(737), Order(AbilityCommand("Tarsonis_DoorNW", 0)), c_orderQueueReplace);
    TriggerQueueClear(c_triggerQueueRemove);
    TransmissionClearAll();
    libNCMI_gf_HideCampaignTransmissionPortrait();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2CleanUpSection02_Init () {
    gt_S2CleanUpSection02 = TriggerCreate("gt_S2CleanUpSection02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Garrison Spots Init
//--------------------------------------------------------------------------------------------------
bool gt_S1GarrisonSpotsInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iter;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetFacing(UnitFromId(12), 315.0, 0.0);
    UnitSetState(UnitFromId(12), c_unitStateTurnSuppressed, false);
    gv_s1_GarrisonSpotsCount += 1;
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitType = "Marauder";
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitMax = 3;
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconUnit = UnitFromId(281);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconRegion = RegionFromId(2);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_unitTargetPoint = PointFromId(282);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonTurret = UnitFromId(242);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_entryInfestation = UnitFromId(1683);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonSightRegion = RegionFromId(90);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonZergPlayer = gv_pLAYER_05_FERALZERG_LEFTBULLIES;
    TextExpressionSetToken("Param/Expression/3A41E3EC", "A", UnitTypeGetName(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitType));
    TextExpressionSetToken("Param/Expression/3A41E3EC", "B", IntToText(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitCount));
    TextExpressionSetToken("Param/Expression/3A41E3EC", "C", IntToText(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitMax));
    TextTagCreate(TextExpressionAssemble("Param/Expression/3A41E3EC"), 24, PointWithOffset(UnitGetPosition(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconUnit), 0.0, -1.5), 0.0, true, false, PlayerGroupAll());
    TextTagSetMaxSize(TextTagLastCreated(), 100.0, 2.0);
    libHots_gf_StoreTextTagForUnit(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconUnit, 1, TextTagLastCreated());
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_ShowHideUnit(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconUnit, false);
    UnitSetFacing(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonTurret, 45.0, 0.0);
    UnitSetState(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonTurret, c_unitStateTurnSuppressed, false);
    gv_s1_GarrisonSpotsCount += 1;
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitType = "Reaper";
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitMax = 6;
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconUnit = UnitFromId(48);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconRegion = RegionFromId(4);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_unitTargetPoint = PointFromId(283);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonTurret = UnitFromId(18);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_entryInfestation = UnitFromId(1682);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonSightRegion = RegionFromId(91);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonZergPlayer = gv_pLAYER_05_FERALZERG_LEFTBULLIES;
    TextExpressionSetToken("Param/Expression/D523ADC7", "A", UnitTypeGetName(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitType));
    TextExpressionSetToken("Param/Expression/D523ADC7", "B", IntToText(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitCount));
    TextExpressionSetToken("Param/Expression/D523ADC7", "C", IntToText(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitMax));
    TextTagCreate(TextExpressionAssemble("Param/Expression/D523ADC7"), 24, PointWithOffset(UnitGetPosition(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconUnit), 0.0, -1.5), 0.0, true, false, PlayerGroupAll());
    TextTagSetMaxSize(TextTagLastCreated(), 100.0, 2.0);
    libHots_gf_StoreTextTagForUnit(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconUnit, 1, TextTagLastCreated());
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_ShowHideUnit(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconUnit, false);
    UnitSetFacing(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonTurret, 225.0, 0.0);
    UnitSetState(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonTurret, c_unitStateTurnSuppressed, false);
    gv_s1_GarrisonSpotsCount += 1;
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitType = "Marine";
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitMax = 6;
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconUnit = UnitFromId(162);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconRegion = RegionFromId(5);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_unitTargetPoint = PointFromId(284);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonTurret = UnitFromId(244);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_entryInfestation = UnitFromId(1679);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonSightRegion = RegionFromId(88);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonZergPlayer = gv_pLAYER_03_FERALZERG_MIDDLEBULLIES;
    TextExpressionSetToken("Param/Expression/1581BE99", "A", UnitTypeGetName(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitType));
    TextExpressionSetToken("Param/Expression/1581BE99", "B", IntToText(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitCount));
    TextExpressionSetToken("Param/Expression/1581BE99", "C", IntToText(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitMax));
    TextTagCreate(TextExpressionAssemble("Param/Expression/1581BE99"), 24, PointWithOffset(UnitGetPosition(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconUnit), 0.0, -1.5), 0.0, true, false, PlayerGroupAll());
    TextTagSetMaxSize(TextTagLastCreated(), 100.0, 2.0);
    libHots_gf_StoreTextTagForUnit(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconUnit, 1, TextTagLastCreated());
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_ShowHideUnit(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconUnit, false);
    UnitSetFacing(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonTurret, 135.0, 0.0);
    UnitSetState(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonTurret, c_unitStateTurnSuppressed, false);
    gv_s1_GarrisonSpotsCount += 1;
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitType = "Reaper";
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitMax = 6;
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconUnit = UnitFromId(76);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconRegion = RegionFromId(6);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_unitTargetPoint = PointFromId(285);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonTurret = UnitFromId(49);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_entryInfestation = UnitFromId(1680);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonSightRegion = RegionFromId(92);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonZergPlayer = gv_pLAYER_04_FERALZERG_RIGHTBULLIES;
    TextExpressionSetToken("Param/Expression/14AA26BE", "A", UnitTypeGetName(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitType));
    TextExpressionSetToken("Param/Expression/14AA26BE", "B", IntToText(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitCount));
    TextExpressionSetToken("Param/Expression/14AA26BE", "C", IntToText(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitMax));
    TextTagCreate(TextExpressionAssemble("Param/Expression/14AA26BE"), 24, PointWithOffset(UnitGetPosition(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconUnit), 0.0, -1.5), 0.0, true, false, PlayerGroupAll());
    TextTagSetMaxSize(TextTagLastCreated(), 100.0, 2.0);
    libHots_gf_StoreTextTagForUnit(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconUnit, 1, TextTagLastCreated());
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_ShowHideUnit(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconUnit, false);
    UnitSetFacing(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonTurret, 225.0, 0.0);
    UnitSetState(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonTurret, c_unitStateTurnSuppressed, false);
    gv_s1_GarrisonSpotsCount += 1;
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitType = "Marine";
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitMax = 6;
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconUnit = UnitFromId(77);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconRegion = RegionFromId(9);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_unitTargetPoint = PointFromId(85);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonTurret = UnitFromId(15);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_entryInfestation = UnitFromId(1681);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonSightRegion = RegionFromId(93);
    gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonZergPlayer = gv_pLAYER_04_FERALZERG_RIGHTBULLIES;
    TextExpressionSetToken("Param/Expression/5363380A", "A", UnitTypeGetName(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitType));
    TextExpressionSetToken("Param/Expression/5363380A", "B", IntToText(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitCount));
    TextExpressionSetToken("Param/Expression/5363380A", "C", IntToText(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonUnitMax));
    TextTagCreate(TextExpressionAssemble("Param/Expression/5363380A"), 24, PointWithOffset(UnitGetPosition(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconUnit), 0.0, -1.5), 0.0, true, false, PlayerGroupAll());
    TextTagSetMaxSize(TextTagLastCreated(), 100.0, 2.0);
    libHots_gf_StoreTextTagForUnit(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconUnit, 1, TextTagLastCreated());
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_ShowHideUnit(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_beaconUnit, false);
    UnitSetFacing(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonTurret, 45.0, 0.0);
    UnitSetState(gv_s1_GarrisonSpots[gv_s1_GarrisonSpotsCount].lv_garrisonTurret, c_unitStateTurnSuppressed, false);
    gv_objectiveFillGarrisonsMax = gv_s1_GarrisonSpotsCount;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1GarrisonSpotsInit_Init () {
    gt_S1GarrisonSpotsInit = TriggerCreate("gt_S1GarrisonSpotsInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Garrison Infestation Dies
//--------------------------------------------------------------------------------------------------
bool gt_S1GarrisonInfestationDies_Func (bool testConds, bool runActions) {
    int auto11C01D79_ae;
    int auto11C01D79_ai;

    // Variable Declarations
    int lv_garrisonsRevealedCount;
    int lv_garrisonIter;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto11C01D79_ae = gv_s1_GarrisonSpotsCount;
    auto11C01D79_ai = 1;
    lv_garrisonIter = 1;
    for ( ; ( (auto11C01D79_ai >= 0 && lv_garrisonIter <= auto11C01D79_ae) || (auto11C01D79_ai <= 0 && lv_garrisonIter >= auto11C01D79_ae) ) ; lv_garrisonIter += auto11C01D79_ai ) {
        if ((UnitIsAlive(gv_s1_GarrisonSpots[lv_garrisonIter].lv_entryInfestation) == false) && (gv_s1_GarrisonSpots[lv_garrisonIter].lv_garrisonBeaconRevealed == false)) {
            gv_s1_GarrisonSpots[lv_garrisonIter].lv_garrisonBeaconRevealed = true;
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "KerriganInfestBroodling", 0, gv_s1_GarrisonSpots[lv_garrisonIter].lv_garrisonZergPlayer, gv_s1_GarrisonSpots[lv_garrisonIter].lv_unitTargetPoint);
            UnitGroupLoopBegin(UnitLastCreatedGroup());
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "BroodlingFate", UnitGroupLoopCurrent(), 1);
            }
            UnitGroupLoopEnd();
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), libNtve_gf_PointOffsetTowardsPoint(gv_s1_GarrisonSpots[lv_garrisonIter].lv_unitTargetPoint, 6.0, UnitGetPosition(gv_s1_GarrisonSpots[lv_garrisonIter].lv_beaconUnit))), c_orderQueueReplace);
            libNtve_gf_CreateUnitsWithDefaultFacing(2, "InfestedCivilian", 0, gv_s1_GarrisonSpots[lv_garrisonIter].lv_garrisonZergPlayer, gv_s1_GarrisonSpots[lv_garrisonIter].lv_unitTargetPoint);
            UnitGroupLoopBegin(UnitLastCreatedGroup());
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "BroodlingFate", UnitGroupLoopCurrent(), 1);
            }
            UnitGroupLoopEnd();
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), libNtve_gf_PointOffsetTowardsPoint(gv_s1_GarrisonSpots[lv_garrisonIter].lv_unitTargetPoint, 6.0, UnitGetPosition(gv_s1_GarrisonSpots[lv_garrisonIter].lv_beaconUnit))), c_orderQueueReplace);
            Wait(2.0, c_timeGame);
            TriggerExecute(gt_S1FirstInfestationDiesQ, true, false);
            lv_garrisonsRevealedCount += 1;
            UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/C831499C"), null, UnitGetPosition(gv_s1_GarrisonSpots[lv_garrisonIter].lv_beaconUnit));
            libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_s1_GarrisonSpots[lv_garrisonIter].lv_beaconUnit), 6.0, Color(0.00, 100.00, 0.00));
            libNtve_gf_KillModel(libHots_gf_ActorForUnit(gv_s1_GarrisonSpots[lv_garrisonIter].lv_entryInfestation, 1));
            TextTagDestroy(libHots_gf_TextTagForUnit(gv_s1_GarrisonSpots[lv_garrisonIter].lv_entryInfestation, 1));
            libNtve_gf_ShowHideUnit(gv_s1_GarrisonSpots[lv_garrisonIter].lv_beaconUnit, true);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Beacon_Terran", c_unitCreateIgnorePlacement, 0, UnitGetPosition(gv_s1_GarrisonSpots[lv_garrisonIter].lv_beaconUnit));
            UnitKill(UnitLastCreated());
            TextTagShow(libHots_gf_TextTagForUnit(gv_s1_GarrisonSpots[lv_garrisonIter].lv_beaconUnit, 1), PlayerGroupAll(), true);
        }

    }
    if ((lv_garrisonsRevealedCount == gv_s1_GarrisonSpotsCount)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1GarrisonInfestationDies_Init () {
    gt_S1GarrisonInfestationDies = TriggerCreate("gt_S1GarrisonInfestationDies_Func");
    TriggerAddEventTimePeriodic(gt_S1GarrisonInfestationDies, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - First Infestation Sighted Q
//--------------------------------------------------------------------------------------------------
bool gt_S1FirstInfestationSightedQ_Func (bool testConds, bool runActions) {
    int auto2BDC97AD_ae;
    int auto2BDC97AD_ai;

    // Variable Declarations
    int lv_garrisonIter;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto2BDC97AD_ae = gv_s1_GarrisonSpotsCount;
    auto2BDC97AD_ai = 1;
    lv_garrisonIter = 1;
    for ( ; ( (auto2BDC97AD_ai >= 0 && lv_garrisonIter <= auto2BDC97AD_ae) || (auto2BDC97AD_ai <= 0 && lv_garrisonIter >= auto2BDC97AD_ae) ) ; lv_garrisonIter += auto2BDC97AD_ai ) {
        if ((gv_s1_GarrisonSpots[lv_garrisonIter].lv_entryInfestation != null) && (UnitIsAlive(gv_s1_GarrisonSpots[lv_garrisonIter].lv_entryInfestation) == true) && (libNtve_gf_UnitIsVisibleToPlayer(gv_s1_GarrisonSpots[lv_garrisonIter].lv_entryInfestation, gv_pLAYER_01_USER) == true)) {
            UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/C4EBD9A3"), null, UnitGetPosition(gv_s1_GarrisonSpots[lv_garrisonIter].lv_entryInfestation));
            libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_s1_GarrisonSpots[lv_garrisonIter].lv_entryInfestation), 6.0, Color(100.00, 0.00, 0.00));
            VisRevealArea(gv_pLAYER_01_USER, RegionCircle(UnitGetPosition(gv_s1_GarrisonSpots[lv_garrisonIter].lv_entryInfestation), 3.0), 8.0, false);
            libNCMI_gf_AttachReticleEffectAndTextTagOnUnit(libNCMI_ge_CampaginReticleType_TerranEnemy, libNCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/A9946050"), gv_s1_GarrisonSpots[lv_garrisonIter].lv_entryInfestation, "Ref_Center");
            libHots_gf_StoreActorForUnit(gv_s1_GarrisonSpots[lv_garrisonIter].lv_entryInfestation, 1, libNtve_gf_ActorLastCreated());
            libHots_gf_StoreTextTagForUnit(gv_s1_GarrisonSpots[lv_garrisonIter].lv_entryInfestation, 1, TextTagLastCreated());
            TriggerQueueEnter();
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
            libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00064", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00065", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
            libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
            TriggerQueueExit();
            return true;
        }

    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1FirstInfestationSightedQ_Init () {
    gt_S1FirstInfestationSightedQ = TriggerCreate("gt_S1FirstInfestationSightedQ_Func");
    TriggerEnable(gt_S1FirstInfestationSightedQ, false);
    TriggerAddEventTimePeriodic(gt_S1FirstInfestationSightedQ, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - First Infestation Dies Q
//--------------------------------------------------------------------------------------------------
bool gt_S1FirstInfestationDiesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00066", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1FirstInfestationDiesQ_Init () {
    gt_S1FirstInfestationDiesQ = TriggerCreate("gt_S1FirstInfestationDiesQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Unit Enters Garrison
//--------------------------------------------------------------------------------------------------
bool gt_S1UnitEntersGarrison_Func (bool testConds, bool runActions) {
    int autoE90237F6_ae;
    int autoE90237F6_ai;

    // Variable Declarations
    int lv_iter;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventUnit() != gv_zeratul))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), gv_pLAYER_01_USER, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE90237F6_ae = gv_s1_GarrisonSpotsCount;
    autoE90237F6_ai = 1;
    lv_iter = 1;
    for ( ; ( (autoE90237F6_ai >= 0 && lv_iter <= autoE90237F6_ae) || (autoE90237F6_ai <= 0 && lv_iter >= autoE90237F6_ae) ) ; lv_iter += autoE90237F6_ai ) {
        if ((gv_s1_GarrisonSpots[lv_iter].lv_garrisonSpotCompleted == false) && (UnitIsAlive(gv_s1_GarrisonSpots[lv_iter].lv_entryInfestation) == false) && (UnitIsAlive(gv_s1_GarrisonSpots[lv_iter].lv_beaconUnit) == true) && (libNtve_gf_UnitIsVisibleToPlayer(gv_s1_GarrisonSpots[lv_iter].lv_beaconUnit, gv_pLAYER_01_USER) == true) && (libNtve_gf_UnitInRegion(EventUnit(), gv_s1_GarrisonSpots[lv_iter].lv_beaconRegion) == true) && (UnitGetOwner(EventUnit()) == gv_pLAYER_01_USER) && ((UnitGetType(EventUnit()) == gv_s1_GarrisonSpots[lv_iter].lv_garrisonUnitType) || ((gv_s1_GarrisonSpots[lv_iter].lv_garrisonUnitType == "Marauder") && (UnitGetType(EventUnit()) == "MengskMarauder")) || ((gv_s1_GarrisonSpots[lv_iter].lv_garrisonUnitType == "HellionTank") && ((UnitGetType(EventUnit()) == "Hellion") || (UnitGetType(EventUnit()) == "HoverHellbat"))) || ((gv_s1_GarrisonSpots[lv_iter].lv_garrisonUnitType == "SiegeTank") && ((UnitGetType(EventUnit()) == "HoverSiegeTankSieged") || (UnitGetType(EventUnit()) == "HoverSiegeTank"))))) {
            gf_S1GarrisonUnit(EventUnit(), lv_iter);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1UnitEntersGarrison_Init () {
    gt_S1UnitEntersGarrison = TriggerCreate("gt_S1UnitEntersGarrison_Func");
    TriggerAddEventUnitRegion(gt_S1UnitEntersGarrison, null, RegionFromId(2), true);
    TriggerAddEventUnitRegion(gt_S1UnitEntersGarrison, null, RegionFromId(4), true);
    TriggerAddEventUnitRegion(gt_S1UnitEntersGarrison, null, RegionFromId(5), true);
    TriggerAddEventUnitRegion(gt_S1UnitEntersGarrison, null, RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_S1UnitEntersGarrison, null, RegionFromId(9), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Garrison Filled Q
//--------------------------------------------------------------------------------------------------
bool gt_S1GarrisonFilledQ_Func (bool testConds, bool runActions) {
    int auto6850F69D_val;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/9B78F450"));
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    auto6850F69D_val = gv_objectiveFillGarrisonsCount;
    if (auto6850F69D_val == 1) {
        libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00010", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto6850F69D_val == 2) {
        libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00011", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto6850F69D_val == 3) {
        libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00067", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else if (auto6850F69D_val == 4) {
        libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00013", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }
    else {
    }
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    if ((gv_objectiveFillGarrisonsCount < gv_objectiveFillGarrisonsMax)) {
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1GarrisonFilledQ_Init () {
    gt_S1GarrisonFilledQ = TriggerCreate("gt_S1GarrisonFilledQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Garrisons All Filled Up
//--------------------------------------------------------------------------------------------------
bool gt_S1GarrisonsAllFilledUp_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveFillGarrisonsComplete, true, false);
    libNtve_gf_ChangeUnitDamage(gv_zeratul, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    if ((gv_achievement_PlayerSupplyExceeded35 == false) && (libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libComC_gf_CampaignAwardAchievement("Nova03_Mastery", gv_pLAYER_01_USER);
    }

    Wait(6.0, c_timeGame);
    TriggerExecute(gt_S1CleanUpSection01, true, true);
    TriggerExecute(gt_MidQ, true, true);
    TriggerExecute(gt_StartGame02QReachCommsHub, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1GarrisonsAllFilledUp_Init () {
    gt_S1GarrisonsAllFilledUp = TriggerCreate("gt_S1GarrisonsAllFilledUp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Tac Nuke Strike Online Q
//--------------------------------------------------------------------------------------------------
bool gt_S1TacNukeStrikeOnlineQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(4.0, c_timeGame);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("HeroNuclearStrike", 0), true);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00068", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00069", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1TacNukeStrikeOnlineQ_Init () {
    gt_S1TacNukeStrikeOnlineQ = TriggerCreate("gt_S1TacNukeStrikeOnlineQ_Func");
    TriggerAddEventUnitCreated(gt_S1TacNukeStrikeOnlineQ, null, "HeroArmNuke", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Turn Off Tac Nuke Strike Highlight
//--------------------------------------------------------------------------------------------------
bool gt_S1TurnOffTacNukeStrikeHighlight_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonHighlighted(PlayerGroupAll(), AbilityCommand("HeroNuclearStrike", 0), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1TurnOffTacNukeStrikeHighlight_Init () {
    gt_S1TurnOffTacNukeStrikeHighlight = TriggerCreate("gt_S1TurnOffTacNukeStrikeHighlight_Func");
    TriggerAddEventUnitAbility(gt_S1TurnOffTacNukeStrikeHighlight, UnitRefFromVariable("gv_zeratul"), AbilityCommand("HeroNuclearStrike", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Player Enters Building Collapse Reveal
//--------------------------------------------------------------------------------------------------
bool gt_S1PlayerEntersBuildingCollapseReveal_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(75), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(934), Order(AbilityCommand("CollapsingBuildingNECollapsed", 0)), c_orderQueueReplace);
    SoundPlayAtPointForPlayer(SoundLink("Event_Nova03_BuildingCrumble", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(936)), 0.0, 100.0, 0.0);
    SoundPlayAtPointForPlayer(SoundLink("Event_Nova03_BuildingCrumbleDebris", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(936)), 0.0, 100.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 2.0, 3.0);
    Wait(2.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("Event_Nova03_BuildingCrumbleSweetener", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(936)), 0.0, 100.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 2.0, 2.0);
    Wait(1.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("Event_Nova03_BuildingCrumbleDebris2", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(936)), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1PlayerEntersBuildingCollapseReveal_Init () {
    gt_S1PlayerEntersBuildingCollapseReveal = TriggerCreate("gt_S1PlayerEntersBuildingCollapseReveal_Func");
    TriggerAddEventTimePeriodic(gt_S1PlayerEntersBuildingCollapseReveal, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Ultralisk Patrol
//--------------------------------------------------------------------------------------------------
bool gt_S1UltraliskPatrol_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_ultraliskPatrolPoint01;
    point lv_ultraliskPatrolPoint02;
    point lv_currentTargetPoint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(373)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ultraliskPatrolPoint01 = PointFromId(374);
    lv_ultraliskPatrolPoint02 = UnitGetPosition(UnitFromId(373));
    lv_currentTargetPoint = lv_ultraliskPatrolPoint01;
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_currentStage == 1) && (UnitIsAlive(UnitFromId(373)) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(UnitFromId(373)), lv_currentTargetPoint) <= 1)) {
            if ((lv_currentTargetPoint == lv_ultraliskPatrolPoint01)) {
                lv_currentTargetPoint = lv_ultraliskPatrolPoint02;
            }
            else {
                lv_currentTargetPoint = lv_ultraliskPatrolPoint01;
            }
            Wait(4.0, c_timeGame);
        }

        UnitIssueOrder(UnitFromId(373), OrderTargetingPoint(AbilityCommand("attack", 0), lv_currentTargetPoint), c_orderQueueReplace);
        Wait(1.0, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1UltraliskPatrol_Init () {
    gt_S1UltraliskPatrol = TriggerCreate("gt_S1UltraliskPatrol_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Ravager Shots
//--------------------------------------------------------------------------------------------------
bool gt_S1RavagerShots_Func (bool testConds, bool runActions) {
    int autoED1D5D4F_n;
    int autoED1D5D4F_i;

    // Variable Declarations
    unitgroup lv_targetUnitGroup;
    point lv_targetPoint;

    // Variable Initialization
    lv_targetUnitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(94), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(94), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsVisibleToPlayer(UnitGroupLoopCurrent(), gv_pLAYER_03_FERALZERG_MIDDLEBULLIES) == true)) {
            UnitGroupAdd(lv_targetUnitGroup, UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    if ((UnitGroupCount(lv_targetUnitGroup, c_unitCountAlive) > 0)) {
        UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionFromId(94), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) == "Ravager") || (UnitGetType(UnitGroupLoopCurrent()) == "RavagerBurrowed"))) {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BurrowRavagerUp", 0)), c_orderQueueReplace);
                autoED1D5D4F_n = 10;
                for (autoED1D5D4F_i = 1; autoED1D5D4F_i <= autoED1D5D4F_n; autoED1D5D4F_i += 1) {
                    lv_targetPoint = RegionRandomPoint(RegionCircle(UnitGroupCenterOfGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(94), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), 2.0));
                    if ((PointPathingPassable(lv_targetPoint) == true)) {
                        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("RavagerCorrosiveBile", 0), RegionRandomPoint(RegionCircle(UnitGroupCenterOfGroup(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(94), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), 2.0))), c_orderQueueReplace);
                        break;
                    }

                }
                Wait(0.25, c_timeAI);
            }

        }
        UnitGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1RavagerShots_Init () {
    gt_S1RavagerShots = TriggerCreate("gt_S1RavagerShots_Func");
    TriggerAddEventTimePeriodic(gt_S1RavagerShots, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Player Enters Nydus Worm Trigger
//--------------------------------------------------------------------------------------------------
bool gt_S1PlayerEntersNydusWormTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nydus01;
    unit lv_nydus02;
    unit lv_nydus03;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(86), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(87), 8.0, false);
    SoundPlayAtPointForPlayer(SoundLink("PShakuras02_BricksCrumble", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1893), 0.0, 100.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Shake", 2.0, 0.0, 3.0);
    Wait(3.0, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.5, 1.0, 3.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_05_FERALZERG_LEFTBULLIES, PointFromId(1893));
    lv_nydus01 = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimPlay Birth Birth,00 DontResetOnUnhide 0.000000");
    SoundPlayAtPointForPlayer(SoundLink("NydusWorm_Birth", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1893), 0.0, 100.0, 0.0);
    Wait(0.25, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_05_FERALZERG_LEFTBULLIES, PointFromId(1894));
    lv_nydus02 = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimPlay Birth Birth,01 DontResetOnUnhide 0.000000");
    SoundPlayAtPointForPlayer(SoundLink("Nydus_Unburrow", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(1894), 0.0, 100.0, 0.0);
    Wait(0.25, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NydusCanal", 0, gv_pLAYER_05_FERALZERG_LEFTBULLIES, PointFromId(323));
    lv_nydus03 = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimPlay Birth Birth,02 DontResetOnUnhide 0.000000");
    SoundPlayAtPointForPlayer(SoundLink("Nydus_Unburrow", -1), c_maxPlayers, PlayerGroupAll(), PointFromId(323), 0.0, 100.0, 0.0);
    Wait(5.0, c_timeGame);
    gf_S1UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Zergling", lv_nydus01, PointFromId(1796), gv_pLAYER_05_FERALZERG_LEFTBULLIES);
    Wait(0.25, c_timeGame);
    gf_S1UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Zergling", lv_nydus02, PointFromId(1796), gv_pLAYER_05_FERALZERG_LEFTBULLIES);
    Wait(0.25, c_timeGame);
    gf_S1UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(1, 1, 3, 3), "Zergling", lv_nydus03, PointFromId(1796), gv_pLAYER_05_FERALZERG_LEFTBULLIES);
    Wait(5.0, c_timeGame);
    gf_S1UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Hydralisk", lv_nydus01, PointFromId(1796), gv_pLAYER_05_FERALZERG_LEFTBULLIES);
    Wait(0.25, c_timeGame);
    gf_S1UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Hydralisk", lv_nydus02, PointFromId(1796), gv_pLAYER_05_FERALZERG_LEFTBULLIES);
    Wait(5.0, c_timeGame);
    gf_S1UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(0, 0, 2, 2), "Roach", lv_nydus02, PointFromId(1796), gv_pLAYER_05_FERALZERG_LEFTBULLIES);
    Wait(0.25, c_timeGame);
    gf_S1UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(0, 0, 1, 1), "Ultralisk", lv_nydus03, PointFromId(1796), gv_pLAYER_05_FERALZERG_LEFTBULLIES);
    Wait(0.25, c_timeGame);
    gf_S1UnloadUnitsFromNydusWorm(libLotv_gf_DifficultyValueInt2(0, 0, 0, 2), "Roach", lv_nydus01, PointFromId(1796), gv_pLAYER_05_FERALZERG_LEFTBULLIES);
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_currentStage == 1)) {
        UnitGroupLoopBegin(gv_s1_NydusUnloadedUnits);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((RandomInt(1, 8) == 1)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(87))), c_orderQueueReplace);
            }

        }
        UnitGroupLoopEnd();
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1PlayerEntersNydusWormTrigger_Init () {
    gt_S1PlayerEntersNydusWormTrigger = TriggerCreate("gt_S1PlayerEntersNydusWormTrigger_Func");
    TriggerAddEventTimePeriodic(gt_S1PlayerEntersNydusWormTrigger, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Player Nears Enemy Base Left Q
//--------------------------------------------------------------------------------------------------
bool gt_S1PlayerNearsEnemyBaseLeftQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/83CC929A"), null, RegionGetCenter(RegionFromId(11)));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(11)), 10.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00070", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1PlayerNearsEnemyBaseLeftQ_Init () {
    gt_S1PlayerNearsEnemyBaseLeftQ = TriggerCreate("gt_S1PlayerNearsEnemyBaseLeftQ_Func");
    TriggerAddEventTimePeriodic(gt_S1PlayerNearsEnemyBaseLeftQ, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Player Nears Enemy Base Middle Q
//--------------------------------------------------------------------------------------------------
bool gt_S1PlayerNearsEnemyBaseMiddleQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/983D6990"), null, RegionGetCenter(RegionFromId(10)));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(10)), 10.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00072", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1PlayerNearsEnemyBaseMiddleQ_Init () {
    gt_S1PlayerNearsEnemyBaseMiddleQ = TriggerCreate("gt_S1PlayerNearsEnemyBaseMiddleQ_Func");
    TriggerAddEventTimePeriodic(gt_S1PlayerNearsEnemyBaseMiddleQ, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Player Nears Enemy Base Right Q
//--------------------------------------------------------------------------------------------------
bool gt_S1PlayerNearsEnemyBaseRightQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/7DA8CF3C"), null, RegionGetCenter(RegionFromId(12)));
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), RegionGetCenter(RegionFromId(12)), 10.0, Color(100.00, 0.00, 0.00));
    Wait(2.0, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00073", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1PlayerNearsEnemyBaseRightQ_Init () {
    gt_S1PlayerNearsEnemyBaseRightQ = TriggerCreate("gt_S1PlayerNearsEnemyBaseRightQ_Func");
    TriggerAddEventTimePeriodic(gt_S1PlayerNearsEnemyBaseRightQ, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Player Kills Enemies In Enemy Base Areas Q
//--------------------------------------------------------------------------------------------------
bool gt_S1PlayerKillsEnemiesInEnemyBaseAreasQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!(((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(20.0, c_timeGame);
    if ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (TriggerIsEnabled(TriggerGetCurrent()) == true) && (gv_currentStage == 1) && ((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) || (UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerQueueEnter();
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00074", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00075", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1PlayerKillsEnemiesInEnemyBaseAreasQ_Init () {
    gt_S1PlayerKillsEnemiesInEnemyBaseAreasQ = TriggerCreate("gt_S1PlayerKillsEnemiesInEnemyBaseAreasQ_Func");
    TriggerAddEventTimePeriodic(gt_S1PlayerKillsEnemiesInEnemyBaseAreasQ, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Unit Enters Bonus Objective Create
//--------------------------------------------------------------------------------------------------
bool gt_S1UnitEntersBonusObjectiveCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(22), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S1BonusObjectiveRevealQ, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1UnitEntersBonusObjectiveCreate_Init () {
    gt_S1UnitEntersBonusObjectiveCreate = TriggerCreate("gt_S1UnitEntersBonusObjectiveCreate_Func");
    TriggerAddEventTimePeriodic(gt_S1UnitEntersBonusObjectiveCreate, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Bonus Objective Reveal Q
//--------------------------------------------------------------------------------------------------
bool gt_S1BonusObjectiveRevealQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S1UnitEntersBonusObjectiveCreate, false);
    TriggerQueueEnter();
    TriggerExecute(gt_S1BonusObjectiveHerculesCrash, true, false);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00027", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00028", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00029", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00030", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    TriggerEnable(gt_S1UnitEntersBonusObjectiveRevealQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1BonusObjectiveRevealQ_Init () {
    gt_S1BonusObjectiveRevealQ = TriggerCreate("gt_S1BonusObjectiveRevealQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Bonus Objective Hercules Crash
//--------------------------------------------------------------------------------------------------
bool gt_S1BonusObjectiveHerculesCrash_Func (bool testConds, bool runActions) {
    int auto720B2F6D_n;
    int auto720B2F6D_i;

    // Variable Declarations
    unit lv_herculesUnit;
    unitgroup lv_zergFlyerGroup;

    // Variable Initialization
    lv_zergFlyerGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "HerculesCrashing", 0, gv_pLAYER_07_STRANDEDTERRANS, PointFromId(270));
    lv_herculesUnit = UnitLastCreated();
    libNtve_gf_ChangeUnitDamage(lv_herculesUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    auto720B2F6D_n = 4;
    for (auto720B2F6D_i = 1; auto720B2F6D_i <= auto720B2F6D_n; auto720B2F6D_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionRandomPoint(RegionFromId(57)), UnitGetPosition(lv_herculesUnit));
        UnitGroupAdd(lv_zergFlyerGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), lv_herculesUnit), c_orderQueueReplace);
    }
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(lv_herculesUnit) == true) && (UnitGetType(lv_herculesUnit) == "HerculesCrashing") && (DistanceBetweenPoints(UnitGetPosition(lv_herculesUnit), PointFromId(501)) > 0.25)) {
        UnitIssueOrder(lv_herculesUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(501)), c_orderQueueReplace);
        Wait(0.0625, c_timeGame);
    }
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(62), 8.0, false);
    UnitKill(lv_herculesUnit);
    UnitGroupLoopBegin(lv_zergFlyerGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_S1BonusObjectiveDespawnZergFlyer(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    Wait(4.5, c_timeGame);
    if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true))) {
        return true;
    }
    else {
        VisRevealArea(gv_pLAYER_01_USER, RegionFromId(18), 6.0, false);
        TriggerExecute(gt_ObjectiveRecoverDownedForcesCreate, true, true);
        UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/3C122C6A"), null, PointFromId(209));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBonus", PointFromId(209), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/B5607704"));
        gv_s1_BO_Ping = PingLastCreated();
        UnitGroupLoopBegin(UnitGroup("MengskFirebat", gv_pLAYER_07_STRANDEDTERRANS, RegionFromId(18), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_S1BonusObjectiveSpawnSurvivor(UnitGroupLoopCurrent());
            Wait(0.25, c_timeGame);
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("MengskMedic", gv_pLAYER_07_STRANDEDTERRANS, RegionFromId(18), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_S1BonusObjectiveSpawnSurvivor(UnitGroupLoopCurrent());
            Wait(0.25, c_timeGame);
        }
        UnitGroupLoopEnd();
        libNtve_gf_ShowHideUnit(UnitFromId(685), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1BonusObjectiveHerculesCrash_Init () {
    gt_S1BonusObjectiveHerculesCrash = TriggerCreate("gt_S1BonusObjectiveHerculesCrash_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Unit Enters Bonus Objective Reveal Q
//--------------------------------------------------------------------------------------------------
bool gt_S1UnitEntersBonusObjectiveRevealQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_survivorsFound;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup(null, gv_pLAYER_01_USER, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/93C80E73"), null, PointFromId(209));
    PingDestroy(gv_s1_BO_Ping);
    TriggerExecute(gt_ObjectiveRecoverDownedForcesComplete, true, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_07_STRANDEDTERRANS, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupLoopCurrent() != UnitFromId(685))) {
            lv_survivorsFound = true;
            libNtve_gf_RescueUnit(UnitGroupLoopCurrent(), gv_pLAYER_01_USER, true);
        }

    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeGame);
    libNCMI_gf_DisplayRewardFloatingText(UnitGetPosition(UnitFromId(685)), libNCMI_ge_CacheResourceType_CustomResource, 1, null, null, gv_pLAYER_01_USER);
    UnitKill(UnitFromId(685));
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    if ((lv_survivorsFound == true)) {
        libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00031", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    }

    libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00119", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00120", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1UnitEntersBonusObjectiveRevealQ_Init () {
    gt_S1UnitEntersBonusObjectiveRevealQ = TriggerCreate("gt_S1UnitEntersBonusObjectiveRevealQ_Func");
    TriggerEnable(gt_S1UnitEntersBonusObjectiveRevealQ, false);
    TriggerAddEventTimePeriodic(gt_S1UnitEntersBonusObjectiveRevealQ, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - First Units Flee Stealthed Nova
//--------------------------------------------------------------------------------------------------
bool gt_S2FirstUnitsFleeStealthedNova_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_fleeingUnitsGroup;

    // Variable Initialization
    lv_fleeingUnitsGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(64)) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_06_DEFENDERSOFMAN))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S2FirstUnitsGetToHallwayUnits, true);
    TriggerEnable(gt_S2NovaPassesHallwayUnitsUndetectedQ, false);
    TriggerExecute(gt_S2FirstUnitsFleeStealthedNovaTransmissionQ, true, false);
    lv_fleeingUnitsGroup = UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupLoopBegin(lv_fleeingUnitsGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "AnimGroupApply Work");
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_zeratul)), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeGame);
    if ((UnitGroupCount(lv_fleeingUnitsGroup, c_unitCountAlive) > 0)) {
        UnitGroupLoopBegin(lv_fleeingUnitsGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(34))), c_orderQueueReplace);
            Wait(0.125, c_timeGame);
        }
        UnitGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2FirstUnitsFleeStealthedNova_Init () {
    gt_S2FirstUnitsFleeStealthedNova = TriggerCreate("gt_S2FirstUnitsFleeStealthedNova_Func");
    TriggerEnable(gt_S2FirstUnitsFleeStealthedNova, false);
    TriggerAddEventUnitDied(gt_S2FirstUnitsFleeStealthedNova, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - First Units Get To Hallway Units
//--------------------------------------------------------------------------------------------------
bool gt_S2FirstUnitsGetToHallwayUnits_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_06_DEFENDERSOFMAN))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "AnimGroupApply Work");
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 1.0, 315.0)), c_orderQueueAddToEnd);
        Wait(0.125, c_timeGame);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2FirstUnitsGetToHallwayUnits_Init () {
    gt_S2FirstUnitsGetToHallwayUnits = TriggerCreate("gt_S2FirstUnitsGetToHallwayUnits_Func");
    TriggerEnable(gt_S2FirstUnitsGetToHallwayUnits, false);
    TriggerAddEventUnitRegion(gt_S2FirstUnitsGetToHallwayUnits, null, RegionFromId(34), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - First Units Flee Stealthed Nova Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S2FirstUnitsFleeStealthedNovaTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit01;
    unit lv_unit02;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_unit01 = UnitGroupUnit(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    lv_unit02 = UnitGroupUnit(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(64), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 2);
    if ((TransmissionPlayerHasActiveTransmission(gv_pLAYER_01_USER) == false)) {
        TriggerQueueEnter();
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        if ((UnitIsAlive(lv_unit01) == true)) {
            libNCMI_gf_SendTransmissionCampaign(lv_unit01, "Mission_Nova03|Line00077", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }

        if ((UnitIsAlive(lv_unit02) == true)) {
            libNCMI_gf_SendTransmissionCampaign(lv_unit02, "Mission_Nova03|Line00078", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }

        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2FirstUnitsFleeStealthedNovaTransmissionQ_Init () {
    gt_S2FirstUnitsFleeStealthedNovaTransmissionQ = TriggerCreate("gt_S2FirstUnitsFleeStealthedNovaTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Passes Hallway Units Undetected Q
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaPassesHallwayUnitsUndetectedQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit01;
    unit lv_unit02;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_unit01 = UnitFromId(104);
    lv_unit02 = UnitFromId(106);
    if ((TransmissionPlayerHasActiveTransmission(gv_pLAYER_01_USER) == false)) {
        TriggerQueueEnter();
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        if ((UnitIsAlive(lv_unit01) == true)) {
            UnitIssueOrder(lv_unit01, OrderTargetingUnit(AbilityCommand("move", 4), lv_unit02), c_orderQueueReplace);
            libNCMI_gf_SendTransmissionCampaign(lv_unit01, "Mission_Nova03|Line00080", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }

        if ((UnitIsAlive(lv_unit02) == true)) {
            UnitIssueOrder(lv_unit02, OrderTargetingUnit(AbilityCommand("move", 4), lv_unit01), c_orderQueueReplace);
            libNCMI_gf_SendTransmissionCampaign(lv_unit02, "Mission_Nova03|Line00081", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }

        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaPassesHallwayUnitsUndetectedQ_Init () {
    gt_S2NovaPassesHallwayUnitsUndetectedQ = TriggerCreate("gt_S2NovaPassesHallwayUnitsUndetectedQ_Func");
    TriggerAddEventUnitRegion(gt_S2NovaPassesHallwayUnitsUndetectedQ, UnitRefFromVariable("gv_zeratul"), RegionFromId(66), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Hallway Units Confront Stealthed Nova
//--------------------------------------------------------------------------------------------------
bool gt_S2HallwayUnitsConfrontStealthedNova_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(65)) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_06_DEFENDERSOFMAN))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S2HallwayUnitsConfrontStealthedNovaTransmissionQ, true, false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "AnimGroupApply Work");
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 4), UnitGetPosition(gv_zeratul)), c_orderQueueReplace);
        Wait(0.125, c_timeGame);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2HallwayUnitsConfrontStealthedNova_Init () {
    gt_S2HallwayUnitsConfrontStealthedNova = TriggerCreate("gt_S2HallwayUnitsConfrontStealthedNova_Func");
    TriggerEnable(gt_S2HallwayUnitsConfrontStealthedNova, false);
    TriggerAddEventUnitDied(gt_S2HallwayUnitsConfrontStealthedNova, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Hallway Units Confront Stealthed Nova Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S2HallwayUnitsConfrontStealthedNovaTransmissionQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit01;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_unit01 = UnitGroupUnit(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    if ((UnitIsAlive(lv_unit01) == true)) {
        if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(65), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 1)) {
            libNCMI_gf_SendTransmissionCampaign(lv_unit01, "Mission_Nova03|Line00082", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
        else {
            libNCMI_gf_SendTransmissionCampaign(lv_unit01, "Mission_Nova03|Line00084", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        }
    }

    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2HallwayUnitsConfrontStealthedNovaTransmissionQ_Init () {
    gt_S2HallwayUnitsConfrontStealthedNovaTransmissionQ = TriggerCreate("gt_S2HallwayUnitsConfrontStealthedNovaTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Enters Initial Encounter
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaEntersInitialEncounter_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_zeratul, RegionFromId(20)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S2NovaEntersInitialEncounterTransmissionQ, true, false);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(21), libNCMI_ge_StealthAIDefendRegionState_Active);
    UnitGroupAddUnitGroup(gv_s2_SwordTutorialUnitGroup, UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    libNtve_gf_MakeUnitUncommandable(gv_zeratul, true);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(99)), c_orderQueueReplace);
    UnitIssueOrder(gv_zeratul, Order(AbilityCommand("move", 2)), c_orderQueueAddToEnd);
    CameraPan(gv_pLAYER_01_USER, PointFromId(99), 2.0, -1, 10.0, false);
    UnitAbilityEnable(gv_zeratul, "NovaPsiStrike", true);
    UnitAbilityShow(gv_zeratul, "NovaPsiStrike", true);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "NovaWeaponPsiBlade", true);
    libNCMI_gf_CreateReticleEffectAndTextTagAtPoint(libNCMI_ge_CampaginReticleType_TerranEnemy, libNCMI_ge_CampaginReticleSize_Medium, StringExternal("Param/Value/02BF0A0C"), PointFromId(100));
    gv_s2_SwordTutorialReticle = libNtve_gf_ActorLastCreated();
    gv_s2_SwordTutorialTextTag = TextTagLastCreated();
    TriggerEnable(gt_S2NovaUsesDashAttack, true);
    TriggerEnable(gt_S2NovaKillsUnitInTutorialRoom, true);
    TriggerEnable(gt_S2NovaSkipsSwordTutorialTransmissionQ, true);
    if ((UnitGetPropertyFixed(gv_zeratul, c_unitPropEnergy, c_unitPropCurrent) < libNtve_gf_CostOfAbility("NovaPsiStrike", "Energy"))) {
        UnitSetPropertyFixed(gv_zeratul, c_unitPropEnergy, libNtve_gf_CostOfAbility("NovaPsiStrike", "Energy"));
    }

    Wait(2.0, c_timeGame);
    libNtve_gf_MakeUnitUncommandable(gv_zeratul, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaEntersInitialEncounter_Init () {
    gt_S2NovaEntersInitialEncounter = TriggerCreate("gt_S2NovaEntersInitialEncounter_Func");
    TriggerAddEventTimePeriodic(gt_S2NovaEntersInitialEncounter, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Enters Initial Encounter Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaEntersInitialEncounterTransmissionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(88)) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitFromId(88), "Mission_Nova03|Line00037", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaEntersInitialEncounterTransmissionQ_Init () {
    gt_S2NovaEntersInitialEncounterTransmissionQ = TriggerCreate("gt_S2NovaEntersInitialEncounterTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Uses Dash Attack
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaUsesDashAttack_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S2TurnOffSwordTutorial, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaUsesDashAttack_Init () {
    gt_S2NovaUsesDashAttack = TriggerCreate("gt_S2NovaUsesDashAttack_Func");
    TriggerEnable(gt_S2NovaUsesDashAttack, false);
    TriggerAddEventPlayerEffectUsed(gt_S2NovaUsesDashAttack, gv_pLAYER_01_USER, "NovaPsiStrike");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Kills Unit In Tutorial Room
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaKillsUnitInTutorialRoom_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(21)) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == gv_pLAYER_06_DEFENDERSOFMAN))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S2NovaSkipsSwordTutorialTransmissionQ, false);
    TriggerExecute(gt_S2TurnOffSwordTutorial, true, false);
    TriggerExecute(gt_S2MarauderEntersSwordTutorialRoomTransmissionQ, true, false);
    UnitIssueOrder(UnitFromId(101), Order(AbilityCommand("Tarsonis_DoorNWLowered", 0)), c_orderQueueReplace);
    libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(21), UnitFromId(132), PointFromId(133));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaKillsUnitInTutorialRoom_Init () {
    gt_S2NovaKillsUnitInTutorialRoom = TriggerCreate("gt_S2NovaKillsUnitInTutorialRoom_Func");
    TriggerEnable(gt_S2NovaKillsUnitInTutorialRoom, false);
    TriggerAddEventUnitDied(gt_S2NovaKillsUnitInTutorialRoom, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Skips Sword Tutorial Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaSkipsSwordTutorialTransmissionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_zeratul, RegionFromId(71)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S2TurnOffSwordTutorial, true, false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00085", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaSkipsSwordTutorialTransmissionQ_Init () {
    gt_S2NovaSkipsSwordTutorialTransmissionQ = TriggerCreate("gt_S2NovaSkipsSwordTutorialTransmissionQ_Func");
    TriggerEnable(gt_S2NovaSkipsSwordTutorialTransmissionQ, false);
    TriggerAddEventTimePeriodic(gt_S2NovaSkipsSwordTutorialTransmissionQ, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Turn Off Sword Tutorial
//--------------------------------------------------------------------------------------------------
bool gt_S2TurnOffSwordTutorial_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UISetButtonFaceHighlighted(PlayerGroupAll(), "NovaWeaponPsiBlade", false);
    libNtve_gf_KillModel(gv_s2_SwordTutorialReticle);
    TextTagDestroy(gv_s2_SwordTutorialTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2TurnOffSwordTutorial_Init () {
    gt_S2TurnOffSwordTutorial = TriggerCreate("gt_S2TurnOffSwordTutorial_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Marauder Enters Sword Tutorial Room Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S2MarauderEntersSwordTutorialRoomTransmissionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(4.0, c_timeGame);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(132)) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitFromId(132), "Mission_Nova03|Line00079", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    TriggerEnable(gt_S2NovaKillsAnotherinSwordTutorialRoomTransmissionQ, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2MarauderEntersSwordTutorialRoomTransmissionQ_Init () {
    gt_S2MarauderEntersSwordTutorialRoomTransmissionQ = TriggerCreate("gt_S2MarauderEntersSwordTutorialRoomTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Kills Another in Sword Tutorial Room Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaKillsAnotherinSwordTutorialRoomTransmissionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(21)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(132)) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitFromId(132), "Mission_Nova03|Line00086", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaKillsAnotherinSwordTutorialRoomTransmissionQ_Init () {
    gt_S2NovaKillsAnotherinSwordTutorialRoomTransmissionQ = TriggerCreate("gt_S2NovaKillsAnotherinSwordTutorialRoomTransmissionQ_Func");
    TriggerEnable(gt_S2NovaKillsAnotherinSwordTutorialRoomTransmissionQ, false);
    TriggerAddEventUnitAttacked2(gt_S2NovaKillsAnotherinSwordTutorialRoomTransmissionQ, null, "NovaWeaponPsiBlade");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Kills Haiku Target Q
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaKillsHaikuTargetQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00087", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaKillsHaikuTargetQ_Init () {
    gt_S2NovaKillsHaikuTargetQ = TriggerCreate("gt_S2NovaKillsHaikuTargetQ_Func");
    TriggerAddEventUnitDied(gt_S2NovaKillsHaikuTargetQ, UnitRefFromUnit(UnitFromId(957)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Enters Ghost Guard Room 01
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaEntersGhostGuardRoom01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_zeratul, RegionFromId(27)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(109), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAIMakeGhostLookBetween2Angles(UnitFromId(965), 15.0, 320.0, libLotv_gf_DifficultyValueFixed2(7.0, 7.0, 4.0, 4.0));
    Wait(2.0, c_timeGame);
    if ((UnitIsAlive(UnitFromId(2986)) == true)) {
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(109), UnitFromId(2986), PointFromId(3042));
    }

    TriggerExecute(gt_S2TargetPracticeTrooper01, true, false);
    Wait(1.0, c_timeAI);
    TriggerExecute(gt_S2TargetPracticeTrooper02, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaEntersGhostGuardRoom01_Init () {
    gt_S2NovaEntersGhostGuardRoom01 = TriggerCreate("gt_S2NovaEntersGhostGuardRoom01_Func");
    TriggerAddEventTimePeriodic(gt_S2NovaEntersGhostGuardRoom01, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Target Practice Trooper 01
//--------------------------------------------------------------------------------------------------
bool gt_S2TargetPracticeTrooper01_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(UnitFromId(3057)) == true) && (libNCMI_gf_StealthAIGetStealthAIUnitState(UnitFromId(3057)) == libNCMI_ge_StealthAIUnitState_Idle) && (DistanceBetweenPoints(UnitGetPosition(UnitFromId(3057)), libNCMI_gf_StealthAIGetHomePointOfUnit(UnitFromId(3057))) <= 0.5)) {
        libNCMI_gf_StealthAISetStealthAIUnitState(UnitFromId(3057), libNCMI_ge_StealthAIUnitState_Unavailable);
        UnitIssueOrder(UnitFromId(3057), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(3887)), c_orderQueueReplace);
        Wait(0.75, c_timeAI);
        if ((UnitIsAlive(UnitFromId(3057)) == true) && (DistanceBetweenPoints(UnitGetPosition(UnitFromId(3057)), libNCMI_gf_StealthAIGetHomePointOfUnit(UnitFromId(3057))) <= 0.25)) {
            libNCMI_gf_StealthAISetStealthAIUnitState(UnitFromId(3057), libNCMI_ge_StealthAIUnitState_Idle);
        }

        Wait(RandomFixed(2.0, 4.0), c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2TargetPracticeTrooper01_Init () {
    gt_S2TargetPracticeTrooper01 = TriggerCreate("gt_S2TargetPracticeTrooper01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Target Practice Trooper 02
//--------------------------------------------------------------------------------------------------
bool gt_S2TargetPracticeTrooper02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (UnitIsAlive(UnitFromId(3895)) == true) && (libNCMI_gf_StealthAIGetStealthAIUnitState(UnitFromId(3895)) == libNCMI_ge_StealthAIUnitState_Idle) && (DistanceBetweenPoints(UnitGetPosition(UnitFromId(3895)), libNCMI_gf_StealthAIGetHomePointOfUnit(UnitFromId(3895))) <= 0.5)) {
        libNCMI_gf_StealthAISetStealthAIUnitState(UnitFromId(3895), libNCMI_ge_StealthAIUnitState_Unavailable);
        UnitIssueOrder(UnitFromId(3895), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(853)), c_orderQueueReplace);
        Wait(0.75, c_timeAI);
        if ((UnitIsAlive(UnitFromId(3895)) == true) && (DistanceBetweenPoints(UnitGetPosition(UnitFromId(3895)), libNCMI_gf_StealthAIGetHomePointOfUnit(UnitFromId(3895))) <= 0.25)) {
            libNCMI_gf_StealthAISetStealthAIUnitState(UnitFromId(3895), libNCMI_ge_StealthAIUnitState_Idle);
        }

        Wait(RandomFixed(2.0, 4.0), c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2TargetPracticeTrooper02_Init () {
    gt_S2TargetPracticeTrooper02 = TriggerCreate("gt_S2TargetPracticeTrooper02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Bonus Objective Detectors Dead Q
//--------------------------------------------------------------------------------------------------
bool gt_S2BonusObjectiveDetectorsDeadQ_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_fleeingUnitsGroup;

    // Variable Initialization
    lv_fleeingUnitsGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(965)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(701)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(3167)) == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(gv_zeratul, gv_pLAYER_06_DEFENDERSOFMAN) == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_zeratul, RegionFromId(28)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_fleeingUnitsGroup = UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(109), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(67), libNCMI_ge_StealthAIDefendRegionState_Active);
    UnitGroupLoopBegin(lv_fleeingUnitsGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(67), UnitGroupLoopCurrent(), libNtve_gf_PointFacingAngle(gf_RandomPointinRegionSharedbyGroup(RegionFromId(68), lv_fleeingUnitsGroup), RandomFixed(90.0, 200.0)));
    }
    UnitGroupLoopEnd();
    if ((UnitGroupCount(lv_fleeingUnitsGroup, c_unitCountAlive) > 0)) {
        TriggerQueueEnter();
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitGroupUnit(lv_fleeingUnitsGroup, 1), "Mission_Nova03|Line00113", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
        TriggerQueueExit();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2BonusObjectiveDetectorsDeadQ_Init () {
    gt_S2BonusObjectiveDetectorsDeadQ = TriggerCreate("gt_S2BonusObjectiveDetectorsDeadQ_Func");
    TriggerAddEventTimePeriodic(gt_S2BonusObjectiveDetectorsDeadQ, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Enters Ghost Room 02
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaEntersGhostRoom02_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_zeratul, RegionFromId(36)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S2NovaKillsAnotherinSwordTutorialRoomTransmissionQ, false);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(67), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAIMakeGhostLookBetween2Angles(UnitFromId(748), 270.0, 315.0, libLotv_gf_DifficultyValueFixed2(7.0, 7.0, 4.0, 4.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaEntersGhostRoom02_Init () {
    gt_S2NovaEntersGhostRoom02 = TriggerCreate("gt_S2NovaEntersGhostRoom02_Func");
    TriggerAddEventTimePeriodic(gt_S2NovaEntersGhostRoom02, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Ghost Room 02 Detector Dead
//--------------------------------------------------------------------------------------------------
bool gt_S2GhostRoom02DetectorDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_fleeingUnitsGroup;

    // Variable Initialization
    lv_fleeingUnitsGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(748)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(856)) == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsVisibleToPlayer(gv_zeratul, gv_pLAYER_06_DEFENDERSOFMAN) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_fleeingUnitsGroup = UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(67), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(31), libNCMI_ge_StealthAIDefendRegionState_Active);
    UnitGroupLoopBegin(lv_fleeingUnitsGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(31), UnitGroupLoopCurrent(), libNtve_gf_PointFacingAngle(gf_RandomPointinRegionSharedbyGroup(RegionFromId(69), lv_fleeingUnitsGroup), RandomFixed(10.0, 110.0)));
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2GhostRoom02DetectorDead_Init () {
    gt_S2GhostRoom02DetectorDead = TriggerCreate("gt_S2GhostRoom02DetectorDead_Func");
    TriggerAddEventTimePeriodic(gt_S2GhostRoom02DetectorDead, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Enters Ghost Room 03
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaEntersGhostRoom03_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_zeratul, RegionFromId(30)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(31), libNCMI_ge_StealthAIDefendRegionState_Active);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaEntersGhostRoom03_Init () {
    gt_S2NovaEntersGhostRoom03 = TriggerCreate("gt_S2NovaEntersGhostRoom03_Func");
    TriggerAddEventTimePeriodic(gt_S2NovaEntersGhostRoom03, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Adjacent To Comms Hub Room Q
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaAdjacentToCommsHubRoomQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_zeratul, RegionFromId(37)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(gv_s2_BeaconActionableIntel), 2.0, Color(0.00, 100.00, 0.00));
    libNtve_gf_ShowHideUnit(gv_s2_BeaconActionableIntel, true);
    UnitCreate(1, "Beacon_Terran", c_unitCreateIgnorePlacement, 0, UnitGetPosition(gv_s2_BeaconActionableIntel), UnitGetFacing(gv_s2_BeaconActionableIntel));
    UnitKill(UnitLastCreated());
    TriggerEnable(gt_S2NovaEntersBeaconIntelQ, true);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00047", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaAdjacentToCommsHubRoomQ_Init () {
    gt_S2NovaAdjacentToCommsHubRoomQ = TriggerCreate("gt_S2NovaAdjacentToCommsHubRoomQ_Func");
    TriggerAddEventTimePeriodic(gt_S2NovaAdjacentToCommsHubRoomQ, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S2 - Nova Enters Beacon Intel Q
//--------------------------------------------------------------------------------------------------
bool gt_S2NovaEntersBeaconIntelQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 2))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_zeratul, RegionFromId(16)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitKill(gv_s2_BeaconActionableIntel);
    PingDestroy(libHots_gf_PingStoredForUnit(gv_s2_BeaconActionableIntel, 1));
    TriggerExecute(gt_ObjectiveReachCommunicationsHubComplete, true, false);
    TriggerExecute(gt_S2CleanUpSection02, true, true);
    TriggerExecute(gt_MidQ2, true, true);
    TriggerExecute(gt_StartGame03QReachCommandRoom, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S2NovaEntersBeaconIntelQ_Init () {
    gt_S2NovaEntersBeaconIntelQ = TriggerCreate("gt_S2NovaEntersBeaconIntelQ_Func");
    TriggerEnable(gt_S2NovaEntersBeaconIntelQ, false);
    TriggerAddEventTimePeriodic(gt_S2NovaEntersBeaconIntelQ, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Nova Enters Comms Room
//--------------------------------------------------------------------------------------------------
bool gt_S3NovaEntersCommsRoom_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(32), libNCMI_ge_StealthAIDefendRegionState_Active);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libNCMI_gf_StealthAIMakeGhostLookBetween2Angles(UnitFromId(674), 310.0, 0.0, 4.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3NovaEntersCommsRoom_Init () {
    gt_S3NovaEntersCommsRoom = TriggerCreate("gt_S3NovaEntersCommsRoom_Func");
    TriggerAddEventUnitRegion(gt_S3NovaEntersCommsRoom, UnitRefFromVariable("gv_zeratul"), RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Nova Enters Atrium First Time
//--------------------------------------------------------------------------------------------------
bool gt_S3NovaEntersAtriumFirstTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_transportGroup01;
    unitgroup lv_transportGroup02;
    unit lv_hercules01;
    unit lv_hercules02;

    // Variable Initialization
    lv_transportGroup01 = UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_transportGroup02 = UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(56), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_hercules01 = UnitFromId(110);
    lv_hercules02 = UnitFromId(1002);

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S3NovaEntersAtriumFirstTimeTransmissionQ, true, false);
    UnitGroupIssueOrder(lv_transportGroup01, OrderTargetingUnit(null, lv_hercules01), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    gf_S3LiftOffHerculesVertically(lv_hercules01);
    UnitIssueOrder(UnitFromId(1048), Order(AbilityCommand("GhostDetetorConeExit", 0)), c_orderQueueReplace);
    UnitGroupIssueOrder(lv_transportGroup02, OrderTargetingUnit(null, lv_hercules02), c_orderQueueReplace);
    Wait(4.0, c_timeGame);
    gf_S3LiftOffHerculesVertically(lv_hercules02);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3NovaEntersAtriumFirstTime_Init () {
    gt_S3NovaEntersAtriumFirstTime = TriggerCreate("gt_S3NovaEntersAtriumFirstTime_Func");
    TriggerAddEventUnitRegion(gt_S3NovaEntersAtriumFirstTime, UnitRefFromVariable("gv_zeratul"), RegionFromId(39), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Nova Enters Atrium First Time Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S3NovaEntersAtriumFirstTimeTransmissionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(1048)) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitFromId(1048), "Mission_Nova03|Line00092", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3NovaEntersAtriumFirstTimeTransmissionQ_Init () {
    gt_S3NovaEntersAtriumFirstTimeTransmissionQ = TriggerCreate("gt_S3NovaEntersAtriumFirstTimeTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Psi Emitters!
//--------------------------------------------------------------------------------------------------
bool gt_S3PsiEmitters_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_NovaFlashbangsUnitInDefendRegion, false);
    TriggerEnable(gt_NovaKillsDOMUnitInDefendRegion, false);
    UnitGroupLoopBegin(UnitGroup("Overlord", gv_pLAYER_08_FERALZERG_INSIDE, RegionFromId(49), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 10.0, UnitGetFacing(UnitGroupLoopCurrent()))), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_S3PsiEmittersLoadTransport, true);
    libNtve_gf_CreateUnitsAtPoint2(1, "HerculesLanderFlying", 0, gv_pLAYER_06_DEFENDERSOFMAN, PointFromId(1674));
    gv_herculesUnit = UnitLastCreated();
    gf_S3LandHerculesVertically(UnitLastCreated());
    UnitGroupAddUnitGroup(gv_evacGroup1, UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(98), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_evacGroup2, UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(99), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_evacGroup3, UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(82), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(gv_evacGroupAll, gv_evacGroup1);
    UnitGroupAddUnitGroup(gv_evacGroupAll, gv_evacGroup2);
    UnitGroupAddUnitGroup(gv_evacGroupAll, gv_evacGroup3);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_S3PsiEmittersTransmissionQ, true, false);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(100), libNCMI_ge_StealthAIDefendRegionState_Active);
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(gv_evacGroup1);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(100), UnitGroupLoopCurrent(), gf_RandomPointinRegionSharedbyGroup(RegionFromId(41), gv_evacGroupAll));
    }
    UnitGroupLoopEnd();
    Wait(1.5, c_timeGame);
    UnitGroupLoopBegin(gv_evacGroup2);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(100), UnitGroupLoopCurrent(), gf_RandomPointinRegionSharedbyGroup(RegionFromId(41), gv_evacGroupAll));
    }
    UnitGroupLoopEnd();
    Wait(1.5, c_timeGame);
    UnitGroupLoopBegin(gv_evacGroup3);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNCMI_gf_StealthAIAddUnitToStealthAIDefendRegion(RegionFromId(100), UnitGroupLoopCurrent(), gf_RandomPointinRegionSharedbyGroup(RegionFromId(41), gv_evacGroupAll));
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3PsiEmitters_Init () {
    gt_S3PsiEmitters = TriggerCreate("gt_S3PsiEmitters_Func");
    TriggerAddEventUnitRegion(gt_S3PsiEmitters, UnitRefFromVariable("gv_zeratul"), RegionFromId(54), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Psi Emitters Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S3PsiEmittersTransmissionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(UnitFromId(963), "Mission_Nova03|Line00093", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00094", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00095", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova03_Main_A", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3PsiEmittersTransmissionQ_Init () {
    gt_S3PsiEmittersTransmissionQ = TriggerCreate("gt_S3PsiEmittersTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Psi Emitters Load Transport
//--------------------------------------------------------------------------------------------------
bool gt_S3PsiEmittersLoadTransport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_allUnitsAreCargoOrDead;

    // Variable Initialization
    lv_allUnitsAreCargoOrDead = true;

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_evacGroupAll);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitIsAlive(UnitGroupLoopCurrent()) == true) && (libNtve_gf_UnitIsInsideTransport(UnitGroupLoopCurrent()) == false)) {
            lv_allUnitsAreCargoOrDead = false;
            if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(41)) == true) && (UnitIsAlive(gv_herculesUnit) == true)) {
                libNCMI_gf_StealthAISetStealthAIUnitState(UnitGroupLoopCurrent(), libNCMI_ge_StealthAIUnitState_Unavailable);
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(null, gv_herculesUnit), c_orderQueueReplace);
            }

        }

    }
    UnitGroupLoopEnd();
    if ((lv_allUnitsAreCargoOrDead == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        if ((UnitIsAlive(gv_herculesUnit) == true)) {
            gf_S3LiftOffHerculesVertically(gv_herculesUnit);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3PsiEmittersLoadTransport_Init () {
    gt_S3PsiEmittersLoadTransport = TriggerCreate("gt_S3PsiEmittersLoadTransport_Func");
    TriggerEnable(gt_S3PsiEmittersLoadTransport, false);
    TriggerAddEventTimePeriodic(gt_S3PsiEmittersLoadTransport, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Building Collapse
//--------------------------------------------------------------------------------------------------
bool gt_S3BuildingCollapse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zerglingGroup;
    int lv_lingCount;
    int lv_lingCycle;
    unitgroup lv_zerglingGroup2;
    int lv_lingCount2;
    int lv_lingCycle2;

    // Variable Initialization
    lv_zerglingGroup = UnitGroupEmpty();
    lv_zerglingGroup2 = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/F1E6007B"));
    TriggerEnable(gt_S3BuildingCollapseGhostInCombat, true);
    TriggerEnable(gt_S3BuildingCollapseMedicsFallBack, true);
    TriggerExecute(gt_S3BuildingCollapseTransmissionQ, true, false);
    TriggerExecute(gt_S3BuildingCollapseInitialGroup, true, false);
    UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(101), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(101), libNCMI_ge_StealthAIDefendRegionState_Active);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNCMI_gf_StealthAIMakeGhostLookBetween2Angles(UnitFromId(663), 135.0, 90.0, 4.0);
    }

    UnitGroupLoopBegin(UnitGroup("PathingBlocker4x4Diagonal", c_playerAny, RegionFromId(107), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitIssueOrder(UnitFromId(936), Order(AbilityCommand("CollapsingBuildingSWCollapsed", 0)), c_orderQueueReplace);
    SoundPlayAtPointForPlayer(SoundLink("Event_Nova03_BuildingCrumble", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(936)), 0.0, 100.0, 0.0);
    SoundPlayAtPointForPlayer(SoundLink("Event_Nova03_BuildingCrumbleDebris", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(936)), 0.0, 100.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 2.0, 3.0);
    Wait(2.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("Event_Nova03_BuildingCrumbleSweetener", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(936)), 0.0, 100.0, 0.0);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 2.0, 2.0);
    ActorSend(ActorFromDoodad(DoodadFromId(2324)), "Signal DoodadDeath");
    SoundPlayAtPointForPlayer(SoundLink("Event_Nova03_BuildingCrumbleDebris2", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(936)), 0.0, 100.0, 0.0);
    Wait(0.125, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("General_Explosion_Glass", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitFromId(936)), 0.0, 100.0, 0.0);
    ActorSend(ActorFromDoodad(DoodadFromId(2322)), "Signal DoodadDeath");
    ActorSend(ActorFromDoodad(DoodadFromId(2323)), "Signal DoodadDeath");
    Wait(4.0, c_timeGame);
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        if ((UnitGroupCount(gv_s3_ZerglingTrickleUnitGroup, c_unitCountAlive) <= 20)) {
            if (lv_lingCycle >= 2) {
                lv_lingCycle = 1;
            }
            else {
                lv_lingCycle = lv_lingCycle + 1;
            }
            if ((lv_lingCycle == 2)) {
                lv_lingCount = 5;
            }
            else {
                lv_lingCount = 6;
            }
            libNtve_gf_CreateUnitsAtPoint2(lv_lingCount, "Zergling", 0, gv_pLAYER_08_FERALZERG_INSIDE, PointFromId(956));
            UnitGroupAddUnitGroup(gv_s3_ZerglingTrickleUnitGroup, UnitLastCreatedGroup());
            UnitGroupLoopBegin(UnitLastCreatedGroup());
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(84))), c_orderQueueReplace);
                gf_S3ZergWanderAfterDelay(UnitGroupLoopCurrent(), RandomFixed(6.0, 9.0));
            }
            UnitGroupLoopEnd();
            Wait(6.0, c_timeGame);
        }
        else {
            Wait(1.0, c_timeGame);
        }
        if ((UnitGroupCount(gv_s3_ZerglingTrickleUnitGroup2, c_unitCountAlive) <= 20)) {
            if (lv_lingCycle2 >= 2) {
                lv_lingCycle2 = 1;
            }
            else {
                lv_lingCycle2 = lv_lingCycle2 + 1;
            }
            if ((lv_lingCycle2 == 2)) {
                lv_lingCount2 = 5;
            }
            else {
                lv_lingCount2 = 6;
            }
            libNtve_gf_CreateUnitsAtPoint2(lv_lingCount2, "Zergling", 0, gv_pLAYER_08_FERALZERG_INSIDE, PointFromId(956));
            UnitGroupAddUnitGroup(gv_s3_ZerglingTrickleUnitGroup2, UnitLastCreatedGroup());
            UnitGroupLoopBegin(UnitLastCreatedGroup());
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(110))), c_orderQueueReplace);
                gf_S3ZergWanderAfterDelay(UnitGroupLoopCurrent(), RandomFixed(20.0, 24.0));
            }
            UnitGroupLoopEnd();
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3BuildingCollapse_Init () {
    gt_S3BuildingCollapse = TriggerCreate("gt_S3BuildingCollapse_Func");
    TriggerAddEventUnitRegion(gt_S3BuildingCollapse, UnitRefFromVariable("gv_zeratul"), RegionFromId(53), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Building Collapse Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S3BuildingCollapseTransmissionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(UnitFromId(1935), "Mission_Nova03|Line00096", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3BuildingCollapseTransmissionQ_Init () {
    gt_S3BuildingCollapseTransmissionQ = TriggerCreate("gt_S3BuildingCollapseTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Building Collapse Initial Group
//--------------------------------------------------------------------------------------------------
bool gt_S3BuildingCollapseInitialGroup_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    AIAttackWaveSetGatherPoint(gv_pLAYER_08_FERALZERG_INSIDE, RegionGetCenter(RegionFromId(55)));
    AIAttackWaveSetTargetRegion(gv_pLAYER_08_FERALZERG_INSIDE, RegionFromId(84), 0);
    AIAttackWaveUseGroup(gv_pLAYER_08_FERALZERG_INSIDE, UnitGroup("Zergling", gv_pLAYER_08_FERALZERG_INSIDE, RegionFromId(55), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    AIAttackWaveSend(gv_pLAYER_08_FERALZERG_INSIDE, 0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3BuildingCollapseInitialGroup_Init () {
    gt_S3BuildingCollapseInitialGroup = TriggerCreate("gt_S3BuildingCollapseInitialGroup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Building Collapse Medics Fall Back
//--------------------------------------------------------------------------------------------------
bool gt_S3BuildingCollapseMedicsFallBack_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1012)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1050)) == false))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(1035)) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsAlive(UnitFromId(1065)) == true)) {
        UnitIssueOrder(UnitFromId(1065), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(756)), c_orderQueueReplace);
    }

    if ((UnitIsAlive(UnitFromId(1105)) == true)) {
        UnitIssueOrder(UnitFromId(1105), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(757)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3BuildingCollapseMedicsFallBack_Init () {
    gt_S3BuildingCollapseMedicsFallBack = TriggerCreate("gt_S3BuildingCollapseMedicsFallBack_Func");
    TriggerEnable(gt_S3BuildingCollapseMedicsFallBack, false);
    TriggerAddEventTimePeriodic(gt_S3BuildingCollapseMedicsFallBack, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Building Collapse Ghost In Combat
//--------------------------------------------------------------------------------------------------
bool gt_S3BuildingCollapseGhostInCombat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(101), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "GhostDetectorCone") || (UnitGetType(UnitGroupLoopCurrent()) == "GhostAlternateDetectorCone"))) {
            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_08_FERALZERG_INSIDE, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1), c_unitCountAlive) > 0) && (libNCMI_gf_StealthAIGetStealthAIUnitState(UnitGroupLoopCurrent()) == libNCMI_ge_StealthAIUnitState_Idle)) {
                libNCMI_gf_StealthAISetStealthAIUnitState(UnitGroupLoopCurrent(), libNCMI_ge_StealthAIUnitState_Unavailable);
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("GhostDetetorConeExit", 0)), c_orderQueueReplace);
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("GhostAlternateDetetorConeExit", 0)), c_orderQueueReplace);
            }
            else if ((libNCMI_gf_StealthAIGetStealthAIUnitState(UnitGroupLoopCurrent()) == libNCMI_ge_StealthAIUnitState_Unavailable)) {
                libNCMI_gf_StealthAISetStealthAIUnitState(UnitGroupLoopCurrent(), libNCMI_ge_StealthAIUnitState_Idle);
            }
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3BuildingCollapseGhostInCombat_Init () {
    gt_S3BuildingCollapseGhostInCombat = TriggerCreate("gt_S3BuildingCollapseGhostInCombat_Func");
    TriggerEnable(gt_S3BuildingCollapseGhostInCombat, false);
    TriggerAddEventTimePeriodic(gt_S3BuildingCollapseGhostInCombat, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Units Run To Outside Shuttles Q
//--------------------------------------------------------------------------------------------------
bool gt_S3UnitsRunToOutsideShuttlesQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1207)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1208)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingUnit(null, UnitFromId(865)), c_orderQueueAddToEnd);
    Wait(2.6, c_timeGame);
    UnitIssueOrder(UnitFromId(1198), Order(AbilityCommand("Tarsonis_DoorNELowered", 0)), c_orderQueueReplace);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(UnitFromId(1203), "Mission_Nova03|Line00097", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3UnitsRunToOutsideShuttlesQ_Init () {
    gt_S3UnitsRunToOutsideShuttlesQ = TriggerCreate("gt_S3UnitsRunToOutsideShuttlesQ_Func");
    TriggerAddEventUnitRegion(gt_S3UnitsRunToOutsideShuttlesQ, UnitRefFromVariable("gv_zeratul"), RegionFromId(35), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Nova Enters Outside Shuttles Revealer
//--------------------------------------------------------------------------------------------------
bool gt_S3NovaEntersOutsideShuttlesRevealer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_herculesUnit01;
    unit lv_herculesUnit02;

    // Variable Initialization
    lv_herculesUnit01 = UnitFromId(865);
    lv_herculesUnit02 = UnitFromId(1223);

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S3OutsideShuttlesTransmissionQ, true, false);
    AIAttackWaveSetGatherPoint(gv_pLAYER_08_FERALZERG_INSIDE, RegionGetCenter(RegionFromId(85)));
    AIAttackWaveSetTargetRegion(gv_pLAYER_08_FERALZERG_INSIDE, RegionFromId(95), 0);
    AIAttackWaveUseGroup(gv_pLAYER_08_FERALZERG_INSIDE, UnitGroup(null, gv_pLAYER_08_FERALZERG_INSIDE, RegionFromId(85), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    AIAttackWaveSend(gv_pLAYER_08_FERALZERG_INSIDE, 0, false);
    UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(83), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingUnit(null, UnitFromId(865)), c_orderQueueReplace);
    Wait(6.0, c_timeGame);
    if ((UnitIsAlive(lv_herculesUnit01) == true)) {
        gf_S3LiftOffHerculesLaunchForward(lv_herculesUnit01, 45.0);
    }

    Wait(6.0, c_timeGame);
    if ((UnitIsAlive(lv_herculesUnit02) == true)) {
        gf_S3LiftOffHerculesLaunchForward(lv_herculesUnit02, 60.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3NovaEntersOutsideShuttlesRevealer_Init () {
    gt_S3NovaEntersOutsideShuttlesRevealer = TriggerCreate("gt_S3NovaEntersOutsideShuttlesRevealer_Func");
    TriggerAddEventUnitRegion(gt_S3NovaEntersOutsideShuttlesRevealer, UnitRefFromVariable("gv_zeratul"), RegionFromId(77), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Outside Shuttles Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S3OutsideShuttlesTransmissionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00098", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00099", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3OutsideShuttlesTransmissionQ_Init () {
    gt_S3OutsideShuttlesTransmissionQ = TriggerCreate("gt_S3OutsideShuttlesTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Nydus In The Atrium
//--------------------------------------------------------------------------------------------------
bool gt_S3NydusInTheAtrium_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_nydusKillGroup;
    int lv_lingCount;
    int lv_lingCycle;

    // Variable Initialization
    lv_nydusKillGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_S3BuildingCollapseGhostInCombat, false);
    TriggerEnable(gt_S3NydusInTheAtriumGhostInCombat, true);
    TriggerExecute(gt_S3NydusInTheAtriumTransmissionQ, true, false);
    UnitGroupLoopBegin(gv_s3_AtriumTerrans);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "Signal GuideShow");
    }
    UnitGroupLoopEnd();
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(102), libNCMI_ge_StealthAIDefendRegionState_Active);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 0, 1) == 1)) {
        libNCMI_gf_StealthAIMakeGhostLookBetween2Angles(UnitFromId(864), 45.0, 90.0, 4.0);
    }

    TriggerExecute(gt_S3NydusInTheAtriumShuttles, true, false);
    CameraShake(gv_pLAYER_01_USER, "Medium", "Earthquake", 0.0, 2.0, 3.0);
    ActorSend(ActorFromDoodad(DoodadFromId(1084)), "Signal On");
    SoundPlayForPlayer(SoundLink("Event_Nova03_NydusBirth", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    lv_nydusKillGroup = UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(76), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupRemove(lv_nydusKillGroup, UnitFromId(979));
    UnitGroupLoopBegin(UnitGroup("PathingBlocker4x4Diagonal", c_playerAny, RegionFromId(107), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(107), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_08_FERALZERG_INSIDE, RegionFromId(107), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeGame);
    UnitGroupLoopBegin(lv_nydusKillGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    Wait(3.0, c_timeGame);
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        if ((UnitGroupCount(gv_s3_AtriumZerg, c_unitCountAlive) <= 30)) {
            if (lv_lingCycle >= 2) {
                lv_lingCycle = 1;
            }
            else {
                lv_lingCycle = lv_lingCycle + 1;
            }
            if ((lv_lingCycle == 2)) {
                lv_lingCount = 9;
            }
            else {
                lv_lingCount = 11;
            }
            ActorSend(ActorFromDoodad(DoodadFromId(1084)), "Signal Work");
            libNtve_gf_CreateUnitsWithDefaultFacing(lv_lingCount, "Zergling", 0, gv_pLAYER_08_FERALZERG_INSIDE, PointFromId(1089));
            UnitGroupAddUnitGroup(gv_s3_AtriumZerg, UnitLastCreatedGroup());
            UnitGroupLoopBegin(UnitLastCreatedGroup());
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                gf_S3ZergWanderAfterDelay(UnitGroupLoopCurrent(), RandomFixed(2.0, 6.0));
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(59))), c_orderQueueReplace);
            }
            UnitGroupLoopEnd();
            Wait(4.0, c_timeGame);
        }
        else {
            Wait(1.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3NydusInTheAtrium_Init () {
    gt_S3NydusInTheAtrium = TriggerCreate("gt_S3NydusInTheAtrium_Func");
    TriggerAddEventUnitRegion(gt_S3NydusInTheAtrium, UnitRefFromVariable("gv_zeratul"), RegionFromId(26), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Nydus In The Atrium Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S3NydusInTheAtriumTransmissionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    Wait(1.5, c_timeGame);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 40.0, 0.3);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 0.3);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 20.0, 0.3);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 20.0, 0.3);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 20.0, 0.3);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 30.0, 0.3);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 0.3);
    SoundPlayForPlayer(SoundLink("Event_Nova03_DOM_NydusAlarm", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00051", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00123", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3NydusInTheAtriumTransmissionQ_Init () {
    gt_S3NydusInTheAtriumTransmissionQ = TriggerCreate("gt_S3NydusInTheAtriumTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Nydus In The Atrium Shuttles
//--------------------------------------------------------------------------------------------------
bool gt_S3NydusInTheAtriumShuttles_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_transportGroup03;
    unit lv_hercules03;
    unit lv_hercules04;

    // Variable Initialization
    lv_transportGroup03 = UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(61), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_hercules03 = UnitFromId(111);
    lv_hercules04 = UnitFromId(979);

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(2.0, c_timeGame);
    gf_S3LiftOffHerculesVertically(lv_hercules04);
    Wait(10.0, c_timeGame);
    UnitGroupIssueOrder(lv_transportGroup03, OrderTargetingUnit(null, lv_hercules03), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    gf_S3LiftOffHerculesVertically(lv_hercules03);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3NydusInTheAtriumShuttles_Init () {
    gt_S3NydusInTheAtriumShuttles = TriggerCreate("gt_S3NydusInTheAtriumShuttles_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Nydus In The Atrium Ghost In Combat
//--------------------------------------------------------------------------------------------------
bool gt_S3NydusInTheAtriumGhostInCombat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(102), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "GhostDetectorCone") || (UnitGetType(UnitGroupLoopCurrent()) == "GhostAlternateDetectorCone"))) {
            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_08_FERALZERG_INSIDE, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1), c_unitCountAlive) > 0) && (libNCMI_gf_StealthAIGetStealthAIUnitState(UnitGroupLoopCurrent()) == libNCMI_ge_StealthAIUnitState_Idle)) {
                libNCMI_gf_StealthAISetStealthAIUnitState(UnitGroupLoopCurrent(), libNCMI_ge_StealthAIUnitState_Unavailable);
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("GhostDetetorConeExit", 0)), c_orderQueueReplace);
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("GhostAlternateDetetorConeExit", 0)), c_orderQueueReplace);
            }
            else if ((libNCMI_gf_StealthAIGetStealthAIUnitState(UnitGroupLoopCurrent()) == libNCMI_ge_StealthAIUnitState_Unavailable)) {
                libNCMI_gf_StealthAISetStealthAIUnitState(UnitGroupLoopCurrent(), libNCMI_ge_StealthAIUnitState_Idle);
            }
        }

        if (((UnitGetType(UnitGroupLoopCurrent()) == "Marauder") || (UnitGetType(UnitGroupLoopCurrent()) == "Separatist"))) {
            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_08_FERALZERG_INSIDE, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1), c_unitCountAlive) > 0) && (libNCMI_gf_StealthAIGetStealthAIUnitState(UnitGroupLoopCurrent()) == libNCMI_ge_StealthAIUnitState_Idle)) {
                libNCMI_gf_StealthAISetStealthAIUnitState(UnitGroupLoopCurrent(), libNCMI_ge_StealthAIUnitState_Unavailable);
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("GhostDetetorConeExit", 0)), c_orderQueueReplace);
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("GhostAlternateDetetorConeExit", 0)), c_orderQueueReplace);
            }
            else if ((libNCMI_gf_StealthAIGetStealthAIUnitState(UnitGroupLoopCurrent()) == libNCMI_ge_StealthAIUnitState_Unavailable)) {
                libNCMI_gf_StealthAISetStealthAIUnitState(UnitGroupLoopCurrent(), libNCMI_ge_StealthAIUnitState_Idle);
            }
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3NydusInTheAtriumGhostInCombat_Init () {
    gt_S3NydusInTheAtriumGhostInCombat = TriggerCreate("gt_S3NydusInTheAtriumGhostInCombat_Func");
    TriggerEnable(gt_S3NydusInTheAtriumGhostInCombat, false);
    TriggerAddEventTimePeriodic(gt_S3NydusInTheAtriumGhostInCombat, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Nova Enters Zerg Run Down Hallway
//--------------------------------------------------------------------------------------------------
bool gt_S3NovaEntersZergRunDownHallway_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_08_FERALZERG_INSIDE, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(861)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup(null, gv_pLAYER_08_FERALZERG_INSIDE, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2307)), c_orderQueueAddToEnd);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_08_FERALZERG_INSIDE, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        gf_S3ZergWanderAfterDelay(UnitGroupLoopCurrent(), 20.0);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3NovaEntersZergRunDownHallway_Init () {
    gt_S3NovaEntersZergRunDownHallway = TriggerCreate("gt_S3NovaEntersZergRunDownHallway_Func");
    TriggerAddEventUnitRegion(gt_S3NovaEntersZergRunDownHallway, UnitRefFromVariable("gv_zeratul"), RegionFromId(46), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Zerged Up Room
//--------------------------------------------------------------------------------------------------
bool gt_S3ZergedUpRoom_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_08_FERALZERG_INSIDE, RegionFromId(60), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "Overseer")) {
            gf_S3ZergWanderAfterDelay(UnitGroupLoopCurrent(), RandomFixed(2.0, 4.0));
        }

    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_S3ZergedUpRoomTransmissionQ, true, false);
    Wait(2.0, c_timeAI);
    gf_S3OverseerPatrol2Points(UnitFromId(793), PointFromId(735), PointFromId(734), libLotv_gf_DifficultyValueFixed2(9.0, 9.0, 5.0, 2.0));
    Wait(2.0, c_timeAI);
    gf_S3OverseerPatrol2Points(UnitFromId(801), PointFromId(743), PointFromId(767), libLotv_gf_DifficultyValueFixed2(9.0, 9.0, 5.0, 2.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3ZergedUpRoom_Init () {
    gt_S3ZergedUpRoom = TriggerCreate("gt_S3ZergedUpRoom_Func");
    TriggerAddEventUnitRegion(gt_S3ZergedUpRoom, UnitRefFromVariable("gv_zeratul"), RegionFromId(60), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Zerged Up Room Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S3ZergedUpRoomTransmissionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00101", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00102", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3ZergedUpRoomTransmissionQ_Init () {
    gt_S3ZergedUpRoomTransmissionQ = TriggerCreate("gt_S3ZergedUpRoomTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Nova Enters Final Room Q
//--------------------------------------------------------------------------------------------------
bool gt_S3NovaEntersFinalRoomQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_CreateMissionAutosavePoint(StringExternal("Param/Value/C798C786"));
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(97), libNCMI_ge_StealthAIDefendRegionState_Active);
    libNCMI_gf_StealthAISetStealthAIDefendRegionState(RegionFromId(44), libNCMI_ge_StealthAIDefendRegionState_Active);
    PlayerModifyPropertyInt(gv_pLAYER_06_DEFENDERSOFMAN, c_playerPropMinerals, c_playerPropOperAdd, 10000);
    PlayerModifyPropertyInt(gv_pLAYER_06_DEFENDERSOFMAN, c_playerPropVespene, c_playerPropOperAdd, 10000);
    if ((libLotv_gf_DifficultyValueInt2(0, 0, 1, 1) == 1)) {
        libNCMI_gf_StealthAIMakeGhostLookBetween2Angles(UnitFromId(1142), 160.0, 230.0, 5.5);
        libNCMI_gf_StealthAIMakeGhostLookBetween2Angles(UnitFromId(1145), 220.0, 290.0, 4.5);
    }

    TriggerEnable(gt_S3NydusInTheAtriumGhostInCombat, false);
    TriggerEnable(gt_S3FinalRoomGhostsAndTroopersInCombat, true);
    TriggerExecute(gt_S3FinalRoomZergTrickle, true, false);
    UnitCargoCreate(UnitFromId(992), "Separatist", 4);
    UnitCargoCreate(UnitFromId(81), "Separatist", 4);
    UnitIssueOrder(UnitFromId(72), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitGroupLoopBegin(gv_s3_FinalRoomTerrans);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_s3_FinalRoomZerg);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    }
    UnitGroupLoopEnd();
    TriggerQueueEnter();
    if ((UnitIsAlive(UnitFromId(72)) == true)) {
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(UnitFromId(72), "Mission_Nova03|Line00118", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    if ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false)) {
        libNCMI_gf_PingMinimapCampaign(PlayerGroupAll(), PointFromId(75), 6.0, Color(0.00, 100.00, 0.00));
        Wait(2.0, c_timeGame);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
        libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00103", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00104", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
        libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    }

    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3NovaEntersFinalRoomQ_Init () {
    gt_S3NovaEntersFinalRoomQ = TriggerCreate("gt_S3NovaEntersFinalRoomQ_Func");
    TriggerAddEventUnitRegion(gt_S3NovaEntersFinalRoomQ, UnitRefFromVariable("gv_zeratul"), RegionFromId(43), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Final Room Zerg Trickle
//--------------------------------------------------------------------------------------------------
bool gt_S3FinalRoomZergTrickle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_zerglingGroup;
    int lv_lingCount;
    int lv_lingCycle;

    // Variable Initialization
    lv_zerglingGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(4.0, c_timeGame);
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && ((UnitIsAlive(UnitFromId(887)) == true) || (UnitIsAlive(UnitFromId(881)) == true))) {
        if ((UnitGroupCount(gv_s3_FinalRoomZerg, c_unitCountAlive) < 48)) {
            if (lv_lingCycle >= 2) {
                lv_lingCycle = 1;
            }
            else {
                lv_lingCycle = lv_lingCycle + 1;
            }
            if ((lv_lingCycle == 2)) {
                lv_lingCount = 5;
            }
            else {
                lv_lingCount = 6;
            }
            gf_S3UnloadUnitsFromNydusWorm(lv_lingCount, "Zergling", UnitFromId(887), RegionRandomPoint(RegionFromId(116)), gv_pLAYER_08_FERALZERG_INSIDE);
            Wait(0.25, c_timeAI);
            gf_S3UnloadUnitsFromNydusWorm(lv_lingCount, "Zergling", UnitFromId(881), RegionRandomPoint(RegionFromId(116)), gv_pLAYER_08_FERALZERG_INSIDE);
            Wait(6.0, c_timeGame);
            gf_S3UnloadUnitsFromNydusWorm(1, "Roach", UnitFromId(887), RegionRandomPoint(RegionFromId(116)), gv_pLAYER_08_FERALZERG_INSIDE);
            Wait(0.25, c_timeAI);
            gf_S3UnloadUnitsFromNydusWorm(1, "Hydralisk", UnitFromId(887), RegionRandomPoint(RegionFromId(116)), gv_pLAYER_08_FERALZERG_INSIDE);
            Wait(0.25, c_timeAI);
            gf_S3UnloadUnitsFromNydusWorm(1, "Roach", UnitFromId(881), RegionRandomPoint(RegionFromId(116)), gv_pLAYER_08_FERALZERG_INSIDE);
            Wait(0.25, c_timeAI);
            gf_S3UnloadUnitsFromNydusWorm(1, "Hydralisk", UnitFromId(881), RegionRandomPoint(RegionFromId(116)), gv_pLAYER_08_FERALZERG_INSIDE);
            Wait(2.0, c_timeGame);
        }
        else {
            Wait(1.0, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3FinalRoomZergTrickle_Init () {
    gt_S3FinalRoomZergTrickle = TriggerCreate("gt_S3FinalRoomZergTrickle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Final Room Ghosts And Troopers In Combat
//--------------------------------------------------------------------------------------------------
bool gt_S3FinalRoomGhostsAndTroopersInCombat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(97), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "GhostDetectorCone") || (UnitGetType(UnitGroupLoopCurrent()) == "GhostAlternateDetectorCone"))) {
            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_08_FERALZERG_INSIDE, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1), c_unitCountAlive) > 0) && (libNCMI_gf_StealthAIGetStealthAIUnitState(UnitGroupLoopCurrent()) == libNCMI_ge_StealthAIUnitState_Idle)) {
                libNCMI_gf_StealthAISetStealthAIUnitState(UnitGroupLoopCurrent(), libNCMI_ge_StealthAIUnitState_Unavailable);
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("GhostDetetorConeExit", 0)), c_orderQueueReplace);
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("GhostAlternateDetetorConeExit", 0)), c_orderQueueReplace);
            }
            else if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_08_FERALZERG_INSIDE, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1), c_unitCountAlive) == 0) && (libNCMI_gf_StealthAIGetStealthAIUnitState(UnitGroupLoopCurrent()) == libNCMI_ge_StealthAIUnitState_Unavailable)) {
                libNCMI_gf_StealthAISetStealthAIUnitState(UnitGroupLoopCurrent(), libNCMI_ge_StealthAIUnitState_Idle);
            }
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "Separatist")) {
            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_08_FERALZERG_INSIDE, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1), c_unitCountAlive) > 0) && (libNCMI_gf_StealthAIGetStealthAIUnitState(UnitGroupLoopCurrent()) == libNCMI_ge_StealthAIUnitState_Idle)) {
                libNCMI_gf_StealthAISetStealthAIUnitState(UnitGroupLoopCurrent(), libNCMI_ge_StealthAIUnitState_Unavailable);
            }
            else if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_08_FERALZERG_INSIDE, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1), c_unitCountAlive) == 0) && (libNCMI_gf_StealthAIGetStealthAIUnitState(UnitGroupLoopCurrent()) == libNCMI_ge_StealthAIUnitState_Unavailable)) {
                libNCMI_gf_StealthAISetStealthAIUnitState(UnitGroupLoopCurrent(), libNCMI_ge_StealthAIUnitState_Idle);
            }
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, RegionFromId(44), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "GhostDetectorCone") || (UnitGetType(UnitGroupLoopCurrent()) == "GhostAlternateDetectorCone"))) {
            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_08_FERALZERG_INSIDE, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1), c_unitCountAlive) > 0) && (libNCMI_gf_StealthAIGetStealthAIUnitState(UnitGroupLoopCurrent()) == libNCMI_ge_StealthAIUnitState_Idle)) {
                libNCMI_gf_StealthAISetStealthAIUnitState(UnitGroupLoopCurrent(), libNCMI_ge_StealthAIUnitState_Unavailable);
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("GhostDetetorConeExit", 0)), c_orderQueueReplace);
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("GhostAlternateDetetorConeExit", 0)), c_orderQueueReplace);
            }
            else if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_08_FERALZERG_INSIDE, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1), c_unitCountAlive) == 0) && (libNCMI_gf_StealthAIGetStealthAIUnitState(UnitGroupLoopCurrent()) == libNCMI_ge_StealthAIUnitState_Unavailable)) {
                libNCMI_gf_StealthAISetStealthAIUnitState(UnitGroupLoopCurrent(), libNCMI_ge_StealthAIUnitState_Idle);
            }
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "Separatist")) {
            if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_08_FERALZERG_INSIDE, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1), c_unitCountAlive) > 0) && (libNCMI_gf_StealthAIGetStealthAIUnitState(UnitGroupLoopCurrent()) == libNCMI_ge_StealthAIUnitState_Idle)) {
                libNCMI_gf_StealthAISetStealthAIUnitState(UnitGroupLoopCurrent(), libNCMI_ge_StealthAIUnitState_Unavailable);
            }
            else if ((UnitGroupCount(UnitGroup(null, gv_pLAYER_08_FERALZERG_INSIDE, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1), c_unitCountAlive) == 0) && (libNCMI_gf_StealthAIGetStealthAIUnitState(UnitGroupLoopCurrent()) == libNCMI_ge_StealthAIUnitState_Unavailable)) {
                libNCMI_gf_StealthAISetStealthAIUnitState(UnitGroupLoopCurrent(), libNCMI_ge_StealthAIUnitState_Idle);
            }
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3FinalRoomGhostsAndTroopersInCombat_Init () {
    gt_S3FinalRoomGhostsAndTroopersInCombat = TriggerCreate("gt_S3FinalRoomGhostsAndTroopersInCombat_Func");
    TriggerEnable(gt_S3FinalRoomGhostsAndTroopersInCombat, false);
    TriggerAddEventTimePeriodic(gt_S3FinalRoomGhostsAndTroopersInCombat, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S3 - Final Room Thor Transmission Q
//--------------------------------------------------------------------------------------------------
bool gt_S3FinalRoomThorTransmissionQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(UnitFromId(72), "Mission_Nova03|Line00118", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S3FinalRoomThorTransmissionQ_Init () {
    gt_S3FinalRoomThorTransmissionQ = TriggerCreate("gt_S3FinalRoomThorTransmissionQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, gv_pLAYER_01_USER, null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveFillGarrisonsFailed, true, false);
    libNCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libNCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/D66F62C5"), libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatBaseDead_Init () {
    gt_DefeatBaseDead = TriggerCreate("gt_DefeatBaseDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatBaseDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Nova Dead
//--------------------------------------------------------------------------------------------------
bool gt_DefeatNovaDead_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_zeratul) == false))) {
            return false;
        }

        if (!((gv_currentStage > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveNovaMustSurviveFailed, true, false);
    if ((ObjectiveVisible(gv_objectiveDestroyZergBase2, gv_pLAYER_01_USER) == true)) {
        TriggerExecute(gt_ObjectiveReachCommunicationsHubFailed, true, false);
    }

    if ((ObjectiveVisible(gv_objectiveDestroyZergBase4, gv_pLAYER_01_USER) == true)) {
        TriggerExecute(gt_ObjectiveReachCommandRoomFailed, true, false);
    }

    libNCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libNCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/052EFB6E"), libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatNovaDead_Init () {
    gt_DefeatNovaDead = TriggerCreate("gt_DefeatNovaDead_Func");
    TriggerAddEventTimePeriodic(gt_DefeatNovaDead, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Catch Station Officer Failed
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCatchStationOfficerFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerQueuePause(true);
    TriggerQueueClear(c_triggerQueueRemove);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ObjectiveReachCommandRoomFailed, true, false);
    libNCMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libNCMI_ge_CampaignMessageType_MissionFailed, StringExternal("Param/Value/326BD829"), libNCMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCatchStationOfficerFailed_Init () {
    gt_DefeatCatchStationOfficerFailed = TriggerCreate("gt_DefeatCatchStationOfficerFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Catch Station Officer Completed
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCatchStationOfficerCompleted_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 3))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(gv_zeratul, RegionFromId(33)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_VictorySequence, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCatchStationOfficerCompleted_Init () {
    gt_VictoryCatchStationOfficerCompleted = TriggerCreate("gt_VictoryCatchStationOfficerCompleted_Func");
    TriggerAddEventTimePeriodic(gt_VictoryCatchStationOfficerCompleted, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Sequence
//--------------------------------------------------------------------------------------------------
bool gt_VictorySequence_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    libNtve_gf_MakeUnitInvulnerable(gv_zeratul, true);
    UnitKill(gv_s3_BeaconEnd);
    TriggerExecute(gt_ObjectiveReachCommandRoomComplete, true, false);
    TriggerExecute(gt_ObjectiveNovaMustSurviveComplete, true, false);
    Wait(2.0, c_timeReal);
    libNCMI_gf_RunMissionVictorySequence(gt_VictoryQ);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySequence_Init () {
    gt_VictorySequence = TriggerCreate("gt_VictorySequence_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory
//--------------------------------------------------------------------------------------------------
bool gt_Victory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ChangeUnitDamage(gv_zeratul, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    if ((ObjectiveGetState(gv_objectiveDestroyZergBase3) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveDestroyZergBase5) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveDestroyZergBase4) == c_objectiveStateCompleted) && (ObjectiveGetState(gv_objectiveDestroyZergBase2) == c_objectiveStateCompleted)) {
        libComC_gf_CampaignAwardAchievement("Nova03_1", gv_pLAYER_01_USER);
    }

    if ((gv_achievement_NovaHasKilledDOMUnit == false) && (libLotv_gf_DifficultyValueInt2(0, 1, 1, 1) == 1)) {
        libComC_gf_CampaignAwardAchievement("Nova03_3", gv_pLAYER_01_USER);
    }

    VictoryPanelAddTrackedStatistic("UnitsTotalCount");
    VictoryPanelAddTrackedStatistic("UnitsKilledCount");
    VictoryPanelAddTrackedStatistic("UnitsLostCount");
    VictoryPanelAddTrackedStatistic("StructuresKilledCount");
    VictoryPanelAddTrackedStatistic("StructuresLostCount");
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/BB612C74"), IntToText(gv_victoryStat_SupplyReached));
    VictoryPanelAddCustomStatisticLine(StringExternal("Param/Value/05D115F6"), IntToText(gv_victoryStat_DOMKills));
    libNCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Victory_Init () {
    gt_Victory = TriggerCreate("gt_Victory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat
//--------------------------------------------------------------------------------------------------
bool gt_Defeat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_EndCampaignMission(gv_pLAYER_01_USER, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Defeat_Init () {
    gt_Defeat = TriggerCreate("gt_Defeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    libNCMI_gf_RunMissionVictorySequence(gt_Victory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCheat_Init () {
    gt_VictoryCheat = TriggerCreate("gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(gt_VictoryCheat, gv_pLAYER_01_USER, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Defeat);
    TriggerExecute(gt_Defeat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefeatCheat_Init () {
    gt_DefeatCheat = TriggerCreate("gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(gt_DefeatCheat, gv_pLAYER_01_USER, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Stat - DOM Kills
//--------------------------------------------------------------------------------------------------
bool gt_VictoryStatDOMKills_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((EventPlayer() == gv_pLAYER_06_DEFENDERSOFMAN))) {
            return false;
        }

        if (!((libNtve_gf_KillingPlayer() == gv_pLAYER_01_USER))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_victoryStat_DOMKills += 1;
    gv_achievement_NovaHasKilledDOMUnit = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryStatDOMKills_Init () {
    gt_VictoryStatDOMKills = TriggerCreate("gt_VictoryStatDOMKills_Func");
    TriggerEnable(gt_VictoryStatDOMKills, false);
    TriggerAddEventUnitDied(gt_VictoryStatDOMKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Stat - Supply Tracker
//--------------------------------------------------------------------------------------------------
bool gt_VictoryStatSupplyTracker_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!((gv_victoryStat_SupplyReached < PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesUsed)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_victoryStat_SupplyReached = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropSuppliesUsed);
    if ((gv_victoryStat_SupplyReached > 35) && (gv_achievement_PlayerSupplyExceeded35 == false)) {
        gv_achievement_PlayerSupplyExceeded35 = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryStatSupplyTracker_Init () {
    gt_VictoryStatSupplyTracker = TriggerCreate("gt_VictoryStatSupplyTracker_Func");
    TriggerAddEventPlayerPropChange(gt_VictoryStatSupplyTracker, gv_pLAYER_01_USER, c_playerPropSuppliesUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Achievement - Bunker Rush
//--------------------------------------------------------------------------------------------------
bool gt_AchievementBunkerRush_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((GameGetMissionTime() <= (10.0 * 60.0)))) {
            return false;
        }

        if (!((gv_objectiveFillGarrisonsCount >= 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libComC_gf_CampaignAwardAchievement("Nova03_2", gv_pLAYER_01_USER);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementBunkerRush_Init () {
    gt_AchievementBunkerRush = TriggerCreate("gt_AchievementBunkerRush_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tip Ready Q
//--------------------------------------------------------------------------------------------------
bool gt_TipReadyQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNCMI_gf_DisplayMissionTip();
    Wait(libNCMI_gv_campaignHintDelay, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipReadyQ_Init () {
    gt_TipReadyQ = TriggerCreate("gt_TipReadyQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start AI
//--------------------------------------------------------------------------------------------------
bool gt_StartAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    cai_startall();
    libNCMI_gf_EnableNovaCampaignAIBehaviorForAllPlayers();
    cai_runall();
    AINearestTownBullyRebuild(gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, true);
    AINearestTownBullyRebuild(gv_pLAYER_04_FERALZERG_RIGHTBULLIES, true);
    AINearestTownBullyRebuild(gv_pLAYER_05_FERALZERG_LEFTBULLIES, true);
    AISetDifficulty(gv_pLAYER_06_DEFENDERSOFMAN, c_diffAutoLoadBunkers, true);
    AISetDifficulty(gv_pLAYER_06_DEFENDERSOFMAN, c_diffRepairDamage, true);
    AISetDifficulty(gv_pLAYER_06_DEFENDERSOFMAN, c_diffEarlyGameRepair, true);
    libNtve_gf_DeclareNextTown(gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, PointFromId(470));
    libNtve_gf_DeclareNextTown(gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, PointFromId(1878));
    libNtve_gf_DeclareNextTown(gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, PointFromId(1879));
    libNtve_gf_DeclareNextTown(gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, PointFromId(1898));
    libNtve_gf_DeclareNextTown(gv_pLAYER_04_FERALZERG_RIGHTBULLIES, PointFromId(159));
    libNtve_gf_DeclareNextTown(gv_pLAYER_04_FERALZERG_RIGHTBULLIES, PointFromId(1866));
    libNtve_gf_DeclareNextTown(gv_pLAYER_04_FERALZERG_RIGHTBULLIES, PointFromId(1867));
    libNtve_gf_DeclareNextTown(gv_pLAYER_05_FERALZERG_LEFTBULLIES, PointFromId(581));
    if ((libLotv_gf_DifficultyValueInt2(1, 1, 0, 0) == 1)) {
        TriggerExecute(gt_AIUpgradesCasualNormal, true, false);
    }
    else {
        TriggerExecute(gt_AIUpgradesHardBrutal, true, false);
    }
    TriggerExecute(gt_S1SetUpWaveSpawnRegionBullies, true, false);
    TriggerExecute(gt_S1TurnOnLaneBullyBuilding01, true, false);
    TriggerExecute(gt_S1TurnOnLaneBullyBuilding02, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartAI_Init () {
    gt_StartAI = TriggerCreate("gt_StartAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades - Casual/Normal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesCasualNormal_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(720.0, c_timeAI);
    if ((gv_currentStage == 1)) {
        PlayerGroupLoopBegin(gv_enemyZergPlayersStage01);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel1", 1);
        }
        PlayerGroupLoopEnd();
    }
    else {
        return true;
    }
    Wait(360.0, c_timeAI);
    if ((gv_currentStage == 1)) {
        PlayerGroupLoopBegin(gv_enemyZergPlayersStage01);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel1", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel1", 1);
        }
        PlayerGroupLoopEnd();
    }
    else {
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesCasualNormal_Init () {
    gt_AIUpgradesCasualNormal = TriggerCreate("gt_AIUpgradesCasualNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Upgrades - Hard/Brutal
//--------------------------------------------------------------------------------------------------
bool gt_AIUpgradesHardBrutal_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TechTreeUpgradeAddLevel(gv_pLAYER_06_DEFENDERSOFMAN, "TerranInfantryWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_06_DEFENDERSOFMAN, "TerranVehicleAndShipWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_08_FERALZERG_INSIDE, "ZergFlyerWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_08_FERALZERG_INSIDE, "ZergMeleeWeaponsLevel1", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_08_FERALZERG_INSIDE, "ZergMissileWeaponsLevel1", 1);
    PlayerGroupLoopBegin(gv_enemyZergPlayersStage01);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel1", 1);
        TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel1", 1);
    }
    PlayerGroupLoopEnd();
    Wait(480.0, c_timeAI);
    if ((gv_currentStage == 1)) {
        PlayerGroupLoopBegin(gv_enemyZergPlayersStage01);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerWeaponsLevel2", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMeleeWeaponsLevel2", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergMissileWeaponsLevel2", 1);
        }
        PlayerGroupLoopEnd();
    }
    else {
        return true;
    }
    Wait(480.0, c_timeAI);
    if ((gv_currentStage == 1)) {
        PlayerGroupLoopBegin(gv_enemyZergPlayersStage01);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergFlyerArmorsLevel2", 1);
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "ZergGroundArmorsLevel2", 1);
        }
        PlayerGroupLoopEnd();
    }
    else {
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIUpgradesHardBrutal_Init () {
    gt_AIUpgradesHardBrutal = TriggerCreate("gt_AIUpgradesHardBrutal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Kill Eggs And Larvae
//--------------------------------------------------------------------------------------------------
bool gt_S1KillEggsAndLarvae_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Hatchery") || (UnitGetType(EventUnit()) == "Lair") || (UnitGetType(EventUnit()) == "Hive")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Larva", UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Egg", UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1KillEggsAndLarvae_Init () {
    gt_S1KillEggsAndLarvae = TriggerCreate("gt_S1KillEggsAndLarvae_Func");
    TriggerAddEventUnitDied(gt_S1KillEggsAndLarvae, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Set Up Wave Spawn Region Bullies
//--------------------------------------------------------------------------------------------------
bool gt_S1SetUpWaveSpawnRegionBullies_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "CreepTumor") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumorBurrowed") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumorQueen") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumorUsed") && (UnitGetType(UnitGroupLoopCurrent()) != "Overseer")) {
            gf_S1TrackWaveSpawnBullyUnit(UnitGroupLoopCurrent(), RegionFromId(14), gv_pLAYER_03_FERALZERG_MIDDLEBULLIES);
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_04_FERALZERG_RIGHTBULLIES, RegionFromId(10), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "CreepTumor") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumorBurrowed") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumorQueen") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumorUsed") && (UnitGetType(UnitGroupLoopCurrent()) != "Overseer")) {
            gf_S1TrackWaveSpawnBullyUnit(UnitGroupLoopCurrent(), RegionFromId(15), gv_pLAYER_04_FERALZERG_RIGHTBULLIES);
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_05_FERALZERG_LEFTBULLIES, RegionFromId(12), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "CreepTumor") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumorBurrowed") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumorQueen") && (UnitGetType(UnitGroupLoopCurrent()) != "CreepTumorUsed") && (UnitGetType(UnitGroupLoopCurrent()) != "Overseer")) {
            gf_S1TrackWaveSpawnBullyUnit(UnitGroupLoopCurrent(), RegionFromId(17), gv_pLAYER_05_FERALZERG_LEFTBULLIES);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1SetUpWaveSpawnRegionBullies_Init () {
    gt_S1SetUpWaveSpawnRegionBullies = TriggerCreate("gt_S1SetUpWaveSpawnRegionBullies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Turn On Lane Bully Building 01
//--------------------------------------------------------------------------------------------------
bool gt_S1TurnOnLaneBullyBuilding01_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait((8.0 * 60.0), c_timeGame);
    if ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_currentStage == 1)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionFromId(78), true);
        AIToggleBulliesInRegion(gv_pLAYER_04_FERALZERG_RIGHTBULLIES, RegionFromId(78), true);
        AIToggleBulliesInRegion(gv_pLAYER_05_FERALZERG_LEFTBULLIES, RegionFromId(78), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1TurnOnLaneBullyBuilding01_Init () {
    gt_S1TurnOnLaneBullyBuilding01 = TriggerCreate("gt_S1TurnOnLaneBullyBuilding01_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Turn On Lane Bully Building 02
//--------------------------------------------------------------------------------------------------
bool gt_S1TurnOnLaneBullyBuilding02_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait((14.0 * 60.0), c_timeGame);
    if ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_currentStage == 1)) {
        AIToggleBulliesInRegion(gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionFromId(79), true);
        AIToggleBulliesInRegion(gv_pLAYER_04_FERALZERG_RIGHTBULLIES, RegionFromId(79), true);
        AIToggleBulliesInRegion(gv_pLAYER_05_FERALZERG_LEFTBULLIES, RegionFromId(79), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1TurnOnLaneBullyBuilding02_Init () {
    gt_S1TurnOnLaneBullyBuilding02 = TriggerCreate("gt_S1TurnOnLaneBullyBuilding02_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Apply Player Upgrades To Garrison Player
//--------------------------------------------------------------------------------------------------
bool gt_S1ApplyPlayerUpgradesToGarrisonPlayer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(gv_pLAYER_01_USER, "TerranInfantryArmorsLevel1", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(gv_pLAYER_02_NOVASUPPORT, "TerranInfantryArmorsLevel1", c_techCountCompleteOnly) == 0)) {
        TechTreeUpgradeAddLevel(gv_pLAYER_02_NOVASUPPORT, "TerranInfantryArmorsLevel1", 1);
    }

    if ((TechTreeUpgradeCount(gv_pLAYER_01_USER, "TerranInfantryWeaponsLevel1", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(gv_pLAYER_02_NOVASUPPORT, "TerranInfantryWeaponsLevel1", c_techCountCompleteOnly) == 0)) {
        TechTreeUpgradeAddLevel(gv_pLAYER_02_NOVASUPPORT, "TerranInfantryWeaponsLevel1", 1);
    }

    if ((TechTreeUpgradeCount(gv_pLAYER_02_NOVASUPPORT, "TerranInfantryArmorsLevel1", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(gv_pLAYER_02_NOVASUPPORT, "TerranInfantryWeaponsLevel1", c_techCountCompleteOnly) == 1)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1ApplyPlayerUpgradesToGarrisonPlayer_Init () {
    gt_S1ApplyPlayerUpgradesToGarrisonPlayer = TriggerCreate("gt_S1ApplyPlayerUpgradesToGarrisonPlayer_Func");
    TriggerAddEventTimePeriodic(gt_S1ApplyPlayerUpgradesToGarrisonPlayer, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Attack Wave Overseer Returns Home
//--------------------------------------------------------------------------------------------------
bool gt_S1AttackWaveOverseerReturnsHome_Func (bool testConds, bool runActions) {
    int autoAA610672_val;

    // Variable Declarations
    unitgroup lv_overseerGroup;
    unitgroup lv_waveGroup;

    // Variable Initialization
    lv_overseerGroup = UnitGroupEmpty();
    lv_waveGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(lv_waveGroup, AIWaveGetUnits(EventPlayerWave()));
    UnitGroupLoopBegin(lv_waveGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Overseer")) {
            UnitGroupAdd(lv_overseerGroup, UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    if ((UnitGroupCount(lv_overseerGroup, c_unitCountAlive) > 0)) {
        while (!(((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (gv_currentStage != 1) || (UnitGroupCount(lv_overseerGroup, c_unitCountAlive) >= UnitGroupCount(lv_waveGroup, c_unitCountAlive))))) {
            Wait(1.0, c_timeGame);
        }
        if (((libNCMI_gf_GameIsOver() == true) || (libNCMI_gf_PlayerInCinematicModeCampaign() == true) || (gv_currentStage != 1) || (UnitGroupCount(lv_overseerGroup, c_unitCountAlive) == 0))) {
            return true;
        }
        else {
            UnitGroupLoopBegin(lv_overseerGroup);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                autoAA610672_val = UnitGetOwner(UnitGroupLoopCurrent());
                if (autoAA610672_val == gv_pLAYER_09_FERALZERG_MIDDLEWAVES) {
                    gf_S1MoveOverseerToMapEdgeAndDespawn(UnitGroupLoopCurrent(), PointFromId(481));
                }
                else if (autoAA610672_val == gv_pLAYER_10_FERALZERG_RIGHTWAVES) {
                    gf_S1MoveOverseerToMapEdgeAndDespawn(UnitGroupLoopCurrent(), PointFromId(480));
                }
                else if (autoAA610672_val == gv_pLAYER_11_FERALZERG_LEFTWAVES) {
                    gf_S1MoveOverseerToMapEdgeAndDespawn(UnitGroupLoopCurrent(), PointFromId(404));
                }
                else {
                }
            }
            UnitGroupLoopEnd();
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1AttackWaveOverseerReturnsHome_Init () {
    gt_S1AttackWaveOverseerReturnsHome = TriggerCreate("gt_S1AttackWaveOverseerReturnsHome_Func");
    TriggerAddEventPlayerAIWave(gt_S1AttackWaveOverseerReturnsHome, gv_pLAYER_09_FERALZERG_MIDDLEWAVES);
    TriggerAddEventPlayerAIWave(gt_S1AttackWaveOverseerReturnsHome, gv_pLAYER_10_FERALZERG_RIGHTWAVES);
    TriggerAddEventPlayerAIWave(gt_S1AttackWaveOverseerReturnsHome, gv_pLAYER_11_FERALZERG_LEFTWAVES);
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - First Zerg Attack Middle Q
//--------------------------------------------------------------------------------------------------
bool gt_S1FirstZergAttackMiddleQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S1ZergFirehoseGarrisonP04, true, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", PointFromId(11), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/D230CE18"));
    Wait(0.125, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(1736), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, PointGetFacing(PointFromId(1736)));
    PingSetScale(PingLastCreated(), 0.65);
    Wait(0.125, c_timeGame);
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(1731), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, PointGetFacing(PointFromId(1731)));
    PingSetScale(PingLastCreated(), 0.65);
    Wait(0.125, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(1154), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, PointGetFacing(PointFromId(1154)));
    PingSetScale(PingLastCreated(), 0.65);
    Wait(0.125, c_timeGame);
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(1155), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, PointGetFacing(PointFromId(1155)));
    PingSetScale(PingLastCreated(), 0.65);
    Wait(0.125, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(1730), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, PointGetFacing(PointFromId(1730)));
    PingSetScale(PingLastCreated(), 0.65);
    Wait(0.125, c_timeGame);
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(1737), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, PointGetFacing(PointFromId(1737)));
    PingSetScale(PingLastCreated(), 0.65);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00020", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00021", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova03_Main_A", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1FirstZergAttackMiddleQ_Init () {
    gt_S1FirstZergAttackMiddleQ = TriggerCreate("gt_S1FirstZergAttackMiddleQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - First Zerg Attack Right Q
//--------------------------------------------------------------------------------------------------
bool gt_S1FirstZergAttackRightQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S1ZergFirehoseGarrisonP05, true, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", PointFromId(16), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/A3A12973"));
    Wait(0.125, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(1738), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, PointGetFacing(PointFromId(1738)));
    PingSetScale(PingLastCreated(), 0.65);
    Wait(0.125, c_timeGame);
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(1739), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, PointGetFacing(PointFromId(1739)));
    PingSetScale(PingLastCreated(), 0.65);
    Wait(0.125, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(1740), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, PointGetFacing(PointFromId(1740)));
    PingSetScale(PingLastCreated(), 0.65);
    Wait(0.125, c_timeGame);
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(1954), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, PointGetFacing(PointFromId(1954)));
    PingSetScale(PingLastCreated(), 0.65);
    Wait(0.125, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(1955), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, PointGetFacing(PointFromId(1955)));
    PingSetScale(PingLastCreated(), 0.65);
    Wait(0.125, c_timeGame);
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(1956), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, PointGetFacing(PointFromId(1956)));
    PingSetScale(PingLastCreated(), 0.65);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00022", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00023", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1FirstZergAttackRightQ_Init () {
    gt_S1FirstZergAttackRightQ = TriggerCreate("gt_S1FirstZergAttackRightQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - First Zerg Attack Left Q
//--------------------------------------------------------------------------------------------------
bool gt_S1FirstZergAttackLeftQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_S1ZergFirehoseGarrisonP03, true, false);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", PointFromId(119), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/21208026"));
    Wait(0.125, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(1957), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, PointGetFacing(PointFromId(1957)));
    PingSetScale(PingLastCreated(), 0.65);
    Wait(0.125, c_timeGame);
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(1958), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, PointGetFacing(PointFromId(1958)));
    PingSetScale(PingLastCreated(), 0.65);
    Wait(0.125, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(1979), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, PointGetFacing(PointFromId(1979)));
    PingSetScale(PingLastCreated(), 0.65);
    Wait(0.125, c_timeGame);
    SoundPlayForPlayer(SoundLink("Ping", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(1980), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, PointGetFacing(PointFromId(1980)));
    PingSetScale(PingLastCreated(), 0.65);
    Wait(0.125, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(1981), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, PointGetFacing(PointFromId(1981)));
    PingSetScale(PingLastCreated(), 0.65);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00024", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00108", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00026", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1FirstZergAttackLeftQ_Init () {
    gt_S1FirstZergAttackLeftQ = TriggerCreate("gt_S1FirstZergAttackLeftQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - First Zerg Attack Flyers Q
//--------------------------------------------------------------------------------------------------
bool gt_S1FirstZergAttackFlyersQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIAlertPoint("Trigger", gv_pLAYER_01_USER, StringExternal("Param/Value/56DE48DF"), null, PointFromId(1982));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", PointFromId(16), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/83B2C689"));
    Wait(2.0, c_timeGame);
    TriggerQueueEnter();
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Speech);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00109", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1FirstZergAttackFlyersQ_Init () {
    gt_S1FirstZergAttackFlyersQ = TriggerCreate("gt_S1FirstZergAttackFlyersQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Zerg Firehose Garrison P03
//--------------------------------------------------------------------------------------------------
bool gt_S1ZergFirehoseGarrisonP03_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_currentStage == 1) && ((gv_s1_GarrisonSpots[1].lv_garrisonSpotCompleted == false) || (gv_s1_GarrisonSpots[2].lv_garrisonSpotCompleted == false))) {
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", gv_pLAYER_05_FERALZERG_LEFTBULLIES, RegionRandomPoint(RegionFromId(14)), libLotv_gf_DifficultyValueFixed2(8.0, 8.0, 6.0, 6.0));
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Zergling", gv_pLAYER_05_FERALZERG_LEFTBULLIES, RegionRandomPoint(RegionFromId(14)), libLotv_gf_DifficultyValueFixed2(9.0, 9.0, 7.0, 7.0));
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", gv_pLAYER_05_FERALZERG_LEFTBULLIES, RegionRandomPoint(RegionFromId(14)), libLotv_gf_DifficultyValueFixed2(8.0, 8.0, 6.0, 6.0));
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), "Hydralisk", gv_pLAYER_05_FERALZERG_LEFTBULLIES, RegionRandomPoint(RegionFromId(14)), libLotv_gf_DifficultyValueFixed2(7.0, 7.0, 5.0, 5.0));
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", gv_pLAYER_05_FERALZERG_LEFTBULLIES, RegionRandomPoint(RegionFromId(14)), libLotv_gf_DifficultyValueFixed2(8.0, 8.0, 6.0, 6.0));
    }
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_currentStage == 1)) {
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Zergling", gv_pLAYER_05_FERALZERG_LEFTBULLIES, RegionRandomPoint(RegionFromId(14)), 6.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Hydralisk", gv_pLAYER_05_FERALZERG_LEFTBULLIES, RegionRandomPoint(RegionFromId(14)), 1.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Baneling", gv_pLAYER_05_FERALZERG_LEFTBULLIES, RegionRandomPoint(RegionFromId(14)), 6.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Zergling", gv_pLAYER_05_FERALZERG_LEFTBULLIES, RegionRandomPoint(RegionFromId(14)), 5.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Roach", gv_pLAYER_05_FERALZERG_LEFTBULLIES, RegionRandomPoint(RegionFromId(14)), 6.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Hydralisk", gv_pLAYER_05_FERALZERG_LEFTBULLIES, RegionRandomPoint(RegionFromId(14)), 1.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Baneling", gv_pLAYER_05_FERALZERG_LEFTBULLIES, RegionRandomPoint(RegionFromId(14)), 7.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Zergling", gv_pLAYER_05_FERALZERG_LEFTBULLIES, RegionRandomPoint(RegionFromId(14)), 6.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Zergling", gv_pLAYER_05_FERALZERG_LEFTBULLIES, RegionRandomPoint(RegionFromId(14)), 5.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Baneling", gv_pLAYER_05_FERALZERG_LEFTBULLIES, RegionRandomPoint(RegionFromId(14)), 6.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1ZergFirehoseGarrisonP03_Init () {
    gt_S1ZergFirehoseGarrisonP03 = TriggerCreate("gt_S1ZergFirehoseGarrisonP03_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Zerg Firehose Garrison P04
//--------------------------------------------------------------------------------------------------
bool gt_S1ZergFirehoseGarrisonP04_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_currentStage == 1) && (gv_s1_GarrisonSpots[3].lv_garrisonSpotCompleted == false)) {
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionRandomPoint(RegionFromId(15)), libLotv_gf_DifficultyValueFixed2(8.0, 8.0, 6.0, 6.0));
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Zergling", gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionRandomPoint(RegionFromId(15)), libLotv_gf_DifficultyValueFixed2(9.0, 9.0, 7.0, 7.0));
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionRandomPoint(RegionFromId(15)), libLotv_gf_DifficultyValueFixed2(8.0, 8.0, 6.0, 6.0));
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), "Hydralisk", gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionRandomPoint(RegionFromId(15)), libLotv_gf_DifficultyValueFixed2(7.0, 7.0, 5.0, 5.0));
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionRandomPoint(RegionFromId(15)), libLotv_gf_DifficultyValueFixed2(8.0, 8.0, 6.0, 6.0));
    }
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_currentStage == 1)) {
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Zergling", gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionRandomPoint(RegionFromId(15)), 6.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Roach", gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionRandomPoint(RegionFromId(15)), 1.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Baneling", gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionRandomPoint(RegionFromId(15)), 6.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Roach", gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionRandomPoint(RegionFromId(15)), 5.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Zergling", gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionRandomPoint(RegionFromId(15)), 6.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Roach", gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionRandomPoint(RegionFromId(15)), 1.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Baneling", gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionRandomPoint(RegionFromId(15)), 7.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(3, 3, 3, 3), "Zergling", gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionRandomPoint(RegionFromId(15)), 6.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Roach", gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionRandomPoint(RegionFromId(15)), 5.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Baneling", gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionRandomPoint(RegionFromId(15)), 6.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1ZergFirehoseGarrisonP04_Init () {
    gt_S1ZergFirehoseGarrisonP04 = TriggerCreate("gt_S1ZergFirehoseGarrisonP04_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: S1 - Zerg Firehose Garrison P05
//--------------------------------------------------------------------------------------------------
bool gt_S1ZergFirehoseGarrisonP05_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_currentStage == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_currentStage == 1) && ((gv_s1_GarrisonSpots[4].lv_garrisonSpotCompleted == false) || (gv_s1_GarrisonSpots[5].lv_garrisonSpotCompleted == false))) {
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", gv_pLAYER_04_FERALZERG_RIGHTBULLIES, RegionRandomPoint(RegionFromId(17)), libLotv_gf_DifficultyValueFixed2(8.0, 8.0, 6.0, 6.0));
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 2, 2), "Zergling", gv_pLAYER_04_FERALZERG_RIGHTBULLIES, RegionRandomPoint(RegionFromId(17)), libLotv_gf_DifficultyValueFixed2(9.0, 9.0, 7.0, 7.0));
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", gv_pLAYER_04_FERALZERG_RIGHTBULLIES, RegionRandomPoint(RegionFromId(17)), libLotv_gf_DifficultyValueFixed2(8.0, 8.0, 6.0, 6.0));
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(0, 0, 1, 2), "Hydralisk", gv_pLAYER_04_FERALZERG_RIGHTBULLIES, RegionRandomPoint(RegionFromId(17)), libLotv_gf_DifficultyValueFixed2(7.0, 7.0, 5.0, 5.0));
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 3, 3), "Zergling", gv_pLAYER_04_FERALZERG_RIGHTBULLIES, RegionRandomPoint(RegionFromId(17)), libLotv_gf_DifficultyValueFixed2(8.0, 8.0, 6.0, 6.0));
    }
    while ((libNCMI_gf_GameIsOver() == false) && (libNCMI_gf_PlayerInCinematicModeCampaign() == false) && (gv_currentStage == 1)) {
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Zergling", gv_pLAYER_04_FERALZERG_RIGHTBULLIES, RegionRandomPoint(RegionFromId(17)), 6.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 4, 4, 4), "Hydralisk", gv_pLAYER_04_FERALZERG_RIGHTBULLIES, RegionRandomPoint(RegionFromId(17)), 1.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Baneling", gv_pLAYER_04_FERALZERG_RIGHTBULLIES, RegionRandomPoint(RegionFromId(17)), 6.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Zergling", gv_pLAYER_04_FERALZERG_RIGHTBULLIES, RegionRandomPoint(RegionFromId(17)), 5.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Hydralisk", gv_pLAYER_04_FERALZERG_RIGHTBULLIES, RegionRandomPoint(RegionFromId(17)), 6.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Zergling", gv_pLAYER_04_FERALZERG_RIGHTBULLIES, RegionRandomPoint(RegionFromId(17)), 1.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Baneling", gv_pLAYER_04_FERALZERG_RIGHTBULLIES, RegionRandomPoint(RegionFromId(17)), 7.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Zergling", gv_pLAYER_04_FERALZERG_RIGHTBULLIES, RegionRandomPoint(RegionFromId(17)), 1.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(2, 2, 2, 2), "Hydralisk", gv_pLAYER_04_FERALZERG_RIGHTBULLIES, RegionRandomPoint(RegionFromId(17)), 6.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(4, 4, 4, 4), "Zergling", gv_pLAYER_04_FERALZERG_RIGHTBULLIES, RegionRandomPoint(RegionFromId(17)), 1.0);
        gf_S1SpawnStreamingWaveUnit(libLotv_gf_DifficultyValueInt2(1, 1, 1, 1), "Baneling", gv_pLAYER_04_FERALZERG_RIGHTBULLIES, RegionRandomPoint(RegionFromId(17)), 6.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_S1ZergFirehoseGarrisonP05_Init () {
    gt_S1ZergFirehoseGarrisonP05 = TriggerCreate("gt_S1ZergFirehoseGarrisonP05_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Fill Garrisons Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFillGarrisonsCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova03Primary01");
    gv_objectiveDestroyZergBase3 = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFillGarrisonsCreate_Init () {
    gt_ObjectiveFillGarrisonsCreate = TriggerCreate("gt_ObjectiveFillGarrisonsCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Fill Garrisons Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFillGarrisonsComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveFillGarrisonsCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova03Primary01", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFillGarrisonsComplete_Init () {
    gt_ObjectiveFillGarrisonsComplete = TriggerCreate("gt_ObjectiveFillGarrisonsComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Fill Garrisons Update
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFillGarrisonsUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveFillGarrisonsCreate, true, false);
    libCMMI_gf_SetMissionObjectiveProgress("Nova03Primary01", gv_objectiveFillGarrisonsCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFillGarrisonsUpdate_Init () {
    gt_ObjectiveFillGarrisonsUpdate = TriggerCreate("gt_ObjectiveFillGarrisonsUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Fill Garrisons Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveFillGarrisonsFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveFillGarrisonsCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova03Primary01", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveFillGarrisonsFailed_Init () {
    gt_ObjectiveFillGarrisonsFailed = TriggerCreate("gt_ObjectiveFillGarrisonsFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Recover Downed Forces Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRecoverDownedForcesCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    libCMMI_gf_CreateObjectiveCampaign("Nova03Bonus01");
    gv_objectiveRescueStalkers = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRecoverDownedForcesCreate_Init () {
    gt_ObjectiveRecoverDownedForcesCreate = TriggerCreate("gt_ObjectiveRecoverDownedForcesCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Recover Downed Forces Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRecoverDownedForcesComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_ObjectiveRecoverDownedForcesCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova03Bonus01", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRecoverDownedForcesComplete_Init () {
    gt_ObjectiveRecoverDownedForcesComplete = TriggerCreate("gt_ObjectiveRecoverDownedForcesComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Recover Downed Forces Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveRecoverDownedForcesFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveRecoverDownedForcesCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova03Bonus01", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveRecoverDownedForcesFailed_Init () {
    gt_ObjectiveRecoverDownedForcesFailed = TriggerCreate("gt_ObjectiveRecoverDownedForcesFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Reach Communications Hub Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachCommunicationsHubCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova03Primary02");
    gv_objectiveDestroyZergBase2 = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachCommunicationsHubCreate_Init () {
    gt_ObjectiveReachCommunicationsHubCreate = TriggerCreate("gt_ObjectiveReachCommunicationsHubCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Reach Communications Hub Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachCommunicationsHubComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveReachCommunicationsHubCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova03Primary02", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachCommunicationsHubComplete_Init () {
    gt_ObjectiveReachCommunicationsHubComplete = TriggerCreate("gt_ObjectiveReachCommunicationsHubComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Reach Communications Hub Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachCommunicationsHubFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveReachCommunicationsHubCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova03Primary02", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachCommunicationsHubFailed_Init () {
    gt_ObjectiveReachCommunicationsHubFailed = TriggerCreate("gt_ObjectiveReachCommunicationsHubFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Nova Must Survive Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNovaMustSurviveCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova03Primary04");
    gv_objectiveDestroyZergBase5 = ObjectiveLastCreated();
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNovaMustSurviveCreate_Init () {
    gt_ObjectiveNovaMustSurviveCreate = TriggerCreate("gt_ObjectiveNovaMustSurviveCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Nova Must Survive Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNovaMustSurviveComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveNovaMustSurviveCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova03Primary04", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNovaMustSurviveComplete_Init () {
    gt_ObjectiveNovaMustSurviveComplete = TriggerCreate("gt_ObjectiveNovaMustSurviveComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Nova Must Survive Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveNovaMustSurviveFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveNovaMustSurviveCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova03Primary04", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveNovaMustSurviveFailed_Init () {
    gt_ObjectiveNovaMustSurviveFailed = TriggerCreate("gt_ObjectiveNovaMustSurviveFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Reach Command Room Create
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachCommandRoomCreate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCMMI_gf_CreateObjectiveCampaign("Nova03Primary03");
    gv_objectiveDestroyZergBase4 = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachCommandRoomCreate_Init () {
    gt_ObjectiveReachCommandRoomCreate = TriggerCreate("gt_ObjectiveReachCommandRoomCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Reach Command Room Complete
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachCommandRoomComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveReachCommandRoomCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova03Primary03", libComC_ge_MissionObjectiveState_Completed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachCommandRoomComplete_Init () {
    gt_ObjectiveReachCommandRoomComplete = TriggerCreate("gt_ObjectiveReachCommandRoomComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Objective Reach Command Room Failed
//--------------------------------------------------------------------------------------------------
bool gt_ObjectiveReachCommandRoomFailed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (!((libNCMI_gf_PlayerInCinematicModeCampaign() == false))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_ObjectiveReachCommandRoomCreate, true, false);
    libCMMI_gf_ZS_SetMissionObjectiveState("Nova03Primary03", libComC_ge_MissionObjectiveState_Failed);
    Wait(libNCMI_gv_campaignObjectiveDelay, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ObjectiveReachCommandRoomFailed_Init () {
    gt_ObjectiveReachCommandRoomFailed = TriggerCreate("gt_ObjectiveReachCommandRoomFailed_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Q
//--------------------------------------------------------------------------------------------------
bool gt_BriefingQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_StartGame01QGarrisonSpots);
    TriggerStop(gt_StartGame02QReachCommsHub);
    TriggerStop(gt_StartGame03QReachCommandRoom);
    TriggerStop(gt_StartAI);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueEnter();
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    UnitPauseAll(true);
    AITimePause(true);
    GameTimeOfDayPause(true);
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal GuideHide");
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "ModelFlagsClear OutlineOccluder");
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "ModelFlagsClear OutlineEmitter,OutlineOccluder");
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    libNtve_gf_GlobalCinematicSetting(true);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, 0.0);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova03_Nova_001.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova03_Nova_004.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova03_Nova_005.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova03_Nova_007.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova03_Reigel_002.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova03_Reigel_003.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova03_Reigel_006.ogg", false);
    PreloadSound("LocalizedData\\Sounds\\VO\\Briefing_Nova03_Reigel_008.ogg", false);
    TriggerExecute(gt_BriefingScene00TarsonisInfested, true, true);
    TriggerExecute(gt_BriefingScene01DOMBase, true, true);
    TriggerExecute(gt_BriefingScene02ShowGarrisons, true, true);
    TriggerExecute(gt_BriefingScene03ShowSiegeTanks, true, true);
    TriggerExecute(gt_BriefingScene04ShowHellbats, true, true);
    UnitPauseAll(true);
    TriggerQueueClear(c_triggerQueueRemove);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingQ_Init () {
    gt_BriefingQ = TriggerCreate("gt_BriefingQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 00 - Tarsonis Infested
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene00TarsonisInfested_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_voiceOverDurationTotal;
    fixed lv_voiceOverFraction;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_voiceOverDurationTotal = (SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova03|Line00001", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova03|Line00002", true), c_soundIndexAny)));
    lv_voiceOverFraction = (lv_voiceOverDurationTotal / 3.0);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }

    }
    UnitGroupLoopEnd();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(4709));
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(12));
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(528));
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(529));
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(530));
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(2));
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(7));
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(186));
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(65));
    UnitGroupAdd(gv_cinematicHiddenUnits, UnitFromId(586));
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(193), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    TriggerExecute(gt_BreifingScene00TarsosnisCamera, true, false);
    MovieStartRecording("Briefing_Video_Nova03_00");
    Wait((1.0 * SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova03|Line00001", true), c_soundIndexAny))), c_timeReal);
    Wait((1.0 * SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova03|Line00002", true), c_soundIndexAny))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene00TarsonisInfested_Init () {
    gt_BriefingScene00TarsonisInfested = TriggerCreate("gt_BriefingScene00TarsonisInfested_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Breifing Scene 00 - Tarsosnis Camera
//--------------------------------------------------------------------------------------------------
bool gt_BreifingScene00TarsosnisCamera_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_voiceOverDurationTotal;
    fixed lv_voiceOverFraction;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_voiceOverDurationTotal = (SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova03|Line00001", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova03|Line00002", true), c_soundIndexAny)));
    lv_voiceOverFraction = (lv_voiceOverDurationTotal / 3.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(695), (lv_voiceOverFraction * 2.0), -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(695), (lv_voiceOverDurationTotal * 2.0), -1, 10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BreifingScene00TarsosnisCamera_Init () {
    gt_BreifingScene00TarsosnisCamera = TriggerCreate("gt_BreifingScene00TarsosnisCamera_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 01 - DOM Base
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene01DOMBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_voiceOverDurationTotal;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_voiceOverDurationTotal = (SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova03|Line00003", true), c_soundIndexAny)) + SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova03|Line00004", true), c_soundIndexAny)));
    GameSetLighting(gv_lighting_Stage02, 0.0);
    UnitRemove(UnitFromId(701));
    UnitRemove(UnitFromId(965));
    UnitCreate(1, "Marauder", 0, gv_pLAYER_06_DEFENDERSOFMAN, UnitGetPosition(UnitFromId(701)), 270.0);
    UnitCreate(1, "Marauder", 0, gv_pLAYER_06_DEFENDERSOFMAN, UnitGetPosition(UnitFromId(965)), 0.0);
    UnitIssueOrder(UnitFromId(3895), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(853)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(3057), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(3887)), c_orderQueueReplace);
    UnitGroupLoopBegin(gv_s2_UnitsHiddenDuringS1);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(291), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(292), lv_voiceOverDurationTotal, -1, 10, true);
    MovieStartRecording("Briefing_Video_Nova03_01");
    Wait((1.0 * SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova03|Line00003", true), c_soundIndexAny))), c_timeReal);
    Wait((1.0 * SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova03|Line00004", true), c_soundIndexAny))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene01DOMBase_Init () {
    gt_BriefingScene01DOMBase = TriggerCreate("gt_BriefingScene01DOMBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 02 - Show Garrisons
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene02ShowGarrisons_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting(gv_lighting_Stage01, 0.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MannedTurret", c_unitCreateIgnorePlacement, gv_pLAYER_02_NOVASUPPORT, UnitGetPosition(UnitFromId(12)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    gv_cinematicMannedTurret = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", 0, gv_pLAYER_01_USER, PointFromId(64));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_cinematicGarrisonGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", 0, gv_pLAYER_01_USER, PointFromId(203));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_cinematicGarrisonGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", 0, gv_pLAYER_01_USER, PointFromId(245));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_cinematicGarrisonGroup, UnitLastCreated());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Bunker", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, UnitGetPosition(UnitFromId(586)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitCargoCreate(UnitLastCreated(), "Marine", 4);
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitCargoLastCreatedGroup());
    Wait(2.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(79), 0.0, -1, 10.0, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    MovieStartRecording("Briefing_Video_Nova03_02");
    gf_BriefingMoveAndDespawnGarrisonUnit(UnitGroupUnit(gv_cinematicGarrisonGroup, 1), 1);
    gf_BriefingMoveAndDespawnGarrisonUnit(UnitGroupUnit(gv_cinematicGarrisonGroup, 2), 2);
    gf_BriefingMoveAndDespawnGarrisonUnit(UnitGroupUnit(gv_cinematicGarrisonGroup, 3), 3);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(192), SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova03|Line00005", true), c_soundIndexAny)), -1, 10, true);
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_BriefingZergAttack, true, false);
    Wait((1.0 * SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova03|Line00005", true), c_soundIndexAny))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene02ShowGarrisons_Init () {
    gt_BriefingScene02ShowGarrisons = TriggerCreate("gt_BriefingScene02ShowGarrisons_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 03 - Show Siege Tanks
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene03ShowSiegeTanks_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideDoodadsInRegion(false, RegionFromId(117), "Tarsonis_Broken_Cliff");
    UnitRemove(UnitFromId(4709));
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "HoverSiegeTank", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "HoverHellbat", 1);
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "SiegeTank", 0, gv_pLAYER_01_USER, PointFromId(293));
    gv_cinematicSiegeTank = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(80), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4698), 15.0, -1, 10, true);
    CameraShake(1, "Light", "SubtleMove", 0.0, 0.0, 60.0);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    MovieStartRecording("Briefing_Video_Nova03_03");
    UnitIssueOrder(gv_cinematicSiegeTank, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(531)), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicSiegeTank, OrderTargetingPoint(AbilityCommand("SiegeTankJumpJet", 0), PointFromId(268)), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_cinematicSiegeTank, Order(AbilityCommand("SiegeMode", 0)), c_orderQueueAddToEnd);
    while (!((UnitOrderCount(gv_cinematicSiegeTank) == 0))) {
        Wait(0.25, c_timeGame);
    }
    Wait(3.0, c_timeGame);
    Wait((1.0 * SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova03|Line00006", true), c_soundIndexAny))), c_timeReal);
    Wait((1.0 * SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova03|Line00007", true), c_soundIndexAny))), c_timeReal);
    Wait((1.0 * SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova03|Line00008", true), c_soundIndexAny))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    CameraShakeStop(gv_pLAYER_01_USER);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene03ShowSiegeTanks_Init () {
    gt_BriefingScene03ShowSiegeTanks = TriggerCreate("gt_BriefingScene03ShowSiegeTanks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Zerg Attack
//--------------------------------------------------------------------------------------------------
bool gt_BriefingZergAttack_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(4, "Zergling", 0, gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, PointFromId(417));
    UnitGroupAddUnitGroup(gv_cinematicTempUnits, UnitLastCreatedGroup());
    UnitGroupAddUnitGroup(gv_cinematicZergGroup, UnitLastCreatedGroup());
    UnitGroupIssueOrder(gv_cinematicZergGroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(19)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingZergAttack_Init () {
    gt_BriefingZergAttack = TriggerCreate("gt_BriefingZergAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Scene 04 - Show Hellbats
//--------------------------------------------------------------------------------------------------
bool gt_BriefingScene04ShowHellbats_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_03_FERALZERG_MIDDLEBULLIES, RegionFromId(78), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitRemove(UnitFromId(160));
    UnitRemove(UnitFromId(158));
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "HoverHellbat", 1);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4695), 0.0, -1, 10, true);
    CinematicFade(true, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    MovieStartRecording("Briefing_Video_Nova03_04");
    TriggerExecute(gt_BriefingHellbatAttack, true, false);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait((1.0 * SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova03|Line00006", true), c_soundIndexAny))), c_timeReal);
    Wait((1.0 * SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova03|Line00007", true), c_soundIndexAny))), c_timeReal);
    Wait((1.0 * SoundLengthSync(SoundLink(ConversationDataGetSound("Briefing_Nova03|Line00008", true), c_soundIndexAny))), c_timeReal);
    Wait(5.0, c_timeReal);
    MovieStopRecording();
    CameraShakeStop(gv_pLAYER_01_USER);
    CinematicFade(false, 0.1, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingScene04ShowHellbats_Init () {
    gt_BriefingScene04ShowHellbats = TriggerCreate("gt_BriefingScene04ShowHellbats_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Briefing Hellbat Attack
//--------------------------------------------------------------------------------------------------
bool gt_BriefingHellbatAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit[4] lv_hellbats;
    unitgroup lv_marines;

    // Variable Initialization
    lv_marines = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "HellionTank", 0, gv_pLAYER_01_USER, PointFromId(4696));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    lv_hellbats[1] = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "HellionTank", 0, gv_pLAYER_01_USER, PointFromId(4697));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    lv_hellbats[2] = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(5, "Marine", 0, gv_pLAYER_01_USER, PointFromId(4700));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(4704)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitLastCreatedGroup());
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    UnitGroupLoopEnd();
    UnitIssueOrder(lv_hellbats[1], OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(4704)), c_orderQueueReplace);
    UnitIssueOrder(lv_hellbats[2], OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(4704)), c_orderQueueReplace);
    libNtve_gf_CreateUnitsAtPoint2(3, "Hydralisk", 0, gv_pLAYER_04_FERALZERG_RIGHTBULLIES, PointFromId(4702));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(4697)), c_orderQueueReplace);
    Wait(3.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4705), 5.0, -1, 10, true);
    libNtve_gf_CreateUnitsAtPoint2(2, "RoachBurrowed", 0, gv_pLAYER_04_FERALZERG_RIGHTBULLIES, PointFromId(4704));
    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(4697)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BriefingHellbatAttack_Init () {
    gt_BriefingHellbatAttack = TriggerCreate("gt_BriefingHellbatAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Q
//--------------------------------------------------------------------------------------------------
bool gt_IntroQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_IntroSetup, true, true);
    TriggerExecute(gt_IntroCinematic, true, true);
    TriggerExecute(gt_IntroCinematicEnd, true, true);
    TriggerExecute(gt_IntroCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroQ_Init () {
    gt_IntroQ = TriggerCreate("gt_IntroQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Setup
//--------------------------------------------------------------------------------------------------
bool gt_IntroSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_playersUnits;

    // Variable Initialization
    lv_playersUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false) && (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(1)) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }

    }
    UnitGroupLoopEnd();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(1)) == false)) {
            UnitGroupAdd(gv_cinematicHiddenUnits, UnitGroupLoopCurrent());
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
        }

    }
    UnitGroupLoopEnd();
    libNtve_gf_PauseUnit(gv_zeratul, true);
    libNtve_gf_ShowHideUnit(gv_zeratul, false);
    UnitSetPosition(gv_zeratul, PointFromId(2383), false);
    libNtve_gf_CreateUnitsAtPoint2(1, "NovaShip", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(2381));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_introCineNovaShip = UnitLastCreated();
    UnitSetHeight(gv_introCineNovaShip, 12.0, 0.0);
    libNtve_gf_ShowHideUnit(gv_introCineNovaShip, false);
    gv_introMinerals[0] = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals);
    gv_introMinerals[1] = libNtve_gf_UnitGetPropertyResources(UnitFromId(17), c_unitPropCurrent);
    gv_introMinerals[2] = libNtve_gf_UnitGetPropertyResources(UnitFromId(286), c_unitPropCurrent);
    gv_introMinerals[3] = libNtve_gf_UnitGetPropertyResources(UnitFromId(246), c_unitPropCurrent);
    gv_introMinerals[4] = libNtve_gf_UnitGetPropertyResources(UnitFromId(378), c_unitPropCurrent);
    gv_introMinerals[5] = libNtve_gf_UnitGetPropertyResources(UnitFromId(382), c_unitPropCurrent);
    gv_introMinerals[6] = libNtve_gf_UnitGetPropertyResources(UnitFromId(287), c_unitPropCurrent);
    gv_introMinerals[7] = libNtve_gf_UnitGetPropertyResources(UnitFromId(383), c_unitPropCurrent);
    gv_introGas[0] = PlayerGetPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene);
    gv_introGas[1] = libNtve_gf_UnitGetPropertyResources(UnitFromId(379), c_unitPropCurrent);
    libLbty_gf_OrderWorkerstoGatherNearbyResources(RegionEntireMap(), gv_pLAYER_01_USER);
    UnitGroupAdd(gv_introPlayerUnits, UnitFromId(67));
    UnitGroupAdd(gv_introPlayerUnits, UnitFromId(68));
    UnitGroupAdd(gv_introPlayerUnits, UnitFromId(2));
    UnitGroupAdd(gv_introPlayerUnits, UnitFromId(65));
    UnitGroupAdd(gv_introPlayerUnits, UnitFromId(7));
    UnitGroupAdd(gv_introPlayerUnits, UnitFromId(186));
    UnitGroupAdd(gv_introPlayerUnits, UnitFromId(4709));
    UnitGroupLoopBegin(gv_introPlayerUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateFidget, false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    libNtve_gf_ShowHideUnit(UnitFromId(66), false);
    libNtve_gf_ShowHideUnit(UnitFromId(411), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FactoryFlying", 0, gv_pLAYER_01_USER, PointFromId(4694));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_introFactory = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BarracksFlying", 0, gv_pLAYER_01_USER, PointFromId(4715));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_introBarracks = UnitLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSetup_Init () {
    gt_IntroSetup = TriggerCreate("gt_IntroSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StoryMode(PlayerGroupAll(), true);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova03_Main", c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova03_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    libComC_gf_PlayCinematic("MP01_035", false);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, false);
    libNtve_gf_StoryMode(PlayerGroupAll(), false);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2388), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2389), 15.0, -1, 20.0, true);
    libComC_gf_SetAllSoundChannelVolumesCampaign(libComC_ge_VolumeChannelModeCampaign_Game);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    UnitIssueOrder(gv_introFactory, OrderTargetingPoint(AbilityCommand("FactoryLand", 0), UnitGetPosition(UnitFromId(66))), c_orderQueueReplace);
    UnitIssueOrder(gv_introBarracks, OrderTargetingPoint(AbilityCommand("BarracksLand", 0), UnitGetPosition(UnitFromId(411))), c_orderQueueReplace);
    CinematicFade(true, 2.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    Wait(4.5, c_timeGame);
    TriggerExecute(gt_IntroSpawnTank, true, false);
    TriggerExecute(gt_IntroSpawnBarracksUnits, true, false);
    Wait(1.7, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_introCineNovaShip), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    libNCMI_gf_PlaySoundCinematic(SoundLink("Event_NovaShipStandWork", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_ShowHideUnit(gv_introCineNovaShip, true);
    CameraShake(1, "Heavy", "Shake", 0.0, 2.0, 3.0);
    Wait(3.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4706), 6.0, -1, 10.0, true);
    Wait(5.0, c_timeGame);
    UnitBehaviorAdd(gv_zeratul, "SuppressCloak", gv_zeratul, 1);
    libNtve_gf_PauseUnit(gv_zeratul, false);
    libNtve_gf_ShowHideUnit(gv_zeratul, true);
    Wait(0.5, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2387), 4.5, -1, 10.0, true);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2386)), c_orderQueueReplace);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(4707)), c_orderQueueAddToEnd);
    Wait(1.5, c_timeGame);
    UnitBehaviorRemove(gv_zeratul, "SuppressCloak", 1);
    Wait(1.0, c_timeGame);
    UnitBehaviorAdd(gv_introCineNovaShip, "PermanentlyCloaked", gv_introCineNovaShip, 1);
    Wait(1.0, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4708), 3.0, -1, 10.0, true);
    Wait(3.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematic_Init () {
    gt_IntroCinematic = TriggerCreate("gt_IntroCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_IntroCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_introCinematicOver = true;
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCinematicEnd_Init () {
    gt_IntroCinematicEnd = TriggerCreate("gt_IntroCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_IntroCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StopCinematicSounds();
    if ((gv_cinematicCompleted == true)) {
        UnitIssueOrder(gv_zeratul, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitGroupRemove(gv_cinematicTempUnits, gv_introBarracks);
        UnitGroupRemove(gv_cinematicTempUnits, gv_introFactory);
        UnitRemove(UnitFromId(66));
        UnitRemove(UnitFromId(411));
        UnitRemove(UnitFromId(7));
        UnitRemove(UnitFromId(186));
        UnitRemove(UnitFromId(2));
        UnitRemove(UnitFromId(65));
        UnitRemove(UnitFromId(67));
        UnitRemove(UnitFromId(68));
        UnitGroupRemove(gv_cinematicTempUnits, gv_introMarines[1]);
        UnitGroupRemove(gv_cinematicTempUnits, gv_introMarines[2]);
        UnitGroupRemove(gv_cinematicTempUnits, gv_introMarines[3]);
        UnitGroupRemove(gv_cinematicTempUnits, gv_introMarines[4]);
        UnitGroupRemove(gv_cinematicTempUnits, gv_introMarauders[1]);
        UnitGroupRemove(gv_cinematicTempUnits, gv_introMarauders[2]);
        UnitGroupRemove(gv_cinematicTempUnits, gv_introSiegeTank);
    }
    else {
        libNtve_gf_PauseUnit(gv_zeratul, false);
        UnitBehaviorRemove(gv_zeratul, "SuppressCloak", 1);
        UnitIssueOrder(gv_zeratul, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_zeratul, PointFromId(2386), false);
        UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(4707)), c_orderQueueReplace);
        libNtve_gf_ShowHideUnit(gv_zeratul, true);
        libNtve_gf_ShowHideUnit(UnitFromId(66), true);
        libNtve_gf_ShowHideUnit(UnitFromId(411), true);
        UnitGroupLoopBegin(gv_introPlayerUnits);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateFidget, true);
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        }
        UnitGroupLoopEnd();
    }
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicPausedUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropMinerals, c_playerPropOperSetTo, gv_introMinerals[0]);
    UnitSetPropertyFixed(UnitFromId(17), c_unitPropResources, gv_introMinerals[1]);
    UnitSetPropertyFixed(UnitFromId(286), c_unitPropResources, gv_introMinerals[2]);
    UnitSetPropertyFixed(UnitFromId(246), c_unitPropResources, gv_introMinerals[3]);
    UnitSetPropertyFixed(UnitFromId(378), c_unitPropResources, gv_introMinerals[4]);
    UnitSetPropertyFixed(UnitFromId(382), c_unitPropResources, gv_introMinerals[5]);
    UnitSetPropertyFixed(UnitFromId(287), c_unitPropResources, gv_introMinerals[6]);
    UnitSetPropertyFixed(UnitFromId(383), c_unitPropResources, gv_introMinerals[7]);
    PlayerModifyPropertyInt(gv_pLAYER_01_USER, c_playerPropVespene, c_playerPropOperSetTo, gv_introGas[0]);
    UnitSetPropertyFixed(UnitFromId(379), c_unitPropResources, gv_introGas[1]);
    UnitGroupLoopBegin(gv_introPlayerUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateFidget, true);
    }
    UnitGroupLoopEnd();
    VisExploreArea(gv_pLAYER_01_USER, RegionFromId(3), true, false);
    VisRevealArea(gv_pLAYER_01_USER, RegionFromId(89), 0.0, false);
    RegionPlayableMapSet(RegionFromId(7));
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
            libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
            UnitGroupAdd(gv_s2_UnitsHiddenDuringS1, UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    ActorScopeCreate("AmbTarsonisDebrisLoopActorSoundSite");
    gv_cameraSoundActorScope = libNtve_gf_ActorScopeLastCreated();
    TriggerExecute(gt_StartAI, true, false);
    Wait(0.5, c_timeReal);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4708), lv_fadeDuration, -1, 10.0, true);
    }
    else {
        gv_zeratul = UnitFromId(161);
        lv_fadeDuration = 1.0;
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoDefault(), 0.0, -1, 10, false);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PlayerStartLocation(gv_pLAYER_01_USER), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroCleanup_Init () {
    gt_IntroCleanup = TriggerCreate("gt_IntroCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Spawn Tank
//--------------------------------------------------------------------------------------------------
bool gt_IntroSpawnTank_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_introCinematicOver == true)) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "SiegeTank", 0, gv_pLAYER_01_USER, PointFromId(4717));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_introSiegeTank = UnitLastCreated();
    UnitIssueOrder(gv_introSiegeTank, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(4719)), c_orderQueueReplace);
    UnitIssueOrder(gv_introSiegeTank, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(4718)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSpawnTank_Init () {
    gt_IntroSpawnTank = TriggerCreate("gt_IntroSpawnTank_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Intro Spawn Barracks Units
//--------------------------------------------------------------------------------------------------
bool gt_IntroSpawnBarracksUnits_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.5, c_timeGame);
    if ((gv_introCinematicOver == true)) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_01_USER, PointFromId(4716));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_introMarines[1] = UnitLastCreated();
    UnitIssueOrder(gv_introMarines[1], OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(7))), c_orderQueueReplace);
    Wait(0.4, c_timeGame);
    if ((gv_introCinematicOver == true)) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_01_USER, PointFromId(4716));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_introMarines[2] = UnitLastCreated();
    UnitIssueOrder(gv_introMarines[2], OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(186))), c_orderQueueReplace);
    Wait(0.4, c_timeGame);
    if ((gv_introCinematicOver == true)) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_01_USER, PointFromId(4716));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_introMarines[3] = UnitLastCreated();
    UnitIssueOrder(gv_introMarines[3], OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(65))), c_orderQueueReplace);
    Wait(0.4, c_timeGame);
    if ((gv_introCinematicOver == true)) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Marine", 0, gv_pLAYER_01_USER, PointFromId(4716));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_introMarines[4] = UnitLastCreated();
    UnitIssueOrder(gv_introMarines[4], OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(2))), c_orderQueueReplace);
    Wait(0.4, c_timeGame);
    if ((gv_introCinematicOver == true)) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", 0, gv_pLAYER_01_USER, PointFromId(4716));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_introMarauders[1] = UnitLastCreated();
    UnitIssueOrder(gv_introMarauders[1], OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(67))), c_orderQueueReplace);
    Wait(0.4, c_timeGame);
    if ((gv_introCinematicOver == true)) {
        return true;
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "Marauder", 0, gv_pLAYER_01_USER, PointFromId(4716));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_introMarauders[2] = UnitLastCreated();
    UnitIssueOrder(gv_introMarauders[2], OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitFromId(68))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IntroSpawnBarracksUnits_Init () {
    gt_IntroSpawnBarracksUnits = TriggerCreate("gt_IntroSpawnBarracksUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q
//--------------------------------------------------------------------------------------------------
bool gt_MidQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup, true, true);
    TriggerExecute(gt_MidCinematic, true, true);
    TriggerExecute(gt_MidCinematicEnd, true, true);
    TriggerExecute(gt_MidCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ_Init () {
    gt_MidQ = TriggerCreate("gt_MidQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, 1.0, true);
    if ((UnitIsAlive(gv_zeratul) == false)) {
        libNCMI_gf_ReviveHeroInstantly(gv_zeratul, false);
    }

    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionEntireMap());
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }

    }
    UnitGroupLoopEnd();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_cinematicHiddenUnits, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    libNtve_gf_ShowHideUnit(UnitFromId(339), true);
    UnitIssueOrder(gv_zeratul, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_zeratul, PointFromId(650), false);
    libNtve_gf_ShowHideUnit(gv_zeratul, false);
    libNtve_gf_PauseUnit(gv_zeratul, true);
    UnitSetPropertyFixed(gv_zeratul, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_zeratul, c_unitPropShieldsPercent, 100.0);
    UnitSetPropertyFixed(gv_zeratul, c_unitPropEnergyPercent, 100.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "NovaHero", 0, gv_pLAYER_01_USER, PointFromId(3882));
    gv_cinematicNova = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Separatist", c_unitCreateIgnorePlacement, gv_pLAYER_06_DEFENDERSOFMAN, PointFromId(50));
    gv_cinematicMarine01 = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "Separatist", c_unitCreateIgnorePlacement, gv_pLAYER_06_DEFENDERSOFMAN, PointFromId(51));
    gv_cinematicMarine02 = UnitLastCreated();
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_CreateUnitsAtPoint2(1, "DOMScientist", c_unitCreateIgnorePlacement, gv_pLAYER_06_DEFENDERSOFMAN, PointFromId(3879));
    gv_cinematicStationOfficer = UnitLastCreated();
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 2.2);
    UnitBehaviorAdd(UnitLastCreated(), "Run", UnitLastCreated(), 1);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNtve_gf_ShowHideUnit(UnitFromId(4741), true);
    libNtve_gf_PauseUnit(UnitFromId(4741), false);
    UnitSetOwner(UnitFromId(4741), gv_pLAYER_01_USER, true);
    UnitSetHeight(UnitFromId(4741), 1.2, 0.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitFromId(4741));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PickupNovaMonoMolecularBlade", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(429));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotSuit");
    libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotHelmet");
    libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotGadget");
    libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotWeapon");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup_Init () {
    gt_MidSetup = TriggerCreate("gt_MidSetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic_Func (bool testConds, bool runActions) {
    fixed auto38F006F5_at;
    fixed autoCDA67ABC_at;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(643), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(643), 12.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova03_Infiltrate", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova03_Main_B", c_soundtrackCueAny, c_soundtrackIndexAny);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    UnitIssueOrder(gv_cinematicNova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(640)), c_orderQueueReplace);
    UnitBehaviorAdd(UnitFromId(4741), "SuppressCloak", UnitFromId(4741), 1);
    SoundPlayOnUnitForPlayer(SoundLink("Spell_CloakField_Off", -1), c_maxPlayers, PlayerGroupAll(), UnitFromId(4741), 0.0, 400.0, 0.25);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    libNCMI_gf_SendTransmissionCampaign(gv_cinematicNova, "Mission_Nova03|Line00076", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(1.5, c_timeGame);
    Wait(2.5, c_timeGame);
    SoundPlayOnUnitForPlayer(SoundLink("Terran_CloakOn", -1), c_maxPlayers, PlayerGroupAll(), gv_cinematicNova, 0.0, 200.0, 0.0);
    libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotSuit");
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPSuitItem1");
    libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotHelmet");
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPHelmetItem1");
    libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotGadget");
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPGadgetItem4");
    libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotWeapon");
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPWeaponItem1");
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 1.0);
    UnitIssueOrder(gv_cinematicNova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(641)), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(643), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(645), 3.0, -1, 10, true);
    Wait(1.0, c_timeGame);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 0.1);
    UnitBehaviorRemove(UnitFromId(4741), "SuppressCloak", 1);
    SoundPlayOnUnitForPlayer(SoundLink("Spell_CloakField_On", -1), c_maxPlayers, PlayerGroupAll(), UnitFromId(4741), 0.0, 200.0, 0.5);
    Wait(1.0, c_timeGame);
    UnitSetOwner(UnitFromId(4741), 0, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 0.0, 1.0);
    Wait(1.0, c_timeGame);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 100.0, 1.0);
    libNCMI_gf_PlaySoundCinematic(SoundLink("UI_Evolutions_PlanetaryZoom", -1), PlayerGroupAll(), 50.0, 3.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(646), 1.5, -1, 10, true);
    Wait(0.75, c_timeGame);
    CinematicFade(false, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    GameSetLighting(gv_lighting_Stage02, 0.0);
    Wait(0.25, c_timeGame);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "NovaIndoorSounds", 1);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_TarsonisCityUnderground_Quad", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(647), 0.0, -1, 10, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(3878));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(gv_cinematicMarine01, OrderTargetingUnit(AbilityCommand("attack", 0), UnitLastCreated()), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, gv_pLAYER_01_USER, PointFromId(3875));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitIssueOrder(gv_cinematicMarine02, OrderTargetingUnit(AbilityCommand("attack", 0), UnitLastCreated()), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_PlayAnimation(ActorFromDoodad(DoodadFromId(2385)), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UnitAbilityEnable(gv_zeratul, "attack", false);
    libNtve_gf_PauseUnit(gv_zeratul, false);
    UnitSetHeight(gv_zeratul, 5.0, 0.0);
    Wait(1.5, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(648), 1.0, -1, 10, true);
    UnitSetFacing(gv_zeratul, 75.0, 0.0);
    Wait(1.0, c_timeGame);
    libNtve_gf_ShowHideUnit(gv_zeratul, true);
    UnitSetHeight(gv_zeratul, 0.0, 0.3);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_zeratul), c_animNameDefault, "Unload End", c_animFlagNonLooping, c_animTimeDefault);
    Wait(0.5, c_timeGame);
    SoundPlayOnUnitForPlayer(SoundLink("Marine_Land", -1), c_maxPlayers, PlayerGroupAll(), gv_zeratul, 0.0, 200.0, 0.0);
    Wait(3.5, c_timeGame);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_zeratul), c_animNameDefault);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3874)), c_orderQueueReplace);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3880), 5.0, -1, 10, true);
    auto38F006F5_at = 0;
    while (!((UnitOrderCount(gv_zeratul) == 0)) && auto38F006F5_at <= 3.0) {
        Wait(0.25, c_timeGame);
        auto38F006F5_at = auto38F006F5_at + 0.25;
    }
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.25);
    libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00015", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(3.0, c_timeGame);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(652)), c_orderQueueAddToEnd);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 1.0);
    UnitAbilityEnable(gv_zeratul, "attack", true);
    UnitIssueOrder(gv_zeratul, OrderTargetingUnit(AbilityCommand("NovaWeaponCanisterRifleSnipe", 0), gv_cinematicMarine02), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_zeratul, OrderTargetingUnit(AbilityCommand("NovaWeaponCanisterRifleSnipe", 0), gv_cinematicStationOfficer), c_orderQueueAddToEnd);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_cinematicMarine01, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_cinematicMarine01, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(652)), c_orderQueueReplace);
    UnitAbilityEnable(gv_zeratul, "attack", false);
    Wait(0.25, c_timeGame);
    UnitAbilityEnable(gv_zeratul, "attack", true);
    UnitIssueOrder(gv_zeratul, OrderTargetingUnit(AbilityCommand("NovaWeaponCanisterRifleSnipe", 0), gv_cinematicMarine01), c_orderQueueAddToEnd);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(651)), c_orderQueueAddToEnd);
    UnitBehaviorAdd(gv_zeratul, "SuppressCloak", gv_zeratul, 1);
    Wait(1.75, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(649), 3.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 0.25);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00016", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00017", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotWeapon");
    UnitAbilityEnable(gv_zeratul, "NovaPsiStrike", false);
    UnitAbilityShow(gv_zeratul, "NovaPsiStrike", false);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00018", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00019", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(429)), c_orderQueueReplace);
    autoCDA67ABC_at = 0;
    while (!((UnitOrderCount(gv_zeratul) == 0)) && autoCDA67ABC_at <= 2.0) {
        Wait(0.25, c_timeGame);
        autoCDA67ABC_at = autoCDA67ABC_at + 0.25;
    }
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPWeaponItem3");
    libNCMI_gf_PlaySoundCinematic(SoundLink("Oracle_StasisTrap_Finished", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(163)), c_orderQueueReplace);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(163), 1.0, PointGetFacing(PointFromId(163)))), c_orderQueueAddToEnd);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 1.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic_Init () {
    gt_MidCinematic = TriggerCreate("gt_MidCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd_Init () {
    gt_MidCinematicEnd = TriggerCreate("gt_MidCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_EnableDisableHeroReviveSystem(false, gv_pLAYER_01_USER);
    libNCMI_gf_StopCinematicSounds();
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicPausedUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    GameSetLighting(gv_lighting_Stage02, 0.0);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    CameraSetData(PlayerGroupSingle(gv_pLAYER_01_USER), "Dflt2");
    VisExploreArea(gv_pLAYER_01_USER, RegionEntireMap(), false, false);
    RegionPlayableMapSet(RegionFromId(8));
    TriggerEnable(gt_VictoryStatDOMKills, true);
    UnitIssueOrder(gv_zeratul, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_ChangeUnitDamage(gv_zeratul, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    if ((gv_cinematicCompleted == false)) {
        UnitSetPosition(gv_zeratul, PointFromId(163), false);
        UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(163), 1.0, PointGetFacing(PointFromId(163)))), c_orderQueueAddToEnd);
    }

    libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotSuit");
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPSuitItem1");
    libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotHelmet");
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPHelmetItem1");
    libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotGadget");
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPGadgetItem4");
    libNovC_gf_UnequipNovaEquipmentForSlot("EQPSlotWeapon");
    libNovC_gf_EnableDisableNovaEquipment(true, "EQPWeaponItem3");
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "NovaWeaponMinScanRangeZero", 1);
    TechTreeUpgradeAddLevel(gv_pLAYER_01_USER, "NovaIndoorSounds", 1);
    UnitAbilityEnable(gv_zeratul, "NovaPsiStrike", false);
    UnitAbilityShow(gv_zeratul, "NovaPsiStrike", false);
    ObjectiveShow(gv_objectiveDestroyZergBase3, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveRescueStalkers, PlayerGroupAll(), false);
    gv_currentStage = 2;
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(gv_zeratul), c_animNameDefault);
    UnitAbilityEnable(gv_zeratul, "attack", true);
    libNtve_gf_ShowHideUnit(gv_zeratul, true);
    UnitGroupSelect(UnitGroupSelected(gv_pLAYER_01_USER), gv_pLAYER_01_USER, false);
    UnitSelect(gv_zeratul, gv_pLAYER_01_USER, true);
    UnitSetPropertyFixed(gv_zeratul, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_zeratul, c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(gv_zeratul, c_unitPropShieldsPercent, 100.0);
    UnitSetHeight(gv_zeratul, 0.0, 0.3);
    UnitBehaviorRemove(gv_zeratul, "SuppressCloak", 1);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_s2_UnitsHiddenDuringS1);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    libNtve_gf_ShowHideUnit(gv_s2_BeaconActionableIntel, false);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    if ((gv_cinematicCompleted == true)) {
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(71), lv_fadeDuration, -1, 10.0, true);
    }
    else {
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(71), 0.0, -1, 10.0, true);
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, (27.0 + 8.0), 27.0, UnitGetPosition(gv_zeratul), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup_Init () {
    gt_MidCleanup = TriggerCreate("gt_MidCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Q 2
//--------------------------------------------------------------------------------------------------
bool gt_MidQ2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libNCMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    TriggerExecute(gt_MidSetup2, true, true);
    TriggerExecute(gt_MidCinematic2, true, true);
    TriggerExecute(gt_MidCinematicEnd2, true, true);
    TriggerExecute(gt_MidCleanup2, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidQ2_Init () {
    gt_MidQ2 = TriggerCreate("gt_MidQ2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Setup 2
//--------------------------------------------------------------------------------------------------
bool gt_MidSetup2_Func (bool testConds, bool runActions) {
    int auto7BFD3582_ae;
    int auto7BFD3582_ai;

    // Variable Declarations
    int lv_technicianIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, 1.0, true);
    CameraSave(gv_pLAYER_01_USER);
    libNtve_gf_StoreUnitSelection(gv_pLAYER_01_USER, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    RegionPlayableMapSet(RegionEntireMap());
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal GuideHide");
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }

    }
    UnitGroupLoopEnd();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupLoopCurrent() == UnitFromId(108))) {
            UnitGroupRemove(gv_cinematicHiddenUnits, UnitGroupLoopCurrent());
            continue;
        }

        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitIssueOrder(gv_zeratul, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitSetPosition(gv_zeratul, PointWithOffset(PointFromId(794), -1.5, -1.5), false);
    libNtve_gf_ShowHideUnit(gv_zeratul, true);
    libNtve_gf_PauseUnit(gv_zeratul, false);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(794)), c_orderQueueReplace);
    gv_midCinematic02_Nova = gv_zeratul;
    UnitBehaviorAdd(gv_midCinematic02_Nova, "SuppressCloak", gv_midCinematic02_Nova, 1);
    libNtve_gf_CreateUnitsAtPoint2(1, "ScientistOfficer", c_unitCreateIgnorePlacement, gv_pLAYER_06_DEFENDERSOFMAN, PointFromId(780));
    gv_midCinematic02_StationOfficer = UnitLastCreated();
    UnitSetOwner(UnitLastCreated(), 0, false);
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 2.0);
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    auto7BFD3582_ae = 4;
    auto7BFD3582_ai = 1;
    lv_technicianIndex = 1;
    for ( ; ( (auto7BFD3582_ai >= 0 && lv_technicianIndex <= auto7BFD3582_ae) || (auto7BFD3582_ai <= 0 && lv_technicianIndex >= auto7BFD3582_ae) ) ; lv_technicianIndex += auto7BFD3582_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "DOMScientist", c_unitCreateIgnorePlacement, gv_pLAYER_06_DEFENDERSOFMAN, PointFromName(("Mid 2 - Technician " + IntToString(lv_technicianIndex))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 2.2);
        UnitBehaviorAdd(UnitLastCreated(), "Run", UnitLastCreated(), 1);
        UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
        UnitGroupAdd(gv_midCinematic02_FleeingTechnicians, UnitLastCreated());
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tarsonis_DoorNE", c_unitCreateIgnorePlacement, 0, UnitGetPosition(UnitFromId(739)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    gv_midCinematic02_SecurityDoor[0] = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tarsonis_DoorNW", c_unitCreateIgnorePlacement, 0, UnitGetPosition(UnitFromId(779)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    UnitGroupAdd(gv_midCinematic02_NorthReinforcements, UnitFromId(3275));
    UnitGroupAdd(gv_midCinematic02_NorthReinforcements, UnitFromId(3272));
    UnitGroupAdd(gv_midCinematic02_NorthReinforcements, UnitFromId(3271));
    UnitGroupAdd(gv_midCinematic02_NorthReinforcements, UnitFromId(3274));
    UnitGroupAdd(gv_midCinematic02_NorthReinforcements, UnitFromId(3273));
    UnitGroupAdd(gv_midCinematic02_NorthReinforcements, UnitFromId(3270));
    UnitGroupAdd(gv_midCinematic02_NorthReinforcements, UnitFromId(3291));
    UnitGroupLoopBegin(gv_midCinematic02_NorthReinforcements);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_cinematicTempUnits, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitSetOwner(UnitGroupLoopCurrent(), gv_pLAYER_06_DEFENDERSOFMAN, true);
    }
    UnitGroupLoopEnd();
    UnitGroupAdd(gv_midCinematic02_EastReinforcements, UnitFromId(3285));
    UnitGroupAdd(gv_midCinematic02_EastReinforcements, UnitFromId(3284));
    UnitGroupAdd(gv_midCinematic02_EastReinforcements, UnitFromId(2595));
    UnitGroupLoopBegin(gv_midCinematic02_EastReinforcements);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_cinematicTempUnits, UnitGroupLoopCurrent());
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitSetOwner(UnitGroupLoopCurrent(), gv_pLAYER_06_DEFENDERSOFMAN, true);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, UnitGetPropertyFixed(UnitFromId(2595), c_unitPropMovementSpeed, c_unitPropNormal));
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RotatingTurretPassiveSCCW", c_unitCreateIgnorePlacement, gv_pLAYER_06_DEFENDERSOFMAN, UnitGetPosition(UnitFromId(664)));
    UnitGroupAdd(gv_cinematicTempUnits, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidSetup2_Init () {
    gt_MidSetup2 = TriggerCreate("gt_MidSetup2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic 2
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematic2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2597), 0.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova03_ListenIn", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    UnitIssueOrder(gv_midCinematic02_Nova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(794)), c_orderQueueReplace);
    UnitIssueOrder(gv_midCinematic02_Nova, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(794), 1.0, PointGetFacing(PointFromId(794)))), c_orderQueueAddToEnd);
    libNCMI_gf_SendTransmissionCampaign(gv_midCinematic02_Nova, "Mission_Nova03|Line00040", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    SoundPlayForPlayer(SoundLink("Event_Nova03_ComputerButtonPress2", -1), c_maxPlayers, PlayerGroupAll(), 25.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Nova03_CameraZoomWhoosh", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3257), 1.5, -1, 10, true);
    Wait(0.25, c_timeGame);
    SoundPlayForPlayer(SoundLink("Event_Nova03_DOM_Alarm", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(0.5, c_timeGame);
    CameraShake(gv_pLAYER_01_USER, "Light", "SubtleMove", 0.0, 0.0, 120.0);
    CinematicFade(false, 0.75, c_fadeStyleNormal, ColorWithAlpha(99.61, 85.88, 31.37, 0.00), 0.0, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3261), 0.0, -1, 10, true);
    gv_midCinematic02_AlarmSound = SoundLastPlayed();
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3262), 1.5, -1, 10, true);
    CinematicFade(true, 0.75, c_fadeStyleNormal, ColorWithAlpha(99.61, 85.88, 31.37, 0.00), 0.0, true);
    Wait(0.75, c_timeGame);
    libNCMI_gf_SendTransmissionCampaign(gv_midCinematic02_StationOfficer, "Mission_Nova03|Line00089", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_MidTrooperResponse2, true, false);
    Wait(1.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("Event_Nova03_DOMGroupMovementIn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_MidScientistResponse2, true, false);
    TransmissionWait(TransmissionLastSent(), 0.0);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(3279), 0.0, -1, 10, true);
    libNCMI_gf_SendTransmissionCampaign(gv_midCinematic02_StationOfficer, "Mission_Nova03|Line00090", c_transmissionDurationAdd, 0.0, true, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    CameraShakeStop(gv_pLAYER_01_USER);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(2597), 5.0, -1, 10, true);
    SoundPlayForPlayer(SoundLink("Event_Nova03_ComputerButtonPress", -1), c_maxPlayers, PlayerGroupAll(), 25.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Nova03_DOMGroupMovementOut", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UnitSetPropertyFixed(gv_midCinematic02_StationOfficer, c_unitPropMovementSpeed, 2.5);
    UnitBehaviorAdd(gv_midCinematic02_StationOfficer, "Run", gv_midCinematic02_StationOfficer, 1);
    UnitIssueOrder(gv_midCinematic02_StationOfficer, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(807)), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    UnitGroupLoopBegin(gv_midCinematic02_EastReinforcements);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("move", 0), gv_midCinematic02_StationOfficer), c_orderQueueReplace);
        Wait(0.1, c_timeGame);
    }
    UnitGroupLoopEnd();
    Wait(1.1, c_timeGame);
    Wait(2.0, c_timeGame);
    SoundStop(gv_midCinematic02_AlarmSound, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Cue02", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libNCMI_gf_SendTransmissionCampaign(gv_midCinematic02_Nova, "Mission_Nova03|Line00091", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    TransmissionWait(TransmissionLastSent(), 3.0);
    UnitIssueOrder(gv_midCinematic02_Nova, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(800)), c_orderQueueReplace);
    UnitIssueOrder(gv_midCinematic02_Nova, OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(800), 1.0, PointGetFacing(PointFromId(800)))), c_orderQueueAddToEnd);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(798), 2.0, -1, 10, true);
    TransmissionWait(TransmissionLastSent(), 0.0);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematic2_Init () {
    gt_MidCinematic2 = TriggerCreate("gt_MidCinematic2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cinematic End 2
//--------------------------------------------------------------------------------------------------
bool gt_MidCinematicEnd2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
        CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCinematicEnd2_Init () {
    gt_MidCinematicEnd2 = TriggerCreate("gt_MidCinematicEnd2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Cleanup 2
//--------------------------------------------------------------------------------------------------
bool gt_MidCleanup2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StopCinematicSounds();
    UnitGroupLoopBegin(gv_cinematicTempUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_cinematicPausedUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    GameTimeOfDayPause(false);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, true);
    UnitGroupSelect(UnitGroupSelected(gv_pLAYER_01_USER), gv_pLAYER_01_USER, true);
    UnitSelect(gv_zeratul, gv_pLAYER_01_USER, true);
    CameraShakeStop(gv_pLAYER_01_USER);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(798), 0.0, -1, 10.0, true);
    CameraSetData(PlayerGroupSingle(gv_pLAYER_01_USER), "Dflt2");
    RegionPlayableMapSet(RegionFromId(8));
    libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal GuideShow");
    libLbty_gf_AutoRevealRegion(RegionFromId(32), RegionFromId(32), gv_pLAYER_01_USER);
    ObjectiveShow(gv_objectiveDestroyZergBase3, PlayerGroupAll(), false);
    ObjectiveShow(gv_objectiveRescueStalkers, PlayerGroupAll(), false);
    gv_currentStage = 3;
    SoundStop(gv_midCinematic02_AlarmSound, false);
    libNtve_gf_PauseUnit(gv_zeratul, false);
    UnitSetPropertyFixed(gv_zeratul, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_zeratul, c_unitPropEnergyPercent, 100.0);
    UnitSetPropertyFixed(gv_zeratul, c_unitPropShieldsPercent, 100.0);
    UnitBehaviorRemove(gv_zeratul, "SuppressCloak", 1);
    if ((gv_cinematicCompleted == false)) {
        UnitIssueOrder(gv_zeratul, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitSetPosition(gv_zeratul, PointFromId(800), false);
        UnitSetFacing(gv_zeratul, PointGetFacing(PointFromId(800)), 0.0);
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Cue02", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    }

    UnitSetPosition(gv_midCinematic02_StationOfficer, PointFromId(807), false);
    UnitSetOwner(gv_midCinematic02_StationOfficer, gv_pLAYER_06_DEFENDERSOFMAN, true);
    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 1.5;
    }
    else {
        lv_fadeDuration = 1.0;
    }
    libNCMI_gf_CinematicModeCampaign(false, lv_fadeDuration, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    if ((gv_cinematicCompleted == true)) {
        CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(798), lv_fadeDuration, -1, 10.0, true);
    }
    else {
        libNtve_gf_SwooshCamera(gv_pLAYER_01_USER, (27.0 + 8.0), 27.0, UnitGetPosition(gv_zeratul), lv_fadeDuration);
        CinematicFade(true, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidCleanup2_Init () {
    gt_MidCleanup2 = TriggerCreate("gt_MidCleanup2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Trooper Response 2
//--------------------------------------------------------------------------------------------------
bool gt_MidTrooperResponse2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_trooperMoveIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_midCinematic02_SecurityDoor[0], Order(AbilityCommand("Tarsonis_DoorNELowered", 0)), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(UnitFromId(3271), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3289)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(3271), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(3289), 1.0, PointGetFacing(PointFromId(3289)))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(3275), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3288)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(3275), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(3288), 1.0, PointGetFacing(PointFromId(3288)))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(3272), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3290)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(3272), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(3290), 1.0, PointGetFacing(PointFromId(3290)))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(3274), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3276)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(3274), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(3276), 1.0, PointGetFacing(PointFromId(3276)))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(3273), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3277)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(3273), OrderTargetingPoint(AbilityCommand("move", 4), PointWithOffsetPolar(PointFromId(3277), 1.0, PointGetFacing(PointFromId(3277)))), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(3285), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2391)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(3285), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(780)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(3284), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2878)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(3284), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(780)), c_orderQueueAddToEnd);
    UnitIssueOrder(UnitFromId(2595), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2979)), c_orderQueueReplace);
    UnitIssueOrder(UnitFromId(2595), OrderTargetingPoint(AbilityCommand("move", 4), PointFromId(780)), c_orderQueueAddToEnd);
    UnitGroupIssueOrder(gv_midCinematic02_FleeingTechnicians, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(807)), c_orderQueueReplace);
    UnitGroupIssueOrder(gv_midCinematic02_FleeingTechnicians, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1674)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidTrooperResponse2_Init () {
    gt_MidTrooperResponse2 = TriggerCreate("gt_MidTrooperResponse2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mid Scientist Response 2
//--------------------------------------------------------------------------------------------------
bool gt_MidScientistResponse2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(gv_midCinematic02_FleeingTechnicians);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(807)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1674)), c_orderQueueAddToEnd);
        Wait(0.1, c_timeGame);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MidScientistResponse2_Init () {
    gt_MidScientistResponse2 = TriggerCreate("gt_MidScientistResponse2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Q
//--------------------------------------------------------------------------------------------------
bool gt_VictoryQ_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNCMI_gf_GameOver(libNCMI_ge_CampaignMissionGameResultType_Victory);
    TriggerQueueEnter();
    TriggerExecute(gt_VictorySetup, true, true);
    TriggerExecute(gt_VictoryCinematic, true, true);
    TriggerExecute(gt_VictoryCinematicEnd, true, true);
    TriggerExecute(gt_VictoryCleanup, true, true);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryQ_Init () {
    gt_VictoryQ = TriggerCreate("gt_VictoryQ_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Setup
//--------------------------------------------------------------------------------------------------
bool gt_VictorySetup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, false);
    libNCMI_gf_CinematicModeCampaign(true, 1.0, true);
    UnitClearSelection(gv_pLAYER_01_USER);
    PlayerSetState(gv_pLAYER_01_USER, c_playerStateXPGain, false);
    GameTimeOfDayPause(true);
    UnitGroupLoopBegin(UnitGroup(null, gv_pLAYER_06_DEFENDERSOFMAN, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitIsPaused(UnitGroupLoopCurrent()) == false)) {
            UnitGroupAdd(gv_cinematicPausedUnits, UnitGroupLoopCurrent());
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }

    }
    UnitGroupLoopEnd();
    gv_cinematicHiddenUnits = UnitGroupEmpty();
    gv_cinematicTempUnits = UnitGroupEmpty();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_cinematicHiddenUnits);
    UnitGroupLoopBegin(gv_cinematicHiddenUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    libNtve_gf_ShowHideUnit(UnitFromId(808), true);
    libNtve_gf_PauseUnit(UnitFromId(808), false);
    UnitIssueOrder(gv_zeratul, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_ShowHideUnit(gv_zeratul, true);
    libNtve_gf_PauseUnit(gv_zeratul, false);
    UnitSetPosition(gv_zeratul, PointFromId(1153), false);
    libNtve_gf_ChangeUnitDamage(gv_zeratul, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega);
    CreepModify(PointFromId(4710), 4.5, true, true);
    CreepModify(PointFromId(1723), 7.2, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictorySetup_Init () {
    gt_VictorySetup = TriggerCreate("gt_VictorySetup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematic_Func (bool testConds, bool runActions) {
    fixed auto421D4684_at;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(74), 0.0, -1, 10, true);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(879), 4.0, -1, 10, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova03_Escape", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TriggerSkippableBegin(PlayerGroupAll(), 0, null, true, false);
    gv_cinematicCompleted = false;
    CameraShake(gv_pLAYER_01_USER, "Light", "Tremor", 0.0, 2.0, 4.0);
    libNCMI_gf_PlaySoundCinematic(SoundLink("Event_Nova03_EarthquakeRumble", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(4672)), c_orderQueueReplace);
    CinematicFade(true, 1.0, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 20.0, 2.0);
    libNCMI_gf_SendTransmissionCampaign(null, "Mission_Nova03|Line00059", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    auto421D4684_at = 0;
    while (!((UnitOrderCount(gv_zeratul) == 0)) && auto421D4684_at <= 2.0) {
        Wait(0.25, c_timeGame);
        auto421D4684_at = auto421D4684_at + 0.25;
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_zeratul), c_animNameDefault, "Stand Dialogue Start", 0, c_animTimeDefault);
    Wait(0.75, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_zeratul), c_animNameDefault, "Stand Dialogue", c_animFlagPlayForever, c_animTimeDefault);
    Wait(1.25, c_timeGame);
    CameraApplyInfo(gv_pLAYER_01_USER, CameraInfoFromId(4742), (SoundLengthSync(SoundLink(ConversationDataGetSound("Mission_Nova03|Line00060", true), c_soundIndexAny)) + 3.0), -1, 10, true);
    UnitIssueOrder(UnitFromId(808), Order(AbilityCommand("DOMLabDoorThinNE", 0)), c_orderQueueReplace);
    TransmissionWait(TransmissionLastSent(), 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 100.0, 1.0);
    libNCMI_gf_SendTransmissionCampaign(gv_zeratul, "Mission_Nova03|Line00060", c_transmissionDurationAdd, 0.0, false, libNCMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter, libNCMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_zeratul), c_animNameDefault, "Stand Dialogue Custom", c_animFlagPlayForever, c_animTimeDefault);
    TransmissionWait(TransmissionLastSent(), 0.0);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_zeratul), c_animNameDefault, "Stand Dialogue End", 0, c_animTimeDefault);
    CameraFollowUnitGroup(gv_pLAYER_01_USER, libNtve_gf_ConvertUnitToUnitGroup(gv_zeratul), true, false);
    Wait(0.5, c_timeGame);
    UnitIssueOrder(gv_zeratul, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1190)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    gv_cinematicCompleted = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematic_Init () {
    gt_VictoryCinematic = TriggerCreate("gt_VictoryCinematic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cinematic End
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCinematicEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_fadeDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cinematicCompleted == true)) {
        lv_fadeDuration = 2.0;
    }
    else {
        lv_fadeDuration = 0.5;
    }
    CinematicFade(false, lv_fadeDuration, c_fadeStyleNormal, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCinematicEnd_Init () {
    gt_VictoryCinematicEnd = TriggerCreate("gt_VictoryCinematicEnd_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cleanup
//--------------------------------------------------------------------------------------------------
bool gt_VictoryCleanup_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNCMI_gf_StopCinematicSounds();
    libNCMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, false);
    TriggerExecute(gt_Victory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryCleanup_Init () {
    gt_VictoryCleanup = TriggerCreate("gt_VictoryCleanup_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_Init01Technology_Init();
    gt_Init02Players_Init();
    gt_Init03Units_Init();
    gt_Init03bDefenderStealthAIUnits_Init();
    gt_Init04MusicSound_Init();
    gt_Init05Environment_Init();
    gt_Init06Difficulties_Init();
    gt_Init07Help_Init();
    gt_DebugIntro_Init();
    gt_DebugStage2FindIntel_Init();
    gt_DebugStage3CatchStationOfficer_Init();
    gt_NovaPicksUpRestorationCharge2_Init();
    gt_NovaKillsDOMUnitInDefendRegion_Init();
    gt_NovaFlashbangsUnitInDefendRegion_Init();
    gt_NovaLosesDetectorConeDetectedEMPedQ_Init();
    gt_NovaLosesDetectorConeDetectedStillCloakedQ_Init();
    gt_NovaReCloaksTransmissionQ_Init();
    gt_StartGame01QGarrisonSpots_Init();
    gt_StartGame02QReachCommsHub_Init();
    gt_StartGame03QReachCommandRoom_Init();
    gt_S1CleanUpSection01_Init();
    gt_S2CleanUpSection02_Init();
    gt_S1GarrisonSpotsInit_Init();
    gt_S1GarrisonInfestationDies_Init();
    gt_S1FirstInfestationSightedQ_Init();
    gt_S1FirstInfestationDiesQ_Init();
    gt_S1UnitEntersGarrison_Init();
    gt_S1GarrisonFilledQ_Init();
    gt_S1GarrisonsAllFilledUp_Init();
    gt_S1TacNukeStrikeOnlineQ_Init();
    gt_S1TurnOffTacNukeStrikeHighlight_Init();
    gt_S1PlayerEntersBuildingCollapseReveal_Init();
    gt_S1UltraliskPatrol_Init();
    gt_S1RavagerShots_Init();
    gt_S1PlayerEntersNydusWormTrigger_Init();
    gt_S1PlayerNearsEnemyBaseLeftQ_Init();
    gt_S1PlayerNearsEnemyBaseMiddleQ_Init();
    gt_S1PlayerNearsEnemyBaseRightQ_Init();
    gt_S1PlayerKillsEnemiesInEnemyBaseAreasQ_Init();
    gt_S1UnitEntersBonusObjectiveCreate_Init();
    gt_S1BonusObjectiveRevealQ_Init();
    gt_S1BonusObjectiveHerculesCrash_Init();
    gt_S1UnitEntersBonusObjectiveRevealQ_Init();
    gt_S2FirstUnitsFleeStealthedNova_Init();
    gt_S2FirstUnitsGetToHallwayUnits_Init();
    gt_S2FirstUnitsFleeStealthedNovaTransmissionQ_Init();
    gt_S2NovaPassesHallwayUnitsUndetectedQ_Init();
    gt_S2HallwayUnitsConfrontStealthedNova_Init();
    gt_S2HallwayUnitsConfrontStealthedNovaTransmissionQ_Init();
    gt_S2NovaEntersInitialEncounter_Init();
    gt_S2NovaEntersInitialEncounterTransmissionQ_Init();
    gt_S2NovaUsesDashAttack_Init();
    gt_S2NovaKillsUnitInTutorialRoom_Init();
    gt_S2NovaSkipsSwordTutorialTransmissionQ_Init();
    gt_S2TurnOffSwordTutorial_Init();
    gt_S2MarauderEntersSwordTutorialRoomTransmissionQ_Init();
    gt_S2NovaKillsAnotherinSwordTutorialRoomTransmissionQ_Init();
    gt_S2NovaKillsHaikuTargetQ_Init();
    gt_S2NovaEntersGhostGuardRoom01_Init();
    gt_S2TargetPracticeTrooper01_Init();
    gt_S2TargetPracticeTrooper02_Init();
    gt_S2BonusObjectiveDetectorsDeadQ_Init();
    gt_S2NovaEntersGhostRoom02_Init();
    gt_S2GhostRoom02DetectorDead_Init();
    gt_S2NovaEntersGhostRoom03_Init();
    gt_S2NovaAdjacentToCommsHubRoomQ_Init();
    gt_S2NovaEntersBeaconIntelQ_Init();
    gt_S3NovaEntersCommsRoom_Init();
    gt_S3NovaEntersAtriumFirstTime_Init();
    gt_S3NovaEntersAtriumFirstTimeTransmissionQ_Init();
    gt_S3PsiEmitters_Init();
    gt_S3PsiEmittersTransmissionQ_Init();
    gt_S3PsiEmittersLoadTransport_Init();
    gt_S3BuildingCollapse_Init();
    gt_S3BuildingCollapseTransmissionQ_Init();
    gt_S3BuildingCollapseInitialGroup_Init();
    gt_S3BuildingCollapseMedicsFallBack_Init();
    gt_S3BuildingCollapseGhostInCombat_Init();
    gt_S3UnitsRunToOutsideShuttlesQ_Init();
    gt_S3NovaEntersOutsideShuttlesRevealer_Init();
    gt_S3OutsideShuttlesTransmissionQ_Init();
    gt_S3NydusInTheAtrium_Init();
    gt_S3NydusInTheAtriumTransmissionQ_Init();
    gt_S3NydusInTheAtriumShuttles_Init();
    gt_S3NydusInTheAtriumGhostInCombat_Init();
    gt_S3NovaEntersZergRunDownHallway_Init();
    gt_S3ZergedUpRoom_Init();
    gt_S3ZergedUpRoomTransmissionQ_Init();
    gt_S3NovaEntersFinalRoomQ_Init();
    gt_S3FinalRoomZergTrickle_Init();
    gt_S3FinalRoomGhostsAndTroopersInCombat_Init();
    gt_S3FinalRoomThorTransmissionQ_Init();
    gt_DefeatBaseDead_Init();
    gt_DefeatNovaDead_Init();
    gt_DefeatCatchStationOfficerFailed_Init();
    gt_VictoryCatchStationOfficerCompleted_Init();
    gt_VictorySequence_Init();
    gt_Victory_Init();
    gt_Defeat_Init();
    gt_VictoryCheat_Init();
    gt_DefeatCheat_Init();
    gt_VictoryStatDOMKills_Init();
    gt_VictoryStatSupplyTracker_Init();
    gt_AchievementBunkerRush_Init();
    gt_TipReadyQ_Init();
    gt_StartAI_Init();
    gt_AIUpgradesCasualNormal_Init();
    gt_AIUpgradesHardBrutal_Init();
    gt_S1KillEggsAndLarvae_Init();
    gt_S1SetUpWaveSpawnRegionBullies_Init();
    gt_S1TurnOnLaneBullyBuilding01_Init();
    gt_S1TurnOnLaneBullyBuilding02_Init();
    gt_S1ApplyPlayerUpgradesToGarrisonPlayer_Init();
    gt_S1AttackWaveOverseerReturnsHome_Init();
    gt_S1FirstZergAttackMiddleQ_Init();
    gt_S1FirstZergAttackRightQ_Init();
    gt_S1FirstZergAttackLeftQ_Init();
    gt_S1FirstZergAttackFlyersQ_Init();
    gt_S1ZergFirehoseGarrisonP03_Init();
    gt_S1ZergFirehoseGarrisonP04_Init();
    gt_S1ZergFirehoseGarrisonP05_Init();
    gt_ObjectiveFillGarrisonsCreate_Init();
    gt_ObjectiveFillGarrisonsComplete_Init();
    gt_ObjectiveFillGarrisonsUpdate_Init();
    gt_ObjectiveFillGarrisonsFailed_Init();
    gt_ObjectiveRecoverDownedForcesCreate_Init();
    gt_ObjectiveRecoverDownedForcesComplete_Init();
    gt_ObjectiveRecoverDownedForcesFailed_Init();
    gt_ObjectiveReachCommunicationsHubCreate_Init();
    gt_ObjectiveReachCommunicationsHubComplete_Init();
    gt_ObjectiveReachCommunicationsHubFailed_Init();
    gt_ObjectiveNovaMustSurviveCreate_Init();
    gt_ObjectiveNovaMustSurviveComplete_Init();
    gt_ObjectiveNovaMustSurviveFailed_Init();
    gt_ObjectiveReachCommandRoomCreate_Init();
    gt_ObjectiveReachCommandRoomComplete_Init();
    gt_ObjectiveReachCommandRoomFailed_Init();
    gt_BriefingQ_Init();
    gt_BriefingScene00TarsonisInfested_Init();
    gt_BreifingScene00TarsosnisCamera_Init();
    gt_BriefingScene01DOMBase_Init();
    gt_BriefingScene02ShowGarrisons_Init();
    gt_BriefingScene03ShowSiegeTanks_Init();
    gt_BriefingZergAttack_Init();
    gt_BriefingScene04ShowHellbats_Init();
    gt_BriefingHellbatAttack_Init();
    gt_IntroQ_Init();
    gt_IntroSetup_Init();
    gt_IntroCinematic_Init();
    gt_IntroCinematicEnd_Init();
    gt_IntroCleanup_Init();
    gt_IntroSpawnTank_Init();
    gt_IntroSpawnBarracksUnits_Init();
    gt_MidQ_Init();
    gt_MidSetup_Init();
    gt_MidCinematic_Init();
    gt_MidCinematicEnd_Init();
    gt_MidCleanup_Init();
    gt_MidQ2_Init();
    gt_MidSetup2_Init();
    gt_MidCinematic2_Init();
    gt_MidCinematicEnd2_Init();
    gt_MidCleanup2_Init();
    gt_MidTrooperResponse2_Init();
    gt_MidScientistResponse2_Init();
    gt_VictoryQ_Init();
    gt_VictorySetup_Init();
    gt_VictoryCinematic_Init();
    gt_VictoryCinematicEnd_Init();
    gt_VictoryCleanup_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomAI();
    InitTriggers();
}
